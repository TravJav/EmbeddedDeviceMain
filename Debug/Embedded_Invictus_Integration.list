
Embedded_Invictus_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020c68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a20  08020e38  08020e38  00030e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000046  08023858  08023858  00033858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000d6ef8  080238a0  080238a0  000338a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000008  080fa798  080fa798  0010a798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080fa7a0  080fa7a0  001100b4  2**0
                  CONTENTS
  7 .ARM          00000008  080fa7a0  080fa7a0  0010a7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080fa7a8  080fa7a8  001100b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000010  080fa7a8  080fa7a8  0010a7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080fa7b8  080fa7b8  0010a7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000b4  20000000  080fa7c0  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000a8a4  200000b4  080fa874  001100b4  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000a958  080fa874  0011a958  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  001100b4  2**0
                  CONTENTS, READONLY
 15 .debug_info   00099b31  00000000  00000000  001100e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00016df0  00000000  00000000  001a9c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00006710  00000000  00000000  001c0a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005e70  00000000  00000000  001c7118  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0004211c  00000000  00000000  001ccf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0005c880  00000000  00000000  0020f0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013ffa3  00000000  00000000  0026b924  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  003ab8c7  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001bdd8  00000000  00000000  003ab9c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08020e20 	.word	0x08020e20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	08020e20 	.word	0x08020e20

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 fb8c 	bl	8000cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f018 f890 	bl	80186e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f017 fa4a 	bl	8017a58 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20009e08 	.word	0x20009e08

080005f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20009e08 	.word	0x20009e08

0800060c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000614:	f7ff ffee 	bl	80005f4 <HAL_GetTick>
 8000618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000624:	d005      	beq.n	8000632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_Delay+0x40>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4413      	add	r3, r2
 8000630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000632:	bf00      	nop
 8000634:	f7ff ffde 	bl	80005f4 <HAL_GetTick>
 8000638:	4602      	mov	r2, r0
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	429a      	cmp	r2, r3
 8000642:	d8f7      	bhi.n	8000634 <HAL_Delay+0x28>
  {
  }
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000000 	.word	0x20000000

08000650 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d101      	bne.n	8000666 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e031      	b.n	80006ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	2b00      	cmp	r3, #0
 800066c:	d109      	bne.n	8000682 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f017 fa1a 	bl	8017aa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	2b00      	cmp	r3, #0
 800068c:	d116      	bne.n	80006bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <HAL_ADC_Init+0x84>)
 8000694:	4013      	ands	r3, r2
 8000696:	f043 0202 	orr.w	r2, r3, #2
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f94e 	bl	8000940 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	f023 0303 	bic.w	r3, r3, #3
 80006b2:	f043 0201 	orr.w	r2, r3, #1
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	641a      	str	r2, [r3, #64]	; 0x40
 80006ba:	e001      	b.n	80006c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	ffffeefd 	.word	0xffffeefd

080006d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d101      	bne.n	80006f4 <HAL_ADC_ConfigChannel+0x1c>
 80006f0:	2302      	movs	r3, #2
 80006f2:	e115      	b.n	8000920 <HAL_ADC_ConfigChannel+0x248>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2201      	movs	r2, #1
 80006f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b09      	cmp	r3, #9
 8000702:	d935      	bls.n	8000770 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	68d9      	ldr	r1, [r3, #12]
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	b29b      	uxth	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	4613      	mov	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	3b1e      	subs	r3, #30
 800071a:	2207      	movs	r2, #7
 800071c:	fa02 f303 	lsl.w	r3, r2, r3
 8000720:	43da      	mvns	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	400a      	ands	r2, r1
 8000728:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a7f      	ldr	r2, [pc, #508]	; (800092c <HAL_ADC_ConfigChannel+0x254>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d10a      	bne.n	800074a <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68d9      	ldr	r1, [r3, #12]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	061a      	lsls	r2, r3, #24
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	430a      	orrs	r2, r1
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	e035      	b.n	80007b6 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	68d9      	ldr	r1, [r3, #12]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	689a      	ldr	r2, [r3, #8]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	b29b      	uxth	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	4603      	mov	r3, r0
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4403      	add	r3, r0
 8000762:	3b1e      	subs	r3, #30
 8000764:	409a      	lsls	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	430a      	orrs	r2, r1
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	e022      	b.n	80007b6 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6919      	ldr	r1, [r3, #16]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	b29b      	uxth	r3, r3
 800077c:	461a      	mov	r2, r3
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	2207      	movs	r2, #7
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	400a      	ands	r2, r1
 8000792:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	6919      	ldr	r1, [r3, #16]
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	4603      	mov	r3, r0
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4403      	add	r3, r0
 80007ac:	409a      	lsls	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	430a      	orrs	r2, r1
 80007b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d824      	bhi.n	8000808 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	685a      	ldr	r2, [r3, #4]
 80007c8:	4613      	mov	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	3b05      	subs	r3, #5
 80007d0:	221f      	movs	r2, #31
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43da      	mvns	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	400a      	ands	r2, r1
 80007de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685a      	ldr	r2, [r3, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	3b05      	subs	r3, #5
 80007fa:	fa00 f203 	lsl.w	r2, r0, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	430a      	orrs	r2, r1
 8000804:	635a      	str	r2, [r3, #52]	; 0x34
 8000806:	e04c      	b.n	80008a2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	2b0c      	cmp	r3, #12
 800080e:	d824      	bhi.n	800085a <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	3b23      	subs	r3, #35	; 0x23
 8000822:	221f      	movs	r2, #31
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	43da      	mvns	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	400a      	ands	r2, r1
 8000830:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	b29b      	uxth	r3, r3
 800083e:	4618      	mov	r0, r3
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	3b23      	subs	r3, #35	; 0x23
 800084c:	fa00 f203 	lsl.w	r2, r0, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	430a      	orrs	r2, r1
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
 8000858:	e023      	b.n	80008a2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	3b41      	subs	r3, #65	; 0x41
 800086c:	221f      	movs	r2, #31
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43da      	mvns	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	400a      	ands	r2, r1
 800087a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	b29b      	uxth	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	4613      	mov	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	3b41      	subs	r3, #65	; 0x41
 8000896:	fa00 f203 	lsl.w	r2, r0, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	430a      	orrs	r2, r1
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a22      	ldr	r2, [pc, #136]	; (8000930 <HAL_ADC_ConfigChannel+0x258>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d109      	bne.n	80008c0 <HAL_ADC_ConfigChannel+0x1e8>
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b12      	cmp	r3, #18
 80008b2:	d105      	bne.n	80008c0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <HAL_ADC_ConfigChannel+0x25c>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4a1e      	ldr	r2, [pc, #120]	; (8000934 <HAL_ADC_ConfigChannel+0x25c>)
 80008ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008be:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1a      	ldr	r2, [pc, #104]	; (8000930 <HAL_ADC_ConfigChannel+0x258>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d125      	bne.n	8000916 <HAL_ADC_ConfigChannel+0x23e>
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <HAL_ADC_ConfigChannel+0x254>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d003      	beq.n	80008dc <HAL_ADC_ConfigChannel+0x204>
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b11      	cmp	r3, #17
 80008da:	d11c      	bne.n	8000916 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_ADC_ConfigChannel+0x25c>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <HAL_ADC_ConfigChannel+0x25c>)
 80008e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008e6:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0f      	ldr	r2, [pc, #60]	; (800092c <HAL_ADC_ConfigChannel+0x254>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d111      	bne.n	8000916 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_ADC_ConfigChannel+0x260>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a11      	ldr	r2, [pc, #68]	; (800093c <HAL_ADC_ConfigChannel+0x264>)
 80008f8:	fba2 2303 	umull	r2, r3, r2, r3
 80008fc:	0c9a      	lsrs	r2, r3, #18
 80008fe:	4613      	mov	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000908:	e002      	b.n	8000910 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	3b01      	subs	r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1f9      	bne.n	800090a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	10000012 	.word	0x10000012
 8000930:	40012000 	.word	0x40012000
 8000934:	40012300 	.word	0x40012300
 8000938:	2000003c 	.word	0x2000003c
 800093c:	431bde83 	.word	0x431bde83

08000940 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000948:	4b78      	ldr	r3, [pc, #480]	; (8000b2c <ADC_Init+0x1ec>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	4a77      	ldr	r2, [pc, #476]	; (8000b2c <ADC_Init+0x1ec>)
 800094e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000952:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000954:	4b75      	ldr	r3, [pc, #468]	; (8000b2c <ADC_Init+0x1ec>)
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	4973      	ldr	r1, [pc, #460]	; (8000b2c <ADC_Init+0x1ec>)
 800095e:	4313      	orrs	r3, r2
 8000960:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	6859      	ldr	r1, [r3, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	021a      	lsls	r2, r3, #8
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	430a      	orrs	r2, r1
 8000984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6859      	ldr	r1, [r3, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	430a      	orrs	r2, r1
 80009a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6899      	ldr	r1, [r3, #8]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	430a      	orrs	r2, r1
 80009c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ce:	4a58      	ldr	r2, [pc, #352]	; (8000b30 <ADC_Init+0x1f0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d022      	beq.n	8000a1a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6899      	ldr	r1, [r3, #8]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6899      	ldr	r1, [r3, #8]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	e00f      	b.n	8000a3a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	689a      	ldr	r2, [r3, #8]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f022 0202 	bic.w	r2, r2, #2
 8000a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6899      	ldr	r1, [r3, #8]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	005a      	lsls	r2, r3, #1
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d01b      	beq.n	8000aa0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6859      	ldr	r1, [r3, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a92:	3b01      	subs	r3, #1
 8000a94:	035a      	lsls	r2, r3, #13
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	e007      	b.n	8000ab0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000aae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	051a      	lsls	r2, r3, #20
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6899      	ldr	r1, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000af2:	025a      	lsls	r2, r3, #9
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6899      	ldr	r1, [r3, #8]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	029a      	lsls	r2, r3, #10
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	609a      	str	r2, [r3, #8]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40012300 	.word	0x40012300
 8000b30:	0f000001 	.word	0x0f000001

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <__NVIC_SetPriorityGrouping+0x40>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <__NVIC_SetPriorityGrouping+0x40>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	05fa0000 	.word	0x05fa0000

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4907      	ldr	r1, [pc, #28]	; (8000bd0 <__NVIC_EnableIRQ+0x38>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db10      	blt.n	8000c08 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 021f 	and.w	r2, r3, #31
 8000bec:	4909      	ldr	r1, [pc, #36]	; (8000c14 <__NVIC_DisableIRQ+0x40>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	3320      	adds	r3, #32
 8000bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c04:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ff2a 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfa:	f7ff ff3f 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f7ff ffb1 	bl	8000c6c <NVIC_EncodePriority>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff80 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff32 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff42 	bl	8000bd4 <__NVIC_DisableIRQ>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e054      	b.n	8000e14 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7f5b      	ldrb	r3, [r3, #29]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d105      	bne.n	8000d80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f016 feee 	bl	8017b5c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2202      	movs	r2, #2
 8000d84:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	791b      	ldrb	r3, [r3, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10c      	bne.n	8000da8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <HAL_CRC_Init+0xc4>)
 8000d94:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0218 	bic.w	r2, r2, #24
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	e00c      	b.n	8000dc2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6899      	ldr	r1, [r3, #8]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	461a      	mov	r2, r3
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f834 	bl	8000e20 <HAL_CRCEx_Polynomial_Set>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e028      	b.n	8000e14 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	795b      	ldrb	r3, [r3, #5]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d105      	bne.n	8000dd6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	e004      	b.n	8000de0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	6912      	ldr	r2, [r2, #16]
 8000dde:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695a      	ldr	r2, [r3, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	699a      	ldr	r2, [r3, #24]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	04c11db7 	.word	0x04c11db7

08000e20 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000e30:	231f      	movs	r3, #31
 8000e32:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000e34:	bf00      	nop
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1e5a      	subs	r2, r3, #1
 8000e3a:	613a      	str	r2, [r7, #16]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d009      	beq.n	8000e54 <HAL_CRCEx_Polynomial_Set+0x34>
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	f003 031f 	and.w	r3, r3, #31
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f0      	beq.n	8000e36 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b18      	cmp	r3, #24
 8000e58:	d846      	bhi.n	8000ee8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000e5a:	a201      	add	r2, pc, #4	; (adr r2, 8000e60 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e60:	08000eef 	.word	0x08000eef
 8000e64:	08000ee9 	.word	0x08000ee9
 8000e68:	08000ee9 	.word	0x08000ee9
 8000e6c:	08000ee9 	.word	0x08000ee9
 8000e70:	08000ee9 	.word	0x08000ee9
 8000e74:	08000ee9 	.word	0x08000ee9
 8000e78:	08000ee9 	.word	0x08000ee9
 8000e7c:	08000ee9 	.word	0x08000ee9
 8000e80:	08000edd 	.word	0x08000edd
 8000e84:	08000ee9 	.word	0x08000ee9
 8000e88:	08000ee9 	.word	0x08000ee9
 8000e8c:	08000ee9 	.word	0x08000ee9
 8000e90:	08000ee9 	.word	0x08000ee9
 8000e94:	08000ee9 	.word	0x08000ee9
 8000e98:	08000ee9 	.word	0x08000ee9
 8000e9c:	08000ee9 	.word	0x08000ee9
 8000ea0:	08000ed1 	.word	0x08000ed1
 8000ea4:	08000ee9 	.word	0x08000ee9
 8000ea8:	08000ee9 	.word	0x08000ee9
 8000eac:	08000ee9 	.word	0x08000ee9
 8000eb0:	08000ee9 	.word	0x08000ee9
 8000eb4:	08000ee9 	.word	0x08000ee9
 8000eb8:	08000ee9 	.word	0x08000ee9
 8000ebc:	08000ee9 	.word	0x08000ee9
 8000ec0:	08000ec5 	.word	0x08000ec5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d913      	bls.n	8000ef2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000ece:	e010      	b.n	8000ef2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	d90f      	bls.n	8000ef6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000eda:	e00c      	b.n	8000ef6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	d90b      	bls.n	8000efa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000ee6:	e008      	b.n	8000efa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	75fb      	strb	r3, [r7, #23]
      break;
 8000eec:	e006      	b.n	8000efc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000eee:	bf00      	nop
 8000ef0:	e004      	b.n	8000efc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000ef2:	bf00      	nop
 8000ef4:	e002      	b.n	8000efc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000ef6:	bf00      	nop
 8000ef8:	e000      	b.n	8000efc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000efa:	bf00      	nop
  }
  if (status == HAL_OK)
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10d      	bne.n	8000f1e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f023 0118 	bic.w	r1, r3, #24
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	371c      	adds	r7, #28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e062      	b.n	8001004 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f016 fe26 	bl	8017b9c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2202      	movs	r2, #2
 8000f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6819      	ldr	r1, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <HAL_DCMI_Init+0xe0>)
 8000f64:	400b      	ands	r3, r1
 8000f66:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6819      	ldr	r1, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000f7c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000f88:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000f94:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000fa0:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa6:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000fac:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b10      	cmp	r3, #16
 8000fbc:	d112      	bne.n	8000fe4 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7f1b      	ldrb	r3, [r3, #28]
 8000fc2:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7f5b      	ldrb	r3, [r3, #29]
 8000fc8:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000fca:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7f9b      	ldrb	r3, [r3, #30]
 8000fd0:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000fd2:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7fdb      	ldrb	r3, [r3, #31]
 8000fda:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000fe0:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000fe2:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 021e 	orr.w	r2, r2, #30
 8000ff2:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	ffe0f007 	.word	0xffe0f007

08001010 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HAL_DMA_Start_IT+0x26>
 8001032:	2302      	movs	r3, #2
 8001034:	e048      	b.n	80010c8 <HAL_DMA_Start_IT+0xb8>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d137      	bne.n	80010ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2202      	movs	r2, #2
 800104e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f842 	bl	80010e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001068:	223f      	movs	r2, #63	; 0x3f
 800106a:	409a      	lsls	r2, r3
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0216 	orr.w	r2, r2, #22
 800107e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800108e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	2b00      	cmp	r3, #0
 8001096:	d007      	beq.n	80010a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0208 	orr.w	r2, r2, #8
 80010a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e005      	b.n	80010c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010c2:	2302      	movs	r3, #2
 80010c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001104:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b40      	cmp	r3, #64	; 0x40
 8001114:	d108      	bne.n	8001128 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001126:	e007      	b.n	8001138 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	60da      	str	r2, [r3, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e039      	b.n	80011ca <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d106      	bne.n	8001170 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f013 ff6a 	bl	8015044 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2202      	movs	r2, #2
 8001174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001194:	f023 0107 	bic.w	r1, r3, #7
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_DMA2D_Init+0x90>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68d1      	ldr	r1, [r2, #12]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	ffffc000 	.word	0xffffc000

080011d8 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e05f      	b.n	80012aa <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80011ea:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <HAL_DMA2D_DeInit+0xdc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d02e      	beq.n	8001254 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b01      	cmp	r3, #1
 8001202:	d107      	bne.n	8001214 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f8c1 	bl	800138c <HAL_DMA2D_Abort>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d021      	beq.n	8001254 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e04a      	b.n	80012aa <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	f003 0320 	and.w	r3, r3, #32
 800121e:	2b20      	cmp	r3, #32
 8001220:	d108      	bne.n	8001234 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8001222:	2100      	movs	r1, #0
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f8f7 	bl	8001418 <HAL_DMA2D_CLUTLoading_Abort>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d011      	beq.n	8001254 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e03a      	b.n	80012aa <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	2b20      	cmp	r3, #32
 8001240:	d108      	bne.n	8001254 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8001242:	2101      	movs	r1, #1
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f8e7 	bl	8001418 <HAL_DMA2D_CLUTLoading_Abort>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e02a      	b.n	80012aa <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	223f      	movs	r2, #63	; 0x3f
 8001262:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2200      	movs	r2, #0
 800128a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f013 feff 	bl	8015090 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_DMA2D_Start_IT+0x1c>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e020      	b.n	8001316 <HAL_DMA2D_Start_IT+0x5e>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2202      	movs	r2, #2
 80012e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 fa84 	bl	80017fc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8001302:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0201 	orr.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af02      	add	r7, sp, #8
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_DMA2D_BlendingStart_IT+0x1c>
 8001336:	2302      	movs	r3, #2
 8001338:	e024      	b.n	8001384 <HAL_DMA2D_BlendingStart_IT+0x66>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2202      	movs	r2, #2
 8001346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	68b9      	ldr	r1, [r7, #8]
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 fa4d 	bl	80017fc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8001370:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0201 	orr.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 0205 	bic.w	r2, r3, #5
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0204 	orr.w	r2, r2, #4
 80013a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a8:	f7ff f924 	bl	80005f4 <HAL_GetTick>
 80013ac:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80013ae:	e017      	b.n	80013e0 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80013b0:	f7ff f920 	bl	80005f4 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013be:	d90f      	bls.n	80013e0 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c4:	f043 0220 	orr.w	r2, r3, #32
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2203      	movs	r2, #3
 80013d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e017      	b.n	8001410 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1e0      	bne.n	80013b0 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80013fc:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3324      	adds	r3, #36	; 0x24
 8001428:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 0204 	orr.w	r2, r2, #4
 8001438:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d103      	bne.n	8001448 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	331c      	adds	r3, #28
 8001446:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8001448:	f7ff f8d4 	bl	80005f4 <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800144e:	e017      	b.n	8001480 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8001450:	f7ff f8d0 	bl	80005f4 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800145e:	d90f      	bls.n	8001480 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001464:	f043 0220 	orr.w	r2, r3, #32
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2203      	movs	r2, #3
 8001470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e016      	b.n	80014ae <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e1      	bne.n	8001450 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800149a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d026      	beq.n	8001526 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d021      	beq.n	8001526 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014f0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f6:	f043 0201 	orr.w	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2201      	movs	r2, #1
 8001504:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2204      	movs	r2, #4
 800150a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f003 0320 	and.w	r3, r3, #32
 800152c:	2b00      	cmp	r3, #0
 800152e:	d026      	beq.n	800157e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d021      	beq.n	800157e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001548:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2220      	movs	r2, #32
 8001550:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001556:	f043 0202 	orr.w	r2, r3, #2
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2204      	movs	r2, #4
 8001562:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d026      	beq.n	80015d6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800158e:	2b00      	cmp	r3, #0
 8001590:	d021      	beq.n	80015d6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015a0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2208      	movs	r2, #8
 80015a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ae:	f043 0204 	orr.w	r2, r3, #4
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2204      	movs	r2, #4
 80015ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00e      	beq.n	8001608 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015f8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2204      	movs	r2, #4
 8001600:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f853 	bl	80016ae <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d024      	beq.n	800165c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01f      	beq.n	800165c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800162a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2202      	movs	r2, #2
 8001632:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	d01f      	beq.n	80016a6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01a      	beq.n	80016a6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800167e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2210      	movs	r2, #16
 8001686:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f80e 	bl	80016c2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_DMA2D_ConfigLayer+0x20>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e079      	b.n	80017ec <HAL_DMA2D_ConfigLayer+0x114>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2202      	movs	r2, #2
 8001704:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	3318      	adds	r3, #24
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	041b      	lsls	r3, r3, #16
 800171e:	4313      	orrs	r3, r2
 8001720:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001722:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <HAL_DMA2D_ConfigLayer+0x120>)
 8001724:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b0a      	cmp	r3, #10
 800172c:	d003      	beq.n	8001736 <HAL_DMA2D_ConfigLayer+0x5e>
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b09      	cmp	r3, #9
 8001734:	d107      	bne.n	8001746 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4313      	orrs	r3, r2
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	e005      	b.n	8001752 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	061b      	lsls	r3, r3, #24
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	4313      	orrs	r3, r2
 8001750:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d120      	bne.n	800179a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43db      	mvns	r3, r3
 8001762:	ea02 0103 	and.w	r1, r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	430a      	orrs	r2, r1
 800176e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b0a      	cmp	r3, #10
 8001780:	d003      	beq.n	800178a <HAL_DMA2D_ConfigLayer+0xb2>
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b09      	cmp	r3, #9
 8001788:	d127      	bne.n	80017da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
 8001798:	e01f      	b.n	80017da <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	69da      	ldr	r2, [r3, #28]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	ea02 0103 	and.w	r1, r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b0a      	cmp	r3, #10
 80017c2:	d003      	beq.n	80017cc <HAL_DMA2D_ConfigLayer+0xf4>
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	d106      	bne.n	80017da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80017d8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	ff03000f 	.word	0xff03000f

080017fc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b08b      	sub	sp, #44	; 0x2c
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	041a      	lsls	r2, r3, #16
 8001818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181a:	431a      	orrs	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001834:	d174      	bne.n	8001920 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800183c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001844:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800184c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d108      	bne.n	800186e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	431a      	orrs	r2, r3
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	4313      	orrs	r3, r2
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	4313      	orrs	r3, r2
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
 800186c:	e053      	b.n	8001916 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d106      	bne.n	8001884 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4313      	orrs	r3, r2
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	4313      	orrs	r3, r2
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
 8001882:	e048      	b.n	8001916 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d111      	bne.n	80018b0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	0cdb      	lsrs	r3, r3, #19
 8001890:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	0a9b      	lsrs	r3, r3, #10
 8001896:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	08db      	lsrs	r3, r3, #3
 800189c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	015a      	lsls	r2, r3, #5
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	02db      	lsls	r3, r3, #11
 80018a6:	4313      	orrs	r3, r2
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
 80018ae:	e032      	b.n	8001916 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d117      	bne.n	80018e8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	0fdb      	lsrs	r3, r3, #31
 80018bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	0cdb      	lsrs	r3, r3, #19
 80018c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	0adb      	lsrs	r3, r3, #11
 80018c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	015a      	lsls	r2, r3, #5
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	029b      	lsls	r3, r3, #10
 80018d8:	431a      	orrs	r2, r3
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	03db      	lsls	r3, r3, #15
 80018de:	4313      	orrs	r3, r2
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	e016      	b.n	8001916 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	0f1b      	lsrs	r3, r3, #28
 80018ec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	0d1b      	lsrs	r3, r3, #20
 80018f2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	0b1b      	lsrs	r3, r3, #12
 80018f8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	011a      	lsls	r2, r3, #4
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	431a      	orrs	r2, r3
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	031b      	lsls	r3, r3, #12
 800190e:	4313      	orrs	r3, r2
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4313      	orrs	r3, r2
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800191e:	e003      	b.n	8001928 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	60da      	str	r2, [r3, #12]
}
 8001928:	bf00      	nop
 800192a:	372c      	adds	r7, #44	; 0x2c
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001944:	4ba9      	ldr	r3, [pc, #676]	; (8001bec <HAL_ETH_Init+0x2b8>)
 8001946:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e183      	b.n	8001c62 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f016 f9d2 	bl	8017d18 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001974:	4b9e      	ldr	r3, [pc, #632]	; (8001bf0 <HAL_ETH_Init+0x2bc>)
 8001976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001978:	4a9d      	ldr	r2, [pc, #628]	; (8001bf0 <HAL_ETH_Init+0x2bc>)
 800197a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197e:	6453      	str	r3, [r2, #68]	; 0x44
 8001980:	4b9b      	ldr	r3, [pc, #620]	; (8001bf0 <HAL_ETH_Init+0x2bc>)
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800198c:	4b99      	ldr	r3, [pc, #612]	; (8001bf4 <HAL_ETH_Init+0x2c0>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a98      	ldr	r2, [pc, #608]	; (8001bf4 <HAL_ETH_Init+0x2c0>)
 8001992:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001996:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001998:	4b96      	ldr	r3, [pc, #600]	; (8001bf4 <HAL_ETH_Init+0x2c0>)
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4994      	ldr	r1, [pc, #592]	; (8001bf4 <HAL_ETH_Init+0x2c0>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019bc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019be:	f7fe fe19 	bl	80005f4 <HAL_GetTick>
 80019c2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019c4:	e011      	b.n	80019ea <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80019c6:	f7fe fe15 	bl	80005f4 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019d4:	d909      	bls.n	80019ea <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2203      	movs	r2, #3
 80019da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e13b      	b.n	8001c62 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1e4      	bne.n	80019c6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f023 031c 	bic.w	r3, r3, #28
 8001a0a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a0c:	f003 fdd6 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 8001a10:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4a78      	ldr	r2, [pc, #480]	; (8001bf8 <HAL_ETH_Init+0x2c4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d908      	bls.n	8001a2c <HAL_ETH_Init+0xf8>
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4a77      	ldr	r2, [pc, #476]	; (8001bfc <HAL_ETH_Init+0x2c8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d804      	bhi.n	8001a2c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	e027      	b.n	8001a7c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	4a73      	ldr	r2, [pc, #460]	; (8001bfc <HAL_ETH_Init+0x2c8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d908      	bls.n	8001a46 <HAL_ETH_Init+0x112>
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	4a72      	ldr	r2, [pc, #456]	; (8001c00 <HAL_ETH_Init+0x2cc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d804      	bhi.n	8001a46 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f043 030c 	orr.w	r3, r3, #12
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	e01a      	b.n	8001a7c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4a6d      	ldr	r2, [pc, #436]	; (8001c00 <HAL_ETH_Init+0x2cc>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d903      	bls.n	8001a56 <HAL_ETH_Init+0x122>
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4a6c      	ldr	r2, [pc, #432]	; (8001c04 <HAL_ETH_Init+0x2d0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d911      	bls.n	8001a7a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4a6a      	ldr	r2, [pc, #424]	; (8001c04 <HAL_ETH_Init+0x2d0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d908      	bls.n	8001a70 <HAL_ETH_Init+0x13c>
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <HAL_ETH_Init+0x2d4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d804      	bhi.n	8001a70 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	e005      	b.n	8001a7c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	e000      	b.n	8001a7c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001a7a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001a84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a88:	2100      	movs	r1, #0
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f956 	bl	8001d3c <HAL_ETH_WritePHYRegister>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001a9a:	6939      	ldr	r1, [r7, #16]
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f9b3 	bl	8001e08 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0d9      	b.n	8001c62 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001aae:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001ab2:	f7fe fdab 	bl	800060c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80a6 	beq.w	8001c0c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ac0:	f7fe fd98 	bl	80005f4 <HAL_GetTick>
 8001ac4:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	461a      	mov	r2, r3
 8001acc:	2101      	movs	r1, #1
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8cc 	bl	8001c6c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001ad4:	f7fe fd8e 	bl	80005f4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d90f      	bls.n	8001b06 <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001aea:	6939      	ldr	r1, [r7, #16]
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f98b 	bl	8001e08 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e0ad      	b.n	8001c62 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0da      	beq.n	8001ac6 <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001b10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b14:	2100      	movs	r1, #0
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f910 	bl	8001d3c <HAL_ETH_WritePHYRegister>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b26:	6939      	ldr	r1, [r7, #16]
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f96d 	bl	8001e08 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001b36:	2301      	movs	r3, #1
 8001b38:	e093      	b.n	8001c62 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b3a:	f7fe fd5b 	bl	80005f4 <HAL_GetTick>
 8001b3e:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	461a      	mov	r2, r3
 8001b46:	2101      	movs	r1, #1
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f88f 	bl	8001c6c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001b4e:	f7fe fd51 	bl	80005f4 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d90f      	bls.n	8001b80 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b64:	6939      	ldr	r1, [r7, #16]
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f94e 	bl	8001e08 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e070      	b.n	8001c62 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0da      	beq.n	8001b40 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	461a      	mov	r2, r3
 8001b90:	211f      	movs	r1, #31
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f86a 	bl	8001c6c <HAL_ETH_ReadPHYRegister>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ba2:	6939      	ldr	r1, [r7, #16]
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f92f 	bl	8001e08 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e055      	b.n	8001c62 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	e002      	b.n	8001bd0 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	e036      	b.n	8001c50 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	e031      	b.n	8001c50 <HAL_ETH_Init+0x31c>
 8001bec:	03938700 	.word	0x03938700
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	01312cff 	.word	0x01312cff
 8001bfc:	02160ebf 	.word	0x02160ebf
 8001c00:	039386ff 	.word	0x039386ff
 8001c04:	05f5e0ff 	.word	0x05f5e0ff
 8001c08:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	085b      	lsrs	r3, r3, #1
 8001c1a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	2100      	movs	r1, #0
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f889 	bl	8001d3c <HAL_ETH_WritePHYRegister>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00b      	beq.n	8001c48 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c34:	6939      	ldr	r1, [r7, #16]
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8e6 	bl	8001e08 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e00c      	b.n	8001c62 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001c48:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001c4c:	f7fe fcde 	bl	800060c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001c50:	6939      	ldr	r1, [r7, #16]
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8d8 	bl	8001e08 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3720      	adds	r7, #32
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop

08001c6c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	460b      	mov	r3, r1
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b82      	cmp	r3, #130	; 0x82
 8001c8c:	d101      	bne.n	8001c92 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e050      	b.n	8001d34 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2282      	movs	r2, #130	; 0x82
 8001c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 031c 	and.w	r3, r3, #28
 8001ca8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8a1b      	ldrh	r3, [r3, #16]
 8001cae:	02db      	lsls	r3, r3, #11
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001cb8:	897b      	ldrh	r3, [r7, #10]
 8001cba:	019b      	lsls	r3, r3, #6
 8001cbc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f023 0302 	bic.w	r3, r3, #2
 8001ccc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cde:	f7fe fc89 	bl	80005f4 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ce4:	e015      	b.n	8001d12 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001ce6:	f7fe fc85 	bl	80005f4 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf4:	d309      	bcc.n	8001d0a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e014      	b.n	8001d34 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e4      	bne.n	8001ce6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	460b      	mov	r3, r1
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b42      	cmp	r3, #66	; 0x42
 8001d5c:	d101      	bne.n	8001d62 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e04e      	b.n	8001e00 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2242      	movs	r2, #66	; 0x42
 8001d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f003 031c 	and.w	r3, r3, #28
 8001d78:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8a1b      	ldrh	r3, [r3, #16]
 8001d7e:	02db      	lsls	r3, r3, #11
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d88:	897b      	ldrh	r3, [r7, #10]
 8001d8a:	019b      	lsls	r3, r3, #6
 8001d8c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001db8:	f7fe fc1c 	bl	80005f4 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dbe:	e015      	b.n	8001dec <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001dc0:	f7fe fc18 	bl	80005f4 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dce:	d309      	bcc.n	8001de4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e00d      	b.n	8001e00 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1e4      	bne.n	8001dc0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0b0      	sub	sp, #192	; 0xc0
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e24:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e36:	2300      	movs	r3, #0
 8001e38:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e52:	663b      	str	r3, [r7, #96]	; 0x60
 8001e54:	e001      	b.n	8001e5a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e64:	2300      	movs	r3, #0
 8001e66:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e74:	2340      	movs	r3, #64	; 0x40
 8001e76:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001edc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ee0:	4bab      	ldr	r3, [pc, #684]	; (8002190 <ETH_MACDMAConfig+0x388>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001eec:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001ef0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001ef4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001efa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001efc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001efe:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f02:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f08:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f0c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f10:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f14:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f18:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f1c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f22:	4313      	orrs	r3, r2
 8001f24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f30:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f7fe fb65 	bl	800060c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f4a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f4c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f50:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f54:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001f56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f5a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f60:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f66:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f6c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f70:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f78:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f7a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7fe fb40 	bl	800060c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f94:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f9e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fa8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001fb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001fc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fc6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001fc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001fcc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001fd2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001fd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001fd8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001fde:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001fe0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001fe4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001fe6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002004:	2001      	movs	r0, #1
 8002006:	f7fe fb01 	bl	800060c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002012:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002014:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002018:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800202e:	2001      	movs	r0, #1
 8002030:	f7fe faec 	bl	800060c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800203c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002046:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800204c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002050:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002062:	2304      	movs	r3, #4
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800206c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002072:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800207c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002082:	2300      	movs	r3, #0
 8002084:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002086:	2300      	movs	r3, #0
 8002088:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002092:	4413      	add	r3, r2
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800209a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <ETH_MACDMAConfig+0x38c>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020a6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80020a8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020aa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80020ac:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80020ae:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80020b0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80020b2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80020b4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80020b6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80020b8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80020ba:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80020bc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80020be:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80020c2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80020c6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f241 0318 	movw	r3, #4120	; 0x1018
 80020da:	4413      	add	r3, r2
 80020dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	f241 0318 	movw	r3, #4120	; 0x1018
 80020ea:	4413      	add	r3, r2
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f2:	2001      	movs	r0, #1
 80020f4:	f7fe fa8a 	bl	800060c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002100:	4413      	add	r3, r2
 8002102:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002106:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800210c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800210e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002110:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002114:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002118:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800211a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800211c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800211e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002122:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800212c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002130:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002140:	2001      	movs	r0, #1
 8002142:	f7fe fa63 	bl	800060c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002152:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10d      	bne.n	8002178 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	f241 031c 	movw	r3, #4124	; 0x101c
 8002164:	4413      	add	r3, r2
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6811      	ldr	r1, [r2, #0]
 800216c:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <ETH_MACDMAConfig+0x390>)
 800216e:	431a      	orrs	r2, r3
 8002170:	f241 031c 	movw	r3, #4124	; 0x101c
 8002174:	440b      	add	r3, r1
 8002176:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	461a      	mov	r2, r3
 800217e:	2100      	movs	r1, #0
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f80b 	bl	800219c <ETH_MACAddressConfig>
}
 8002186:	bf00      	nop
 8002188:	37c0      	adds	r7, #192	; 0xc0
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	ff20810f 	.word	0xff20810f
 8002194:	f8de3f23 	.word	0xf8de3f23
 8002198:	00010040 	.word	0x00010040

0800219c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3305      	adds	r3, #5
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	3204      	adds	r2, #4
 80021b4:	7812      	ldrb	r2, [r2, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <ETH_MACAddressConfig+0x68>)
 80021be:	4413      	add	r3, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3303      	adds	r3, #3
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	061a      	lsls	r2, r3, #24
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3302      	adds	r3, #2
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	041b      	lsls	r3, r3, #16
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3301      	adds	r3, #1
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	4313      	orrs	r3, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <ETH_MACAddressConfig+0x6c>)
 80021ee:	4413      	add	r3, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	6013      	str	r3, [r2, #0]
}
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40028040 	.word	0x40028040
 8002208:	40028044 	.word	0x40028044

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e175      	b.n	8002518 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800222c:	2201      	movs	r2, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	429a      	cmp	r2, r3
 8002246:	f040 8164 	bne.w	8002512 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x4e>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b12      	cmp	r3, #18
 8002258:	d123      	bne.n	80022a2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	08da      	lsrs	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3208      	adds	r2, #8
 8002262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	08da      	lsrs	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3208      	adds	r2, #8
 800229c:	69b9      	ldr	r1, [r7, #24]
 800229e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	2203      	movs	r2, #3
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0203 	and.w	r2, r3, #3
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d00b      	beq.n	80022f6 <HAL_GPIO_Init+0xea>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d007      	beq.n	80022f6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ea:	2b11      	cmp	r3, #17
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b12      	cmp	r3, #18
 80022f4:	d130      	bne.n	8002358 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 0201 	and.w	r2, r3, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80be 	beq.w	8002512 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	4b65      	ldr	r3, [pc, #404]	; (800252c <HAL_GPIO_Init+0x320>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a64      	ldr	r2, [pc, #400]	; (800252c <HAL_GPIO_Init+0x320>)
 800239c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b62      	ldr	r3, [pc, #392]	; (800252c <HAL_GPIO_Init+0x320>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023ae:	4a60      	ldr	r2, [pc, #384]	; (8002530 <HAL_GPIO_Init+0x324>)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	3302      	adds	r3, #2
 80023b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	220f      	movs	r2, #15
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a57      	ldr	r2, [pc, #348]	; (8002534 <HAL_GPIO_Init+0x328>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d037      	beq.n	800244a <HAL_GPIO_Init+0x23e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a56      	ldr	r2, [pc, #344]	; (8002538 <HAL_GPIO_Init+0x32c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d031      	beq.n	8002446 <HAL_GPIO_Init+0x23a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a55      	ldr	r2, [pc, #340]	; (800253c <HAL_GPIO_Init+0x330>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d02b      	beq.n	8002442 <HAL_GPIO_Init+0x236>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a54      	ldr	r2, [pc, #336]	; (8002540 <HAL_GPIO_Init+0x334>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d025      	beq.n	800243e <HAL_GPIO_Init+0x232>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a53      	ldr	r2, [pc, #332]	; (8002544 <HAL_GPIO_Init+0x338>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01f      	beq.n	800243a <HAL_GPIO_Init+0x22e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_GPIO_Init+0x33c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_Init+0x22a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a51      	ldr	r2, [pc, #324]	; (800254c <HAL_GPIO_Init+0x340>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x226>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a50      	ldr	r2, [pc, #320]	; (8002550 <HAL_GPIO_Init+0x344>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_Init+0x222>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4f      	ldr	r2, [pc, #316]	; (8002554 <HAL_GPIO_Init+0x348>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_Init+0x21e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4e      	ldr	r2, [pc, #312]	; (8002558 <HAL_GPIO_Init+0x34c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x21a>
 8002422:	2309      	movs	r3, #9
 8002424:	e012      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002426:	230a      	movs	r3, #10
 8002428:	e010      	b.n	800244c <HAL_GPIO_Init+0x240>
 800242a:	2308      	movs	r3, #8
 800242c:	e00e      	b.n	800244c <HAL_GPIO_Init+0x240>
 800242e:	2307      	movs	r3, #7
 8002430:	e00c      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002432:	2306      	movs	r3, #6
 8002434:	e00a      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002436:	2305      	movs	r3, #5
 8002438:	e008      	b.n	800244c <HAL_GPIO_Init+0x240>
 800243a:	2304      	movs	r3, #4
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x240>
 800243e:	2303      	movs	r3, #3
 8002440:	e004      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002442:	2302      	movs	r3, #2
 8002444:	e002      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_GPIO_Init+0x240>
 800244a:	2300      	movs	r3, #0
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f002 0203 	and.w	r2, r2, #3
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	4093      	lsls	r3, r2
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800245c:	4934      	ldr	r1, [pc, #208]	; (8002530 <HAL_GPIO_Init+0x324>)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800246a:	4b3c      	ldr	r3, [pc, #240]	; (800255c <HAL_GPIO_Init+0x350>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800248e:	4a33      	ldr	r2, [pc, #204]	; (800255c <HAL_GPIO_Init+0x350>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002494:	4b31      	ldr	r3, [pc, #196]	; (800255c <HAL_GPIO_Init+0x350>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b8:	4a28      	ldr	r2, [pc, #160]	; (800255c <HAL_GPIO_Init+0x350>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_GPIO_Init+0x350>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e2:	4a1e      	ldr	r2, [pc, #120]	; (800255c <HAL_GPIO_Init+0x350>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e8:	4b1c      	ldr	r3, [pc, #112]	; (800255c <HAL_GPIO_Init+0x350>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800250c:	4a13      	ldr	r2, [pc, #76]	; (800255c <HAL_GPIO_Init+0x350>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3301      	adds	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b0f      	cmp	r3, #15
 800251c:	f67f ae86 	bls.w	800222c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002520:	bf00      	nop
 8002522:	3724      	adds	r7, #36	; 0x24
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40023800 	.word	0x40023800
 8002530:	40013800 	.word	0x40013800
 8002534:	40020000 	.word	0x40020000
 8002538:	40020400 	.word	0x40020400
 800253c:	40020800 	.word	0x40020800
 8002540:	40020c00 	.word	0x40020c00
 8002544:	40021000 	.word	0x40021000
 8002548:	40021400 	.word	0x40021400
 800254c:	40021800 	.word	0x40021800
 8002550:	40021c00 	.word	0x40021c00
 8002554:	40022000 	.word	0x40022000
 8002558:	40022400 	.word	0x40022400
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e0d9      	b.n	8002730 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800257c:	2201      	movs	r2, #1
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	429a      	cmp	r2, r3
 8002594:	f040 80c9 	bne.w	800272a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8002598:	4a6a      	ldr	r2, [pc, #424]	; (8002744 <HAL_GPIO_DeInit+0x1e4>)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	3302      	adds	r3, #2
 80025a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	4013      	ands	r3, r2
 80025b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a62      	ldr	r2, [pc, #392]	; (8002748 <HAL_GPIO_DeInit+0x1e8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d037      	beq.n	8002632 <HAL_GPIO_DeInit+0xd2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a61      	ldr	r2, [pc, #388]	; (800274c <HAL_GPIO_DeInit+0x1ec>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d031      	beq.n	800262e <HAL_GPIO_DeInit+0xce>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a60      	ldr	r2, [pc, #384]	; (8002750 <HAL_GPIO_DeInit+0x1f0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d02b      	beq.n	800262a <HAL_GPIO_DeInit+0xca>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a5f      	ldr	r2, [pc, #380]	; (8002754 <HAL_GPIO_DeInit+0x1f4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d025      	beq.n	8002626 <HAL_GPIO_DeInit+0xc6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a5e      	ldr	r2, [pc, #376]	; (8002758 <HAL_GPIO_DeInit+0x1f8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01f      	beq.n	8002622 <HAL_GPIO_DeInit+0xc2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a5d      	ldr	r2, [pc, #372]	; (800275c <HAL_GPIO_DeInit+0x1fc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d019      	beq.n	800261e <HAL_GPIO_DeInit+0xbe>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a5c      	ldr	r2, [pc, #368]	; (8002760 <HAL_GPIO_DeInit+0x200>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_DeInit+0xba>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a5b      	ldr	r2, [pc, #364]	; (8002764 <HAL_GPIO_DeInit+0x204>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00d      	beq.n	8002616 <HAL_GPIO_DeInit+0xb6>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a5a      	ldr	r2, [pc, #360]	; (8002768 <HAL_GPIO_DeInit+0x208>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_DeInit+0xb2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a59      	ldr	r2, [pc, #356]	; (800276c <HAL_GPIO_DeInit+0x20c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_GPIO_DeInit+0xae>
 800260a:	2309      	movs	r3, #9
 800260c:	e012      	b.n	8002634 <HAL_GPIO_DeInit+0xd4>
 800260e:	230a      	movs	r3, #10
 8002610:	e010      	b.n	8002634 <HAL_GPIO_DeInit+0xd4>
 8002612:	2308      	movs	r3, #8
 8002614:	e00e      	b.n	8002634 <HAL_GPIO_DeInit+0xd4>
 8002616:	2307      	movs	r3, #7
 8002618:	e00c      	b.n	8002634 <HAL_GPIO_DeInit+0xd4>
 800261a:	2306      	movs	r3, #6
 800261c:	e00a      	b.n	8002634 <HAL_GPIO_DeInit+0xd4>
 800261e:	2305      	movs	r3, #5
 8002620:	e008      	b.n	8002634 <HAL_GPIO_DeInit+0xd4>
 8002622:	2304      	movs	r3, #4
 8002624:	e006      	b.n	8002634 <HAL_GPIO_DeInit+0xd4>
 8002626:	2303      	movs	r3, #3
 8002628:	e004      	b.n	8002634 <HAL_GPIO_DeInit+0xd4>
 800262a:	2302      	movs	r3, #2
 800262c:	e002      	b.n	8002634 <HAL_GPIO_DeInit+0xd4>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_GPIO_DeInit+0xd4>
 8002632:	2300      	movs	r3, #0
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	f002 0203 	and.w	r2, r2, #3
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	4093      	lsls	r3, r2
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	429a      	cmp	r2, r3
 8002642:	d132      	bne.n	80026aa <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002654:	4a3b      	ldr	r2, [pc, #236]	; (8002744 <HAL_GPIO_DeInit+0x1e4>)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	43da      	mvns	r2, r3
 8002664:	4837      	ldr	r0, [pc, #220]	; (8002744 <HAL_GPIO_DeInit+0x1e4>)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	400a      	ands	r2, r1
 800266c:	3302      	adds	r3, #2
 800266e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002672:	4b3f      	ldr	r3, [pc, #252]	; (8002770 <HAL_GPIO_DeInit+0x210>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43db      	mvns	r3, r3
 800267a:	493d      	ldr	r1, [pc, #244]	; (8002770 <HAL_GPIO_DeInit+0x210>)
 800267c:	4013      	ands	r3, r2
 800267e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002680:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <HAL_GPIO_DeInit+0x210>)
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	43db      	mvns	r3, r3
 8002688:	4939      	ldr	r1, [pc, #228]	; (8002770 <HAL_GPIO_DeInit+0x210>)
 800268a:	4013      	ands	r3, r2
 800268c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800268e:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_GPIO_DeInit+0x210>)
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	43db      	mvns	r3, r3
 8002696:	4936      	ldr	r1, [pc, #216]	; (8002770 <HAL_GPIO_DeInit+0x210>)
 8002698:	4013      	ands	r3, r2
 800269a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <HAL_GPIO_DeInit+0x210>)
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	4932      	ldr	r1, [pc, #200]	; (8002770 <HAL_GPIO_DeInit+0x210>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2103      	movs	r1, #3
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	401a      	ands	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	08d2      	lsrs	r2, r2, #3
 80026e0:	4019      	ands	r1, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2103      	movs	r1, #3
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	401a      	ands	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	2101      	movs	r1, #1
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	401a      	ands	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2103      	movs	r1, #3
 800271e:	fa01 f303 	lsl.w	r3, r1, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	401a      	ands	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b0f      	cmp	r3, #15
 8002734:	f67f af22 	bls.w	800257c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002738:	bf00      	nop
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40013800 	.word	0x40013800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020400 	.word	0x40020400
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40021400 	.word	0x40021400
 8002760:	40021800 	.word	0x40021800
 8002764:	40021c00 	.word	0x40021c00
 8002768:	40022000 	.word	0x40022000
 800276c:	40022400 	.word	0x40022400
 8002770:	40013c00 	.word	0x40013c00

08002774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	e001      	b.n	8002796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
 80027b0:	4613      	mov	r3, r2
 80027b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b4:	787b      	ldrb	r3, [r7, #1]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027c0:	e003      	b.n	80027ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027c2:	887b      	ldrh	r3, [r7, #2]
 80027c4:	041a      	lsls	r2, r3, #16
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	619a      	str	r2, [r3, #24]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80027d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d8:	b08d      	sub	sp, #52	; 0x34
 80027da:	af0a      	add	r7, sp, #40	; 0x28
 80027dc:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e048      	b.n	800287a <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f016 f94f 	bl	8018aa0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2203      	movs	r2, #3
 8002806:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f007 ff35 	bl	800a67e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	687e      	ldr	r6, [r7, #4]
 800281c:	466d      	mov	r5, sp
 800281e:	f106 0410 	add.w	r4, r6, #16
 8002822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800282e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002832:	1d33      	adds	r3, r6, #4
 8002834:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002836:	6838      	ldr	r0, [r7, #0]
 8002838:	f007 feb8 	bl	800a5ac <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	4618      	mov	r0, r3
 8002844:	f007 ff2c 	bl	800a6a0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	687e      	ldr	r6, [r7, #4]
 8002850:	466d      	mov	r5, sp
 8002852:	f106 0410 	add.w	r4, r6, #16
 8002856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800285c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002862:	e885 0003 	stmia.w	r5, {r0, r1}
 8002866:	1d33      	adds	r3, r6, #4
 8002868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286a:	6838      	ldr	r0, [r7, #0]
 800286c:	f008 f83e 	bl	800a8ec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002882 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002882:	b590      	push	{r4, r7, lr}
 8002884:	b089      	sub	sp, #36	; 0x24
 8002886:	af04      	add	r7, sp, #16
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	4608      	mov	r0, r1
 800288c:	4611      	mov	r1, r2
 800288e:	461a      	mov	r2, r3
 8002890:	4603      	mov	r3, r0
 8002892:	70fb      	strb	r3, [r7, #3]
 8002894:	460b      	mov	r3, r1
 8002896:	70bb      	strb	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_HCD_HC_Init+0x28>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e07f      	b.n	80029aa <HAL_HCD_HC_Init+0x128>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	440b      	add	r3, r1
 80028c0:	333d      	adds	r3, #61	; 0x3d
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	3338      	adds	r3, #56	; 0x38
 80028d6:	787a      	ldrb	r2, [r7, #1]
 80028d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	3340      	adds	r3, #64	; 0x40
 80028ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028ec:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	3339      	adds	r3, #57	; 0x39
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	333f      	adds	r3, #63	; 0x3f
 8002912:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002916:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	78bb      	ldrb	r3, [r7, #2]
 800291c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002920:	b2d8      	uxtb	r0, r3
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	333a      	adds	r3, #58	; 0x3a
 8002930:	4602      	mov	r2, r0
 8002932:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002934:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002938:	2b00      	cmp	r3, #0
 800293a:	da0a      	bge.n	8002952 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	333b      	adds	r3, #59	; 0x3b
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	e009      	b.n	8002966 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	333b      	adds	r3, #59	; 0x3b
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	333c      	adds	r3, #60	; 0x3c
 8002976:	f897 2020 	ldrb.w	r2, [r7, #32]
 800297a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	787c      	ldrb	r4, [r7, #1]
 8002982:	78ba      	ldrb	r2, [r7, #2]
 8002984:	78f9      	ldrb	r1, [r7, #3]
 8002986:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002988:	9302      	str	r3, [sp, #8]
 800298a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4623      	mov	r3, r4
 8002998:	f008 f91e 	bl	800abd8 <USB_HC_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd90      	pop	{r4, r7, pc}

080029b2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_HCD_HC_Halt+0x1e>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e00f      	b.n	80029f0 <HAL_HCD_HC_Halt+0x3e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f008 fb58 	bl	800b096 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4603      	mov	r3, r0
 8002a08:	70fb      	strb	r3, [r7, #3]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	70bb      	strb	r3, [r7, #2]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	333b      	adds	r3, #59	; 0x3b
 8002a22:	78ba      	ldrb	r2, [r7, #2]
 8002a24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	333f      	adds	r3, #63	; 0x3f
 8002a36:	787a      	ldrb	r2, [r7, #1]
 8002a38:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a3a:	7c3b      	ldrb	r3, [r7, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3342      	adds	r3, #66	; 0x42
 8002a50:	2203      	movs	r2, #3
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e009      	b.n	8002a6a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	3342      	adds	r3, #66	; 0x42
 8002a66:	2202      	movs	r2, #2
 8002a68:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002a6a:	787b      	ldrb	r3, [r7, #1]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	f200 80d6 	bhi.w	8002c1e <HAL_HCD_HC_SubmitRequest+0x226>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002a89 	.word	0x08002a89
 8002a7c:	08002c09 	.word	0x08002c09
 8002a80:	08002af5 	.word	0x08002af5
 8002a84:	08002b7f 	.word	0x08002b7f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002a88:	7c3b      	ldrb	r3, [r7, #16]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	f040 80c9 	bne.w	8002c22 <HAL_HCD_HC_SubmitRequest+0x22a>
 8002a90:	78bb      	ldrb	r3, [r7, #2]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f040 80c5 	bne.w	8002c22 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002a98:	8b3b      	ldrh	r3, [r7, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	3351      	adds	r3, #81	; 0x51
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	3351      	adds	r3, #81	; 0x51
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3342      	adds	r3, #66	; 0x42
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002adc:	e0a1      	b.n	8002c22 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	3342      	adds	r3, #66	; 0x42
 8002aee:	2202      	movs	r2, #2
 8002af0:	701a      	strb	r2, [r3, #0]
      break;
 8002af2:	e096      	b.n	8002c22 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002af4:	78bb      	ldrb	r3, [r7, #2]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d120      	bne.n	8002b3c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	3351      	adds	r3, #81	; 0x51
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10a      	bne.n	8002b26 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3342      	adds	r3, #66	; 0x42
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002b24:	e07e      	b.n	8002c24 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	3342      	adds	r3, #66	; 0x42
 8002b36:	2202      	movs	r2, #2
 8002b38:	701a      	strb	r2, [r3, #0]
      break;
 8002b3a:	e073      	b.n	8002c24 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	3350      	adds	r3, #80	; 0x50
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10a      	bne.n	8002b68 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	3342      	adds	r3, #66	; 0x42
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
      break;
 8002b66:	e05d      	b.n	8002c24 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	3342      	adds	r3, #66	; 0x42
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
      break;
 8002b7c:	e052      	b.n	8002c24 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002b7e:	78bb      	ldrb	r3, [r7, #2]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d120      	bne.n	8002bc6 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	3351      	adds	r3, #81	; 0x51
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3342      	adds	r3, #66	; 0x42
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002bae:	e039      	b.n	8002c24 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3342      	adds	r3, #66	; 0x42
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	701a      	strb	r2, [r3, #0]
      break;
 8002bc4:	e02e      	b.n	8002c24 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3350      	adds	r3, #80	; 0x50
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	3342      	adds	r3, #66	; 0x42
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
      break;
 8002bf0:	e018      	b.n	8002c24 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	3342      	adds	r3, #66	; 0x42
 8002c02:	2202      	movs	r2, #2
 8002c04:	701a      	strb	r2, [r3, #0]
      break;
 8002c06:	e00d      	b.n	8002c24 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	440b      	add	r3, r1
 8002c16:	3342      	adds	r3, #66	; 0x42
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
      break;
 8002c1c:	e002      	b.n	8002c24 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8002c1e:	bf00      	nop
 8002c20:	e000      	b.n	8002c24 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002c22:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	3344      	adds	r3, #68	; 0x44
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	8b39      	ldrh	r1, [r7, #24]
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4403      	add	r3, r0
 8002c48:	3348      	adds	r3, #72	; 0x48
 8002c4a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	335c      	adds	r3, #92	; 0x5c
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	334c      	adds	r3, #76	; 0x4c
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	3339      	adds	r3, #57	; 0x39
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	335d      	adds	r3, #93	; 0x5d
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	3338      	adds	r3, #56	; 0x38
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	18d1      	adds	r1, r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f008 f898 	bl	800adec <USB_HC_StartXfer>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop

08002cc8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f007 fdc1 	bl	800a866 <USB_GetMode>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	f040 80f1 	bne.w	8002ece <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f007 fda5 	bl	800a840 <USB_ReadInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80e7 	beq.w	8002ecc <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f007 fd9c 	bl	800a840 <USB_ReadInterrupts>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d12:	d104      	bne.n	8002d1e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f007 fd8c 	bl	800a840 <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d32:	d104      	bne.n	8002d3e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f007 fd7c 	bl	800a840 <USB_ReadInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d52:	d104      	bne.n	8002d5e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f007 fd6c 	bl	800a840 <USB_ReadInterrupts>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d103      	bne.n	8002d7a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2202      	movs	r2, #2
 8002d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f007 fd5e 	bl	800a840 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d8e:	d117      	bne.n	8002dc0 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002d9e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002da2:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f015 feed 	bl	8018b84 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2101      	movs	r1, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f007 fe4b 	bl	800aa4c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f007 fd3b 	bl	800a840 <USB_ReadInterrupts>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd4:	d102      	bne.n	8002ddc <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f001 f8c8 	bl	8003f6c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f007 fd2d 	bl	800a840 <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d106      	bne.n	8002dfe <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f015 feab 	bl	8018b4c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f007 fd1c 	bl	800a840 <USB_ReadInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e12:	d138      	bne.n	8002e86 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f008 f92b 	bl	800b074 <USB_HC_ReadInterrupt>
 8002e1e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e025      	b.n	8002e72 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d018      	beq.n	8002e6c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e50:	d106      	bne.n	8002e60 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	4619      	mov	r1, r3
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f8cf 	bl	8002ffc <HCD_HC_IN_IRQHandler>
 8002e5e:	e005      	b.n	8002e6c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	4619      	mov	r1, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fc5f 	bl	800372a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d3d4      	bcc.n	8002e26 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f007 fcd8 	bl	800a840 <USB_ReadInterrupts>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d101      	bne.n	8002e9e <HAL_HCD_IRQHandler+0x1d6>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_HCD_IRQHandler+0x1d8>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d014      	beq.n	8002ece <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0210 	bic.w	r2, r2, #16
 8002eb2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 ffad 	bl	8003e14 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699a      	ldr	r2, [r3, #24]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0210 	orr.w	r2, r2, #16
 8002ec8:	619a      	str	r2, [r3, #24]
 8002eca:	e000      	b.n	8002ece <HAL_HCD_IRQHandler+0x206>
      return;
 8002ecc:	bf00      	nop
    }
  }
}
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_HCD_Start+0x16>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e013      	b.n	8002f12 <HAL_HCD_Start+0x3e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f007 fbb0 	bl	800a65c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f007 fe06 	bl	800ab14 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_HCD_Stop+0x16>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e00d      	b.n	8002f4c <HAL_HCD_Stop+0x32>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f008 f9e5 	bl	800b30c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f007 fdad 	bl	800aac0 <USB_ResetPort>
 8002f66:	4603      	mov	r3, r0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	440b      	add	r3, r1
 8002f8a:	335c      	adds	r3, #92	; 0x5c
 8002f8c:	781b      	ldrb	r3, [r3, #0]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	334c      	adds	r3, #76	; 0x4c
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f007 fdef 	bl	800abb4 <USB_GetCurrentFrame>
 8002fd6:	4603      	mov	r3, r0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f007 fdca 	bl	800ab86 <USB_GetHostSpeed>
 8002ff2:	4603      	mov	r3, r0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4413      	add	r3, r2
 800301e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b04      	cmp	r3, #4
 800302a:	d119      	bne.n	8003060 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	2304      	movs	r3, #4
 800303c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	0151      	lsls	r1, r2, #5
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	440a      	add	r2, r1
 8003054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	60d3      	str	r3, [r2, #12]
 800305e:	e095      	b.n	800318c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b20      	cmp	r3, #32
 8003074:	d109      	bne.n	800308a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003082:	461a      	mov	r2, r3
 8003084:	2320      	movs	r3, #32
 8003086:	6093      	str	r3, [r2, #8]
 8003088:	e080      	b.n	800318c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b08      	cmp	r3, #8
 800309e:	d134      	bne.n	800310a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	0151      	lsls	r1, r2, #5
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	440a      	add	r2, r1
 80030b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	335d      	adds	r3, #93	; 0x5d
 80030d0:	2205      	movs	r2, #5
 80030d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	461a      	mov	r2, r3
 80030e2:	2310      	movs	r3, #16
 80030e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	461a      	mov	r2, r3
 80030f4:	2308      	movs	r3, #8
 80030f6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f007 ffc7 	bl	800b096 <USB_HC_Halt>
 8003108:	e040      	b.n	800318c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003120:	d134      	bne.n	800318c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	0151      	lsls	r1, r2, #5
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	440a      	add	r2, r1
 8003138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f007 ffa2 	bl	800b096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4413      	add	r3, r2
 800315a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315e:	461a      	mov	r2, r3
 8003160:	2310      	movs	r3, #16
 8003162:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	335d      	adds	r3, #93	; 0x5d
 8003174:	2208      	movs	r2, #8
 8003176:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	461a      	mov	r2, r3
 8003186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800318a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a2:	d122      	bne.n	80031ea <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	0151      	lsls	r1, r2, #5
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	440a      	add	r2, r1
 80031ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031be:	f043 0302 	orr.w	r3, r3, #2
 80031c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f007 ff61 	bl	800b096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	461a      	mov	r2, r3
 80031e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031e6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80031e8:	e29b      	b.n	8003722 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 80c1 	bne.w	8003384 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01b      	beq.n	8003242 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	440b      	add	r3, r1
 8003218:	3348      	adds	r3, #72	; 0x48
 800321a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	0159      	lsls	r1, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	440b      	add	r3, r1
 8003224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800322e:	1ad1      	subs	r1, r2, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4403      	add	r3, r0
 800323e:	334c      	adds	r3, #76	; 0x4c
 8003240:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	440b      	add	r3, r1
 8003250:	335d      	adds	r3, #93	; 0x5d
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	3358      	adds	r3, #88	; 0x58
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003276:	461a      	mov	r2, r3
 8003278:	2301      	movs	r3, #1
 800327a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	440b      	add	r3, r1
 800328a:	333f      	adds	r3, #63	; 0x3f
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	440b      	add	r3, r1
 80032a0:	333f      	adds	r3, #63	; 0x3f
 80032a2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d121      	bne.n	80032ec <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	0151      	lsls	r1, r2, #5
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	440a      	add	r2, r1
 80032be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032c2:	f043 0302 	orr.w	r3, r3, #2
 80032c6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f007 fedf 	bl	800b096 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e4:	461a      	mov	r2, r3
 80032e6:	2310      	movs	r3, #16
 80032e8:	6093      	str	r3, [r2, #8]
 80032ea:	e034      	b.n	8003356 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	333f      	adds	r3, #63	; 0x3f
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d129      	bne.n	8003356 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	0151      	lsls	r1, r2, #5
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	440a      	add	r2, r1
 8003318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800331c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003320:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	440b      	add	r3, r1
 8003330:	335c      	adds	r3, #92	; 0x5c
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	b2d8      	uxtb	r0, r3
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	440b      	add	r3, r1
 8003348:	335c      	adds	r3, #92	; 0x5c
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	4601      	mov	r1, r0
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f015 fc25 	bl	8018ba0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	440b      	add	r3, r1
 8003364:	3350      	adds	r3, #80	; 0x50
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f083 0301 	eor.w	r3, r3, #1
 800336c:	b2d8      	uxtb	r0, r3
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	3350      	adds	r3, #80	; 0x50
 800337e:	4602      	mov	r2, r0
 8003380:	701a      	strb	r2, [r3, #0]
}
 8003382:	e1ce      	b.n	8003722 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b02      	cmp	r3, #2
 8003398:	f040 80f1 	bne.w	800357e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	0151      	lsls	r1, r2, #5
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	440a      	add	r2, r1
 80033b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033b6:	f023 0302 	bic.w	r3, r3, #2
 80033ba:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	440b      	add	r3, r1
 80033ca:	335d      	adds	r3, #93	; 0x5d
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d10a      	bne.n	80033e8 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	335c      	adds	r3, #92	; 0x5c
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	e0b0      	b.n	800354a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	440b      	add	r3, r1
 80033f6:	335d      	adds	r3, #93	; 0x5d
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b05      	cmp	r3, #5
 80033fc:	d10a      	bne.n	8003414 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	335c      	adds	r3, #92	; 0x5c
 800340e:	2205      	movs	r2, #5
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e09a      	b.n	800354a <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	440b      	add	r3, r1
 8003422:	335d      	adds	r3, #93	; 0x5d
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b06      	cmp	r3, #6
 8003428:	d00a      	beq.n	8003440 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	440b      	add	r3, r1
 8003438:	335d      	adds	r3, #93	; 0x5d
 800343a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800343c:	2b08      	cmp	r3, #8
 800343e:	d156      	bne.n	80034ee <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	440b      	add	r3, r1
 800344e:	3358      	adds	r3, #88	; 0x58
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	1c59      	adds	r1, r3, #1
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4403      	add	r3, r0
 8003462:	3358      	adds	r3, #88	; 0x58
 8003464:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	440b      	add	r3, r1
 8003474:	3358      	adds	r3, #88	; 0x58
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b03      	cmp	r3, #3
 800347a:	d914      	bls.n	80034a6 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	440b      	add	r3, r1
 800348a:	3358      	adds	r3, #88	; 0x58
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	335c      	adds	r3, #92	; 0x5c
 80034a0:	2204      	movs	r2, #4
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e009      	b.n	80034ba <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	335c      	adds	r3, #92	; 0x5c
 80034b6:	2202      	movs	r2, #2
 80034b8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034d0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034d8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e6:	461a      	mov	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	e02d      	b.n	800354a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	335d      	adds	r3, #93	; 0x5d
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d122      	bne.n	800354a <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	335c      	adds	r3, #92	; 0x5c
 8003514:	2202      	movs	r2, #2
 8003516:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4413      	add	r3, r2
 8003520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800352e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003536:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4413      	add	r3, r2
 8003552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003556:	461a      	mov	r2, r3
 8003558:	2302      	movs	r3, #2
 800355a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	b2d8      	uxtb	r0, r3
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	440b      	add	r3, r1
 800356e:	335c      	adds	r3, #92	; 0x5c
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	4601      	mov	r1, r0
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f015 fb12 	bl	8018ba0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800357c:	e0d1      	b.n	8003722 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4413      	add	r3, r2
 8003586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003590:	2b80      	cmp	r3, #128	; 0x80
 8003592:	d13e      	bne.n	8003612 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4413      	add	r3, r2
 800359c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	0151      	lsls	r1, r2, #5
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	440a      	add	r2, r1
 80035aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ae:	f043 0302 	orr.w	r3, r3, #2
 80035b2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	440b      	add	r3, r1
 80035c2:	3358      	adds	r3, #88	; 0x58
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	1c59      	adds	r1, r3, #1
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4403      	add	r3, r0
 80035d6:	3358      	adds	r3, #88	; 0x58
 80035d8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	440b      	add	r3, r1
 80035e8:	335d      	adds	r3, #93	; 0x5d
 80035ea:	2206      	movs	r2, #6
 80035ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f007 fd4c 	bl	800b096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	461a      	mov	r2, r3
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	6093      	str	r3, [r2, #8]
}
 8003610:	e087      	b.n	8003722 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4413      	add	r3, r2
 800361a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b10      	cmp	r3, #16
 8003626:	d17c      	bne.n	8003722 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	333f      	adds	r3, #63	; 0x3f
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d122      	bne.n	8003684 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	440b      	add	r3, r1
 800364c:	3358      	adds	r3, #88	; 0x58
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	0151      	lsls	r1, r2, #5
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	440a      	add	r2, r1
 8003668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800366c:	f043 0302 	orr.w	r3, r3, #2
 8003670:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f007 fd0a 	bl	800b096 <USB_HC_Halt>
 8003682:	e045      	b.n	8003710 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	440b      	add	r3, r1
 8003692:	333f      	adds	r3, #63	; 0x3f
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	333f      	adds	r3, #63	; 0x3f
 80036aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d12f      	bne.n	8003710 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	440b      	add	r3, r1
 80036be:	3358      	adds	r3, #88	; 0x58
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d121      	bne.n	8003710 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	440b      	add	r3, r1
 80036da:	335d      	adds	r3, #93	; 0x5d
 80036dc:	2203      	movs	r2, #3
 80036de:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	0151      	lsls	r1, r2, #5
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	440a      	add	r2, r1
 80036f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	4611      	mov	r1, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f007 fcc3 	bl	800b096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371c:	461a      	mov	r2, r3
 800371e:	2310      	movs	r3, #16
 8003720:	6093      	str	r3, [r2, #8]
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b04      	cmp	r3, #4
 8003758:	d119      	bne.n	800378e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4413      	add	r3, r2
 8003762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003766:	461a      	mov	r2, r3
 8003768:	2304      	movs	r3, #4
 800376a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	0151      	lsls	r1, r2, #5
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	440a      	add	r2, r1
 8003782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003786:	f043 0302 	orr.w	r3, r3, #2
 800378a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800378c:	e33e      	b.n	8003e0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d141      	bne.n	8003828 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	461a      	mov	r2, r3
 80037b2:	2320      	movs	r3, #32
 80037b4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	440b      	add	r3, r1
 80037c4:	333d      	adds	r3, #61	; 0x3d
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	f040 831f 	bne.w	8003e0c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	440b      	add	r3, r1
 80037dc:	333d      	adds	r3, #61	; 0x3d
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	440b      	add	r3, r1
 80037f0:	335c      	adds	r3, #92	; 0x5c
 80037f2:	2202      	movs	r2, #2
 80037f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	0151      	lsls	r1, r2, #5
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	440a      	add	r2, r1
 800380c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003810:	f043 0302 	orr.w	r3, r3, #2
 8003814:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f007 fc38 	bl	800b096 <USB_HC_Halt>
}
 8003826:	e2f1      	b.n	8003e0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d13f      	bne.n	80038be <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	440b      	add	r3, r1
 800384c:	335d      	adds	r3, #93	; 0x5d
 800384e:	2204      	movs	r2, #4
 8003850:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	440b      	add	r3, r1
 8003860:	333d      	adds	r3, #61	; 0x3d
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	440b      	add	r3, r1
 8003874:	3358      	adds	r3, #88	; 0x58
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4413      	add	r3, r2
 8003882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	0151      	lsls	r1, r2, #5
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	440a      	add	r2, r1
 8003890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f007 fbf6 	bl	800b096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b6:	461a      	mov	r2, r3
 80038b8:	2340      	movs	r3, #64	; 0x40
 80038ba:	6093      	str	r3, [r2, #8]
}
 80038bc:	e2a6      	b.n	8003e0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d4:	d122      	bne.n	800391c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	0151      	lsls	r1, r2, #5
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	440a      	add	r2, r1
 80038ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038f0:	f043 0302 	orr.w	r3, r3, #2
 80038f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f007 fbc8 	bl	800b096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4413      	add	r3, r2
 800390e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003912:	461a      	mov	r2, r3
 8003914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003918:	6093      	str	r3, [r2, #8]
}
 800391a:	e277      	b.n	8003e0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4413      	add	r3, r2
 8003924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b01      	cmp	r3, #1
 8003930:	d135      	bne.n	800399e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	440b      	add	r3, r1
 8003940:	3358      	adds	r3, #88	; 0x58
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	0151      	lsls	r1, r2, #5
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	440a      	add	r2, r1
 800395c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003960:	f043 0302 	orr.w	r3, r3, #2
 8003964:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f007 fb90 	bl	800b096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4413      	add	r3, r2
 800397e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003982:	461a      	mov	r2, r3
 8003984:	2301      	movs	r3, #1
 8003986:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	440b      	add	r3, r1
 8003996:	335d      	adds	r3, #93	; 0x5d
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
}
 800399c:	e236      	b.n	8003e0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d12b      	bne.n	8003a0c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c0:	461a      	mov	r2, r3
 80039c2:	2308      	movs	r3, #8
 80039c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	0151      	lsls	r1, r2, #5
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	440a      	add	r2, r1
 80039dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f007 fb50 	bl	800b096 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	335d      	adds	r3, #93	; 0x5d
 8003a06:	2205      	movs	r2, #5
 8003a08:	701a      	strb	r2, [r3, #0]
}
 8003a0a:	e1ff      	b.n	8003e0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d155      	bne.n	8003ace <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	440b      	add	r3, r1
 8003a30:	3358      	adds	r3, #88	; 0x58
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	440b      	add	r3, r1
 8003a44:	335d      	adds	r3, #93	; 0x5d
 8003a46:	2203      	movs	r2, #3
 8003a48:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	440b      	add	r3, r1
 8003a58:	333d      	adds	r3, #61	; 0x3d
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d114      	bne.n	8003a8a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	333c      	adds	r3, #60	; 0x3c
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	440b      	add	r3, r1
 8003a84:	333d      	adds	r3, #61	; 0x3d
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	0151      	lsls	r1, r2, #5
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	440a      	add	r2, r1
 8003aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aa4:	f043 0302 	orr.w	r3, r3, #2
 8003aa8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f007 faee 	bl	800b096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2310      	movs	r3, #16
 8003aca:	6093      	str	r3, [r2, #8]
}
 8003acc:	e19e      	b.n	8003e0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae0:	2b80      	cmp	r3, #128	; 0x80
 8003ae2:	d12b      	bne.n	8003b3c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003afe:	f043 0302 	orr.w	r3, r3, #2
 8003b02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f007 fac1 	bl	800b096 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	440b      	add	r3, r1
 8003b22:	335d      	adds	r3, #93	; 0x5d
 8003b24:	2206      	movs	r2, #6
 8003b26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b34:	461a      	mov	r2, r3
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	6093      	str	r3, [r2, #8]
}
 8003b3a:	e167      	b.n	8003e0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b52:	d135      	bne.n	8003bc0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b6e:	f043 0302 	orr.w	r3, r3, #2
 8003b72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f007 fa89 	bl	800b096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	461a      	mov	r2, r3
 8003b92:	2310      	movs	r3, #16
 8003b94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	440b      	add	r3, r1
 8003bb8:	335d      	adds	r3, #93	; 0x5d
 8003bba:	2208      	movs	r2, #8
 8003bbc:	701a      	strb	r2, [r3, #0]
}
 8003bbe:	e125      	b.n	8003e0c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	f040 811a 	bne.w	8003e0c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	0151      	lsls	r1, r2, #5
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	440a      	add	r2, r1
 8003bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf2:	f023 0302 	bic.w	r3, r3, #2
 8003bf6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	440b      	add	r3, r1
 8003c06:	335d      	adds	r3, #93	; 0x5d
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d137      	bne.n	8003c7e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	440b      	add	r3, r1
 8003c1c:	335c      	adds	r3, #92	; 0x5c
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	440b      	add	r3, r1
 8003c30:	333f      	adds	r3, #63	; 0x3f
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d00b      	beq.n	8003c50 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	440b      	add	r3, r1
 8003c46:	333f      	adds	r3, #63	; 0x3f
 8003c48:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	f040 80c5 	bne.w	8003dda <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3351      	adds	r3, #81	; 0x51
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	f083 0301 	eor.w	r3, r3, #1
 8003c66:	b2d8      	uxtb	r0, r3
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	440b      	add	r3, r1
 8003c76:	3351      	adds	r3, #81	; 0x51
 8003c78:	4602      	mov	r2, r0
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	e0ad      	b.n	8003dda <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	440b      	add	r3, r1
 8003c8c:	335d      	adds	r3, #93	; 0x5d
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d10a      	bne.n	8003caa <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	440b      	add	r3, r1
 8003ca2:	335c      	adds	r3, #92	; 0x5c
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	e097      	b.n	8003dda <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	440b      	add	r3, r1
 8003cb8:	335d      	adds	r3, #93	; 0x5d
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d10a      	bne.n	8003cd6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	440b      	add	r3, r1
 8003cce:	335c      	adds	r3, #92	; 0x5c
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	e081      	b.n	8003dda <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	440b      	add	r3, r1
 8003ce4:	335d      	adds	r3, #93	; 0x5d
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	d10a      	bne.n	8003d02 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	440b      	add	r3, r1
 8003cfa:	335c      	adds	r3, #92	; 0x5c
 8003cfc:	2205      	movs	r2, #5
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e06b      	b.n	8003dda <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	440b      	add	r3, r1
 8003d10:	335d      	adds	r3, #93	; 0x5d
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b06      	cmp	r3, #6
 8003d16:	d00a      	beq.n	8003d2e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	440b      	add	r3, r1
 8003d26:	335d      	adds	r3, #93	; 0x5d
 8003d28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d155      	bne.n	8003dda <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3358      	adds	r3, #88	; 0x58
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	1c59      	adds	r1, r3, #1
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4403      	add	r3, r0
 8003d50:	3358      	adds	r3, #88	; 0x58
 8003d52:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	440b      	add	r3, r1
 8003d62:	3358      	adds	r3, #88	; 0x58
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d914      	bls.n	8003d94 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	440b      	add	r3, r1
 8003d78:	3358      	adds	r3, #88	; 0x58
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	440b      	add	r3, r1
 8003d8c:	335c      	adds	r3, #92	; 0x5c
 8003d8e:	2204      	movs	r2, #4
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e009      	b.n	8003da8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	440b      	add	r3, r1
 8003da2:	335c      	adds	r3, #92	; 0x5c
 8003da4:	2202      	movs	r2, #2
 8003da6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dbe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dc6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de6:	461a      	mov	r2, r3
 8003de8:	2302      	movs	r3, #2
 8003dea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	b2d8      	uxtb	r0, r3
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	440b      	add	r3, r1
 8003dfe:	335c      	adds	r3, #92	; 0x5c
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	4601      	mov	r1, r0
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f014 feca 	bl	8018ba0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e0c:	bf00      	nop
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	; 0x28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	0c5b      	lsrs	r3, r3, #17
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e48:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d003      	beq.n	8003e58 <HCD_RXQLVL_IRQHandler+0x44>
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	f000 8082 	beq.w	8003f5a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e56:	e083      	b.n	8003f60 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d07f      	beq.n	8003f5e <HCD_RXQLVL_IRQHandler+0x14a>
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3344      	adds	r3, #68	; 0x44
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d074      	beq.n	8003f5e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	440b      	add	r3, r1
 8003e86:	3344      	adds	r3, #68	; 0x44
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	b292      	uxth	r2, r2
 8003e8e:	4619      	mov	r1, r3
 8003e90:	f006 fcad 	bl	800a7ee <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3344      	adds	r3, #68	; 0x44
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	18d1      	adds	r1, r2, r3
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4403      	add	r3, r0
 8003eb8:	3344      	adds	r3, #68	; 0x44
 8003eba:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	440b      	add	r3, r1
 8003eca:	334c      	adds	r3, #76	; 0x4c
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	18d1      	adds	r1, r2, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4403      	add	r3, r0
 8003ee0:	334c      	adds	r3, #76	; 0x4c
 8003ee2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <HCD_RXQLVL_IRQHandler+0x154>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d031      	beq.n	8003f5e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f10:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f18:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f26:	461a      	mov	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	440b      	add	r3, r1
 8003f3a:	3350      	adds	r3, #80	; 0x50
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	f083 0301 	eor.w	r3, r3, #1
 8003f42:	b2d8      	uxtb	r0, r3
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	3350      	adds	r3, #80	; 0x50
 8003f54:	4602      	mov	r2, r0
 8003f56:	701a      	strb	r2, [r3, #0]
      break;
 8003f58:	e001      	b.n	8003f5e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003f5e:	bf00      	nop
  }
}
 8003f60:	bf00      	nop
 8003f62:	3728      	adds	r7, #40	; 0x28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	1ff80000 	.word	0x1ff80000

08003f6c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f98:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d113      	bne.n	8003fcc <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d10a      	bne.n	8003fc4 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699a      	ldr	r2, [r3, #24]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003fbc:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f014 fdd2 	bl	8018b68 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f043 0302 	orr.w	r3, r3, #2
 8003fca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d147      	bne.n	8004066 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f043 0308 	orr.w	r3, r3, #8
 8003fdc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d129      	bne.n	800403c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d113      	bne.n	8004018 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003ff6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ffa:	d106      	bne.n	800400a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2102      	movs	r1, #2
 8004002:	4618      	mov	r0, r3
 8004004:	f006 fd22 	bl	800aa4c <USB_InitFSLSPClkSel>
 8004008:	e011      	b.n	800402e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f006 fd1b 	bl	800aa4c <USB_InitFSLSPClkSel>
 8004016:	e00a      	b.n	800402e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b03      	cmp	r3, #3
 800401e:	d106      	bne.n	800402e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004026:	461a      	mov	r2, r3
 8004028:	f64e 2360 	movw	r3, #60000	; 0xea60
 800402c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f014 fdc8 	bl	8018bc4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f014 fd97 	bl	8018b68 <HAL_HCD_Connect_Callback>
 800403a:	e014      	b.n	8004066 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f014 fdcf 	bl	8018be0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004050:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004054:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004064:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b20      	cmp	r3, #32
 800406e:	d103      	bne.n	8004078 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f043 0320 	orr.w	r3, r3, #32
 8004076:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800407e:	461a      	mov	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6013      	str	r3, [r2, #0]
}
 8004084:	bf00      	nop
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e07f      	b.n	800419e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f013 fec8 	bl	8017e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2224      	movs	r2, #36	; 0x24
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0201 	bic.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d107      	bne.n	8004106 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	e006      	b.n	8004114 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004112:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d104      	bne.n	8004126 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004124:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_I2C_Init+0x11c>)
 8004132:	430b      	orrs	r3, r1
 8004134:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004144:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	ea42 0103 	orr.w	r1, r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	021a      	lsls	r2, r3, #8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69d9      	ldr	r1, [r3, #28]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1a      	ldr	r2, [r3, #32]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	02008000 	.word	0x02008000

080041ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d138      	bne.n	8004234 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e032      	b.n	8004236 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2224      	movs	r2, #36	; 0x24
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0201 	bic.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6819      	ldr	r1, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	e000      	b.n	8004236 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004234:	2302      	movs	r3, #2
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b20      	cmp	r3, #32
 8004256:	d139      	bne.n	80042cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004262:	2302      	movs	r3, #2
 8004264:	e033      	b.n	80042ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2224      	movs	r2, #36	; 0x24
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004294:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e000      	b.n	80042ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
  }
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e0bf      	b.n	800446e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f010 fd00 	bl	8014d08 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800431e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6999      	ldr	r1, [r3, #24]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004334:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6899      	ldr	r1, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b4a      	ldr	r3, [pc, #296]	; (8004478 <HAL_LTDC_Init+0x19c>)
 8004350:	400b      	ands	r3, r1
 8004352:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68d9      	ldr	r1, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <HAL_LTDC_Init+0x19c>)
 800437e:	400b      	ands	r3, r1
 8004380:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	041b      	lsls	r3, r3, #16
 8004388:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68d9      	ldr	r1, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1a      	ldr	r2, [r3, #32]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6919      	ldr	r1, [r3, #16]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b33      	ldr	r3, [pc, #204]	; (8004478 <HAL_LTDC_Init+0x19c>)
 80043ac:	400b      	ands	r3, r1
 80043ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6919      	ldr	r1, [r3, #16]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6959      	ldr	r1, [r3, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b27      	ldr	r3, [pc, #156]	; (8004478 <HAL_LTDC_Init+0x19c>)
 80043da:	400b      	ands	r3, r1
 80043dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6959      	ldr	r1, [r3, #20]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800441e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0206 	orr.w	r2, r2, #6
 800444a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	f000f800 	.word	0xf000f800

0800447c <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f010 fd07 	bl	8014e98 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d023      	beq.n	8004516 <HAL_LTDC_IRQHandler+0x6a>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01e      	beq.n	8004516 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0204 	bic.w	r2, r2, #4
 80044e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2204      	movs	r2, #4
 80044ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2204      	movs	r2, #4
 8004504:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f86f 	bl	80045f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d023      	beq.n	8004568 <HAL_LTDC_IRQHandler+0xbc>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01e      	beq.n	8004568 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0202 	bic.w	r2, r2, #2
 8004538:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2202      	movs	r2, #2
 8004540:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004548:	f043 0202 	orr.w	r2, r3, #2
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2204      	movs	r2, #4
 8004556:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f846 	bl	80045f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01b      	beq.n	80045aa <HAL_LTDC_IRQHandler+0xfe>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d016      	beq.n	80045aa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2201      	movs	r2, #1
 8004592:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f011 fca7 	bl	8015ef8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <HAL_LTDC_IRQHandler+0x140>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d016      	beq.n	80045ec <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0208 	bic.w	r2, r2, #8
 80045cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2208      	movs	r2, #8
 80045d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f80e 	bl	8004608 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800461c:	b5b0      	push	{r4, r5, r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_LTDC_ConfigLayer+0x1a>
 8004632:	2302      	movs	r3, #2
 8004634:	e02c      	b.n	8004690 <HAL_LTDC_ConfigLayer+0x74>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2134      	movs	r1, #52	; 0x34
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	4413      	add	r3, r2
 8004652:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4614      	mov	r4, r2
 800465a:	461d      	mov	r5, r3
 800465c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800465e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f8cf 	bl	8004814 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2201      	movs	r2, #1
 800467c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bdb0      	pop	{r4, r5, r7, pc}

08004698 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 8004698:	b480      	push	{r7}
 800469a:	b089      	sub	sp, #36	; 0x24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_LTDC_SetPitch+0x1a>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e06e      	b.n	8004790 <HAL_LTDC_SetPitch+0xf8>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2134      	movs	r1, #52	; 0x34
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	3348      	adds	r3, #72	; 0x48
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d102      	bne.n	80046e0 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 80046da:	2304      	movs	r3, #4
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	e016      	b.n	800470e <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d102      	bne.n	80046ec <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 80046e6:	2303      	movs	r3, #3
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e010      	b.n	800470e <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d008      	beq.n	8004704 <HAL_LTDC_SetPitch+0x6c>
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d005      	beq.n	8004704 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d002      	beq.n	8004704 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b07      	cmp	r3, #7
 8004702:	d102      	bne.n	800470a <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8004704:	2302      	movs	r3, #2
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	e001      	b.n	800470e <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 800470a:	2301      	movs	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	fb02 f303 	mul.w	r3, r2, r3
 8004716:	041b      	lsls	r3, r3, #16
 8004718:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	01db      	lsls	r3, r3, #7
 8004724:	4413      	add	r3, r2
 8004726:	3384      	adds	r3, #132	; 0x84
 8004728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4619      	mov	r1, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	01db      	lsls	r3, r3, #7
 8004734:	440b      	add	r3, r1
 8004736:	3384      	adds	r3, #132	; 0x84
 8004738:	4619      	mov	r1, r3
 800473a:	4b18      	ldr	r3, [pc, #96]	; (800479c <HAL_LTDC_SetPitch+0x104>)
 800473c:	4013      	ands	r3, r2
 800473e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8004740:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <HAL_LTDC_SetPitch+0x108>)
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	4a16      	ldr	r2, [pc, #88]	; (80047a0 <HAL_LTDC_SetPitch+0x108>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	01db      	lsls	r3, r3, #7
 8004756:	4413      	add	r3, r2
 8004758:	3384      	adds	r3, #132	; 0x84
 800475a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4619      	mov	r1, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	01db      	lsls	r3, r3, #7
 8004766:	440b      	add	r3, r1
 8004768:	3384      	adds	r3, #132	; 0x84
 800476a:	4619      	mov	r1, r3
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_LTDC_SetPitch+0x108>)
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <HAL_LTDC_SetPitch+0x108>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3724      	adds	r7, #36	; 0x24
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	e000ffff 	.word	0xe000ffff
 80047a0:	40016800 	.word	0x40016800

080047a4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_LTDC_ProgramLineEvent+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e023      	b.n	8004804 <HAL_LTDC_ProgramLineEvent+0x60>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80047dc:	4a0c      	ldr	r2, [pc, #48]	; (8004810 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	40016800 	.word	0x40016800

08004814 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004814:	b480      	push	{r7}
 8004816:	b089      	sub	sp, #36	; 0x24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	0c1b      	lsrs	r3, r3, #16
 800482c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004830:	4413      	add	r3, r2
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	01db      	lsls	r3, r3, #7
 8004840:	4413      	add	r3, r2
 8004842:	3384      	adds	r3, #132	; 0x84
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	6812      	ldr	r2, [r2, #0]
 800484a:	4611      	mov	r1, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	01d2      	lsls	r2, r2, #7
 8004850:	440a      	add	r2, r1
 8004852:	3284      	adds	r2, #132	; 0x84
 8004854:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004858:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	0c1b      	lsrs	r3, r3, #16
 8004866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486a:	4413      	add	r3, r2
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4619      	mov	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	01db      	lsls	r3, r3, #7
 8004878:	440b      	add	r3, r1
 800487a:	3384      	adds	r3, #132	; 0x84
 800487c:	4619      	mov	r1, r3
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004892:	4413      	add	r3, r2
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	01db      	lsls	r3, r3, #7
 80048a2:	4413      	add	r3, r2
 80048a4:	3384      	adds	r3, #132	; 0x84
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	4611      	mov	r1, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	01d2      	lsls	r2, r2, #7
 80048b2:	440a      	add	r2, r1
 80048b4:	3284      	adds	r2, #132	; 0x84
 80048b6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80048ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ca:	4413      	add	r3, r2
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4619      	mov	r1, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	01db      	lsls	r3, r3, #7
 80048d8:	440b      	add	r3, r1
 80048da:	3384      	adds	r3, #132	; 0x84
 80048dc:	4619      	mov	r1, r3
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	01db      	lsls	r3, r3, #7
 80048ee:	4413      	add	r3, r2
 80048f0:	3384      	adds	r3, #132	; 0x84
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	4611      	mov	r1, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	01d2      	lsls	r2, r2, #7
 80048fe:	440a      	add	r2, r1
 8004900:	3284      	adds	r2, #132	; 0x84
 8004902:	f023 0307 	bic.w	r3, r3, #7
 8004906:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	01db      	lsls	r3, r3, #7
 8004912:	4413      	add	r3, r2
 8004914:	3384      	adds	r3, #132	; 0x84
 8004916:	461a      	mov	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800492e:	041b      	lsls	r3, r3, #16
 8004930:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	061b      	lsls	r3, r3, #24
 8004938:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	01db      	lsls	r3, r3, #7
 8004944:	4413      	add	r3, r2
 8004946:	3384      	adds	r3, #132	; 0x84
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	01db      	lsls	r3, r3, #7
 8004954:	4413      	add	r3, r2
 8004956:	3384      	adds	r3, #132	; 0x84
 8004958:	461a      	mov	r2, r3
 800495a:	2300      	movs	r3, #0
 800495c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004964:	461a      	mov	r2, r3
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	431a      	orrs	r2, r3
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	431a      	orrs	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4619      	mov	r1, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	01db      	lsls	r3, r3, #7
 8004978:	440b      	add	r3, r1
 800497a:	3384      	adds	r3, #132	; 0x84
 800497c:	4619      	mov	r1, r3
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	01db      	lsls	r3, r3, #7
 800498e:	4413      	add	r3, r2
 8004990:	3384      	adds	r3, #132	; 0x84
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	4611      	mov	r1, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	01d2      	lsls	r2, r2, #7
 800499e:	440a      	add	r2, r1
 80049a0:	3284      	adds	r2, #132	; 0x84
 80049a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	01db      	lsls	r3, r3, #7
 80049b2:	4413      	add	r3, r2
 80049b4:	3384      	adds	r3, #132	; 0x84
 80049b6:	461a      	mov	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	01db      	lsls	r3, r3, #7
 80049c8:	4413      	add	r3, r2
 80049ca:	3384      	adds	r3, #132	; 0x84
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4619      	mov	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	01db      	lsls	r3, r3, #7
 80049d8:	440b      	add	r3, r1
 80049da:	3384      	adds	r3, #132	; 0x84
 80049dc:	4619      	mov	r1, r3
 80049de:	4b58      	ldr	r3, [pc, #352]	; (8004b40 <LTDC_SetConfig+0x32c>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	68f9      	ldr	r1, [r7, #12]
 80049ee:	6809      	ldr	r1, [r1, #0]
 80049f0:	4608      	mov	r0, r1
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	01c9      	lsls	r1, r1, #7
 80049f6:	4401      	add	r1, r0
 80049f8:	3184      	adds	r1, #132	; 0x84
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	01db      	lsls	r3, r3, #7
 8004a08:	4413      	add	r3, r2
 8004a0a:	3384      	adds	r3, #132	; 0x84
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	01db      	lsls	r3, r3, #7
 8004a18:	4413      	add	r3, r2
 8004a1a:	3384      	adds	r3, #132	; 0x84
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2300      	movs	r3, #0
 8004a20:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	01db      	lsls	r3, r3, #7
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3384      	adds	r3, #132	; 0x84
 8004a30:	461a      	mov	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004a40:	2304      	movs	r3, #4
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	e01b      	b.n	8004a7e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d102      	bne.n	8004a54 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	e014      	b.n	8004a7e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d00b      	beq.n	8004a74 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d007      	beq.n	8004a74 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d003      	beq.n	8004a74 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a70:	2b07      	cmp	r3, #7
 8004a72:	d102      	bne.n	8004a7a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004a74:	2302      	movs	r3, #2
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	e001      	b.n	8004a7e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	01db      	lsls	r3, r3, #7
 8004a88:	4413      	add	r3, r2
 8004a8a:	3384      	adds	r3, #132	; 0x84
 8004a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	4611      	mov	r1, r2
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	01d2      	lsls	r2, r2, #7
 8004a98:	440a      	add	r2, r1
 8004a9a:	3284      	adds	r2, #132	; 0x84
 8004a9c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	fb02 f303 	mul.w	r3, r2, r3
 8004aac:	041a      	lsls	r2, r3, #16
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6859      	ldr	r1, [r3, #4]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	1acb      	subs	r3, r1, r3
 8004ab8:	69f9      	ldr	r1, [r7, #28]
 8004aba:	fb01 f303 	mul.w	r3, r1, r3
 8004abe:	3303      	adds	r3, #3
 8004ac0:	68f9      	ldr	r1, [r7, #12]
 8004ac2:	6809      	ldr	r1, [r1, #0]
 8004ac4:	4608      	mov	r0, r1
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	01c9      	lsls	r1, r1, #7
 8004aca:	4401      	add	r1, r0
 8004acc:	3184      	adds	r1, #132	; 0x84
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	01db      	lsls	r3, r3, #7
 8004adc:	4413      	add	r3, r2
 8004ade:	3384      	adds	r3, #132	; 0x84
 8004ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	01db      	lsls	r3, r3, #7
 8004aec:	440b      	add	r3, r1
 8004aee:	3384      	adds	r3, #132	; 0x84
 8004af0:	4619      	mov	r1, r3
 8004af2:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <LTDC_SetConfig+0x330>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	01db      	lsls	r3, r3, #7
 8004b02:	4413      	add	r3, r2
 8004b04:	3384      	adds	r3, #132	; 0x84
 8004b06:	461a      	mov	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	01db      	lsls	r3, r3, #7
 8004b18:	4413      	add	r3, r2
 8004b1a:	3384      	adds	r3, #132	; 0x84
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	4611      	mov	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	01d2      	lsls	r2, r2, #7
 8004b28:	440a      	add	r2, r1
 8004b2a:	3284      	adds	r2, #132	; 0x84
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	6013      	str	r3, [r2, #0]
}
 8004b32:	bf00      	nop
 8004b34:	3724      	adds	r7, #36	; 0x24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	fffff8f8 	.word	0xfffff8f8
 8004b44:	fffff800 	.word	0xfffff800

08004b48 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b56:	6013      	str	r3, [r2, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40007000 	.word	0x40007000

08004b68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b72:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	4a22      	ldr	r2, [pc, #136]	; (8004c00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b8a:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b94:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b96:	f7fb fd2d 	bl	80005f4 <HAL_GetTick>
 8004b9a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b9c:	e009      	b.n	8004bb2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b9e:	f7fb fd29 	bl	80005f4 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bac:	d901      	bls.n	8004bb2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e022      	b.n	8004bf8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bb2:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbe:	d1ee      	bne.n	8004b9e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bc0:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a0f      	ldr	r2, [pc, #60]	; (8004c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bcc:	f7fb fd12 	bl	80005f4 <HAL_GetTick>
 8004bd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bd2:	e009      	b.n	8004be8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bd4:	f7fb fd0e 	bl	80005f4 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004be2:	d901      	bls.n	8004be8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e007      	b.n	8004bf8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bf4:	d1ee      	bne.n	8004bd4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40007000 	.word	0x40007000

08004c08 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004c14:	f7fb fcee 	bl	80005f4 <HAL_GetTick>
 8004c18:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e073      	b.n	8004d0c <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_QSPI_Init+0x2c>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e06b      	b.n	8004d0c <HAL_QSPI_Init+0x104>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f013 f971 	bl	8017f38 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8004c56:	f241 3188 	movw	r1, #5000	; 0x1388
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f85e 	bl	8004d1c <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	021a      	lsls	r2, r3, #8
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2200      	movs	r2, #0
 8004c84:	2120      	movs	r1, #32
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f856 	bl	8004d38 <QSPI_WaitFlagStateUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d135      	bne.n	8004d02 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4b1d      	ldr	r3, [pc, #116]	; (8004d14 <HAL_QSPI_Init+0x10c>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6852      	ldr	r2, [r2, #4]
 8004ca4:	0611      	lsls	r1, r2, #24
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68d2      	ldr	r2, [r2, #12]
 8004caa:	4311      	orrs	r1, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	69d2      	ldr	r2, [r2, #28]
 8004cb0:	4311      	orrs	r1, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6a12      	ldr	r2, [r2, #32]
 8004cb6:	4311      	orrs	r1, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6812      	ldr	r2, [r2, #0]
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <HAL_QSPI_Init+0x110>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6912      	ldr	r2, [r2, #16]
 8004cce:	0411      	lsls	r1, r2, #16
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6952      	ldr	r2, [r2, #20]
 8004cd4:	4311      	orrs	r1, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6992      	ldr	r2, [r2, #24]
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	00ffff2f 	.word	0x00ffff2f
 8004d18:	ffe0f8fe 	.word	0xffe0f8fe

08004d1c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004d48:	e01a      	b.n	8004d80 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d016      	beq.n	8004d80 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004d58:	f7fb fc4c 	bl	80005f4 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d20b      	bcs.n	8004d80 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d74:	f043 0201 	orr.w	r2, r3, #1
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e00e      	b.n	8004d9e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf14      	ite	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	2300      	moveq	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d1d6      	bne.n	8004d4a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004db0:	2300      	movs	r3, #0
 8004db2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e25c      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 8087 	beq.w	8004eda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dcc:	4b96      	ldr	r3, [pc, #600]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 030c 	and.w	r3, r3, #12
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d00c      	beq.n	8004df2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dd8:	4b93      	ldr	r3, [pc, #588]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 030c 	and.w	r3, r3, #12
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d112      	bne.n	8004e0a <HAL_RCC_OscConfig+0x62>
 8004de4:	4b90      	ldr	r3, [pc, #576]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df0:	d10b      	bne.n	8004e0a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df2:	4b8d      	ldr	r3, [pc, #564]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d06c      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x130>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d168      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e236      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e12:	d106      	bne.n	8004e22 <HAL_RCC_OscConfig+0x7a>
 8004e14:	4b84      	ldr	r3, [pc, #528]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a83      	ldr	r2, [pc, #524]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	e02e      	b.n	8004e80 <HAL_RCC_OscConfig+0xd8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x9c>
 8004e2a:	4b7f      	ldr	r3, [pc, #508]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a7e      	ldr	r2, [pc, #504]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	4b7c      	ldr	r3, [pc, #496]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a7b      	ldr	r2, [pc, #492]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	e01d      	b.n	8004e80 <HAL_RCC_OscConfig+0xd8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCC_OscConfig+0xc0>
 8004e4e:	4b76      	ldr	r3, [pc, #472]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a75      	ldr	r2, [pc, #468]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	4b73      	ldr	r3, [pc, #460]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a72      	ldr	r2, [pc, #456]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	e00b      	b.n	8004e80 <HAL_RCC_OscConfig+0xd8>
 8004e68:	4b6f      	ldr	r3, [pc, #444]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a6e      	ldr	r2, [pc, #440]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	4b6c      	ldr	r3, [pc, #432]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a6b      	ldr	r2, [pc, #428]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d013      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fb fbb4 	bl	80005f4 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e90:	f7fb fbb0 	bl	80005f4 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b64      	cmp	r3, #100	; 0x64
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e1ea      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea2:	4b61      	ldr	r3, [pc, #388]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCC_OscConfig+0xe8>
 8004eae:	e014      	b.n	8004eda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fb fba0 	bl	80005f4 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eb8:	f7fb fb9c 	bl	80005f4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b64      	cmp	r3, #100	; 0x64
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e1d6      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eca:	4b57      	ldr	r3, [pc, #348]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x110>
 8004ed6:	e000      	b.n	8004eda <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d069      	beq.n	8004fba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ee6:	4b50      	ldr	r3, [pc, #320]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 030c 	and.w	r3, r3, #12
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00b      	beq.n	8004f0a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ef2:	4b4d      	ldr	r3, [pc, #308]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d11c      	bne.n	8004f38 <HAL_RCC_OscConfig+0x190>
 8004efe:	4b4a      	ldr	r3, [pc, #296]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d116      	bne.n	8004f38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f0a:	4b47      	ldr	r3, [pc, #284]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <HAL_RCC_OscConfig+0x17a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d001      	beq.n	8004f22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e1aa      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f22:	4b41      	ldr	r3, [pc, #260]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	493d      	ldr	r1, [pc, #244]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f36:	e040      	b.n	8004fba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d023      	beq.n	8004f88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f40:	4b39      	ldr	r3, [pc, #228]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a38      	ldr	r2, [pc, #224]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7fb fb52 	bl	80005f4 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f54:	f7fb fb4e 	bl	80005f4 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e188      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f66:	4b30      	ldr	r3, [pc, #192]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f0      	beq.n	8004f54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f72:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4929      	ldr	r1, [pc, #164]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]
 8004f86:	e018      	b.n	8004fba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f88:	4b27      	ldr	r3, [pc, #156]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a26      	ldr	r2, [pc, #152]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fb fb2e 	bl	80005f4 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f9c:	f7fb fb2a 	bl	80005f4 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e164      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fae:	4b1e      	ldr	r3, [pc, #120]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d038      	beq.n	8005038 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d019      	beq.n	8005002 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fce:	4b16      	ldr	r3, [pc, #88]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd2:	4a15      	ldr	r2, [pc, #84]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fda:	f7fb fb0b 	bl	80005f4 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe2:	f7fb fb07 	bl	80005f4 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e141      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8004ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x23a>
 8005000:	e01a      	b.n	8005038 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005002:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8005004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005006:	4a08      	ldr	r2, [pc, #32]	; (8005028 <HAL_RCC_OscConfig+0x280>)
 8005008:	f023 0301 	bic.w	r3, r3, #1
 800500c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500e:	f7fb faf1 	bl	80005f4 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005014:	e00a      	b.n	800502c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005016:	f7fb faed 	bl	80005f4 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d903      	bls.n	800502c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e127      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
 8005028:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800502c:	4b94      	ldr	r3, [pc, #592]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 800502e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1ee      	bne.n	8005016 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80a4 	beq.w	800518e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005046:	4b8e      	ldr	r3, [pc, #568]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10d      	bne.n	800506e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005052:	4b8b      	ldr	r3, [pc, #556]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	4a8a      	ldr	r2, [pc, #552]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505c:	6413      	str	r3, [r2, #64]	; 0x40
 800505e:	4b88      	ldr	r3, [pc, #544]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800506a:	2301      	movs	r3, #1
 800506c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800506e:	4b85      	ldr	r3, [pc, #532]	; (8005284 <HAL_RCC_OscConfig+0x4dc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005076:	2b00      	cmp	r3, #0
 8005078:	d118      	bne.n	80050ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800507a:	4b82      	ldr	r3, [pc, #520]	; (8005284 <HAL_RCC_OscConfig+0x4dc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a81      	ldr	r2, [pc, #516]	; (8005284 <HAL_RCC_OscConfig+0x4dc>)
 8005080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005086:	f7fb fab5 	bl	80005f4 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800508e:	f7fb fab1 	bl	80005f4 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b64      	cmp	r3, #100	; 0x64
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e0eb      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a0:	4b78      	ldr	r3, [pc, #480]	; (8005284 <HAL_RCC_OscConfig+0x4dc>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d106      	bne.n	80050c2 <HAL_RCC_OscConfig+0x31a>
 80050b4:	4b72      	ldr	r3, [pc, #456]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b8:	4a71      	ldr	r2, [pc, #452]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	6713      	str	r3, [r2, #112]	; 0x70
 80050c0:	e02d      	b.n	800511e <HAL_RCC_OscConfig+0x376>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10c      	bne.n	80050e4 <HAL_RCC_OscConfig+0x33c>
 80050ca:	4b6d      	ldr	r3, [pc, #436]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ce:	4a6c      	ldr	r2, [pc, #432]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	6713      	str	r3, [r2, #112]	; 0x70
 80050d6:	4b6a      	ldr	r3, [pc, #424]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	4a69      	ldr	r2, [pc, #420]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80050dc:	f023 0304 	bic.w	r3, r3, #4
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
 80050e2:	e01c      	b.n	800511e <HAL_RCC_OscConfig+0x376>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b05      	cmp	r3, #5
 80050ea:	d10c      	bne.n	8005106 <HAL_RCC_OscConfig+0x35e>
 80050ec:	4b64      	ldr	r3, [pc, #400]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	4a63      	ldr	r2, [pc, #396]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80050f2:	f043 0304 	orr.w	r3, r3, #4
 80050f6:	6713      	str	r3, [r2, #112]	; 0x70
 80050f8:	4b61      	ldr	r3, [pc, #388]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80050fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fc:	4a60      	ldr	r2, [pc, #384]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	6713      	str	r3, [r2, #112]	; 0x70
 8005104:	e00b      	b.n	800511e <HAL_RCC_OscConfig+0x376>
 8005106:	4b5e      	ldr	r3, [pc, #376]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	4a5d      	ldr	r2, [pc, #372]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	6713      	str	r3, [r2, #112]	; 0x70
 8005112:	4b5b      	ldr	r3, [pc, #364]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a5a      	ldr	r2, [pc, #360]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005118:	f023 0304 	bic.w	r3, r3, #4
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d015      	beq.n	8005152 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005126:	f7fb fa65 	bl	80005f4 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512c:	e00a      	b.n	8005144 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512e:	f7fb fa61 	bl	80005f4 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	f241 3288 	movw	r2, #5000	; 0x1388
 800513c:	4293      	cmp	r3, r2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e099      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005144:	4b4e      	ldr	r3, [pc, #312]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0ee      	beq.n	800512e <HAL_RCC_OscConfig+0x386>
 8005150:	e014      	b.n	800517c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005152:	f7fb fa4f 	bl	80005f4 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005158:	e00a      	b.n	8005170 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800515a:	f7fb fa4b 	bl	80005f4 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	f241 3288 	movw	r2, #5000	; 0x1388
 8005168:	4293      	cmp	r3, r2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e083      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005170:	4b43      	ldr	r3, [pc, #268]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1ee      	bne.n	800515a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d105      	bne.n	800518e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005182:	4b3f      	ldr	r3, [pc, #252]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	4a3e      	ldr	r2, [pc, #248]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800518c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d06f      	beq.n	8005276 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005196:	4b3a      	ldr	r3, [pc, #232]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 030c 	and.w	r3, r3, #12
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d067      	beq.n	8005272 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d149      	bne.n	800523e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051aa:	4b35      	ldr	r3, [pc, #212]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a34      	ldr	r2, [pc, #208]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80051b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b6:	f7fb fa1d 	bl	80005f4 <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051be:	f7fb fa19 	bl	80005f4 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e053      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d0:	4b2b      	ldr	r3, [pc, #172]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f0      	bne.n	80051be <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	019b      	lsls	r3, r3, #6
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	3b01      	subs	r3, #1
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	061b      	lsls	r3, r3, #24
 8005200:	4313      	orrs	r3, r2
 8005202:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005204:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005208:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800520a:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005210:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005216:	f7fb f9ed 	bl	80005f4 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521e:	f7fb f9e9 	bl	80005f4 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e023      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005230:	4b13      	ldr	r3, [pc, #76]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0f0      	beq.n	800521e <HAL_RCC_OscConfig+0x476>
 800523c:	e01b      	b.n	8005276 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523e:	4b10      	ldr	r3, [pc, #64]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a0f      	ldr	r2, [pc, #60]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524a:	f7fb f9d3 	bl	80005f4 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005252:	f7fb f9cf 	bl	80005f4 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e009      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <HAL_RCC_OscConfig+0x4d8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f0      	bne.n	8005252 <HAL_RCC_OscConfig+0x4aa>
 8005270:	e001      	b.n	8005276 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40023800 	.word	0x40023800
 8005284:	40007000 	.word	0x40007000

08005288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0ce      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052a0:	4b69      	ldr	r3, [pc, #420]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d910      	bls.n	80052d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ae:	4b66      	ldr	r3, [pc, #408]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f023 020f 	bic.w	r2, r3, #15
 80052b6:	4964      	ldr	r1, [pc, #400]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052be:	4b62      	ldr	r3, [pc, #392]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0b6      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d020      	beq.n	800531e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052e8:	4b58      	ldr	r3, [pc, #352]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	4a57      	ldr	r2, [pc, #348]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80052ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005300:	4b52      	ldr	r3, [pc, #328]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	4a51      	ldr	r2, [pc, #324]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005306:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800530a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800530c:	4b4f      	ldr	r3, [pc, #316]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	494c      	ldr	r1, [pc, #304]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	4313      	orrs	r3, r2
 800531c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d040      	beq.n	80053ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d107      	bne.n	8005342 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005332:	4b46      	ldr	r3, [pc, #280]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d115      	bne.n	800536a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e07d      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d107      	bne.n	800535a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800534a:	4b40      	ldr	r3, [pc, #256]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e071      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535a:	4b3c      	ldr	r3, [pc, #240]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e069      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800536a:	4b38      	ldr	r3, [pc, #224]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f023 0203 	bic.w	r2, r3, #3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4935      	ldr	r1, [pc, #212]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005378:	4313      	orrs	r3, r2
 800537a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800537c:	f7fb f93a 	bl	80005f4 <HAL_GetTick>
 8005380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005382:	e00a      	b.n	800539a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005384:	f7fb f936 	bl	80005f4 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e051      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	4b2c      	ldr	r3, [pc, #176]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 020c 	and.w	r2, r3, #12
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d1eb      	bne.n	8005384 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053ac:	4b26      	ldr	r3, [pc, #152]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d210      	bcs.n	80053dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ba:	4b23      	ldr	r3, [pc, #140]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f023 020f 	bic.w	r2, r3, #15
 80053c2:	4921      	ldr	r1, [pc, #132]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ca:	4b1f      	ldr	r3, [pc, #124]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d001      	beq.n	80053dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e030      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e8:	4b18      	ldr	r3, [pc, #96]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4915      	ldr	r1, [pc, #84]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005406:	4b11      	ldr	r3, [pc, #68]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	490d      	ldr	r1, [pc, #52]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005416:	4313      	orrs	r3, r2
 8005418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800541a:	f000 f81d 	bl	8005458 <HAL_RCC_GetSysClockFreq>
 800541e:	4601      	mov	r1, r0
 8005420:	4b0a      	ldr	r3, [pc, #40]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	091b      	lsrs	r3, r3, #4
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	4a09      	ldr	r2, [pc, #36]	; (8005450 <HAL_RCC_ClockConfig+0x1c8>)
 800542c:	5cd3      	ldrb	r3, [r2, r3]
 800542e:	fa21 f303 	lsr.w	r3, r1, r3
 8005432:	4a08      	ldr	r2, [pc, #32]	; (8005454 <HAL_RCC_ClockConfig+0x1cc>)
 8005434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005436:	2000      	movs	r0, #0
 8005438:	f013 f952 	bl	80186e0 <HAL_InitTick>

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40023c00 	.word	0x40023c00
 800544c:	40023800 	.word	0x40023800
 8005450:	08021de0 	.word	0x08021de0
 8005454:	2000003c 	.word	0x2000003c

08005458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	2300      	movs	r3, #0
 8005468:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800546e:	4b50      	ldr	r3, [pc, #320]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b04      	cmp	r3, #4
 8005478:	d007      	beq.n	800548a <HAL_RCC_GetSysClockFreq+0x32>
 800547a:	2b08      	cmp	r3, #8
 800547c:	d008      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x38>
 800547e:	2b00      	cmp	r3, #0
 8005480:	f040 808d 	bne.w	800559e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005484:	4b4b      	ldr	r3, [pc, #300]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005486:	60bb      	str	r3, [r7, #8]
       break;
 8005488:	e08c      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800548a:	4b4b      	ldr	r3, [pc, #300]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800548c:	60bb      	str	r3, [r7, #8]
      break;
 800548e:	e089      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005490:	4b47      	ldr	r3, [pc, #284]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005498:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800549a:	4b45      	ldr	r3, [pc, #276]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x158>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d023      	beq.n	80054ee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054a6:	4b42      	ldr	r3, [pc, #264]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	099b      	lsrs	r3, r3, #6
 80054ac:	f04f 0400 	mov.w	r4, #0
 80054b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	ea03 0501 	and.w	r5, r3, r1
 80054bc:	ea04 0602 	and.w	r6, r4, r2
 80054c0:	4a3d      	ldr	r2, [pc, #244]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80054c2:	fb02 f106 	mul.w	r1, r2, r6
 80054c6:	2200      	movs	r2, #0
 80054c8:	fb02 f205 	mul.w	r2, r2, r5
 80054cc:	440a      	add	r2, r1
 80054ce:	493a      	ldr	r1, [pc, #232]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80054d0:	fba5 0101 	umull	r0, r1, r5, r1
 80054d4:	1853      	adds	r3, r2, r1
 80054d6:	4619      	mov	r1, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f04f 0400 	mov.w	r4, #0
 80054de:	461a      	mov	r2, r3
 80054e0:	4623      	mov	r3, r4
 80054e2:	f7fa fee5 	bl	80002b0 <__aeabi_uldivmod>
 80054e6:	4603      	mov	r3, r0
 80054e8:	460c      	mov	r4, r1
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	e049      	b.n	8005582 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ee:	4b30      	ldr	r3, [pc, #192]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	099b      	lsrs	r3, r3, #6
 80054f4:	f04f 0400 	mov.w	r4, #0
 80054f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	ea03 0501 	and.w	r5, r3, r1
 8005504:	ea04 0602 	and.w	r6, r4, r2
 8005508:	4629      	mov	r1, r5
 800550a:	4632      	mov	r2, r6
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	f04f 0400 	mov.w	r4, #0
 8005514:	0154      	lsls	r4, r2, #5
 8005516:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800551a:	014b      	lsls	r3, r1, #5
 800551c:	4619      	mov	r1, r3
 800551e:	4622      	mov	r2, r4
 8005520:	1b49      	subs	r1, r1, r5
 8005522:	eb62 0206 	sbc.w	r2, r2, r6
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	f04f 0400 	mov.w	r4, #0
 800552e:	0194      	lsls	r4, r2, #6
 8005530:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005534:	018b      	lsls	r3, r1, #6
 8005536:	1a5b      	subs	r3, r3, r1
 8005538:	eb64 0402 	sbc.w	r4, r4, r2
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	00e2      	lsls	r2, r4, #3
 8005546:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800554a:	00d9      	lsls	r1, r3, #3
 800554c:	460b      	mov	r3, r1
 800554e:	4614      	mov	r4, r2
 8005550:	195b      	adds	r3, r3, r5
 8005552:	eb44 0406 	adc.w	r4, r4, r6
 8005556:	f04f 0100 	mov.w	r1, #0
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	02a2      	lsls	r2, r4, #10
 8005560:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005564:	0299      	lsls	r1, r3, #10
 8005566:	460b      	mov	r3, r1
 8005568:	4614      	mov	r4, r2
 800556a:	4618      	mov	r0, r3
 800556c:	4621      	mov	r1, r4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f04f 0400 	mov.w	r4, #0
 8005574:	461a      	mov	r2, r3
 8005576:	4623      	mov	r3, r4
 8005578:	f7fa fe9a 	bl	80002b0 <__aeabi_uldivmod>
 800557c:	4603      	mov	r3, r0
 800557e:	460c      	mov	r4, r1
 8005580:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005582:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	0c1b      	lsrs	r3, r3, #16
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	3301      	adds	r3, #1
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	fbb2 f3f3 	udiv	r3, r2, r3
 800559a:	60bb      	str	r3, [r7, #8]
      break;
 800559c:	e002      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800559e:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80055a0:	60bb      	str	r3, [r7, #8]
      break;
 80055a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055a4:	68bb      	ldr	r3, [r7, #8]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800
 80055b4:	00f42400 	.word	0x00f42400
 80055b8:	017d7840 	.word	0x017d7840

080055bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055c2:	681b      	ldr	r3, [r3, #0]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	2000003c 	.word	0x2000003c

080055d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055d8:	f7ff fff0 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 80055dc:	4601      	mov	r1, r0
 80055de:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	0a9b      	lsrs	r3, r3, #10
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	4a03      	ldr	r2, [pc, #12]	; (80055f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ea:	5cd3      	ldrb	r3, [r2, r3]
 80055ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40023800 	.word	0x40023800
 80055f8:	08021df0 	.word	0x08021df0

080055fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005600:	f7ff ffdc 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 8005604:	4601      	mov	r1, r0
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	0b5b      	lsrs	r3, r3, #13
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	4a03      	ldr	r2, [pc, #12]	; (8005620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005612:	5cd3      	ldrb	r3, [r2, r3]
 8005614:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005618:	4618      	mov	r0, r3
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40023800 	.word	0x40023800
 8005620:	08021df0 	.word	0x08021df0

08005624 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	220f      	movs	r2, #15
 8005632:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005634:	4b12      	ldr	r3, [pc, #72]	; (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 0203 	and.w	r2, r3, #3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005640:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800564c:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	08db      	lsrs	r3, r3, #3
 800565e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005666:	4b07      	ldr	r3, [pc, #28]	; (8005684 <HAL_RCC_GetClockConfig+0x60>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 020f 	and.w	r2, r3, #15
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	601a      	str	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40023800 	.word	0x40023800
 8005684:	40023c00 	.word	0x40023c00

08005688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d012      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056b0:	4b69      	ldr	r3, [pc, #420]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4a68      	ldr	r2, [pc, #416]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80056ba:	6093      	str	r3, [r2, #8]
 80056bc:	4b66      	ldr	r3, [pc, #408]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c4:	4964      	ldr	r1, [pc, #400]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80056d2:	2301      	movs	r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d017      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056e2:	4b5d      	ldr	r3, [pc, #372]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f0:	4959      	ldr	r1, [pc, #356]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005700:	d101      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005702:	2301      	movs	r3, #1
 8005704:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800570e:	2301      	movs	r3, #1
 8005710:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d017      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800571e:	4b4e      	ldr	r3, [pc, #312]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005724:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	494a      	ldr	r1, [pc, #296]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800573c:	d101      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800573e:	2301      	movs	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800574a:	2301      	movs	r3, #1
 800574c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800575a:	2301      	movs	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 808b 	beq.w	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800576c:	4b3a      	ldr	r3, [pc, #232]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	4a39      	ldr	r2, [pc, #228]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005776:	6413      	str	r3, [r2, #64]	; 0x40
 8005778:	4b37      	ldr	r3, [pc, #220]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005780:	60bb      	str	r3, [r7, #8]
 8005782:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005784:	4b35      	ldr	r3, [pc, #212]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a34      	ldr	r2, [pc, #208]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800578a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800578e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005790:	f7fa ff30 	bl	80005f4 <HAL_GetTick>
 8005794:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005798:	f7fa ff2c 	bl	80005f4 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e355      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80057aa:	4b2c      	ldr	r3, [pc, #176]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057b6:	4b28      	ldr	r3, [pc, #160]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d035      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d02e      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057d4:	4b20      	ldr	r3, [pc, #128]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057de:	4b1e      	ldr	r3, [pc, #120]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057ea:	4b1b      	ldr	r3, [pc, #108]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a1a      	ldr	r2, [pc, #104]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80057f6:	4a18      	ldr	r2, [pc, #96]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057fc:	4b16      	ldr	r3, [pc, #88]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d114      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fa fef4 	bl	80005f4 <HAL_GetTick>
 800580c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580e:	e00a      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005810:	f7fa fef0 	bl	80005f4 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e317      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0ee      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800583e:	d111      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800584e:	400b      	ands	r3, r1
 8005850:	4901      	ldr	r1, [pc, #4]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005852:	4313      	orrs	r3, r2
 8005854:	608b      	str	r3, [r1, #8]
 8005856:	e00b      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005858:	40023800 	.word	0x40023800
 800585c:	40007000 	.word	0x40007000
 8005860:	0ffffcff 	.word	0x0ffffcff
 8005864:	4bb0      	ldr	r3, [pc, #704]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4aaf      	ldr	r2, [pc, #700]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800586a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800586e:	6093      	str	r3, [r2, #8]
 8005870:	4bad      	ldr	r3, [pc, #692]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800587c:	49aa      	ldr	r1, [pc, #680]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800587e:	4313      	orrs	r3, r2
 8005880:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b00      	cmp	r3, #0
 800588c:	d010      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800588e:	4ba6      	ldr	r3, [pc, #664]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005894:	4aa4      	ldr	r2, [pc, #656]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800589a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800589e:	4ba2      	ldr	r3, [pc, #648]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	499f      	ldr	r1, [pc, #636]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058bc:	4b9a      	ldr	r3, [pc, #616]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ca:	4997      	ldr	r1, [pc, #604]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058de:	4b92      	ldr	r3, [pc, #584]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ec:	498e      	ldr	r1, [pc, #568]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005900:	4b89      	ldr	r3, [pc, #548]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800590e:	4986      	ldr	r1, [pc, #536]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005922:	4b81      	ldr	r3, [pc, #516]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	497d      	ldr	r1, [pc, #500]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005944:	4b78      	ldr	r3, [pc, #480]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594a:	f023 0203 	bic.w	r2, r3, #3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005952:	4975      	ldr	r1, [pc, #468]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005966:	4b70      	ldr	r3, [pc, #448]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596c:	f023 020c 	bic.w	r2, r3, #12
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005974:	496c      	ldr	r1, [pc, #432]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005988:	4b67      	ldr	r3, [pc, #412]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	4964      	ldr	r1, [pc, #400]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059aa:	4b5f      	ldr	r3, [pc, #380]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b8:	495b      	ldr	r1, [pc, #364]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059cc:	4b56      	ldr	r3, [pc, #344]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059da:	4953      	ldr	r1, [pc, #332]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80059ee:	4b4e      	ldr	r3, [pc, #312]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fc:	494a      	ldr	r1, [pc, #296]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005a10:	4b45      	ldr	r3, [pc, #276]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1e:	4942      	ldr	r1, [pc, #264]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005a32:	4b3d      	ldr	r3, [pc, #244]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a40:	4939      	ldr	r1, [pc, #228]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a54:	4b34      	ldr	r3, [pc, #208]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a62:	4931      	ldr	r1, [pc, #196]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d011      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a76:	4b2c      	ldr	r3, [pc, #176]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a84:	4928      	ldr	r1, [pc, #160]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a94:	d101      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005a96:	2301      	movs	r3, #1
 8005a98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ab6:	4b1c      	ldr	r3, [pc, #112]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac4:	4918      	ldr	r1, [pc, #96]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ad8:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae8:	490f      	ldr	r1, [pc, #60]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d005      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005afe:	f040 80d8 	bne.w	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b02:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a08      	ldr	r2, [pc, #32]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0e:	f7fa fd71 	bl	80005f4 <HAL_GetTick>
 8005b12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b14:	e00a      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b16:	f7fa fd6d 	bl	80005f4 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b64      	cmp	r3, #100	; 0x64
 8005b22:	d903      	bls.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e196      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005b28:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b2c:	4b6c      	ldr	r3, [pc, #432]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1ee      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d021      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d11d      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b4c:	4b64      	ldr	r3, [pc, #400]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b52:	0c1b      	lsrs	r3, r3, #16
 8005b54:	f003 0303 	and.w	r3, r3, #3
 8005b58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b5a:	4b61      	ldr	r3, [pc, #388]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b60:	0e1b      	lsrs	r3, r3, #24
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	019a      	lsls	r2, r3, #6
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	041b      	lsls	r3, r3, #16
 8005b72:	431a      	orrs	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	061b      	lsls	r3, r3, #24
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	071b      	lsls	r3, r3, #28
 8005b80:	4957      	ldr	r1, [pc, #348]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d02e      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bb2:	d129      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005bb4:	4b4a      	ldr	r3, [pc, #296]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bba:	0c1b      	lsrs	r3, r3, #16
 8005bbc:	f003 0303 	and.w	r3, r3, #3
 8005bc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc8:	0f1b      	lsrs	r3, r3, #28
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	019a      	lsls	r2, r3, #6
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	041b      	lsls	r3, r3, #16
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	061b      	lsls	r3, r3, #24
 8005be2:	431a      	orrs	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	071b      	lsls	r3, r3, #28
 8005be8:	493d      	ldr	r1, [pc, #244]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bf0:	4b3b      	ldr	r3, [pc, #236]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf6:	f023 021f 	bic.w	r2, r3, #31
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	4937      	ldr	r1, [pc, #220]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01d      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c14:	4b32      	ldr	r3, [pc, #200]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c1a:	0e1b      	lsrs	r3, r3, #24
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c22:	4b2f      	ldr	r3, [pc, #188]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c28:	0f1b      	lsrs	r3, r3, #28
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	019a      	lsls	r2, r3, #6
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	061b      	lsls	r3, r3, #24
 8005c42:	431a      	orrs	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	071b      	lsls	r3, r3, #28
 8005c48:	4925      	ldr	r1, [pc, #148]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d011      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	019a      	lsls	r2, r3, #6
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	041b      	lsls	r3, r3, #16
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	061b      	lsls	r3, r3, #24
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	071b      	lsls	r3, r3, #28
 8005c78:	4919      	ldr	r1, [pc, #100]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c80:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a16      	ldr	r2, [pc, #88]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c8c:	f7fa fcb2 	bl	80005f4 <HAL_GetTick>
 8005c90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c94:	f7fa fcae 	bl	80005f4 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b64      	cmp	r3, #100	; 0x64
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e0d7      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ca6:	4b0e      	ldr	r3, [pc, #56]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0f0      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	f040 80cd 	bne.w	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a08      	ldr	r2, [pc, #32]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc6:	f7fa fc95 	bl	80005f4 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ccc:	e00a      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cce:	f7fa fc91 	bl	80005f4 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b64      	cmp	r3, #100	; 0x64
 8005cda:	d903      	bls.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e0ba      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005ce0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ce4:	4b5e      	ldr	r3, [pc, #376]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf0:	d0ed      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d02e      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d12a      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d1a:	4b51      	ldr	r3, [pc, #324]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d28:	4b4d      	ldr	r3, [pc, #308]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2e:	0f1b      	lsrs	r3, r3, #28
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	019a      	lsls	r2, r3, #6
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	041b      	lsls	r3, r3, #16
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	061b      	lsls	r3, r3, #24
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	071b      	lsls	r3, r3, #28
 8005d4e:	4944      	ldr	r1, [pc, #272]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d56:	4b42      	ldr	r3, [pc, #264]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d64:	3b01      	subs	r3, #1
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	493d      	ldr	r1, [pc, #244]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d022      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d84:	d11d      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d86:	4b36      	ldr	r3, [pc, #216]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8c:	0e1b      	lsrs	r3, r3, #24
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d94:	4b32      	ldr	r3, [pc, #200]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	0f1b      	lsrs	r3, r3, #28
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	019a      	lsls	r2, r3, #6
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	041b      	lsls	r3, r3, #16
 8005dae:	431a      	orrs	r2, r3
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	061b      	lsls	r3, r3, #24
 8005db4:	431a      	orrs	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	071b      	lsls	r3, r3, #28
 8005dba:	4929      	ldr	r1, [pc, #164]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d028      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dce:	4b24      	ldr	r3, [pc, #144]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd4:	0e1b      	lsrs	r3, r3, #24
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ddc:	4b20      	ldr	r3, [pc, #128]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de2:	0c1b      	lsrs	r3, r3, #16
 8005de4:	f003 0303 	and.w	r3, r3, #3
 8005de8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	019a      	lsls	r2, r3, #6
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	041b      	lsls	r3, r3, #16
 8005df4:	431a      	orrs	r2, r3
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	061b      	lsls	r3, r3, #24
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	071b      	lsls	r3, r3, #28
 8005e02:	4917      	ldr	r1, [pc, #92]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e0a:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	4911      	ldr	r1, [pc, #68]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e20:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a0e      	ldr	r2, [pc, #56]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e2c:	f7fa fbe2 	bl	80005f4 <HAL_GetTick>
 8005e30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e34:	f7fa fbde 	bl	80005f4 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b64      	cmp	r3, #100	; 0x64
 8005e40:	d901      	bls.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e007      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e46:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e52:	d1ef      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40023800 	.word	0x40023800

08005e64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e82:	f040 8086 	bne.w	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005e86:	4b8d      	ldr	r3, [pc, #564]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e8c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e94:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e9c:	d03e      	beq.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8005e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ea2:	d073      	beq.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d000      	beq.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005ea8:	e074      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005eaa:	4b84      	ldr	r3, [pc, #528]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d108      	bne.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005eb6:	4b81      	ldr	r3, [pc, #516]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ebe:	4a80      	ldr	r2, [pc, #512]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	e007      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005ec8:	4b7c      	ldr	r3, [pc, #496]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ed0:	4a7c      	ldr	r2, [pc, #496]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005ed8:	4b78      	ldr	r3, [pc, #480]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	0e1b      	lsrs	r3, r3, #24
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005ee6:	4b75      	ldr	r3, [pc, #468]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eec:	099b      	lsrs	r3, r3, #6
 8005eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	fb02 f203 	mul.w	r2, r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005f00:	4b6e      	ldr	r3, [pc, #440]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f06:	0a1b      	lsrs	r3, r3, #8
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	617b      	str	r3, [r7, #20]
        break;
 8005f1a:	e03b      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005f1c:	4b67      	ldr	r3, [pc, #412]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d108      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f28:	4b64      	ldr	r3, [pc, #400]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f30:	4a63      	ldr	r2, [pc, #396]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	e007      	b.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005f3a:	4b60      	ldr	r3, [pc, #384]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f42:	4a60      	ldr	r2, [pc, #384]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f48:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005f4a:	4b5c      	ldr	r3, [pc, #368]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f50:	0e1b      	lsrs	r3, r3, #24
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005f58:	4b58      	ldr	r3, [pc, #352]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f5e:	099b      	lsrs	r3, r3, #6
 8005f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	fb02 f203 	mul.w	r2, r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f70:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005f72:	4b52      	ldr	r3, [pc, #328]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f78:	f003 031f 	and.w	r3, r3, #31
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f88:	617b      	str	r3, [r7, #20]
        break;
 8005f8a:	e003      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f8c:	4b4e      	ldr	r3, [pc, #312]	; (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005f8e:	617b      	str	r3, [r7, #20]
        break;
 8005f90:	e000      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8005f92:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f9a:	f040 8086 	bne.w	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005f9e:	4b47      	ldr	r3, [pc, #284]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005fac:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fb4:	d03e      	beq.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005fb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fba:	d073      	beq.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d000      	beq.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005fc0:	e074      	b.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005fc2:	4b3e      	ldr	r3, [pc, #248]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d108      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fce:	4b3b      	ldr	r3, [pc, #236]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fd6:	4a3a      	ldr	r2, [pc, #232]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	e007      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005fe0:	4b36      	ldr	r3, [pc, #216]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fe8:	4a36      	ldr	r2, [pc, #216]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fee:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005ff0:	4b32      	ldr	r3, [pc, #200]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff6:	0e1b      	lsrs	r3, r3, #24
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005ffe:	4b2f      	ldr	r3, [pc, #188]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006004:	099b      	lsrs	r3, r3, #6
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	fb02 f203 	mul.w	r2, r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006018:	4b28      	ldr	r3, [pc, #160]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800601a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800601e:	0a1b      	lsrs	r3, r3, #8
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	3301      	adds	r3, #1
 8006026:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006030:	617b      	str	r3, [r7, #20]
        break;
 8006032:	e03b      	b.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006034:	4b21      	ldr	r3, [pc, #132]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d108      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006040:	4b1e      	ldr	r3, [pc, #120]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006048:	4a1d      	ldr	r2, [pc, #116]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800604a:	fbb2 f3f3 	udiv	r3, r2, r3
 800604e:	613b      	str	r3, [r7, #16]
 8006050:	e007      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006052:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800605a:	4a1a      	ldr	r2, [pc, #104]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800605c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006060:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006062:	4b16      	ldr	r3, [pc, #88]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006068:	0e1b      	lsrs	r3, r3, #24
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006070:	4b12      	ldr	r3, [pc, #72]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006076:	099b      	lsrs	r3, r3, #6
 8006078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	fb02 f203 	mul.w	r2, r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	fbb2 f3f3 	udiv	r3, r2, r3
 8006088:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800608a:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800608c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	3301      	adds	r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]
        break;
 80060a2:	e003      	b.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 80060a4:	4b08      	ldr	r3, [pc, #32]	; (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80060a6:	617b      	str	r3, [r7, #20]
        break;
 80060a8:	e000      	b.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 80060aa:	bf00      	nop

  return frequency;
 80060ac:	697b      	ldr	r3, [r7, #20]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40023800 	.word	0x40023800
 80060c0:	00f42400 	.word	0x00f42400
 80060c4:	017d7840 	.word	0x017d7840
 80060c8:	00bb8000 	.word	0x00bb8000

080060cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e06b      	b.n	80061b6 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	7f5b      	ldrb	r3, [r3, #29]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d105      	bne.n	80060f4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f011 ffb2 	bl	8018058 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	22ca      	movs	r2, #202	; 0xca
 8006100:	625a      	str	r2, [r3, #36]	; 0x24
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2253      	movs	r2, #83	; 0x53
 8006108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fb00 	bl	8006710 <RTC_EnterInitMode>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d008      	beq.n	8006128 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	22ff      	movs	r2, #255	; 0xff
 800611c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2204      	movs	r2, #4
 8006122:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e046      	b.n	80061b6 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6899      	ldr	r1, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b23      	ldr	r3, [pc, #140]	; (80061c0 <HAL_RTC_Init+0xf4>)
 8006134:	400b      	ands	r3, r1
 8006136:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6899      	ldr	r1, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	431a      	orrs	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	68d2      	ldr	r2, [r2, #12]
 800615e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6919      	ldr	r1, [r3, #16]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	041a      	lsls	r2, r3, #16
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006182:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0208 	bic.w	r2, r2, #8
 8006192:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	22ff      	movs	r2, #255	; 0xff
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80061b4:	2300      	movs	r3, #0
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	ff8fffbf 	.word	0xff8fffbf

080061c4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80061c4:	b590      	push	{r4, r7, lr}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	7f1b      	ldrb	r3, [r3, #28]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_RTC_SetTime+0x1c>
 80061dc:	2302      	movs	r3, #2
 80061de:	e0a8      	b.n	8006332 <HAL_RTC_SetTime+0x16e>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2202      	movs	r2, #2
 80061ea:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d126      	bne.n	8006240 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2200      	movs	r2, #0
 8006204:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f000 faac 	bl	8006768 <RTC_ByteToBcd2>
 8006210:	4603      	mov	r3, r0
 8006212:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 faa5 	bl	8006768 <RTC_ByteToBcd2>
 800621e:	4603      	mov	r3, r0
 8006220:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006222:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	789b      	ldrb	r3, [r3, #2]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fa9d 	bl	8006768 <RTC_ByteToBcd2>
 800622e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006230:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	7b1b      	ldrb	r3, [r3, #12]
 8006238:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	e018      	b.n	8006272 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d102      	bne.n	8006254 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2200      	movs	r2, #0
 8006252:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006260:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006266:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	7b1b      	ldrb	r3, [r3, #12]
 800626c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	22ca      	movs	r2, #202	; 0xca
 8006278:	625a      	str	r2, [r3, #36]	; 0x24
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2253      	movs	r2, #83	; 0x53
 8006280:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fa44 	bl	8006710 <RTC_EnterInitMode>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	22ff      	movs	r2, #255	; 0xff
 8006294:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2204      	movs	r2, #4
 800629a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e045      	b.n	8006332 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	6979      	ldr	r1, [r7, #20]
 80062ac:	4b23      	ldr	r3, [pc, #140]	; (800633c <HAL_RTC_SetTime+0x178>)
 80062ae:	400b      	ands	r3, r1
 80062b0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6899      	ldr	r1, [r3, #8]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	431a      	orrs	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062e8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d111      	bne.n	800631c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f9e1 	bl	80066c0 <HAL_RTC_WaitForSynchro>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00b      	beq.n	800631c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	22ff      	movs	r2, #255	; 0xff
 800630a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2204      	movs	r2, #4
 8006310:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e00a      	b.n	8006332 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	22ff      	movs	r2, #255	; 0xff
 8006322:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006330:	2300      	movs	r3, #0
  }
}
 8006332:	4618      	mov	r0, r3
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	bd90      	pop	{r4, r7, pc}
 800633a:	bf00      	nop
 800633c:	007f7f7f 	.word	0x007f7f7f

08006340 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	7f1b      	ldrb	r3, [r3, #28]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_RTC_SetDate+0x1c>
 8006358:	2302      	movs	r3, #2
 800635a:	e092      	b.n	8006482 <HAL_RTC_SetDate+0x142>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2202      	movs	r2, #2
 8006366:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10e      	bne.n	800638c <HAL_RTC_SetDate+0x4c>
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	f023 0310 	bic.w	r3, r3, #16
 8006382:	b2db      	uxtb	r3, r3
 8006384:	330a      	adds	r3, #10
 8006386:	b2da      	uxtb	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11c      	bne.n	80063cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	78db      	ldrb	r3, [r3, #3]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 f9e6 	bl	8006768 <RTC_ByteToBcd2>
 800639c:	4603      	mov	r3, r0
 800639e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 f9df 	bl	8006768 <RTC_ByteToBcd2>
 80063aa:	4603      	mov	r3, r0
 80063ac:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80063ae:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	789b      	ldrb	r3, [r3, #2]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 f9d7 	bl	8006768 <RTC_ByteToBcd2>
 80063ba:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80063bc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	e00e      	b.n	80063ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	78db      	ldrb	r3, [r3, #3]
 80063d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	785b      	ldrb	r3, [r3, #1]
 80063d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80063d8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80063de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	22ca      	movs	r2, #202	; 0xca
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2253      	movs	r2, #83	; 0x53
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f988 	bl	8006710 <RTC_EnterInitMode>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00b      	beq.n	800641e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	22ff      	movs	r2, #255	; 0xff
 800640c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2204      	movs	r2, #4
 8006412:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e031      	b.n	8006482 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	6979      	ldr	r1, [r7, #20]
 8006424:	4b19      	ldr	r3, [pc, #100]	; (800648c <HAL_RTC_SetDate+0x14c>)
 8006426:	400b      	ands	r3, r1
 8006428:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006438:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0320 	and.w	r3, r3, #32
 8006444:	2b00      	cmp	r3, #0
 8006446:	d111      	bne.n	800646c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f939 	bl	80066c0 <HAL_RTC_WaitForSynchro>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	22ff      	movs	r2, #255	; 0xff
 800645a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2204      	movs	r2, #4
 8006460:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e00a      	b.n	8006482 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	22ff      	movs	r2, #255	; 0xff
 8006472:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2201      	movs	r2, #1
 8006478:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006480:	2300      	movs	r3, #0
  }
}
 8006482:	4618      	mov	r0, r3
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	bd90      	pop	{r4, r7, pc}
 800648a:	bf00      	nop
 800648c:	00ffff3f 	.word	0x00ffff3f

08006490 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006490:	b590      	push	{r4, r7, lr}
 8006492:	b089      	sub	sp, #36	; 0x24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	2300      	movs	r3, #0
 80064a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	7f1b      	ldrb	r3, [r3, #28]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_RTC_SetAlarm+0x24>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e101      	b.n	80066b8 <HAL_RTC_SetAlarm+0x228>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2202      	movs	r2, #2
 80064be:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d137      	bne.n	8006536 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2200      	movs	r2, #0
 80064d8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 f942 	bl	8006768 <RTC_ByteToBcd2>
 80064e4:	4603      	mov	r3, r0
 80064e6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	785b      	ldrb	r3, [r3, #1]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 f93b 	bl	8006768 <RTC_ByteToBcd2>
 80064f2:	4603      	mov	r3, r0
 80064f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80064f6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	789b      	ldrb	r3, [r3, #2]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 f933 	bl	8006768 <RTC_ByteToBcd2>
 8006502:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006504:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	7b1b      	ldrb	r3, [r3, #12]
 800650c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800650e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006518:	4618      	mov	r0, r3
 800651a:	f000 f925 	bl	8006768 <RTC_ByteToBcd2>
 800651e:	4603      	mov	r3, r0
 8006520:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006522:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800652a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006530:	4313      	orrs	r3, r2
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	e023      	b.n	800657e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2200      	movs	r2, #0
 8006548:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	785b      	ldrb	r3, [r3, #1]
 8006554:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006556:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800655c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	7b1b      	ldrb	r3, [r3, #12]
 8006562:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006564:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800656c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800656e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006574:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800657a:	4313      	orrs	r3, r2
 800657c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	22ca      	movs	r2, #202	; 0xca
 8006590:	625a      	str	r2, [r3, #36]	; 0x24
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2253      	movs	r2, #83	; 0x53
 8006598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a2:	d13f      	bne.n	8006624 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065b2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065c2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065c4:	f7fa f816 	bl	80005f4 <HAL_GetTick>
 80065c8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80065ca:	e013      	b.n	80065f4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80065cc:	f7fa f812 	bl	80005f4 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065da:	d90b      	bls.n	80065f4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	22ff      	movs	r2, #255	; 0xff
 80065e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2203      	movs	r2, #3
 80065e8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e061      	b.n	80066b8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0e4      	beq.n	80065cc <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006620:	609a      	str	r2, [r3, #8]
 8006622:	e03e      	b.n	80066a2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006632:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006642:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006644:	f7f9 ffd6 	bl	80005f4 <HAL_GetTick>
 8006648:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800664a:	e013      	b.n	8006674 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800664c:	f7f9 ffd2 	bl	80005f4 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800665a:	d90b      	bls.n	8006674 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	22ff      	movs	r2, #255	; 0xff
 8006662:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2203      	movs	r2, #3
 8006668:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e021      	b.n	80066b8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0e4      	beq.n	800664c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	22ff      	movs	r2, #255	; 0xff
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3724      	adds	r7, #36	; 0x24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd90      	pop	{r4, r7, pc}

080066c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066dc:	f7f9 ff8a 	bl	80005f4 <HAL_GetTick>
 80066e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80066e2:	e009      	b.n	80066f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80066e4:	f7f9 ff86 	bl	80005f4 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066f2:	d901      	bls.n	80066f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e007      	b.n	8006708 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0ee      	beq.n	80066e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d119      	bne.n	800675e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f04f 32ff 	mov.w	r2, #4294967295
 8006732:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006734:	f7f9 ff5e 	bl	80005f4 <HAL_GetTick>
 8006738:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800673a:	e009      	b.n	8006750 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800673c:	f7f9 ff5a 	bl	80005f4 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800674a:	d901      	bls.n	8006750 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e007      	b.n	8006760 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0ee      	beq.n	800673c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8006776:	e005      	b.n	8006784 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	3b0a      	subs	r3, #10
 8006782:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	2b09      	cmp	r3, #9
 8006788:	d8f6      	bhi.n	8006778 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	b2db      	uxtb	r3, r3
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	b2da      	uxtb	r2, r3
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	4313      	orrs	r3, r2
 8006796:	b2db      	uxtb	r3, r3
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	7f1b      	ldrb	r3, [r3, #28]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80067bc:	2302      	movs	r3, #2
 80067be:	e03e      	b.n	800683e <HAL_RTCEx_SetTimeStamp+0x9a>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2202      	movs	r2, #2
 80067ca:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	4b1e      	ldr	r3, [pc, #120]	; (800684c <HAL_RTCEx_SetTimeStamp+0xa8>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	22ca      	movs	r2, #202	; 0xca
 80067e6:	625a      	str	r2, [r3, #36]	; 0x24
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2253      	movs	r2, #83	; 0x53
 80067ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0206 	bic.w	r2, r2, #6
 80067fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	430a      	orrs	r2, r1
 800680e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006826:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	22ff      	movs	r2, #255	; 0xff
 800682e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	fffff7f7 	.word	0xfffff7f7

08006850 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e149      	b.n	8006b02 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f011 fec2 	bl	801860c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f94f 	bl	8006b34 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d007      	beq.n	80068ae <HAL_SAI_Init+0x5e>
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d302      	bcc.n	80068a8 <HAL_SAI_Init+0x58>
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d006      	beq.n	80068b4 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80068a6:	e008      	b.n	80068ba <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61fb      	str	r3, [r7, #28]
      break;
 80068ac:	e005      	b.n	80068ba <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80068ae:	2310      	movs	r3, #16
 80068b0:	61fb      	str	r3, [r7, #28]
      break;
 80068b2:	e002      	b.n	80068ba <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80068b4:	2320      	movs	r3, #32
 80068b6:	61fb      	str	r3, [r7, #28]
      break;
 80068b8:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d81d      	bhi.n	80068fe <HAL_SAI_Init+0xae>
 80068c2:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <HAL_SAI_Init+0x78>)
 80068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c8:	080068d9 	.word	0x080068d9
 80068cc:	080068df 	.word	0x080068df
 80068d0:	080068e7 	.word	0x080068e7
 80068d4:	080068ef 	.word	0x080068ef
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	617b      	str	r3, [r7, #20]
      }
      break;
 80068dc:	e010      	b.n	8006900 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80068de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068e2:	617b      	str	r3, [r7, #20]
      }
      break;
 80068e4:	e00c      	b.n	8006900 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80068e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068ea:	617b      	str	r3, [r7, #20]
      }
      break;
 80068ec:	e008      	b.n	8006900 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80068ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068f2:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f043 0301 	orr.w	r3, r3, #1
 80068fa:	61fb      	str	r3, [r7, #28]
      }
      break;
 80068fc:	e000      	b.n	8006900 <HAL_SAI_Init+0xb0>
  default:
    break;
 80068fe:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a81      	ldr	r2, [pc, #516]	; (8006b0c <HAL_SAI_Init+0x2bc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_SAI_Init+0xc4>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a80      	ldr	r2, [pc, #512]	; (8006b10 <HAL_SAI_Init+0x2c0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d103      	bne.n	800691c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8006914:	4a7f      	ldr	r2, [pc, #508]	; (8006b14 <HAL_SAI_Init+0x2c4>)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	e002      	b.n	8006922 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800691c:	4a7e      	ldr	r2, [pc, #504]	; (8006b18 <HAL_SAI_Init+0x2c8>)
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d043      	beq.n	80069b2 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a76      	ldr	r2, [pc, #472]	; (8006b0c <HAL_SAI_Init+0x2bc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d004      	beq.n	8006942 <HAL_SAI_Init+0xf2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a74      	ldr	r2, [pc, #464]	; (8006b10 <HAL_SAI_Init+0x2c0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d104      	bne.n	800694c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006942:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006946:	f7ff fa8d 	bl	8005e64 <HAL_RCCEx_GetPeriphCLKFreq>
 800694a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a72      	ldr	r2, [pc, #456]	; (8006b1c <HAL_SAI_Init+0x2cc>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d004      	beq.n	8006960 <HAL_SAI_Init+0x110>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a71      	ldr	r2, [pc, #452]	; (8006b20 <HAL_SAI_Init+0x2d0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d104      	bne.n	800696a <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006960:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006964:	f7ff fa7e 	bl	8005e64 <HAL_RCCEx_GetPeriphCLKFreq>
 8006968:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	461a      	mov	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	025b      	lsls	r3, r3, #9
 800697c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006980:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4a67      	ldr	r2, [pc, #412]	; (8006b24 <HAL_SAI_Init+0x2d4>)
 8006986:	fba2 2303 	umull	r2, r3, r2, r3
 800698a:	08da      	lsrs	r2, r3, #3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8006990:	68f9      	ldr	r1, [r7, #12]
 8006992:	4b64      	ldr	r3, [pc, #400]	; (8006b24 <HAL_SAI_Init+0x2d4>)
 8006994:	fba3 2301 	umull	r2, r3, r3, r1
 8006998:	08da      	lsrs	r2, r3, #3
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	1aca      	subs	r2, r1, r3
 80069a4:	2a08      	cmp	r2, #8
 80069a6:	d904      	bls.n	80069b2 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_SAI_Init+0x172>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d109      	bne.n	80069d6 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <HAL_SAI_Init+0x17e>
 80069ca:	2300      	movs	r3, #0
 80069cc:	e001      	b.n	80069d2 <HAL_SAI_Init+0x182>
 80069ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069d2:	61bb      	str	r3, [r7, #24]
 80069d4:	e008      	b.n	80069e8 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d102      	bne.n	80069e4 <HAL_SAI_Init+0x194>
 80069de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069e2:	e000      	b.n	80069e6 <HAL_SAI_Init+0x196>
 80069e4:	2300      	movs	r3, #0
 80069e6:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6819      	ldr	r1, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4b4d      	ldr	r3, [pc, #308]	; (8006b28 <HAL_SAI_Init+0x2d8>)
 80069f4:	400b      	ands	r3, r1
 80069f6:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6819      	ldr	r1, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006a0c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a12:	431a      	orrs	r2, r3
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8006a20:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006a2c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	051b      	lsls	r3, r3, #20
 8006a34:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6859      	ldr	r1, [r3, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4b38      	ldr	r3, [pc, #224]	; (8006b2c <HAL_SAI_Init+0x2dc>)
 8006a4a:	400b      	ands	r3, r1
 8006a4c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6859      	ldr	r1, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699a      	ldr	r2, [r3, #24]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6899      	ldr	r1, [r3, #8]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b2e      	ldr	r3, [pc, #184]	; (8006b30 <HAL_SAI_Init+0x2e0>)
 8006a78:	400b      	ands	r3, r1
 8006a7a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6899      	ldr	r1, [r3, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006a8c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8006a92:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8006a98:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8006aa2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68d9      	ldr	r1, [r3, #12]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006aba:	400b      	ands	r3, r1
 8006abc:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68d9      	ldr	r1, [r3, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006acc:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad2:	041b      	lsls	r3, r3, #16
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ada:	3b01      	subs	r3, #1
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	40015804 	.word	0x40015804
 8006b10:	40015824 	.word	0x40015824
 8006b14:	40015800 	.word	0x40015800
 8006b18:	40015c00 	.word	0x40015c00
 8006b1c:	40015c04 	.word	0x40015c04
 8006b20:	40015c24 	.word	0x40015c24
 8006b24:	cccccccd 	.word	0xcccccccd
 8006b28:	ff05c010 	.word	0xff05c010
 8006b2c:	ffff1ff0 	.word	0xffff1ff0
 8006b30:	fff88000 	.word	0xfff88000

08006b34 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006b34:	b490      	push	{r4, r7}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006b3c:	4b16      	ldr	r3, [pc, #88]	; (8006b98 <SAI_Disable+0x64>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a16      	ldr	r2, [pc, #88]	; (8006b9c <SAI_Disable+0x68>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	0b1b      	lsrs	r3, r3, #12
 8006b48:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b5c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006b5e:	4623      	mov	r3, r4
 8006b60:	1e5c      	subs	r4, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	73fb      	strb	r3, [r7, #15]
      break;
 8006b7a:	e006      	b.n	8006b8a <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e9      	bne.n	8006b5e <SAI_Disable+0x2a>

  return status;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bc90      	pop	{r4, r7}
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	2000003c 	.word	0x2000003c
 8006b9c:	95cbec1b 	.word	0x95cbec1b

08006ba0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e01d      	b.n	8006bee <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d105      	bne.n	8006bca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f011 fa61 	bl	801808c <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2203      	movs	r2, #3
 8006bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f80f 	bl	8006bf6 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006bf6:	b5b0      	push	{r4, r5, r7, lr}
 8006bf8:	b08e      	sub	sp, #56	; 0x38
 8006bfa:	af04      	add	r7, sp, #16
 8006bfc:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006c16:	2376      	movs	r3, #118	; 0x76
 8006c18:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681d      	ldr	r5, [r3, #0]
 8006c1e:	466c      	mov	r4, sp
 8006c20:	f107 0318 	add.w	r3, r7, #24
 8006c24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c2c:	f107 030c 	add.w	r3, r7, #12
 8006c30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c32:	4628      	mov	r0, r5
 8006c34:	f002 ff68 	bl	8009b08 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c46:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f002 ff94 	bl	8009b7a <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c60:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8006c62:	2002      	movs	r0, #2
 8006c64:	f7f9 fcd2 	bl	800060c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fe24 	bl	80078b6 <SD_PowerON>
 8006c6e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00b      	beq.n	8006c8e <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e013      	b.n	8006cb6 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fd48 	bl	8007724 <SD_InitCard>
 8006c94:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	431a      	orrs	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3728      	adds	r7, #40	; 0x28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006cc0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08c      	sub	sp, #48	; 0x30
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d107      	bne.n	8006ce8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0b0      	b.n	8006e4a <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	f040 80a9 	bne.w	8006e48 <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	441a      	add	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d907      	bls.n	8006d1a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e097      	b.n	8006e4a <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2200      	movs	r2, #0
 8006d28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006d38:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3e:	4a45      	ldr	r2, [pc, #276]	; (8006e54 <HAL_SD_ReadBlocks_DMA+0x194>)
 8006d40:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d46:	4a44      	ldr	r2, [pc, #272]	; (8006e58 <HAL_SD_ReadBlocks_DMA+0x198>)
 8006d48:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4e:	2200      	movs	r2, #0
 8006d50:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3380      	adds	r3, #128	; 0x80
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	025b      	lsls	r3, r3, #9
 8006d64:	089b      	lsrs	r3, r3, #2
 8006d66:	f7fa f953 	bl	8001010 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0208 	orr.w	r2, r2, #8
 8006d78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d002      	beq.n	8006d88 <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	025b      	lsls	r3, r3, #9
 8006d86:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d88:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8c:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	025b      	lsls	r3, r3, #9
 8006d92:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006d94:	2390      	movs	r3, #144	; 0x90
 8006d96:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f107 0214 	add.w	r2, r7, #20
 8006dac:	4611      	mov	r1, r2
 8006dae:	4618      	mov	r0, r3
 8006db0:	f002 ff4c 	bl	8009c4c <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f002 ff71 	bl	8009ca4 <SDMMC_CmdBlockLength>
 8006dc2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d010      	beq.n	8006dec <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e02e      	b.n	8006e4a <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d90a      	bls.n	8006e08 <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2282      	movs	r2, #130	; 0x82
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f002 ff98 	bl	8009d34 <SDMMC_CmdReadMultiBlock>
 8006e04:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006e06:	e009      	b.n	8006e1c <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2281      	movs	r2, #129	; 0x81
 8006e0c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f002 ff69 	bl	8009cec <SDMMC_CmdReadSingleBlock>
 8006e1a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d010      	beq.n	8006e44 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e002      	b.n	8006e4a <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	e000      	b.n	8006e4a <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006e48:	2302      	movs	r3, #2
  }
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3730      	adds	r7, #48	; 0x30
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	08007621 	.word	0x08007621
 8006e58:	0800768f 	.word	0x0800768f

08006e5c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08c      	sub	sp, #48	; 0x30
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d107      	bne.n	8006e84 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0b0      	b.n	8006fe6 <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	f040 80a9 	bne.w	8006fe4 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d907      	bls.n	8006eb6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e097      	b.n	8006fe6 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2203      	movs	r2, #3
 8006eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 021a 	orr.w	r2, r2, #26
 8006ed4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	4a45      	ldr	r2, [pc, #276]	; (8006ff0 <HAL_SD_WriteBlocks_DMA+0x194>)
 8006edc:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	4a44      	ldr	r2, [pc, #272]	; (8006ff4 <HAL_SD_WriteBlocks_DMA+0x198>)
 8006ee4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	2200      	movs	r2, #0
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d002      	beq.n	8006efc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	025b      	lsls	r3, r3, #9
 8006efa:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f04:	4618      	mov	r0, r3
 8006f06:	f002 fecd 	bl	8009ca4 <SDMMC_CmdBlockLength>
 8006f0a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d010      	beq.n	8006f34 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	431a      	orrs	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e058      	b.n	8006fe6 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d90a      	bls.n	8006f50 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	22a0      	movs	r2, #160	; 0xa0
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f002 ff3c 	bl	8009dc4 <SDMMC_CmdWriteMultiBlock>
 8006f4c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006f4e:	e009      	b.n	8006f64 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2290      	movs	r2, #144	; 0x90
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f002 ff0d 	bl	8009d7c <SDMMC_CmdWriteSingleBlock>
 8006f62:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d010      	beq.n	8006f8c <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e02c      	b.n	8006fe6 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0208 	orr.w	r2, r2, #8
 8006f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3380      	adds	r3, #128	; 0x80
 8006fa8:	461a      	mov	r2, r3
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	025b      	lsls	r3, r3, #9
 8006fae:	089b      	lsrs	r3, r3, #2
 8006fb0:	f7fa f82e 	bl	8001010 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb8:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	025b      	lsls	r3, r3, #9
 8006fbe:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006fc0:	2390      	movs	r3, #144	; 0x90
 8006fc2:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f107 0214 	add.w	r2, r7, #20
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f002 fe36 	bl	8009c4c <SDMMC_ConfigData>
    
    return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	e000      	b.n	8006fe6 <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006fe4:	2302      	movs	r3, #2
  }
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3730      	adds	r7, #48	; 0x30
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	080075f7 	.word	0x080075f7
 8006ff4:	0800768f 	.word	0x0800768f

08006ff8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800701e:	0e1b      	lsrs	r3, r3, #24
 8007020:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	099b      	lsrs	r3, r3, #6
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	b2da      	uxtb	r2, r3
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	089b      	lsrs	r3, r3, #2
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	b2da      	uxtb	r2, r3
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	b2da      	uxtb	r2, r3
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007054:	0c1b      	lsrs	r3, r3, #16
 8007056:	b2db      	uxtb	r3, r3
 8007058:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	b2db      	uxtb	r3, r3
 800706a:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	b2da      	uxtb	r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007078:	b2db      	uxtb	r3, r3
 800707a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	b2da      	uxtb	r2, r3
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007088:	0e1b      	lsrs	r3, r3, #24
 800708a:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	b29b      	uxth	r3, r3
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	b29a      	uxth	r2, r3
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800709c:	0c1b      	lsrs	r3, r3, #16
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	88db      	ldrh	r3, [r3, #6]
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	091b      	lsrs	r3, r3, #4
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	4313      	orrs	r3, r2
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	f003 030f 	and.w	r3, r3, #15
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ce:	0a1b      	lsrs	r3, r3, #8
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	09db      	lsrs	r3, r3, #7
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	099b      	lsrs	r3, r3, #6
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	095b      	lsrs	r3, r3, #5
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	091b      	lsrs	r3, r3, #4
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	b2da      	uxtb	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2200      	movs	r2, #0
 8007118:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711e:	2b00      	cmp	r3, #0
 8007120:	f040 8086 	bne.w	8007230 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	029b      	lsls	r3, r3, #10
 8007128:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007134:	b2db      	uxtb	r3, r3
 8007136:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	431a      	orrs	r2, r3
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800714a:	0e1b      	lsrs	r3, r3, #24
 800714c:	b2db      	uxtb	r3, r3
 800714e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	099b      	lsrs	r3, r3, #6
 8007158:	f003 0303 	and.w	r3, r3, #3
 800715c:	431a      	orrs	r2, r3
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	08db      	lsrs	r3, r3, #3
 8007166:	b2db      	uxtb	r3, r3
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	b2da      	uxtb	r2, r3
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	f003 0307 	and.w	r3, r3, #7
 800717a:	b2da      	uxtb	r2, r3
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007184:	0c1b      	lsrs	r3, r3, #16
 8007186:	b2db      	uxtb	r3, r3
 8007188:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	b2db      	uxtb	r3, r3
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	b2da      	uxtb	r2, r3
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	089b      	lsrs	r3, r3, #2
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	005b      	lsls	r3, r3, #1
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	f003 0306 	and.w	r3, r3, #6
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c0:	0a1b      	lsrs	r3, r3, #8
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	7e1b      	ldrb	r3, [r3, #24]
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	09db      	lsrs	r3, r3, #7
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	4313      	orrs	r3, r2
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	7e1b      	ldrb	r3, [r3, #24]
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	3302      	adds	r3, #2
 80071f2:	2201      	movs	r2, #1
 80071f4:	409a      	lsls	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fa:	fb02 f203 	mul.w	r2, r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	7a1b      	ldrb	r3, [r3, #8]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	2301      	movs	r3, #1
 800720c:	4093      	lsls	r3, r2
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800721c:	0a52      	lsrs	r2, r2, #9
 800721e:	fb02 f203 	mul.w	r2, r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800722c:	661a      	str	r2, [r3, #96]	; 0x60
 800722e:	e04d      	b.n	80072cc <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007234:	2b01      	cmp	r3, #1
 8007236:	d138      	bne.n	80072aa <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800723c:	b2db      	uxtb	r3, r3
 800723e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	041b      	lsls	r3, r3, #16
 8007244:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007250:	0e1b      	lsrs	r3, r3, #24
 8007252:	b2db      	uxtb	r3, r3
 8007254:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	691a      	ldr	r2, [r3, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	431a      	orrs	r2, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007268:	0c1b      	lsrs	r3, r3, #16
 800726a:	b2db      	uxtb	r3, r3
 800726c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	691a      	ldr	r2, [r3, #16]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	431a      	orrs	r2, r3
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800727e:	0a1b      	lsrs	r3, r3, #8
 8007280:	b2db      	uxtb	r3, r3
 8007282:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	3301      	adds	r3, #1
 800728a:	029a      	lsls	r2, r3, #10
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	655a      	str	r2, [r3, #84]	; 0x54
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800729e:	659a      	str	r2, [r3, #88]	; 0x58
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	661a      	str	r2, [r3, #96]	; 0x60
 80072a8:	e010      	b.n	80072cc <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0c1      	b.n	8007450 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	099b      	lsrs	r3, r3, #6
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	7e9b      	ldrb	r3, [r3, #26]
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	09db      	lsrs	r3, r3, #7
 8007300:	b2db      	uxtb	r3, r3
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	b2db      	uxtb	r3, r3
 8007308:	4313      	orrs	r3, r2
 800730a:	b2da      	uxtb	r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007318:	b2da      	uxtb	r2, r3
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007322:	0e1b      	lsrs	r3, r3, #24
 8007324:	b2db      	uxtb	r3, r3
 8007326:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	09db      	lsrs	r3, r3, #7
 800732c:	b2db      	uxtb	r3, r3
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	b2da      	uxtb	r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	095b      	lsrs	r3, r3, #5
 800733c:	b2db      	uxtb	r3, r3
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	b2da      	uxtb	r2, r3
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	089b      	lsrs	r3, r3, #2
 800734c:	b2db      	uxtb	r3, r3
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	b2da      	uxtb	r2, r3
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	b2db      	uxtb	r3, r3
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 030c 	and.w	r3, r3, #12
 8007364:	b2da      	uxtb	r2, r3
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736e:	0c1b      	lsrs	r3, r3, #16
 8007370:	b2db      	uxtb	r3, r3
 8007372:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	7fdb      	ldrb	r3, [r3, #31]
 8007378:	b2da      	uxtb	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	099b      	lsrs	r3, r3, #6
 800737e:	b2db      	uxtb	r3, r3
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	b2db      	uxtb	r3, r3
 8007386:	4313      	orrs	r3, r2
 8007388:	b2da      	uxtb	r2, r3
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	b2db      	uxtb	r3, r3
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	b2da      	uxtb	r2, r3
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073bc:	0a1b      	lsrs	r3, r3, #8
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	09db      	lsrs	r3, r3, #7
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	099b      	lsrs	r3, r3, #6
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	095b      	lsrs	r3, r3, #5
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	091b      	lsrs	r3, r3, #4
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	b2da      	uxtb	r2, r3
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	089b      	lsrs	r3, r3, #2
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	b2da      	uxtb	r2, r3
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	f003 0303 	and.w	r3, r3, #3
 8007424:	b2da      	uxtb	r2, r3
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007430:	b2db      	uxtb	r3, r3
 8007432:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	085b      	lsrs	r3, r3, #1
 8007438:	b2db      	uxtb	r3, r3
 800743a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743e:	b2da      	uxtb	r2, r3
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80074b4:	b5b0      	push	{r4, r5, r7, lr}
 80074b6:	b08e      	sub	sp, #56	; 0x38
 80074b8:	af04      	add	r7, sp, #16
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80074be:	2300      	movs	r3, #0
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2203      	movs	r2, #3
 80074c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d02e      	beq.n	8007530 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d8:	d106      	bne.n	80074e8 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	639a      	str	r2, [r3, #56]	; 0x38
 80074e6:	e029      	b.n	800753c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ee:	d10a      	bne.n	8007506 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fab2 	bl	8007a5a <SD_WideBus_Enable>
 80074f6:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	639a      	str	r2, [r3, #56]	; 0x38
 8007504:	e01a      	b.n	800753c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10a      	bne.n	8007522 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 faf1 	bl	8007af4 <SD_WideBus_Disable>
 8007512:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	639a      	str	r2, [r3, #56]	; 0x38
 8007520:	e00c      	b.n	800753c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	639a      	str	r2, [r3, #56]	; 0x38
 800752e:	e005      	b.n	800753c <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00a      	beq.n	800755a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800754c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e024      	b.n	80075a4 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681d      	ldr	r5, [r3, #0]
 8007580:	466c      	mov	r4, sp
 8007582:	f107 0318 	add.w	r3, r7, #24
 8007586:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800758a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800758e:	f107 030c 	add.w	r3, r7, #12
 8007592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007594:	4628      	mov	r0, r5
 8007596:	f002 fab7 	bl	8009b08 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3728      	adds	r7, #40	; 0x28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bdb0      	pop	{r4, r5, r7, pc}

080075ac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80075b4:	2304      	movs	r3, #4
 80075b6:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80075c0:	f107 030c 	add.w	r3, r7, #12
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fa1d 	bl	8007a06 <SD_SendStatus>
 80075cc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	0a5b      	lsrs	r3, r3, #9
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007602:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007612:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007614:	bf00      	nop
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800762e:	2300      	movs	r3, #0
 8007630:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007636:	2b82      	cmp	r3, #130	; 0x82
 8007638:	d111      	bne.n	800765e <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f002 fbe4 	bl	8009e0c <SDMMC_CmdStopTransfer>
 8007644:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d008      	beq.n	800765e <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	431a      	orrs	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7ff fccd 	bl	8006ff8 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0208 	bic.w	r2, r2, #8
 800766c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007676:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f00e fe6f 	bl	8016364 <HAL_SD_RxCpltCallback>
#endif
}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7f9 fd17 	bl	80010d0 <HAL_DMA_GetError>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d039      	beq.n	800771c <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d004      	beq.n	80076bc <SD_DMAError+0x2e>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d12c      	bne.n	8007716 <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80076c4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80076d4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f7ff ff62 	bl	80075ac <HAL_SD_GetCardState>
 80076e8:	4603      	mov	r3, r0
 80076ea:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80076ec:	7afb      	ldrb	r3, [r7, #11]
 80076ee:	2b06      	cmp	r3, #6
 80076f0:	d002      	beq.n	80076f8 <SD_DMAError+0x6a>
 80076f2:	7afb      	ldrb	r3, [r7, #11]
 80076f4:	2b05      	cmp	r3, #5
 80076f6:	d10a      	bne.n	800770e <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f002 fb85 	bl	8009e0c <SDMMC_CmdStopTransfer>
 8007702:	4602      	mov	r2, r0
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	431a      	orrs	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7ff fc6e 	bl	8006ff8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007724:	b5b0      	push	{r4, r5, r7, lr}
 8007726:	b094      	sub	sp, #80	; 0x50
 8007728:	af04      	add	r7, sp, #16
 800772a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800772c:	2300      	movs	r3, #0
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8007730:	2301      	movs	r3, #1
 8007732:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4618      	mov	r0, r3
 800773a:	f002 fa2c 	bl	8009b96 <SDMMC_GetPowerState>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007744:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007748:	e0b1      	b.n	80078ae <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774e:	2b03      	cmp	r3, #3
 8007750:	d02f      	beq.n	80077b2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4618      	mov	r0, r3
 8007758:	f002 fc73 	bl	800a042 <SDMMC_CmdSendCID>
 800775c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800775e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <SD_InitCard+0x44>
    {
      return errorstate;
 8007764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007766:	e0a2      	b.n	80078ae <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2100      	movs	r1, #0
 800776e:	4618      	mov	r0, r3
 8007770:	f002 fa57 	bl	8009c22 <SDMMC_GetResponse>
 8007774:	4602      	mov	r2, r0
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2104      	movs	r1, #4
 8007780:	4618      	mov	r0, r3
 8007782:	f002 fa4e 	bl	8009c22 <SDMMC_GetResponse>
 8007786:	4602      	mov	r2, r0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2108      	movs	r1, #8
 8007792:	4618      	mov	r0, r3
 8007794:	f002 fa45 	bl	8009c22 <SDMMC_GetResponse>
 8007798:	4602      	mov	r2, r0
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	210c      	movs	r1, #12
 80077a4:	4618      	mov	r0, r3
 80077a6:	f002 fa3c 	bl	8009c22 <SDMMC_GetResponse>
 80077aa:	4602      	mov	r2, r0
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d00d      	beq.n	80077d6 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f107 020e 	add.w	r2, r7, #14
 80077c2:	4611      	mov	r1, r2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f002 fc7d 	bl	800a0c4 <SDMMC_CmdSetRelAdd>
 80077ca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <SD_InitCard+0xb2>
    {
      return errorstate;
 80077d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d4:	e06b      	b.n	80078ae <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d036      	beq.n	800784c <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80077de:	89fb      	ldrh	r3, [r7, #14]
 80077e0:	461a      	mov	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ee:	041b      	lsls	r3, r3, #16
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f002 fc45 	bl	800a082 <SDMMC_CmdSendCSD>
 80077f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <SD_InitCard+0xe0>
    {
      return errorstate;
 8007800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007802:	e054      	b.n	80078ae <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2100      	movs	r1, #0
 800780a:	4618      	mov	r0, r3
 800780c:	f002 fa09 	bl	8009c22 <SDMMC_GetResponse>
 8007810:	4602      	mov	r2, r0
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2104      	movs	r1, #4
 800781c:	4618      	mov	r0, r3
 800781e:	f002 fa00 	bl	8009c22 <SDMMC_GetResponse>
 8007822:	4602      	mov	r2, r0
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2108      	movs	r1, #8
 800782e:	4618      	mov	r0, r3
 8007830:	f002 f9f7 	bl	8009c22 <SDMMC_GetResponse>
 8007834:	4602      	mov	r2, r0
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	210c      	movs	r1, #12
 8007840:	4618      	mov	r0, r3
 8007842:	f002 f9ee 	bl	8009c22 <SDMMC_GetResponse>
 8007846:	4602      	mov	r2, r0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2104      	movs	r1, #4
 8007852:	4618      	mov	r0, r3
 8007854:	f002 f9e5 	bl	8009c22 <SDMMC_GetResponse>
 8007858:	4603      	mov	r3, r0
 800785a:	0d1a      	lsrs	r2, r3, #20
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8007860:	f107 0310 	add.w	r3, r7, #16
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff fbd0 	bl	800700c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6819      	ldr	r1, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007874:	041b      	lsls	r3, r3, #16
 8007876:	f04f 0400 	mov.w	r4, #0
 800787a:	461a      	mov	r2, r3
 800787c:	4623      	mov	r3, r4
 800787e:	4608      	mov	r0, r1
 8007880:	f002 fae8 	bl	8009e54 <SDMMC_CmdSelDesel>
 8007884:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <SD_InitCard+0x16c>
  {
    return errorstate;
 800788c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800788e:	e00e      	b.n	80078ae <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681d      	ldr	r5, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	466c      	mov	r4, sp
 8007898:	f103 0210 	add.w	r2, r3, #16
 800789c:	ca07      	ldmia	r2, {r0, r1, r2}
 800789e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80078a2:	3304      	adds	r3, #4
 80078a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078a6:	4628      	mov	r0, r5
 80078a8:	f002 f92e 	bl	8009b08 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3740      	adds	r7, #64	; 0x40
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bdb0      	pop	{r4, r5, r7, pc}

080078b6 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b086      	sub	sp, #24
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	2300      	movs	r3, #0
 80078c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f002 fae3 	bl	8009e9e <SDMMC_CmdGoIdleState>
 80078d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <SD_PowerON+0x2e>
  {
    return errorstate;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	e08c      	b.n	80079fe <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f002 faf8 	bl	8009ede <SDMMC_CmdOperCond>
 80078ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d03d      	beq.n	8007972 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80078fc:	e032      	b.n	8007964 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	60ba      	str	r2, [r7, #8]
 8007904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007908:	4293      	cmp	r3, r2
 800790a:	d102      	bne.n	8007912 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800790c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007910:	e075      	b.n	80079fe <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2100      	movs	r1, #0
 8007918:	4618      	mov	r0, r3
 800791a:	f002 fb01 	bl	8009f20 <SDMMC_CmdAppCommand>
 800791e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007926:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800792a:	e068      	b.n	80079fe <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f002 fb18 	bl	8009f68 <SDMMC_CmdAppOperCommand>
 8007938:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007940:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007944:	e05b      	b.n	80079fe <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2100      	movs	r1, #0
 800794c:	4618      	mov	r0, r3
 800794e:	f002 f968 	bl	8009c22 <SDMMC_GetResponse>
 8007952:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	0fdb      	lsrs	r3, r3, #31
 8007958:	2b01      	cmp	r3, #1
 800795a:	bf0c      	ite	eq
 800795c:	2301      	moveq	r3, #1
 800795e:	2300      	movne	r3, #0
 8007960:	b2db      	uxtb	r3, r3
 8007962:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0c9      	beq.n	80078fe <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	645a      	str	r2, [r3, #68]	; 0x44
 8007970:	e044      	b.n	80079fc <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8007978:	e031      	b.n	80079de <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	60ba      	str	r2, [r7, #8]
 8007980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007984:	4293      	cmp	r3, r2
 8007986:	d102      	bne.n	800798e <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800798c:	e037      	b.n	80079fe <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2100      	movs	r1, #0
 8007994:	4618      	mov	r0, r3
 8007996:	f002 fac3 	bl	8009f20 <SDMMC_CmdAppCommand>
 800799a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <SD_PowerON+0xf0>
      {
        return errorstate;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	e02b      	b.n	80079fe <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80079ae:	4618      	mov	r0, r3
 80079b0:	f002 fada 	bl	8009f68 <SDMMC_CmdAppOperCommand>
 80079b4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <SD_PowerON+0x10a>
      {
        return errorstate;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	e01e      	b.n	80079fe <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f002 f92b 	bl	8009c22 <SDMMC_GetResponse>
 80079cc:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	0fdb      	lsrs	r3, r3, #31
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	bf0c      	ite	eq
 80079d6:	2301      	moveq	r3, #1
 80079d8:	2300      	movne	r3, #0
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d0ca      	beq.n	800797a <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	645a      	str	r2, [r3, #68]	; 0x44
 80079f4:	e002      	b.n	80079fc <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d102      	bne.n	8007a20 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8007a1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a1e:	e018      	b.n	8007a52 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a28:	041b      	lsls	r3, r3, #16
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f002 fb6c 	bl	800a10a <SDMMC_CmdSendStatus>
 8007a32:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <SD_SendStatus+0x38>
  {
    return errorstate;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	e009      	b.n	8007a52 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2100      	movs	r1, #0
 8007a44:	4618      	mov	r0, r3
 8007a46:	f002 f8ec 	bl	8009c22 <SDMMC_GetResponse>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b086      	sub	sp, #24
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	2300      	movs	r3, #0
 8007a68:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2100      	movs	r1, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f002 f8d4 	bl	8009c22 <SDMMC_GetResponse>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a84:	d102      	bne.n	8007a8c <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a8a:	e02f      	b.n	8007aec <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a8c:	f107 030c 	add.w	r3, r7, #12
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f87b 	bl	8007b8e <SD_FindSCR>
 8007a98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	e023      	b.n	8007aec <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d01c      	beq.n	8007ae8 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab6:	041b      	lsls	r3, r3, #16
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4610      	mov	r0, r2
 8007abc:	f002 fa30 	bl	8009f20 <SDMMC_CmdAppCommand>
 8007ac0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	e00f      	b.n	8007aec <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f002 fa6e 	bl	8009fb4 <SDMMC_CmdBusWidth>
 8007ad8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	e003      	b.n	8007aec <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e001      	b.n	8007aec <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ae8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	2300      	movs	r3, #0
 8007b02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007b04:	2300      	movs	r3, #0
 8007b06:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f002 f887 	bl	8009c22 <SDMMC_GetResponse>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b1e:	d102      	bne.n	8007b26 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b24:	e02f      	b.n	8007b86 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b26:	f107 030c 	add.w	r3, r7, #12
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f82e 	bl	8007b8e <SD_FindSCR>
 8007b32:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	e023      	b.n	8007b86 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01c      	beq.n	8007b82 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b50:	041b      	lsls	r3, r3, #16
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f002 f9e3 	bl	8009f20 <SDMMC_CmdAppCommand>
 8007b5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	e00f      	b.n	8007b86 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f002 fa21 	bl	8009fb4 <SDMMC_CmdBusWidth>
 8007b72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	e003      	b.n	8007b86 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	e001      	b.n	8007b86 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007b8e:	b590      	push	{r4, r7, lr}
 8007b90:	b08f      	sub	sp, #60	; 0x3c
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8007b9c:	f7f8 fd2a 	bl	80005f4 <HAL_GetTick>
 8007ba0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	2300      	movs	r3, #0
 8007bac:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2108      	movs	r1, #8
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f002 f875 	bl	8009ca4 <SDMMC_CmdBlockLength>
 8007bba:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	e0a8      	b.n	8007d18 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bce:	041b      	lsls	r3, r3, #16
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f002 f9a4 	bl	8009f20 <SDMMC_CmdAppCommand>
 8007bd8:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	e099      	b.n	8007d18 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007be4:	f04f 33ff 	mov.w	r3, #4294967295
 8007be8:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8007bea:	2308      	movs	r3, #8
 8007bec:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007bee:	2330      	movs	r3, #48	; 0x30
 8007bf0:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f107 0214 	add.w	r2, r7, #20
 8007c06:	4611      	mov	r1, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f002 f81f 	bl	8009c4c <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f002 f9f2 	bl	8009ffc <SDMMC_CmdSendSCR>
 8007c18:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d022      	beq.n	8007c66 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c22:	e079      	b.n	8007d18 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00e      	beq.n	8007c50 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6819      	ldr	r1, [r3, #0]
 8007c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	f107 020c 	add.w	r2, r7, #12
 8007c3e:	18d4      	adds	r4, r2, r3
 8007c40:	4608      	mov	r0, r1
 8007c42:	f001 ff8d 	bl	8009b60 <SDMMC_ReadFIFO>
 8007c46:	4603      	mov	r3, r0
 8007c48:	6023      	str	r3, [r4, #0]
      index++;
 8007c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c50:	f7f8 fcd0 	bl	80005f4 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5e:	d102      	bne.n	8007c66 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c64:	e058      	b.n	8007d18 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c6c:	f240 432a 	movw	r3, #1066	; 0x42a
 8007c70:	4013      	ands	r3, r2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0d6      	beq.n	8007c24 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2208      	movs	r2, #8
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	e043      	b.n	8007d18 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	e036      	b.n	8007d18 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb0:	f003 0320 	and.w	r3, r3, #32
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8007cc0:	2320      	movs	r3, #32
 8007cc2:	e029      	b.n	8007d18 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007ccc:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	061a      	lsls	r2, r3, #24
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	021b      	lsls	r3, r3, #8
 8007cd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cda:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	0a1b      	lsrs	r3, r3, #8
 8007ce0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ce4:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8007cf0:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cf2:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	061a      	lsls	r2, r3, #24
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d00:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	0a1b      	lsrs	r3, r3, #8
 8007d06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d0a:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	0e1b      	lsrs	r3, r3, #24
 8007d10:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	373c      	adds	r7, #60	; 0x3c
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd90      	pop	{r4, r7, pc}

08007d20 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e025      	b.n	8007d80 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f00d f971 	bl	8015030 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4610      	mov	r0, r2
 8007d62:	f001 fdab 	bl	80098bc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	f001 fe15 	bl	80099a0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d101      	bne.n	8007da4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007da0:	2302      	movs	r3, #2
 8007da2:	e018      	b.n	8007dd6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 fe73 	bl	8009aa0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d104      	bne.n	8007dcc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2205      	movs	r2, #5
 8007dc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007dca:	e003      	b.n	8007dd4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d101      	bne.n	8007df8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007df4:	2302      	movs	r3, #2
 8007df6:	e00e      	b.n	8007e16 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 fe6b 	bl	8009ae2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e04c      	b.n	8007ecc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f010 f982 	bl	8018150 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 0203 	bic.w	r2, r2, #3
 8007e62:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4b19      	ldr	r3, [pc, #100]	; (8007ed4 <HAL_SPDIFRX_Init+0xb4>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007e7c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8007e82:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007e88:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8007e8e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8007e94:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8007e9a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8007ea0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8007ea6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8007eac:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	fff88407 	.word	0xfff88407

08007ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e084      	b.n	8007ff4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d106      	bne.n	8007f0a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f010 f965 	bl	80181d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f20:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f2a:	d902      	bls.n	8007f32 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	e002      	b.n	8007f38 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f40:	d007      	beq.n	8007f52 <HAL_SPI_Init+0x7a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f4a:	d002      	beq.n	8007f52 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10b      	bne.n	8007f72 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f62:	d903      	bls.n	8007f6c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	631a      	str	r2, [r3, #48]	; 0x30
 8007f6a:	e002      	b.n	8007f72 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	431a      	orrs	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	431a      	orrs	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	ea42 0103 	orr.w	r1, r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	0c1b      	lsrs	r3, r3, #16
 8007fb2:	f003 0204 	and.w	r2, r3, #4
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	ea42 0103 	orr.w	r1, r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69da      	ldr	r2, [r3, #28]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fe2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e01d      	b.n	800804a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d106      	bne.n	8008028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f010 f938 	bl	8018298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3304      	adds	r3, #4
 8008038:	4619      	mov	r1, r3
 800803a:	4610      	mov	r0, r2
 800803c:	f000 fba2 	bl	8008784 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	4b0e      	ldr	r3, [pc, #56]	; (80080a4 <HAL_TIM_Base_Start+0x50>)
 800806c:	4013      	ands	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b06      	cmp	r3, #6
 8008074:	d00b      	beq.n	800808e <HAL_TIM_Base_Start+0x3a>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800807c:	d007      	beq.n	800808e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0201 	orr.w	r2, r2, #1
 800808c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	00010007 	.word	0x00010007

080080a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0201 	orr.w	r2, r2, #1
 80080be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <HAL_TIM_Base_Start_IT+0x50>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b06      	cmp	r3, #6
 80080d0:	d00b      	beq.n	80080ea <HAL_TIM_Base_Start_IT+0x42>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d8:	d007      	beq.n	80080ea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f042 0201 	orr.w	r2, r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	00010007 	.word	0x00010007

080080fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e01d      	b.n	800814a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f010 f914 	bl	8018350 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3304      	adds	r3, #4
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f000 fb22 	bl	8008784 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b02      	cmp	r3, #2
 8008166:	d122      	bne.n	80081ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b02      	cmp	r3, #2
 8008174:	d11b      	bne.n	80081ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f06f 0202 	mvn.w	r2, #2
 800817e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	f003 0303 	and.w	r3, r3, #3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fad7 	bl	8008748 <HAL_TIM_IC_CaptureCallback>
 800819a:	e005      	b.n	80081a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fac9 	bl	8008734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fada 	bl	800875c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b04      	cmp	r3, #4
 80081ba:	d122      	bne.n	8008202 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f003 0304 	and.w	r3, r3, #4
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d11b      	bne.n	8008202 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f06f 0204 	mvn.w	r2, #4
 80081d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 faad 	bl	8008748 <HAL_TIM_IC_CaptureCallback>
 80081ee:	e005      	b.n	80081fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fa9f 	bl	8008734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fab0 	bl	800875c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	f003 0308 	and.w	r3, r3, #8
 800820c:	2b08      	cmp	r3, #8
 800820e:	d122      	bne.n	8008256 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f003 0308 	and.w	r3, r3, #8
 800821a:	2b08      	cmp	r3, #8
 800821c:	d11b      	bne.n	8008256 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f06f 0208 	mvn.w	r2, #8
 8008226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2204      	movs	r2, #4
 800822c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa83 	bl	8008748 <HAL_TIM_IC_CaptureCallback>
 8008242:	e005      	b.n	8008250 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fa75 	bl	8008734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fa86 	bl	800875c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b10      	cmp	r3, #16
 8008262:	d122      	bne.n	80082aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f003 0310 	and.w	r3, r3, #16
 800826e:	2b10      	cmp	r3, #16
 8008270:	d11b      	bne.n	80082aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f06f 0210 	mvn.w	r2, #16
 800827a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2208      	movs	r2, #8
 8008280:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fa59 	bl	8008748 <HAL_TIM_IC_CaptureCallback>
 8008296:	e005      	b.n	80082a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fa4b 	bl	8008734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fa5c 	bl	800875c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d10e      	bne.n	80082d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d107      	bne.n	80082d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f06f 0201 	mvn.w	r2, #1
 80082ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f00f f995 	bl	8017600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e0:	2b80      	cmp	r3, #128	; 0x80
 80082e2:	d10e      	bne.n	8008302 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ee:	2b80      	cmp	r3, #128	; 0x80
 80082f0:	d107      	bne.n	8008302 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 febd 	bl	800907c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008310:	d10e      	bne.n	8008330 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831c:	2b80      	cmp	r3, #128	; 0x80
 800831e:	d107      	bne.n	8008330 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 feb0 	bl	8009090 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	d10e      	bne.n	800835c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008348:	2b40      	cmp	r3, #64	; 0x40
 800834a:	d107      	bne.n	800835c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fa0a 	bl	8008770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b20      	cmp	r3, #32
 8008368:	d10e      	bne.n	8008388 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b20      	cmp	r3, #32
 8008376:	d107      	bne.n	8008388 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f06f 0220 	mvn.w	r2, #32
 8008380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fe70 	bl	8009068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80083a6:	2302      	movs	r3, #2
 80083a8:	e105      	b.n	80085b6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2202      	movs	r2, #2
 80083b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b14      	cmp	r3, #20
 80083be:	f200 80f0 	bhi.w	80085a2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80083c2:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	0800841d 	.word	0x0800841d
 80083cc:	080085a3 	.word	0x080085a3
 80083d0:	080085a3 	.word	0x080085a3
 80083d4:	080085a3 	.word	0x080085a3
 80083d8:	0800845d 	.word	0x0800845d
 80083dc:	080085a3 	.word	0x080085a3
 80083e0:	080085a3 	.word	0x080085a3
 80083e4:	080085a3 	.word	0x080085a3
 80083e8:	0800849f 	.word	0x0800849f
 80083ec:	080085a3 	.word	0x080085a3
 80083f0:	080085a3 	.word	0x080085a3
 80083f4:	080085a3 	.word	0x080085a3
 80083f8:	080084df 	.word	0x080084df
 80083fc:	080085a3 	.word	0x080085a3
 8008400:	080085a3 	.word	0x080085a3
 8008404:	080085a3 	.word	0x080085a3
 8008408:	08008521 	.word	0x08008521
 800840c:	080085a3 	.word	0x080085a3
 8008410:	080085a3 	.word	0x080085a3
 8008414:	080085a3 	.word	0x080085a3
 8008418:	08008561 	.word	0x08008561
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fa4e 	bl	80088c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0208 	orr.w	r2, r2, #8
 8008436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 0204 	bic.w	r2, r2, #4
 8008446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6999      	ldr	r1, [r3, #24]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	691a      	ldr	r2, [r3, #16]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	619a      	str	r2, [r3, #24]
      break;
 800845a:	e0a3      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 faa0 	bl	80089a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699a      	ldr	r2, [r3, #24]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6999      	ldr	r1, [r3, #24]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	021a      	lsls	r2, r3, #8
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	619a      	str	r2, [r3, #24]
      break;
 800849c:	e082      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68b9      	ldr	r1, [r7, #8]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 faf7 	bl	8008a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69da      	ldr	r2, [r3, #28]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f042 0208 	orr.w	r2, r2, #8
 80084b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69da      	ldr	r2, [r3, #28]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 0204 	bic.w	r2, r2, #4
 80084c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69d9      	ldr	r1, [r3, #28]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	691a      	ldr	r2, [r3, #16]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	61da      	str	r2, [r3, #28]
      break;
 80084dc:	e062      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68b9      	ldr	r1, [r7, #8]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 fb4d 	bl	8008b84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69da      	ldr	r2, [r3, #28]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69da      	ldr	r2, [r3, #28]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69d9      	ldr	r1, [r3, #28]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	021a      	lsls	r2, r3, #8
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	61da      	str	r2, [r3, #28]
      break;
 800851e:	e041      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68b9      	ldr	r1, [r7, #8]
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fb84 	bl	8008c34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0208 	orr.w	r2, r2, #8
 800853a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0204 	bic.w	r2, r2, #4
 800854a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	691a      	ldr	r2, [r3, #16]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800855e:	e021      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fbb6 	bl	8008cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800857a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800858a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	021a      	lsls	r2, r3, #8
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085a0:	e000      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80085a2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop

080085c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_TIM_ConfigClockSource+0x18>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e0a6      	b.n	8008726 <HAL_TIM_ConfigClockSource+0x166>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4b4f      	ldr	r3, [pc, #316]	; (8008730 <HAL_TIM_ConfigClockSource+0x170>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b40      	cmp	r3, #64	; 0x40
 800860e:	d067      	beq.n	80086e0 <HAL_TIM_ConfigClockSource+0x120>
 8008610:	2b40      	cmp	r3, #64	; 0x40
 8008612:	d80b      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x6c>
 8008614:	2b10      	cmp	r3, #16
 8008616:	d073      	beq.n	8008700 <HAL_TIM_ConfigClockSource+0x140>
 8008618:	2b10      	cmp	r3, #16
 800861a:	d802      	bhi.n	8008622 <HAL_TIM_ConfigClockSource+0x62>
 800861c:	2b00      	cmp	r3, #0
 800861e:	d06f      	beq.n	8008700 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008620:	e078      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008622:	2b20      	cmp	r3, #32
 8008624:	d06c      	beq.n	8008700 <HAL_TIM_ConfigClockSource+0x140>
 8008626:	2b30      	cmp	r3, #48	; 0x30
 8008628:	d06a      	beq.n	8008700 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800862a:	e073      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800862c:	2b70      	cmp	r3, #112	; 0x70
 800862e:	d00d      	beq.n	800864c <HAL_TIM_ConfigClockSource+0x8c>
 8008630:	2b70      	cmp	r3, #112	; 0x70
 8008632:	d804      	bhi.n	800863e <HAL_TIM_ConfigClockSource+0x7e>
 8008634:	2b50      	cmp	r3, #80	; 0x50
 8008636:	d033      	beq.n	80086a0 <HAL_TIM_ConfigClockSource+0xe0>
 8008638:	2b60      	cmp	r3, #96	; 0x60
 800863a:	d041      	beq.n	80086c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800863c:	e06a      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800863e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008642:	d066      	beq.n	8008712 <HAL_TIM_ConfigClockSource+0x152>
 8008644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008648:	d017      	beq.n	800867a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800864a:	e063      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6818      	ldr	r0, [r3, #0]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	6899      	ldr	r1, [r3, #8]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f000 fc0a 	bl	8008e74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800866e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	609a      	str	r2, [r3, #8]
      break;
 8008678:	e04c      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6818      	ldr	r0, [r3, #0]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	6899      	ldr	r1, [r3, #8]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f000 fbf3 	bl	8008e74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689a      	ldr	r2, [r3, #8]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800869c:	609a      	str	r2, [r3, #8]
      break;
 800869e:	e039      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	6859      	ldr	r1, [r3, #4]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	461a      	mov	r2, r3
 80086ae:	f000 fb67 	bl	8008d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2150      	movs	r1, #80	; 0x50
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fbc0 	bl	8008e3e <TIM_ITRx_SetConfig>
      break;
 80086be:	e029      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6859      	ldr	r1, [r3, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	461a      	mov	r2, r3
 80086ce:	f000 fb86 	bl	8008dde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2160      	movs	r1, #96	; 0x60
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fbb0 	bl	8008e3e <TIM_ITRx_SetConfig>
      break;
 80086de:	e019      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6818      	ldr	r0, [r3, #0]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	6859      	ldr	r1, [r3, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	461a      	mov	r2, r3
 80086ee:	f000 fb47 	bl	8008d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2140      	movs	r1, #64	; 0x40
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fba0 	bl	8008e3e <TIM_ITRx_SetConfig>
      break;
 80086fe:	e009      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4619      	mov	r1, r3
 800870a:	4610      	mov	r0, r2
 800870c:	f000 fb97 	bl	8008e3e <TIM_ITRx_SetConfig>
      break;
 8008710:	e000      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	fffeff88 	.word	0xfffeff88

08008734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a40      	ldr	r2, [pc, #256]	; (8008898 <TIM_Base_SetConfig+0x114>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a2:	d00f      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a3d      	ldr	r2, [pc, #244]	; (800889c <TIM_Base_SetConfig+0x118>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00b      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a3c      	ldr	r2, [pc, #240]	; (80088a0 <TIM_Base_SetConfig+0x11c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d007      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a3b      	ldr	r2, [pc, #236]	; (80088a4 <TIM_Base_SetConfig+0x120>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d003      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a3a      	ldr	r2, [pc, #232]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d108      	bne.n	80087d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a2f      	ldr	r2, [pc, #188]	; (8008898 <TIM_Base_SetConfig+0x114>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d02b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e4:	d027      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2c      	ldr	r2, [pc, #176]	; (800889c <TIM_Base_SetConfig+0x118>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d023      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a2b      	ldr	r2, [pc, #172]	; (80088a0 <TIM_Base_SetConfig+0x11c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d01f      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a2a      	ldr	r2, [pc, #168]	; (80088a4 <TIM_Base_SetConfig+0x120>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d01b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a29      	ldr	r2, [pc, #164]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d017      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a28      	ldr	r2, [pc, #160]	; (80088ac <TIM_Base_SetConfig+0x128>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d013      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a27      	ldr	r2, [pc, #156]	; (80088b0 <TIM_Base_SetConfig+0x12c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d00f      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <TIM_Base_SetConfig+0x130>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d00b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a25      	ldr	r2, [pc, #148]	; (80088b8 <TIM_Base_SetConfig+0x134>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d007      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a24      	ldr	r2, [pc, #144]	; (80088bc <TIM_Base_SetConfig+0x138>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d003      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a23      	ldr	r2, [pc, #140]	; (80088c0 <TIM_Base_SetConfig+0x13c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d108      	bne.n	8008848 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800883c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <TIM_Base_SetConfig+0x114>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_Base_SetConfig+0xf8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a0c      	ldr	r2, [pc, #48]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d103      	bne.n	8008884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	691a      	ldr	r2, [r3, #16]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	615a      	str	r2, [r3, #20]
}
 800888a:	bf00      	nop
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40010000 	.word	0x40010000
 800889c:	40000400 	.word	0x40000400
 80088a0:	40000800 	.word	0x40000800
 80088a4:	40000c00 	.word	0x40000c00
 80088a8:	40010400 	.word	0x40010400
 80088ac:	40014000 	.word	0x40014000
 80088b0:	40014400 	.word	0x40014400
 80088b4:	40014800 	.word	0x40014800
 80088b8:	40001800 	.word	0x40001800
 80088bc:	40001c00 	.word	0x40001c00
 80088c0:	40002000 	.word	0x40002000

080088c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	f023 0201 	bic.w	r2, r3, #1
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	4b2b      	ldr	r3, [pc, #172]	; (800899c <TIM_OC1_SetConfig+0xd8>)
 80088f0:	4013      	ands	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0303 	bic.w	r3, r3, #3
 80088fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	4313      	orrs	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f023 0302 	bic.w	r3, r3, #2
 800890c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	4313      	orrs	r3, r2
 8008916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a21      	ldr	r2, [pc, #132]	; (80089a0 <TIM_OC1_SetConfig+0xdc>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d003      	beq.n	8008928 <TIM_OC1_SetConfig+0x64>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a20      	ldr	r2, [pc, #128]	; (80089a4 <TIM_OC1_SetConfig+0xe0>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d10c      	bne.n	8008942 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f023 0308 	bic.w	r3, r3, #8
 800892e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f023 0304 	bic.w	r3, r3, #4
 8008940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a16      	ldr	r2, [pc, #88]	; (80089a0 <TIM_OC1_SetConfig+0xdc>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d003      	beq.n	8008952 <TIM_OC1_SetConfig+0x8e>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a15      	ldr	r2, [pc, #84]	; (80089a4 <TIM_OC1_SetConfig+0xe0>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d111      	bne.n	8008976 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	4313      	orrs	r3, r2
 800896a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	4313      	orrs	r3, r2
 8008974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	621a      	str	r2, [r3, #32]
}
 8008990:	bf00      	nop
 8008992:	371c      	adds	r7, #28
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	fffeff8f 	.word	0xfffeff8f
 80089a0:	40010000 	.word	0x40010000
 80089a4:	40010400 	.word	0x40010400

080089a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	f023 0210 	bic.w	r2, r3, #16
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4b2e      	ldr	r3, [pc, #184]	; (8008a8c <TIM_OC2_SetConfig+0xe4>)
 80089d4:	4013      	ands	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	021b      	lsls	r3, r3, #8
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f023 0320 	bic.w	r3, r3, #32
 80089f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	011b      	lsls	r3, r3, #4
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a23      	ldr	r2, [pc, #140]	; (8008a90 <TIM_OC2_SetConfig+0xe8>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d003      	beq.n	8008a10 <TIM_OC2_SetConfig+0x68>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a22      	ldr	r2, [pc, #136]	; (8008a94 <TIM_OC2_SetConfig+0xec>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d10d      	bne.n	8008a2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a18      	ldr	r2, [pc, #96]	; (8008a90 <TIM_OC2_SetConfig+0xe8>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d003      	beq.n	8008a3c <TIM_OC2_SetConfig+0x94>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a17      	ldr	r2, [pc, #92]	; (8008a94 <TIM_OC2_SetConfig+0xec>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d113      	bne.n	8008a64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	621a      	str	r2, [r3, #32]
}
 8008a7e:	bf00      	nop
 8008a80:	371c      	adds	r7, #28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	feff8fff 	.word	0xfeff8fff
 8008a90:	40010000 	.word	0x40010000
 8008a94:	40010400 	.word	0x40010400

08008a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4b2d      	ldr	r3, [pc, #180]	; (8008b78 <TIM_OC3_SetConfig+0xe0>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0303 	bic.w	r3, r3, #3
 8008ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	021b      	lsls	r3, r3, #8
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a22      	ldr	r2, [pc, #136]	; (8008b7c <TIM_OC3_SetConfig+0xe4>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d003      	beq.n	8008afe <TIM_OC3_SetConfig+0x66>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a21      	ldr	r2, [pc, #132]	; (8008b80 <TIM_OC3_SetConfig+0xe8>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d10d      	bne.n	8008b1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	021b      	lsls	r3, r3, #8
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a17      	ldr	r2, [pc, #92]	; (8008b7c <TIM_OC3_SetConfig+0xe4>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d003      	beq.n	8008b2a <TIM_OC3_SetConfig+0x92>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a16      	ldr	r2, [pc, #88]	; (8008b80 <TIM_OC3_SetConfig+0xe8>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d113      	bne.n	8008b52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	621a      	str	r2, [r3, #32]
}
 8008b6c:	bf00      	nop
 8008b6e:	371c      	adds	r7, #28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	fffeff8f 	.word	0xfffeff8f
 8008b7c:	40010000 	.word	0x40010000
 8008b80:	40010400 	.word	0x40010400

08008b84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4b1e      	ldr	r3, [pc, #120]	; (8008c28 <TIM_OC4_SetConfig+0xa4>)
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	021b      	lsls	r3, r3, #8
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	031b      	lsls	r3, r3, #12
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a13      	ldr	r2, [pc, #76]	; (8008c2c <TIM_OC4_SetConfig+0xa8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d003      	beq.n	8008bec <TIM_OC4_SetConfig+0x68>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a12      	ldr	r2, [pc, #72]	; (8008c30 <TIM_OC4_SetConfig+0xac>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d109      	bne.n	8008c00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	019b      	lsls	r3, r3, #6
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	621a      	str	r2, [r3, #32]
}
 8008c1a:	bf00      	nop
 8008c1c:	371c      	adds	r7, #28
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	feff8fff 	.word	0xfeff8fff
 8008c2c:	40010000 	.word	0x40010000
 8008c30:	40010400 	.word	0x40010400

08008c34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4b1b      	ldr	r3, [pc, #108]	; (8008ccc <TIM_OC5_SetConfig+0x98>)
 8008c60:	4013      	ands	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	041b      	lsls	r3, r3, #16
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a12      	ldr	r2, [pc, #72]	; (8008cd0 <TIM_OC5_SetConfig+0x9c>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d003      	beq.n	8008c92 <TIM_OC5_SetConfig+0x5e>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a11      	ldr	r2, [pc, #68]	; (8008cd4 <TIM_OC5_SetConfig+0xa0>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d109      	bne.n	8008ca6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	021b      	lsls	r3, r3, #8
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	621a      	str	r2, [r3, #32]
}
 8008cc0:	bf00      	nop
 8008cc2:	371c      	adds	r7, #28
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	fffeff8f 	.word	0xfffeff8f
 8008cd0:	40010000 	.word	0x40010000
 8008cd4:	40010400 	.word	0x40010400

08008cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4b1c      	ldr	r3, [pc, #112]	; (8008d74 <TIM_OC6_SetConfig+0x9c>)
 8008d04:	4013      	ands	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	021b      	lsls	r3, r3, #8
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	051b      	lsls	r3, r3, #20
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a13      	ldr	r2, [pc, #76]	; (8008d78 <TIM_OC6_SetConfig+0xa0>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d003      	beq.n	8008d38 <TIM_OC6_SetConfig+0x60>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a12      	ldr	r2, [pc, #72]	; (8008d7c <TIM_OC6_SetConfig+0xa4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d109      	bne.n	8008d4c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	029b      	lsls	r3, r3, #10
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	621a      	str	r2, [r3, #32]
}
 8008d66:	bf00      	nop
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	feff8fff 	.word	0xfeff8fff
 8008d78:	40010000 	.word	0x40010000
 8008d7c:	40010400 	.word	0x40010400

08008d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	f023 0201 	bic.w	r2, r3, #1
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f023 030a 	bic.w	r3, r3, #10
 8008dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	621a      	str	r2, [r3, #32]
}
 8008dd2:	bf00      	nop
 8008dd4:	371c      	adds	r7, #28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b087      	sub	sp, #28
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	60f8      	str	r0, [r7, #12]
 8008de6:	60b9      	str	r1, [r7, #8]
 8008de8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	f023 0210 	bic.w	r2, r3, #16
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6a1b      	ldr	r3, [r3, #32]
 8008e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	031b      	lsls	r3, r3, #12
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	011b      	lsls	r3, r3, #4
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	621a      	str	r2, [r3, #32]
}
 8008e32:	bf00      	nop
 8008e34:	371c      	adds	r7, #28
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b085      	sub	sp, #20
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	f043 0307 	orr.w	r3, r3, #7
 8008e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	609a      	str	r2, [r3, #8]
}
 8008e68:	bf00      	nop
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	021a      	lsls	r2, r3, #8
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	431a      	orrs	r2, r3
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	609a      	str	r2, [r3, #8]
}
 8008ea8:	bf00      	nop
 8008eaa:	371c      	adds	r7, #28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d101      	bne.n	8008ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ec8:	2302      	movs	r3, #2
 8008eca:	e045      	b.n	8008f58 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a1c      	ldr	r2, [pc, #112]	; (8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d004      	beq.n	8008f00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a1b      	ldr	r2, [pc, #108]	; (8008f68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d108      	bne.n	8008f12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f2a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	40010000 	.word	0x40010000
 8008f68:	40010400 	.word	0x40010400

08008f6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d101      	bne.n	8008f88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e065      	b.n	8009054 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	041b      	lsls	r3, r3, #16
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a16      	ldr	r2, [pc, #88]	; (8009060 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d004      	beq.n	8009016 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a14      	ldr	r2, [pc, #80]	; (8009064 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d115      	bne.n	8009042 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	051b      	lsls	r3, r3, #20
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	4313      	orrs	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	40010000 	.word	0x40010000
 8009064:	40010400 	.word	0x40010400

08009068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d101      	bne.n	80090b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e040      	b.n	8009138 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d106      	bne.n	80090cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f00f fa0c 	bl	80184e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2224      	movs	r2, #36	; 0x24
 80090d0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f022 0201 	bic.w	r2, r2, #1
 80090e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f82c 	bl	8009140 <UART_SetConfig>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e022      	b.n	8009138 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d002      	beq.n	8009100 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fac4 	bl	8009688 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800910e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689a      	ldr	r2, [r3, #8]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800911e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f042 0201 	orr.w	r2, r2, #1
 800912e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fb4b 	bl	80097cc <UART_CheckIdleState>
 8009136:	4603      	mov	r3, r0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009148:	2300      	movs	r3, #0
 800914a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	431a      	orrs	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	431a      	orrs	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	4313      	orrs	r3, r2
 8009166:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	4bb1      	ldr	r3, [pc, #708]	; (8009434 <UART_SetConfig+0x2f4>)
 8009170:	4013      	ands	r3, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	6812      	ldr	r2, [r2, #0]
 8009176:	6939      	ldr	r1, [r7, #16]
 8009178:	430b      	orrs	r3, r1
 800917a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68da      	ldr	r2, [r3, #12]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	4313      	orrs	r3, r2
 80091a0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a9f      	ldr	r2, [pc, #636]	; (8009438 <UART_SetConfig+0x2f8>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d121      	bne.n	8009204 <UART_SetConfig+0xc4>
 80091c0:	4b9e      	ldr	r3, [pc, #632]	; (800943c <UART_SetConfig+0x2fc>)
 80091c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c6:	f003 0303 	and.w	r3, r3, #3
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d816      	bhi.n	80091fc <UART_SetConfig+0xbc>
 80091ce:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <UART_SetConfig+0x94>)
 80091d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d4:	080091e5 	.word	0x080091e5
 80091d8:	080091f1 	.word	0x080091f1
 80091dc:	080091eb 	.word	0x080091eb
 80091e0:	080091f7 	.word	0x080091f7
 80091e4:	2301      	movs	r3, #1
 80091e6:	77fb      	strb	r3, [r7, #31]
 80091e8:	e151      	b.n	800948e <UART_SetConfig+0x34e>
 80091ea:	2302      	movs	r3, #2
 80091ec:	77fb      	strb	r3, [r7, #31]
 80091ee:	e14e      	b.n	800948e <UART_SetConfig+0x34e>
 80091f0:	2304      	movs	r3, #4
 80091f2:	77fb      	strb	r3, [r7, #31]
 80091f4:	e14b      	b.n	800948e <UART_SetConfig+0x34e>
 80091f6:	2308      	movs	r3, #8
 80091f8:	77fb      	strb	r3, [r7, #31]
 80091fa:	e148      	b.n	800948e <UART_SetConfig+0x34e>
 80091fc:	2310      	movs	r3, #16
 80091fe:	77fb      	strb	r3, [r7, #31]
 8009200:	bf00      	nop
 8009202:	e144      	b.n	800948e <UART_SetConfig+0x34e>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a8d      	ldr	r2, [pc, #564]	; (8009440 <UART_SetConfig+0x300>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d134      	bne.n	8009278 <UART_SetConfig+0x138>
 800920e:	4b8b      	ldr	r3, [pc, #556]	; (800943c <UART_SetConfig+0x2fc>)
 8009210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009214:	f003 030c 	and.w	r3, r3, #12
 8009218:	2b0c      	cmp	r3, #12
 800921a:	d829      	bhi.n	8009270 <UART_SetConfig+0x130>
 800921c:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <UART_SetConfig+0xe4>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009259 	.word	0x08009259
 8009228:	08009271 	.word	0x08009271
 800922c:	08009271 	.word	0x08009271
 8009230:	08009271 	.word	0x08009271
 8009234:	08009265 	.word	0x08009265
 8009238:	08009271 	.word	0x08009271
 800923c:	08009271 	.word	0x08009271
 8009240:	08009271 	.word	0x08009271
 8009244:	0800925f 	.word	0x0800925f
 8009248:	08009271 	.word	0x08009271
 800924c:	08009271 	.word	0x08009271
 8009250:	08009271 	.word	0x08009271
 8009254:	0800926b 	.word	0x0800926b
 8009258:	2300      	movs	r3, #0
 800925a:	77fb      	strb	r3, [r7, #31]
 800925c:	e117      	b.n	800948e <UART_SetConfig+0x34e>
 800925e:	2302      	movs	r3, #2
 8009260:	77fb      	strb	r3, [r7, #31]
 8009262:	e114      	b.n	800948e <UART_SetConfig+0x34e>
 8009264:	2304      	movs	r3, #4
 8009266:	77fb      	strb	r3, [r7, #31]
 8009268:	e111      	b.n	800948e <UART_SetConfig+0x34e>
 800926a:	2308      	movs	r3, #8
 800926c:	77fb      	strb	r3, [r7, #31]
 800926e:	e10e      	b.n	800948e <UART_SetConfig+0x34e>
 8009270:	2310      	movs	r3, #16
 8009272:	77fb      	strb	r3, [r7, #31]
 8009274:	bf00      	nop
 8009276:	e10a      	b.n	800948e <UART_SetConfig+0x34e>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a71      	ldr	r2, [pc, #452]	; (8009444 <UART_SetConfig+0x304>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d120      	bne.n	80092c4 <UART_SetConfig+0x184>
 8009282:	4b6e      	ldr	r3, [pc, #440]	; (800943c <UART_SetConfig+0x2fc>)
 8009284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009288:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800928c:	2b10      	cmp	r3, #16
 800928e:	d00f      	beq.n	80092b0 <UART_SetConfig+0x170>
 8009290:	2b10      	cmp	r3, #16
 8009292:	d802      	bhi.n	800929a <UART_SetConfig+0x15a>
 8009294:	2b00      	cmp	r3, #0
 8009296:	d005      	beq.n	80092a4 <UART_SetConfig+0x164>
 8009298:	e010      	b.n	80092bc <UART_SetConfig+0x17c>
 800929a:	2b20      	cmp	r3, #32
 800929c:	d005      	beq.n	80092aa <UART_SetConfig+0x16a>
 800929e:	2b30      	cmp	r3, #48	; 0x30
 80092a0:	d009      	beq.n	80092b6 <UART_SetConfig+0x176>
 80092a2:	e00b      	b.n	80092bc <UART_SetConfig+0x17c>
 80092a4:	2300      	movs	r3, #0
 80092a6:	77fb      	strb	r3, [r7, #31]
 80092a8:	e0f1      	b.n	800948e <UART_SetConfig+0x34e>
 80092aa:	2302      	movs	r3, #2
 80092ac:	77fb      	strb	r3, [r7, #31]
 80092ae:	e0ee      	b.n	800948e <UART_SetConfig+0x34e>
 80092b0:	2304      	movs	r3, #4
 80092b2:	77fb      	strb	r3, [r7, #31]
 80092b4:	e0eb      	b.n	800948e <UART_SetConfig+0x34e>
 80092b6:	2308      	movs	r3, #8
 80092b8:	77fb      	strb	r3, [r7, #31]
 80092ba:	e0e8      	b.n	800948e <UART_SetConfig+0x34e>
 80092bc:	2310      	movs	r3, #16
 80092be:	77fb      	strb	r3, [r7, #31]
 80092c0:	bf00      	nop
 80092c2:	e0e4      	b.n	800948e <UART_SetConfig+0x34e>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a5f      	ldr	r2, [pc, #380]	; (8009448 <UART_SetConfig+0x308>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d120      	bne.n	8009310 <UART_SetConfig+0x1d0>
 80092ce:	4b5b      	ldr	r3, [pc, #364]	; (800943c <UART_SetConfig+0x2fc>)
 80092d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80092d8:	2b40      	cmp	r3, #64	; 0x40
 80092da:	d00f      	beq.n	80092fc <UART_SetConfig+0x1bc>
 80092dc:	2b40      	cmp	r3, #64	; 0x40
 80092de:	d802      	bhi.n	80092e6 <UART_SetConfig+0x1a6>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <UART_SetConfig+0x1b0>
 80092e4:	e010      	b.n	8009308 <UART_SetConfig+0x1c8>
 80092e6:	2b80      	cmp	r3, #128	; 0x80
 80092e8:	d005      	beq.n	80092f6 <UART_SetConfig+0x1b6>
 80092ea:	2bc0      	cmp	r3, #192	; 0xc0
 80092ec:	d009      	beq.n	8009302 <UART_SetConfig+0x1c2>
 80092ee:	e00b      	b.n	8009308 <UART_SetConfig+0x1c8>
 80092f0:	2300      	movs	r3, #0
 80092f2:	77fb      	strb	r3, [r7, #31]
 80092f4:	e0cb      	b.n	800948e <UART_SetConfig+0x34e>
 80092f6:	2302      	movs	r3, #2
 80092f8:	77fb      	strb	r3, [r7, #31]
 80092fa:	e0c8      	b.n	800948e <UART_SetConfig+0x34e>
 80092fc:	2304      	movs	r3, #4
 80092fe:	77fb      	strb	r3, [r7, #31]
 8009300:	e0c5      	b.n	800948e <UART_SetConfig+0x34e>
 8009302:	2308      	movs	r3, #8
 8009304:	77fb      	strb	r3, [r7, #31]
 8009306:	e0c2      	b.n	800948e <UART_SetConfig+0x34e>
 8009308:	2310      	movs	r3, #16
 800930a:	77fb      	strb	r3, [r7, #31]
 800930c:	bf00      	nop
 800930e:	e0be      	b.n	800948e <UART_SetConfig+0x34e>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a4d      	ldr	r2, [pc, #308]	; (800944c <UART_SetConfig+0x30c>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d124      	bne.n	8009364 <UART_SetConfig+0x224>
 800931a:	4b48      	ldr	r3, [pc, #288]	; (800943c <UART_SetConfig+0x2fc>)
 800931c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009328:	d012      	beq.n	8009350 <UART_SetConfig+0x210>
 800932a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800932e:	d802      	bhi.n	8009336 <UART_SetConfig+0x1f6>
 8009330:	2b00      	cmp	r3, #0
 8009332:	d007      	beq.n	8009344 <UART_SetConfig+0x204>
 8009334:	e012      	b.n	800935c <UART_SetConfig+0x21c>
 8009336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800933a:	d006      	beq.n	800934a <UART_SetConfig+0x20a>
 800933c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009340:	d009      	beq.n	8009356 <UART_SetConfig+0x216>
 8009342:	e00b      	b.n	800935c <UART_SetConfig+0x21c>
 8009344:	2300      	movs	r3, #0
 8009346:	77fb      	strb	r3, [r7, #31]
 8009348:	e0a1      	b.n	800948e <UART_SetConfig+0x34e>
 800934a:	2302      	movs	r3, #2
 800934c:	77fb      	strb	r3, [r7, #31]
 800934e:	e09e      	b.n	800948e <UART_SetConfig+0x34e>
 8009350:	2304      	movs	r3, #4
 8009352:	77fb      	strb	r3, [r7, #31]
 8009354:	e09b      	b.n	800948e <UART_SetConfig+0x34e>
 8009356:	2308      	movs	r3, #8
 8009358:	77fb      	strb	r3, [r7, #31]
 800935a:	e098      	b.n	800948e <UART_SetConfig+0x34e>
 800935c:	2310      	movs	r3, #16
 800935e:	77fb      	strb	r3, [r7, #31]
 8009360:	bf00      	nop
 8009362:	e094      	b.n	800948e <UART_SetConfig+0x34e>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a39      	ldr	r2, [pc, #228]	; (8009450 <UART_SetConfig+0x310>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d124      	bne.n	80093b8 <UART_SetConfig+0x278>
 800936e:	4b33      	ldr	r3, [pc, #204]	; (800943c <UART_SetConfig+0x2fc>)
 8009370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009374:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800937c:	d012      	beq.n	80093a4 <UART_SetConfig+0x264>
 800937e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009382:	d802      	bhi.n	800938a <UART_SetConfig+0x24a>
 8009384:	2b00      	cmp	r3, #0
 8009386:	d007      	beq.n	8009398 <UART_SetConfig+0x258>
 8009388:	e012      	b.n	80093b0 <UART_SetConfig+0x270>
 800938a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800938e:	d006      	beq.n	800939e <UART_SetConfig+0x25e>
 8009390:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009394:	d009      	beq.n	80093aa <UART_SetConfig+0x26a>
 8009396:	e00b      	b.n	80093b0 <UART_SetConfig+0x270>
 8009398:	2301      	movs	r3, #1
 800939a:	77fb      	strb	r3, [r7, #31]
 800939c:	e077      	b.n	800948e <UART_SetConfig+0x34e>
 800939e:	2302      	movs	r3, #2
 80093a0:	77fb      	strb	r3, [r7, #31]
 80093a2:	e074      	b.n	800948e <UART_SetConfig+0x34e>
 80093a4:	2304      	movs	r3, #4
 80093a6:	77fb      	strb	r3, [r7, #31]
 80093a8:	e071      	b.n	800948e <UART_SetConfig+0x34e>
 80093aa:	2308      	movs	r3, #8
 80093ac:	77fb      	strb	r3, [r7, #31]
 80093ae:	e06e      	b.n	800948e <UART_SetConfig+0x34e>
 80093b0:	2310      	movs	r3, #16
 80093b2:	77fb      	strb	r3, [r7, #31]
 80093b4:	bf00      	nop
 80093b6:	e06a      	b.n	800948e <UART_SetConfig+0x34e>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a25      	ldr	r2, [pc, #148]	; (8009454 <UART_SetConfig+0x314>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d124      	bne.n	800940c <UART_SetConfig+0x2cc>
 80093c2:	4b1e      	ldr	r3, [pc, #120]	; (800943c <UART_SetConfig+0x2fc>)
 80093c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80093cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d0:	d012      	beq.n	80093f8 <UART_SetConfig+0x2b8>
 80093d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d6:	d802      	bhi.n	80093de <UART_SetConfig+0x29e>
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d007      	beq.n	80093ec <UART_SetConfig+0x2ac>
 80093dc:	e012      	b.n	8009404 <UART_SetConfig+0x2c4>
 80093de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093e2:	d006      	beq.n	80093f2 <UART_SetConfig+0x2b2>
 80093e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093e8:	d009      	beq.n	80093fe <UART_SetConfig+0x2be>
 80093ea:	e00b      	b.n	8009404 <UART_SetConfig+0x2c4>
 80093ec:	2300      	movs	r3, #0
 80093ee:	77fb      	strb	r3, [r7, #31]
 80093f0:	e04d      	b.n	800948e <UART_SetConfig+0x34e>
 80093f2:	2302      	movs	r3, #2
 80093f4:	77fb      	strb	r3, [r7, #31]
 80093f6:	e04a      	b.n	800948e <UART_SetConfig+0x34e>
 80093f8:	2304      	movs	r3, #4
 80093fa:	77fb      	strb	r3, [r7, #31]
 80093fc:	e047      	b.n	800948e <UART_SetConfig+0x34e>
 80093fe:	2308      	movs	r3, #8
 8009400:	77fb      	strb	r3, [r7, #31]
 8009402:	e044      	b.n	800948e <UART_SetConfig+0x34e>
 8009404:	2310      	movs	r3, #16
 8009406:	77fb      	strb	r3, [r7, #31]
 8009408:	bf00      	nop
 800940a:	e040      	b.n	800948e <UART_SetConfig+0x34e>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a11      	ldr	r2, [pc, #68]	; (8009458 <UART_SetConfig+0x318>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d139      	bne.n	800948a <UART_SetConfig+0x34a>
 8009416:	4b09      	ldr	r3, [pc, #36]	; (800943c <UART_SetConfig+0x2fc>)
 8009418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800941c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009424:	d027      	beq.n	8009476 <UART_SetConfig+0x336>
 8009426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800942a:	d817      	bhi.n	800945c <UART_SetConfig+0x31c>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01c      	beq.n	800946a <UART_SetConfig+0x32a>
 8009430:	e027      	b.n	8009482 <UART_SetConfig+0x342>
 8009432:	bf00      	nop
 8009434:	efff69f3 	.word	0xefff69f3
 8009438:	40011000 	.word	0x40011000
 800943c:	40023800 	.word	0x40023800
 8009440:	40004400 	.word	0x40004400
 8009444:	40004800 	.word	0x40004800
 8009448:	40004c00 	.word	0x40004c00
 800944c:	40005000 	.word	0x40005000
 8009450:	40011400 	.word	0x40011400
 8009454:	40007800 	.word	0x40007800
 8009458:	40007c00 	.word	0x40007c00
 800945c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009460:	d006      	beq.n	8009470 <UART_SetConfig+0x330>
 8009462:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009466:	d009      	beq.n	800947c <UART_SetConfig+0x33c>
 8009468:	e00b      	b.n	8009482 <UART_SetConfig+0x342>
 800946a:	2300      	movs	r3, #0
 800946c:	77fb      	strb	r3, [r7, #31]
 800946e:	e00e      	b.n	800948e <UART_SetConfig+0x34e>
 8009470:	2302      	movs	r3, #2
 8009472:	77fb      	strb	r3, [r7, #31]
 8009474:	e00b      	b.n	800948e <UART_SetConfig+0x34e>
 8009476:	2304      	movs	r3, #4
 8009478:	77fb      	strb	r3, [r7, #31]
 800947a:	e008      	b.n	800948e <UART_SetConfig+0x34e>
 800947c:	2308      	movs	r3, #8
 800947e:	77fb      	strb	r3, [r7, #31]
 8009480:	e005      	b.n	800948e <UART_SetConfig+0x34e>
 8009482:	2310      	movs	r3, #16
 8009484:	77fb      	strb	r3, [r7, #31]
 8009486:	bf00      	nop
 8009488:	e001      	b.n	800948e <UART_SetConfig+0x34e>
 800948a:	2310      	movs	r3, #16
 800948c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009496:	d17c      	bne.n	8009592 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8009498:	7ffb      	ldrb	r3, [r7, #31]
 800949a:	2b08      	cmp	r3, #8
 800949c:	d859      	bhi.n	8009552 <UART_SetConfig+0x412>
 800949e:	a201      	add	r2, pc, #4	; (adr r2, 80094a4 <UART_SetConfig+0x364>)
 80094a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a4:	080094c9 	.word	0x080094c9
 80094a8:	080094e7 	.word	0x080094e7
 80094ac:	08009505 	.word	0x08009505
 80094b0:	08009553 	.word	0x08009553
 80094b4:	0800951d 	.word	0x0800951d
 80094b8:	08009553 	.word	0x08009553
 80094bc:	08009553 	.word	0x08009553
 80094c0:	08009553 	.word	0x08009553
 80094c4:	0800953b 	.word	0x0800953b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80094c8:	f7fc f884 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 80094cc:	4603      	mov	r3, r0
 80094ce:	005a      	lsls	r2, r3, #1
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	085b      	lsrs	r3, r3, #1
 80094d6:	441a      	add	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	61bb      	str	r3, [r7, #24]
        break;
 80094e4:	e038      	b.n	8009558 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80094e6:	f7fc f889 	bl	80055fc <HAL_RCC_GetPCLK2Freq>
 80094ea:	4603      	mov	r3, r0
 80094ec:	005a      	lsls	r2, r3, #1
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	085b      	lsrs	r3, r3, #1
 80094f4:	441a      	add	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80094fe:	b29b      	uxth	r3, r3
 8009500:	61bb      	str	r3, [r7, #24]
        break;
 8009502:	e029      	b.n	8009558 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	085a      	lsrs	r2, r3, #1
 800950a:	4b5d      	ldr	r3, [pc, #372]	; (8009680 <UART_SetConfig+0x540>)
 800950c:	4413      	add	r3, r2
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	6852      	ldr	r2, [r2, #4]
 8009512:	fbb3 f3f2 	udiv	r3, r3, r2
 8009516:	b29b      	uxth	r3, r3
 8009518:	61bb      	str	r3, [r7, #24]
        break;
 800951a:	e01d      	b.n	8009558 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800951c:	f7fb ff9c 	bl	8005458 <HAL_RCC_GetSysClockFreq>
 8009520:	4603      	mov	r3, r0
 8009522:	005a      	lsls	r2, r3, #1
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	085b      	lsrs	r3, r3, #1
 800952a:	441a      	add	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	fbb2 f3f3 	udiv	r3, r2, r3
 8009534:	b29b      	uxth	r3, r3
 8009536:	61bb      	str	r3, [r7, #24]
        break;
 8009538:	e00e      	b.n	8009558 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	085b      	lsrs	r3, r3, #1
 8009540:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	fbb2 f3f3 	udiv	r3, r2, r3
 800954c:	b29b      	uxth	r3, r3
 800954e:	61bb      	str	r3, [r7, #24]
        break;
 8009550:	e002      	b.n	8009558 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	75fb      	strb	r3, [r7, #23]
        break;
 8009556:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	2b0f      	cmp	r3, #15
 800955c:	d916      	bls.n	800958c <UART_SetConfig+0x44c>
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009564:	d212      	bcs.n	800958c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	b29b      	uxth	r3, r3
 800956a:	f023 030f 	bic.w	r3, r3, #15
 800956e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	085b      	lsrs	r3, r3, #1
 8009574:	b29b      	uxth	r3, r3
 8009576:	f003 0307 	and.w	r3, r3, #7
 800957a:	b29a      	uxth	r2, r3
 800957c:	89fb      	ldrh	r3, [r7, #14]
 800957e:	4313      	orrs	r3, r2
 8009580:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	89fa      	ldrh	r2, [r7, #14]
 8009588:	60da      	str	r2, [r3, #12]
 800958a:	e06e      	b.n	800966a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	75fb      	strb	r3, [r7, #23]
 8009590:	e06b      	b.n	800966a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8009592:	7ffb      	ldrb	r3, [r7, #31]
 8009594:	2b08      	cmp	r3, #8
 8009596:	d857      	bhi.n	8009648 <UART_SetConfig+0x508>
 8009598:	a201      	add	r2, pc, #4	; (adr r2, 80095a0 <UART_SetConfig+0x460>)
 800959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959e:	bf00      	nop
 80095a0:	080095c5 	.word	0x080095c5
 80095a4:	080095e1 	.word	0x080095e1
 80095a8:	080095fd 	.word	0x080095fd
 80095ac:	08009649 	.word	0x08009649
 80095b0:	08009615 	.word	0x08009615
 80095b4:	08009649 	.word	0x08009649
 80095b8:	08009649 	.word	0x08009649
 80095bc:	08009649 	.word	0x08009649
 80095c0:	08009631 	.word	0x08009631
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80095c4:	f7fc f806 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 80095c8:	4602      	mov	r2, r0
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	085b      	lsrs	r3, r3, #1
 80095d0:	441a      	add	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095da:	b29b      	uxth	r3, r3
 80095dc:	61bb      	str	r3, [r7, #24]
        break;
 80095de:	e036      	b.n	800964e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80095e0:	f7fc f80c 	bl	80055fc <HAL_RCC_GetPCLK2Freq>
 80095e4:	4602      	mov	r2, r0
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	085b      	lsrs	r3, r3, #1
 80095ec:	441a      	add	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	61bb      	str	r3, [r7, #24]
        break;
 80095fa:	e028      	b.n	800964e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	085a      	lsrs	r2, r3, #1
 8009602:	4b20      	ldr	r3, [pc, #128]	; (8009684 <UART_SetConfig+0x544>)
 8009604:	4413      	add	r3, r2
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	6852      	ldr	r2, [r2, #4]
 800960a:	fbb3 f3f2 	udiv	r3, r3, r2
 800960e:	b29b      	uxth	r3, r3
 8009610:	61bb      	str	r3, [r7, #24]
        break;
 8009612:	e01c      	b.n	800964e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009614:	f7fb ff20 	bl	8005458 <HAL_RCC_GetSysClockFreq>
 8009618:	4602      	mov	r2, r0
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	085b      	lsrs	r3, r3, #1
 8009620:	441a      	add	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	fbb2 f3f3 	udiv	r3, r2, r3
 800962a:	b29b      	uxth	r3, r3
 800962c:	61bb      	str	r3, [r7, #24]
        break;
 800962e:	e00e      	b.n	800964e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	085b      	lsrs	r3, r3, #1
 8009636:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009642:	b29b      	uxth	r3, r3
 8009644:	61bb      	str	r3, [r7, #24]
        break;
 8009646:	e002      	b.n	800964e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	75fb      	strb	r3, [r7, #23]
        break;
 800964c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	2b0f      	cmp	r3, #15
 8009652:	d908      	bls.n	8009666 <UART_SetConfig+0x526>
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800965a:	d204      	bcs.n	8009666 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	69ba      	ldr	r2, [r7, #24]
 8009662:	60da      	str	r2, [r3, #12]
 8009664:	e001      	b.n	800966a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009676:	7dfb      	ldrb	r3, [r7, #23]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3720      	adds	r7, #32
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	01e84800 	.word	0x01e84800
 8009684:	00f42400 	.word	0x00f42400

08009688 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009694:	f003 0301 	and.w	r3, r3, #1
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00a      	beq.n	80096b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	430a      	orrs	r2, r1
 80096b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	f003 0302 	and.w	r3, r3, #2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00a      	beq.n	80096d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	f003 0304 	and.w	r3, r3, #4
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00a      	beq.n	80096f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	f003 0308 	and.w	r3, r3, #8
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	430a      	orrs	r2, r1
 8009716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971c:	f003 0310 	and.w	r3, r3, #16
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00a      	beq.n	800973a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	430a      	orrs	r2, r1
 8009738:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	f003 0320 	and.w	r3, r3, #32
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00a      	beq.n	800975c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	430a      	orrs	r2, r1
 800975a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009764:	2b00      	cmp	r3, #0
 8009766:	d01a      	beq.n	800979e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	430a      	orrs	r2, r1
 800977c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009786:	d10a      	bne.n	800979e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	430a      	orrs	r2, r1
 800979c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	430a      	orrs	r2, r1
 80097be:	605a      	str	r2, [r3, #4]
  }
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af02      	add	r7, sp, #8
 80097d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80097da:	f7f6 ff0b 	bl	80005f4 <HAL_GetTick>
 80097de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0308 	and.w	r3, r3, #8
 80097ea:	2b08      	cmp	r3, #8
 80097ec:	d10e      	bne.n	800980c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f814 	bl	800982a <UART_WaitOnFlagUntilTimeout>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e00a      	b.n	8009822 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2220      	movs	r2, #32
 8009810:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2220      	movs	r2, #32
 8009816:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	60f8      	str	r0, [r7, #12]
 8009832:	60b9      	str	r1, [r7, #8]
 8009834:	603b      	str	r3, [r7, #0]
 8009836:	4613      	mov	r3, r2
 8009838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800983a:	e02a      	b.n	8009892 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009842:	d026      	beq.n	8009892 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009844:	f7f6 fed6 	bl	80005f4 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	69ba      	ldr	r2, [r7, #24]
 8009850:	429a      	cmp	r2, r3
 8009852:	d302      	bcc.n	800985a <UART_WaitOnFlagUntilTimeout+0x30>
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d11b      	bne.n	8009892 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009868:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689a      	ldr	r2, [r3, #8]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 0201 	bic.w	r2, r2, #1
 8009878:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2220      	movs	r2, #32
 800987e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2220      	movs	r2, #32
 8009884:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e00f      	b.n	80098b2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	69da      	ldr	r2, [r3, #28]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	4013      	ands	r3, r2
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	429a      	cmp	r2, r3
 80098a0:	bf0c      	ite	eq
 80098a2:	2301      	moveq	r3, #1
 80098a4:	2300      	movne	r3, #0
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	461a      	mov	r2, r3
 80098aa:	79fb      	ldrb	r3, [r7, #7]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d0c5      	beq.n	800983c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d027      	beq.n	8009926 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4b2f      	ldr	r3, [pc, #188]	; (800999c <FMC_SDRAM_Init+0xe0>)
 80098e0:	4013      	ands	r3, r2
 80098e2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80098ec:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80098f2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80098f8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80098fe:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8009904:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800990a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8009910:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009916:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	e032      	b.n	800998c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009932:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800993c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009942:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	4313      	orrs	r3, r2
 8009948:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	4b12      	ldr	r3, [pc, #72]	; (800999c <FMC_SDRAM_Init+0xe0>)
 8009954:	4013      	ands	r3, r2
 8009956:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009960:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8009966:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800996c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8009972:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8009978:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	4313      	orrs	r3, r2
 800997e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	ffff8000 	.word	0xffff8000

080099a0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d02e      	beq.n	8009a18 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80099c6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80099d6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	3b01      	subs	r3, #1
 80099de:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80099e0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80099ea:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80099f4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80099fe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	609a      	str	r2, [r3, #8]
 8009a16:	e039      	b.n	8009a8c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	4b1e      	ldr	r3, [pc, #120]	; (8009a9c <FMC_SDRAM_Timing_Init+0xfc>)
 8009a22:	4013      	ands	r3, r2
 8009a24:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	3b01      	subs	r3, #1
 8009a34:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009a36:	4313      	orrs	r3, r2
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a4a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009a5a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009a64:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009a6e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	3b01      	subs	r3, #1
 8009a76:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	371c      	adds	r7, #28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	ff0f0fff 	.word	0xff0f0fff

08009aa0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009ab8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009ac2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009aca:	4313      	orrs	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b083      	sub	sp, #12
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	695a      	ldr	r2, [r3, #20]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	005b      	lsls	r3, r3, #1
 8009af4:	431a      	orrs	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009b08:	b084      	sub	sp, #16
 8009b0a:	b480      	push	{r7}
 8009b0c:	b085      	sub	sp, #20
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	f107 001c 	add.w	r0, r7, #28
 8009b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009b1e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009b20:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009b22:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009b26:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009b2a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009b2e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009b32:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <SDMMC_Init+0x54>)
 8009b40:	4013      	ands	r3, r2
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	431a      	orrs	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	b004      	add	sp, #16
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	ffff8100 	.word	0xffff8100

08009b60 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009b7a:	b480      	push	{r7}
 8009b7c:	b083      	sub	sp, #12
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2203      	movs	r2, #3
 8009b86:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009b96:	b480      	push	{r7}
 8009b98:	b083      	sub	sp, #12
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0303 	and.w	r3, r3, #3
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
	...

08009bb4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009bd2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009bd8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009bde:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68da      	ldr	r2, [r3, #12]
 8009bea:	4b06      	ldr	r3, [pc, #24]	; (8009c04 <SDMMC_SendCommand+0x50>)
 8009bec:	4013      	ands	r3, r2
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr
 8009c04:	fffff000 	.word	0xfffff000

08009c08 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	b2db      	uxtb	r3, r3
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009c22:	b480      	push	{r7}
 8009c24:	b085      	sub	sp, #20
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3314      	adds	r3, #20
 8009c34:	461a      	mov	r2, r3
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	4413      	add	r3, r2
 8009c3a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
}  
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c72:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009c78:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009c7e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	431a      	orrs	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009c96:	2300      	movs	r3, #0

}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009cb6:	2310      	movs	r3, #16
 8009cb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cba:	2340      	movs	r3, #64	; 0x40
 8009cbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cc6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cc8:	f107 0308 	add.w	r3, r7, #8
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7ff ff70 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cd8:	2110      	movs	r1, #16
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fa64 	bl	800a1a8 <SDMMC_GetCmdResp1>
 8009ce0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ce2:	69fb      	ldr	r3, [r7, #28]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3720      	adds	r7, #32
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009cfe:	2311      	movs	r3, #17
 8009d00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d02:	2340      	movs	r3, #64	; 0x40
 8009d04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d06:	2300      	movs	r3, #0
 8009d08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d0e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d10:	f107 0308 	add.w	r3, r7, #8
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7ff ff4c 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d20:	2111      	movs	r1, #17
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fa40 	bl	800a1a8 <SDMMC_GetCmdResp1>
 8009d28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d2a:	69fb      	ldr	r3, [r7, #28]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3720      	adds	r7, #32
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009d46:	2312      	movs	r3, #18
 8009d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d4a:	2340      	movs	r3, #64	; 0x40
 8009d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d56:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d58:	f107 0308 	add.w	r3, r7, #8
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7ff ff28 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d68:	2112      	movs	r1, #18
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fa1c 	bl	800a1a8 <SDMMC_GetCmdResp1>
 8009d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d72:	69fb      	ldr	r3, [r7, #28]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3720      	adds	r7, #32
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009d86:	2300      	movs	r3, #0
 8009d88:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009d8e:	2318      	movs	r3, #24
 8009d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d92:	2340      	movs	r3, #64	; 0x40
 8009d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d96:	2300      	movs	r3, #0
 8009d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d9e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009da0:	f107 0308 	add.w	r3, r7, #8
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7ff ff04 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db0:	2118      	movs	r1, #24
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f9f8 	bl	800a1a8 <SDMMC_GetCmdResp1>
 8009db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dba:	69fb      	ldr	r3, [r7, #28]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3720      	adds	r7, #32
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009dd6:	2319      	movs	r3, #25
 8009dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dda:	2340      	movs	r3, #64	; 0x40
 8009ddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dde:	2300      	movs	r3, #0
 8009de0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009de6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009de8:	f107 0308 	add.w	r3, r7, #8
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff fee0 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df8:	2119      	movs	r1, #25
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f9d4 	bl	800a1a8 <SDMMC_GetCmdResp1>
 8009e00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e02:	69fb      	ldr	r3, [r7, #28]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3720      	adds	r7, #32
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009e1c:	230c      	movs	r3, #12
 8009e1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e20:	2340      	movs	r3, #64	; 0x40
 8009e22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e24:	2300      	movs	r3, #0
 8009e26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e2c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e2e:	f107 0308 	add.w	r3, r7, #8
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff febd 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8009e3a:	4a05      	ldr	r2, [pc, #20]	; (8009e50 <SDMMC_CmdStopTransfer+0x44>)
 8009e3c:	210c      	movs	r1, #12
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f9b2 	bl	800a1a8 <SDMMC_GetCmdResp1>
 8009e44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e46:	69fb      	ldr	r3, [r7, #28]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3720      	adds	r7, #32
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	05f5e100 	.word	0x05f5e100

08009e54 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b08a      	sub	sp, #40	; 0x28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009e60:	2300      	movs	r3, #0
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009e68:	2307      	movs	r3, #7
 8009e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e6c:	2340      	movs	r3, #64	; 0x40
 8009e6e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e70:	2300      	movs	r3, #0
 8009e72:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e78:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e7a:	f107 0310 	add.w	r3, r7, #16
 8009e7e:	4619      	mov	r1, r3
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f7ff fe97 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e8a:	2107      	movs	r1, #7
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 f98b 	bl	800a1a8 <SDMMC_GetCmdResp1>
 8009e92:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3728      	adds	r7, #40	; 0x28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b088      	sub	sp, #32
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ebe:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ec0:	f107 0308 	add.w	r3, r7, #8
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff fe74 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f941 	bl	800a154 <SDMMC_GetCmdError>
 8009ed2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ed4:	69fb      	ldr	r3, [r7, #28]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3720      	adds	r7, #32
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b088      	sub	sp, #32
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009eea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009eee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009ef0:	2308      	movs	r3, #8
 8009ef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ef4:	2340      	movs	r3, #64	; 0x40
 8009ef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f00:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f02:	f107 0308 	add.w	r3, r7, #8
 8009f06:	4619      	mov	r1, r3
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f7ff fe53 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fb12 	bl	800a538 <SDMMC_GetCmdResp7>
 8009f14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f16:	69fb      	ldr	r3, [r7, #28]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009f32:	2337      	movs	r3, #55	; 0x37
 8009f34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f36:	2340      	movs	r3, #64	; 0x40
 8009f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f42:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f44:	f107 0308 	add.w	r3, r7, #8
 8009f48:	4619      	mov	r1, r3
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff fe32 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f54:	2137      	movs	r1, #55	; 0x37
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f926 	bl	800a1a8 <SDMMC_GetCmdResp1>
 8009f5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f5e:	69fb      	ldr	r3, [r7, #28]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3720      	adds	r7, #32
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009f72:	2300      	movs	r3, #0
 8009f74:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	4b0d      	ldr	r3, [pc, #52]	; (8009fb0 <SDMMC_CmdAppOperCommand+0x48>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009f7e:	2329      	movs	r3, #41	; 0x29
 8009f80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f82:	2340      	movs	r3, #64	; 0x40
 8009f84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f86:	2300      	movs	r3, #0
 8009f88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f8e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f90:	f107 0308 	add.w	r3, r7, #8
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff fe0c 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fa29 	bl	800a3f4 <SDMMC_GetCmdResp3>
 8009fa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fa4:	69fb      	ldr	r3, [r7, #28]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3720      	adds	r7, #32
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	80100000 	.word	0x80100000

08009fb4 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009fc6:	2306      	movs	r3, #6
 8009fc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fca:	2340      	movs	r3, #64	; 0x40
 8009fcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fd8:	f107 0308 	add.w	r3, r7, #8
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff fde8 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe8:	2106      	movs	r1, #6
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f8dc 	bl	800a1a8 <SDMMC_GetCmdResp1>
 8009ff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ff2:	69fb      	ldr	r3, [r7, #28]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3720      	adds	r7, #32
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b088      	sub	sp, #32
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a004:	2300      	movs	r3, #0
 800a006:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800a008:	2300      	movs	r3, #0
 800a00a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a00c:	2333      	movs	r3, #51	; 0x33
 800a00e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a010:	2340      	movs	r3, #64	; 0x40
 800a012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a014:	2300      	movs	r3, #0
 800a016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a01c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a01e:	f107 0308 	add.w	r3, r7, #8
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff fdc5 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a02a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a02e:	2133      	movs	r1, #51	; 0x33
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f8b9 	bl	800a1a8 <SDMMC_GetCmdResp1>
 800a036:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a038:	69fb      	ldr	r3, [r7, #28]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3720      	adds	r7, #32
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b088      	sub	sp, #32
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a052:	2302      	movs	r3, #2
 800a054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a056:	23c0      	movs	r3, #192	; 0xc0
 800a058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a05a:	2300      	movs	r3, #0
 800a05c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a05e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a062:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a064:	f107 0308 	add.w	r3, r7, #8
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff fda2 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f97f 	bl	800a374 <SDMMC_GetCmdResp2>
 800a076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a078:	69fb      	ldr	r3, [r7, #28]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3720      	adds	r7, #32
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b088      	sub	sp, #32
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a08c:	2300      	movs	r3, #0
 800a08e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a094:	2309      	movs	r3, #9
 800a096:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a098:	23c0      	movs	r3, #192	; 0xc0
 800a09a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a09c:	2300      	movs	r3, #0
 800a09e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0a4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0a6:	f107 0308 	add.w	r3, r7, #8
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff fd81 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f95e 	bl	800a374 <SDMMC_GetCmdResp2>
 800a0b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0ba:	69fb      	ldr	r3, [r7, #28]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3720      	adds	r7, #32
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b088      	sub	sp, #32
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0da:	2340      	movs	r3, #64	; 0x40
 800a0dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0e6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0e8:	f107 0308 	add.w	r3, r7, #8
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff fd60 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	2103      	movs	r1, #3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f9af 	bl	800a45c <SDMMC_GetCmdResp6>
 800a0fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a100:	69fb      	ldr	r3, [r7, #28]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3720      	adds	r7, #32
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b088      	sub	sp, #32
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a114:	2300      	movs	r3, #0
 800a116:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a11c:	230d      	movs	r3, #13
 800a11e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a120:	2340      	movs	r3, #64	; 0x40
 800a122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a124:	2300      	movs	r3, #0
 800a126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a12c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a12e:	f107 0308 	add.w	r3, r7, #8
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff fd3d 	bl	8009bb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a13a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a13e:	210d      	movs	r1, #13
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f831 	bl	800a1a8 <SDMMC_GetCmdResp1>
 800a146:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a148:	69fb      	ldr	r3, [r7, #28]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3720      	adds	r7, #32
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
	...

0800a154 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a154:	b490      	push	{r4, r7}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a15c:	4b10      	ldr	r3, [pc, #64]	; (800a1a0 <SDMMC_GetCmdError+0x4c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a10      	ldr	r2, [pc, #64]	; (800a1a4 <SDMMC_GetCmdError+0x50>)
 800a162:	fba2 2303 	umull	r2, r3, r2, r3
 800a166:	0a5b      	lsrs	r3, r3, #9
 800a168:	f241 3288 	movw	r2, #5000	; 0x1388
 800a16c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a170:	4623      	mov	r3, r4
 800a172:	1e5c      	subs	r4, r3, #1
 800a174:	2b00      	cmp	r3, #0
 800a176:	d102      	bne.n	800a17e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a178:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a17c:	e00a      	b.n	800a194 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0f2      	beq.n	800a170 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a190:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bc90      	pop	{r4, r7}
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	2000003c 	.word	0x2000003c
 800a1a4:	10624dd3 	.word	0x10624dd3

0800a1a8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a1a8:	b590      	push	{r4, r7, lr}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800a1b6:	4b6c      	ldr	r3, [pc, #432]	; (800a368 <SDMMC_GetCmdResp1+0x1c0>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a6c      	ldr	r2, [pc, #432]	; (800a36c <SDMMC_GetCmdResp1+0x1c4>)
 800a1bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c0:	0a5b      	lsrs	r3, r3, #9
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a1c8:	4623      	mov	r3, r4
 800a1ca:	1e5c      	subs	r4, r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d102      	bne.n	800a1d6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1d4:	e0c3      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1da:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0f2      	beq.n	800a1c8 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e6:	f003 0304 	and.w	r3, r3, #4
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d004      	beq.n	800a1f8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2204      	movs	r2, #4
 800a1f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1f4:	2304      	movs	r3, #4
 800a1f6:	e0b2      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	2b00      	cmp	r3, #0
 800a202:	d004      	beq.n	800a20e <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2201      	movs	r2, #1
 800a208:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e0a7      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7ff fcfa 	bl	8009c08 <SDMMC_GetCommandResponse>
 800a214:	4603      	mov	r3, r0
 800a216:	461a      	mov	r2, r3
 800a218:	7afb      	ldrb	r3, [r7, #11]
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d001      	beq.n	800a222 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a21e:	2301      	movs	r3, #1
 800a220:	e09d      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a228:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a22a:	2100      	movs	r1, #0
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f7ff fcf8 	bl	8009c22 <SDMMC_GetResponse>
 800a232:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	4b4e      	ldr	r3, [pc, #312]	; (800a370 <SDMMC_GetCmdResp1+0x1c8>)
 800a238:	4013      	ands	r3, r2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800a23e:	2300      	movs	r3, #0
 800a240:	e08d      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	2b00      	cmp	r3, #0
 800a246:	da02      	bge.n	800a24e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a24c:	e087      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a258:	2340      	movs	r3, #64	; 0x40
 800a25a:	e080      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a266:	2380      	movs	r3, #128	; 0x80
 800a268:	e079      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a274:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a278:	e071      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a284:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a288:	e069      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a298:	e061      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a2a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2a8:	e059      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2b8:	e051      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2c8:	e049      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a2d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2d8:	e041      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800a2e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2e8:	e039      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a2f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a2f8:	e031      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a304:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a308:	e029      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a314:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a318:	e021      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a324:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a328:	e019      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a334:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a338:	e011      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a344:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a348:	e009      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f003 0308 	and.w	r3, r3, #8
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a354:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a358:	e001      	b.n	800a35e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a35a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a35e:	4618      	mov	r0, r3
 800a360:	371c      	adds	r7, #28
 800a362:	46bd      	mov	sp, r7
 800a364:	bd90      	pop	{r4, r7, pc}
 800a366:	bf00      	nop
 800a368:	2000003c 	.word	0x2000003c
 800a36c:	10624dd3 	.word	0x10624dd3
 800a370:	fdffe008 	.word	0xfdffe008

0800a374 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a374:	b490      	push	{r4, r7}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a37c:	4b1b      	ldr	r3, [pc, #108]	; (800a3ec <SDMMC_GetCmdResp2+0x78>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a1b      	ldr	r2, [pc, #108]	; (800a3f0 <SDMMC_GetCmdResp2+0x7c>)
 800a382:	fba2 2303 	umull	r2, r3, r2, r3
 800a386:	0a5b      	lsrs	r3, r3, #9
 800a388:	f241 3288 	movw	r2, #5000	; 0x1388
 800a38c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a390:	4623      	mov	r3, r4
 800a392:	1e5c      	subs	r4, r3, #1
 800a394:	2b00      	cmp	r3, #0
 800a396:	d102      	bne.n	800a39e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a39c:	e020      	b.n	800a3e0 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0f2      	beq.n	800a390 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ae:	f003 0304 	and.w	r3, r3, #4
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d004      	beq.n	800a3c0 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2204      	movs	r2, #4
 800a3ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3bc:	2304      	movs	r3, #4
 800a3be:	e00f      	b.n	800a3e0 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d004      	beq.n	800a3d6 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e004      	b.n	800a3e0 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a3dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bc90      	pop	{r4, r7}
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	2000003c 	.word	0x2000003c
 800a3f0:	10624dd3 	.word	0x10624dd3

0800a3f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a3f4:	b490      	push	{r4, r7}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a3fc:	4b15      	ldr	r3, [pc, #84]	; (800a454 <SDMMC_GetCmdResp3+0x60>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a15      	ldr	r2, [pc, #84]	; (800a458 <SDMMC_GetCmdResp3+0x64>)
 800a402:	fba2 2303 	umull	r2, r3, r2, r3
 800a406:	0a5b      	lsrs	r3, r3, #9
 800a408:	f241 3288 	movw	r2, #5000	; 0x1388
 800a40c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a410:	4623      	mov	r3, r4
 800a412:	1e5c      	subs	r4, r3, #1
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a418:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a41c:	e015      	b.n	800a44a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a422:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0f2      	beq.n	800a410 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a42e:	f003 0304 	and.w	r3, r3, #4
 800a432:	2b00      	cmp	r3, #0
 800a434:	d004      	beq.n	800a440 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2204      	movs	r2, #4
 800a43a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a43c:	2304      	movs	r3, #4
 800a43e:	e004      	b.n	800a44a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a446:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bc90      	pop	{r4, r7}
 800a452:	4770      	bx	lr
 800a454:	2000003c 	.word	0x2000003c
 800a458:	10624dd3 	.word	0x10624dd3

0800a45c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a45c:	b590      	push	{r4, r7, lr}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	460b      	mov	r3, r1
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a46a:	4b31      	ldr	r3, [pc, #196]	; (800a530 <SDMMC_GetCmdResp6+0xd4>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a31      	ldr	r2, [pc, #196]	; (800a534 <SDMMC_GetCmdResp6+0xd8>)
 800a470:	fba2 2303 	umull	r2, r3, r2, r3
 800a474:	0a5b      	lsrs	r3, r3, #9
 800a476:	f241 3288 	movw	r2, #5000	; 0x1388
 800a47a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a47e:	4623      	mov	r3, r4
 800a480:	1e5c      	subs	r4, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	d102      	bne.n	800a48c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a486:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a48a:	e04c      	b.n	800a526 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a490:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a494:	2b00      	cmp	r3, #0
 800a496:	d0f2      	beq.n	800a47e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d004      	beq.n	800a4ae <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2204      	movs	r2, #4
 800a4a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4aa:	2304      	movs	r3, #4
 800a4ac:	e03b      	b.n	800a526 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d004      	beq.n	800a4c4 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e030      	b.n	800a526 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7ff fb9f 	bl	8009c08 <SDMMC_GetCommandResponse>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	7afb      	ldrb	r3, [r7, #11]
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d001      	beq.n	800a4d8 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e026      	b.n	800a526 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a4de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f7ff fb9d 	bl	8009c22 <SDMMC_GetResponse>
 800a4e8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d106      	bne.n	800a502 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	0c1b      	lsrs	r3, r3, #16
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a4fe:	2300      	movs	r3, #0
 800a500:	e011      	b.n	800a526 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a50c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a510:	e009      	b.n	800a526 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d002      	beq.n	800a522 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a51c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a520:	e001      	b.n	800a526 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a526:	4618      	mov	r0, r3
 800a528:	371c      	adds	r7, #28
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd90      	pop	{r4, r7, pc}
 800a52e:	bf00      	nop
 800a530:	2000003c 	.word	0x2000003c
 800a534:	10624dd3 	.word	0x10624dd3

0800a538 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a538:	b490      	push	{r4, r7}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a540:	4b18      	ldr	r3, [pc, #96]	; (800a5a4 <SDMMC_GetCmdResp7+0x6c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a18      	ldr	r2, [pc, #96]	; (800a5a8 <SDMMC_GetCmdResp7+0x70>)
 800a546:	fba2 2303 	umull	r2, r3, r2, r3
 800a54a:	0a5b      	lsrs	r3, r3, #9
 800a54c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a550:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a554:	4623      	mov	r3, r4
 800a556:	1e5c      	subs	r4, r3, #1
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d102      	bne.n	800a562 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a55c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a560:	e01a      	b.n	800a598 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a566:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0f2      	beq.n	800a554 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a572:	f003 0304 	and.w	r3, r3, #4
 800a576:	2b00      	cmp	r3, #0
 800a578:	d004      	beq.n	800a584 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2240      	movs	r2, #64	; 0x40
 800a57e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a580:	2304      	movs	r3, #4
 800a582:	e009      	b.n	800a598 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d002      	beq.n	800a596 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2240      	movs	r2, #64	; 0x40
 800a594:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a596:	2300      	movs	r3, #0
  
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bc90      	pop	{r4, r7}
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	2000003c 	.word	0x2000003c
 800a5a8:	10624dd3 	.word	0x10624dd3

0800a5ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	f107 001c 	add.w	r0, r7, #28
 800a5ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d120      	bne.n	800a606 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68da      	ldr	r2, [r3, #12]
 800a5d4:	4b20      	ldr	r3, [pc, #128]	; (800a658 <USB_CoreInit+0xac>)
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d105      	bne.n	800a5fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f942 	bl	800a884 <USB_CoreReset>
 800a600:	4603      	mov	r3, r0
 800a602:	73fb      	strb	r3, [r7, #15]
 800a604:	e010      	b.n	800a628 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f936 	bl	800a884 <USB_CoreReset>
 800a618:	4603      	mov	r3, r0
 800a61a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a620:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d10b      	bne.n	800a646 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	f043 0206 	orr.w	r2, r3, #6
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	f043 0220 	orr.w	r2, r3, #32
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a646:	7bfb      	ldrb	r3, [r7, #15]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a652:	b004      	add	sp, #16
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	ffbdffbf 	.word	0xffbdffbf

0800a65c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	f043 0201 	orr.w	r2, r3, #1
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	f023 0201 	bic.w	r2, r3, #1
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a6b8:	78fb      	ldrb	r3, [r7, #3]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d106      	bne.n	800a6cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	60da      	str	r2, [r3, #12]
 800a6ca:	e00b      	b.n	800a6e4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a6cc:	78fb      	ldrb	r3, [r7, #3]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	60da      	str	r2, [r3, #12]
 800a6de:	e001      	b.n	800a6e4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e003      	b.n	800a6ec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a6e4:	2032      	movs	r0, #50	; 0x32
 800a6e6:	f7f5 ff91 	bl	800060c <HAL_Delay>

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a6fe:	2300      	movs	r3, #0
 800a700:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	019b      	lsls	r3, r3, #6
 800a706:	f043 0220 	orr.w	r2, r3, #32
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3301      	adds	r3, #1
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	4a09      	ldr	r2, [pc, #36]	; (800a73c <USB_FlushTxFifo+0x48>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d901      	bls.n	800a720 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e006      	b.n	800a72e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	f003 0320 	and.w	r3, r3, #32
 800a728:	2b20      	cmp	r3, #32
 800a72a:	d0f0      	beq.n	800a70e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3714      	adds	r7, #20
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	00030d40 	.word	0x00030d40

0800a740 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2210      	movs	r2, #16
 800a750:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3301      	adds	r3, #1
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4a09      	ldr	r2, [pc, #36]	; (800a780 <USB_FlushRxFifo+0x40>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d901      	bls.n	800a764 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e006      	b.n	800a772 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	f003 0310 	and.w	r3, r3, #16
 800a76c:	2b10      	cmp	r3, #16
 800a76e:	d0f0      	beq.n	800a752 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	00030d40 	.word	0x00030d40

0800a784 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a784:	b480      	push	{r7}
 800a786:	b089      	sub	sp, #36	; 0x24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	4611      	mov	r1, r2
 800a790:	461a      	mov	r2, r3
 800a792:	460b      	mov	r3, r1
 800a794:	71fb      	strb	r3, [r7, #7]
 800a796:	4613      	mov	r3, r2
 800a798:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a7a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d11a      	bne.n	800a7e0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a7aa:	88bb      	ldrh	r3, [r7, #4]
 800a7ac:	3303      	adds	r3, #3
 800a7ae:	089b      	lsrs	r3, r3, #2
 800a7b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	61bb      	str	r3, [r7, #24]
 800a7b6:	e00f      	b.n	800a7d8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800a7b8:	79fb      	ldrb	r3, [r7, #7]
 800a7ba:	031a      	lsls	r2, r3, #12
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	4413      	add	r3, r2
 800a7c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	61bb      	str	r3, [r7, #24]
 800a7d8:	69ba      	ldr	r2, [r7, #24]
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d3eb      	bcc.n	800a7b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3724      	adds	r7, #36	; 0x24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b089      	sub	sp, #36	; 0x24
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	60f8      	str	r0, [r7, #12]
 800a7f6:	60b9      	str	r1, [r7, #8]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a804:	88fb      	ldrh	r3, [r7, #6]
 800a806:	3303      	adds	r3, #3
 800a808:	089b      	lsrs	r3, r3, #2
 800a80a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a80c:	2300      	movs	r3, #0
 800a80e:	61bb      	str	r3, [r7, #24]
 800a810:	e00b      	b.n	800a82a <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	601a      	str	r2, [r3, #0]
    pDest++;
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	3304      	adds	r3, #4
 800a822:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	3301      	adds	r3, #1
 800a828:	61bb      	str	r3, [r7, #24]
 800a82a:	69ba      	ldr	r2, [r7, #24]
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d3ef      	bcc.n	800a812 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a832:	69fb      	ldr	r3, [r7, #28]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3724      	adds	r7, #36	; 0x24
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	4013      	ands	r3, r2
 800a856:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a858:	68fb      	ldr	r3, [r7, #12]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	f003 0301 	and.w	r3, r3, #1
}
 800a876:	4618      	mov	r0, r3
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
	...

0800a884 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a88c:	2300      	movs	r3, #0
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3301      	adds	r3, #1
 800a894:	60fb      	str	r3, [r7, #12]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4a13      	ldr	r2, [pc, #76]	; (800a8e8 <USB_CoreReset+0x64>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d901      	bls.n	800a8a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e01b      	b.n	800a8da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	daf2      	bge.n	800a890 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	f043 0201 	orr.w	r2, r3, #1
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	4a09      	ldr	r2, [pc, #36]	; (800a8e8 <USB_CoreReset+0x64>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d901      	bls.n	800a8cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e006      	b.n	800a8da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	f003 0301 	and.w	r3, r3, #1
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d0f0      	beq.n	800a8ba <USB_CoreReset+0x36>

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	00030d40 	.word	0x00030d40

0800a8ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8ec:	b084      	sub	sp, #16
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	f107 001c 	add.w	r0, r7, #28
 800a8fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a908:	461a      	mov	r2, r3
 800a90a:	2300      	movs	r3, #0
 800a90c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a912:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a91e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a922:	2b00      	cmp	r3, #0
 800a924:	d018      	beq.n	800a958 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	2b03      	cmp	r3, #3
 800a92a:	d10a      	bne.n	800a942 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a93a:	f043 0304 	orr.w	r3, r3, #4
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	e014      	b.n	800a96c <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a950:	f023 0304 	bic.w	r3, r3, #4
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	e009      	b.n	800a96c <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a966:	f023 0304 	bic.w	r3, r3, #4
 800a96a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a96c:	2110      	movs	r1, #16
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff fec0 	bl	800a6f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7ff fee3 	bl	800a740 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a97a:	2300      	movs	r3, #0
 800a97c:	60fb      	str	r3, [r7, #12]
 800a97e:	e015      	b.n	800a9ac <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	015a      	lsls	r2, r3, #5
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	4413      	add	r3, r2
 800a988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a98c:	461a      	mov	r2, r3
 800a98e:	f04f 33ff 	mov.w	r3, #4294967295
 800a992:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	015a      	lsls	r2, r3, #5
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	4413      	add	r3, r2
 800a99c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d3e5      	bcc.n	800a980 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a9b4:	2101      	movs	r1, #1
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f8ac 	bl	800ab14 <USB_DriveVbus>

  HAL_Delay(200U);
 800a9bc:	20c8      	movs	r0, #200	; 0xc8
 800a9be:	f7f5 fe25 	bl	800060c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ce:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00b      	beq.n	800a9f4 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a14      	ldr	r2, [pc, #80]	; (800aa38 <USB_HostInit+0x14c>)
 800a9e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a13      	ldr	r2, [pc, #76]	; (800aa3c <USB_HostInit+0x150>)
 800a9ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a9f2:	e009      	b.n	800aa08 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2280      	movs	r2, #128	; 0x80
 800a9f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a10      	ldr	r2, [pc, #64]	; (800aa40 <USB_HostInit+0x154>)
 800a9fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a10      	ldr	r2, [pc, #64]	; (800aa44 <USB_HostInit+0x158>)
 800aa04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d105      	bne.n	800aa1a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	f043 0210 	orr.w	r2, r3, #16
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	699a      	ldr	r2, [r3, #24]
 800aa1e:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <USB_HostInit+0x15c>)
 800aa20:	4313      	orrs	r3, r2
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa32:	b004      	add	sp, #16
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	01000200 	.word	0x01000200
 800aa3c:	00e00300 	.word	0x00e00300
 800aa40:	00600080 	.word	0x00600080
 800aa44:	004000e0 	.word	0x004000e0
 800aa48:	a3200008 	.word	0xa3200008

0800aa4c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa6a:	f023 0303 	bic.w	r3, r3, #3
 800aa6e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	f003 0303 	and.w	r3, r3, #3
 800aa7e:	68f9      	ldr	r1, [r7, #12]
 800aa80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aa84:	4313      	orrs	r3, r2
 800aa86:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800aa88:	78fb      	ldrb	r3, [r7, #3]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d107      	bne.n	800aa9e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa94:	461a      	mov	r2, r3
 800aa96:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800aa9a:	6053      	str	r3, [r2, #4]
 800aa9c:	e009      	b.n	800aab2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800aa9e:	78fb      	ldrb	r3, [r7, #3]
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d106      	bne.n	800aab2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f241 7370 	movw	r3, #6000	; 0x1770
 800aab0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800aacc:	2300      	movs	r3, #0
 800aace:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aae0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aaea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800aaf0:	2064      	movs	r0, #100	; 0x64
 800aaf2:	f7f5 fd8b 	bl	800060c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aafe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab02:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ab04:	200a      	movs	r0, #10
 800ab06:	f7f5 fd81 	bl	800060c <HAL_Delay>

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ab24:	2300      	movs	r3, #0
 800ab26:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ab38:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d109      	bne.n	800ab58 <USB_DriveVbus+0x44>
 800ab44:	78fb      	ldrb	r3, [r7, #3]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d106      	bne.n	800ab58 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ab52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ab56:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab62:	d109      	bne.n	800ab78 <USB_DriveVbus+0x64>
 800ab64:	78fb      	ldrb	r3, [r7, #3]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d106      	bne.n	800ab78 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ab72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab76:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3714      	adds	r7, #20
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b085      	sub	sp, #20
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	0c5b      	lsrs	r3, r3, #17
 800aba4:	f003 0303 	and.w	r3, r3, #3
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	b29b      	uxth	r3, r3
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
	...

0800abd8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800abd8:	b480      	push	{r7}
 800abda:	b087      	sub	sp, #28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	4608      	mov	r0, r1
 800abe2:	4611      	mov	r1, r2
 800abe4:	461a      	mov	r2, r3
 800abe6:	4603      	mov	r3, r0
 800abe8:	70fb      	strb	r3, [r7, #3]
 800abea:	460b      	mov	r3, r1
 800abec:	70bb      	strb	r3, [r7, #2]
 800abee:	4613      	mov	r3, r2
 800abf0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800abfa:	78fb      	ldrb	r3, [r7, #3]
 800abfc:	015a      	lsls	r2, r3, #5
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	4413      	add	r3, r2
 800ac02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac06:	461a      	mov	r2, r3
 800ac08:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ac0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d87e      	bhi.n	800ad14 <USB_HC_Init+0x13c>
 800ac16:	a201      	add	r2, pc, #4	; (adr r2, 800ac1c <USB_HC_Init+0x44>)
 800ac18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac1c:	0800ac2d 	.word	0x0800ac2d
 800ac20:	0800acd7 	.word	0x0800acd7
 800ac24:	0800ac2d 	.word	0x0800ac2d
 800ac28:	0800ac99 	.word	0x0800ac99
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac2c:	78fb      	ldrb	r3, [r7, #3]
 800ac2e:	015a      	lsls	r2, r3, #5
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	4413      	add	r3, r2
 800ac34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac38:	461a      	mov	r2, r3
 800ac3a:	f240 439d 	movw	r3, #1181	; 0x49d
 800ac3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ac40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	da10      	bge.n	800ac6a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ac48:	78fb      	ldrb	r3, [r7, #3]
 800ac4a:	015a      	lsls	r2, r3, #5
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	4413      	add	r3, r2
 800ac50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	78fa      	ldrb	r2, [r7, #3]
 800ac58:	0151      	lsls	r1, r2, #5
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	440a      	add	r2, r1
 800ac5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac66:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800ac68:	e057      	b.n	800ad1a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d051      	beq.n	800ad1a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ac76:	78fb      	ldrb	r3, [r7, #3]
 800ac78:	015a      	lsls	r2, r3, #5
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	78fa      	ldrb	r2, [r7, #3]
 800ac86:	0151      	lsls	r1, r2, #5
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	440a      	add	r2, r1
 800ac8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ac94:	60d3      	str	r3, [r2, #12]
      break;
 800ac96:	e040      	b.n	800ad1a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac98:	78fb      	ldrb	r3, [r7, #3]
 800ac9a:	015a      	lsls	r2, r3, #5
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	4413      	add	r3, r2
 800aca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aca4:	461a      	mov	r2, r3
 800aca6:	f240 639d 	movw	r3, #1693	; 0x69d
 800acaa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800acac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	da34      	bge.n	800ad1e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800acb4:	78fb      	ldrb	r3, [r7, #3]
 800acb6:	015a      	lsls	r2, r3, #5
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	4413      	add	r3, r2
 800acbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	78fa      	ldrb	r2, [r7, #3]
 800acc4:	0151      	lsls	r1, r2, #5
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	440a      	add	r2, r1
 800acca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acd2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800acd4:	e023      	b.n	800ad1e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800acd6:	78fb      	ldrb	r3, [r7, #3]
 800acd8:	015a      	lsls	r2, r3, #5
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	4413      	add	r3, r2
 800acde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ace2:	461a      	mov	r2, r3
 800ace4:	f240 2325 	movw	r3, #549	; 0x225
 800ace8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800acea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	da17      	bge.n	800ad22 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800acf2:	78fb      	ldrb	r3, [r7, #3]
 800acf4:	015a      	lsls	r2, r3, #5
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	4413      	add	r3, r2
 800acfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	78fa      	ldrb	r2, [r7, #3]
 800ad02:	0151      	lsls	r1, r2, #5
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	440a      	add	r2, r1
 800ad08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad0c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ad10:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ad12:	e006      	b.n	800ad22 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	75fb      	strb	r3, [r7, #23]
      break;
 800ad18:	e004      	b.n	800ad24 <USB_HC_Init+0x14c>
      break;
 800ad1a:	bf00      	nop
 800ad1c:	e002      	b.n	800ad24 <USB_HC_Init+0x14c>
      break;
 800ad1e:	bf00      	nop
 800ad20:	e000      	b.n	800ad24 <USB_HC_Init+0x14c>
      break;
 800ad22:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad2a:	699a      	ldr	r2, [r3, #24]
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	f003 030f 	and.w	r3, r3, #15
 800ad32:	2101      	movs	r1, #1
 800ad34:	fa01 f303 	lsl.w	r3, r1, r3
 800ad38:	68b9      	ldr	r1, [r7, #8]
 800ad3a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ad4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	da03      	bge.n	800ad5e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ad56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad5a:	613b      	str	r3, [r7, #16]
 800ad5c:	e001      	b.n	800ad62 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800ad62:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d103      	bne.n	800ad72 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ad6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	e001      	b.n	800ad76 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ad72:	2300      	movs	r3, #0
 800ad74:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ad76:	787b      	ldrb	r3, [r7, #1]
 800ad78:	059b      	lsls	r3, r3, #22
 800ad7a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ad7e:	78bb      	ldrb	r3, [r7, #2]
 800ad80:	02db      	lsls	r3, r3, #11
 800ad82:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ad86:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ad88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ad8c:	049b      	lsls	r3, r3, #18
 800ad8e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ad92:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ad94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad96:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ad9a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ada0:	78fb      	ldrb	r3, [r7, #3]
 800ada2:	0159      	lsls	r1, r3, #5
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	440b      	add	r3, r1
 800ada8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adac:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800adb2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800adb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d10f      	bne.n	800addc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800adbc:	78fb      	ldrb	r3, [r7, #3]
 800adbe:	015a      	lsls	r2, r3, #5
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	4413      	add	r3, r2
 800adc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	78fa      	ldrb	r2, [r7, #3]
 800adcc:	0151      	lsls	r1, r2, #5
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	440a      	add	r2, r1
 800add2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800add6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800adda:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800addc:	7dfb      	ldrb	r3, [r7, #23]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	371c      	adds	r7, #28
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop

0800adec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b08c      	sub	sp, #48	; 0x30
 800adf0:	af02      	add	r7, sp, #8
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	4613      	mov	r3, r2
 800adf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	785b      	ldrb	r3, [r3, #1]
 800ae02:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ae04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae08:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d028      	beq.n	800ae68 <USB_HC_StartXfer+0x7c>
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	791b      	ldrb	r3, [r3, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d124      	bne.n	800ae68 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800ae1e:	79fb      	ldrb	r3, [r7, #7]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10b      	bne.n	800ae3c <USB_HC_StartXfer+0x50>
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	795b      	ldrb	r3, [r3, #5]
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d107      	bne.n	800ae3c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	785b      	ldrb	r3, [r3, #1]
 800ae30:	4619      	mov	r1, r3
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f000 fa2e 	bl	800b294 <USB_DoPing>
      return HAL_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e112      	b.n	800b062 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800ae3c:	79fb      	ldrb	r3, [r7, #7]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d112      	bne.n	800ae68 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	6a3b      	ldr	r3, [r7, #32]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	69fa      	ldr	r2, [r7, #28]
 800ae52:	0151      	lsls	r1, r2, #5
 800ae54:	6a3a      	ldr	r2, [r7, #32]
 800ae56:	440a      	add	r2, r1
 800ae58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae5c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800ae60:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2200      	movs	r2, #0
 800ae66:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d018      	beq.n	800aea2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	8912      	ldrh	r2, [r2, #8]
 800ae78:	4413      	add	r3, r2
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	8912      	ldrh	r2, [r2, #8]
 800ae80:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae84:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ae86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae88:	8b7b      	ldrh	r3, [r7, #26]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d90b      	bls.n	800aea6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800ae8e:	8b7b      	ldrh	r3, [r7, #26]
 800ae90:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800ae92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	8912      	ldrh	r2, [r2, #8]
 800ae98:	fb02 f203 	mul.w	r2, r2, r3
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	611a      	str	r2, [r3, #16]
 800aea0:	e001      	b.n	800aea6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800aea2:	2301      	movs	r3, #1
 800aea4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	78db      	ldrb	r3, [r3, #3]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d006      	beq.n	800aebc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800aeae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	8912      	ldrh	r2, [r2, #8]
 800aeb4:	fb02 f203 	mul.w	r2, r2, r3
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aec4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aec6:	04d9      	lsls	r1, r3, #19
 800aec8:	4b68      	ldr	r3, [pc, #416]	; (800b06c <USB_HC_StartXfer+0x280>)
 800aeca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800aecc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	7a9b      	ldrb	r3, [r3, #10]
 800aed2:	075b      	lsls	r3, r3, #29
 800aed4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800aed8:	69f9      	ldr	r1, [r7, #28]
 800aeda:	0148      	lsls	r0, r1, #5
 800aedc:	6a39      	ldr	r1, [r7, #32]
 800aede:	4401      	add	r1, r0
 800aee0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aee4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800aee6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800aee8:	79fb      	ldrb	r3, [r7, #7]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d009      	beq.n	800af02 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	68d9      	ldr	r1, [r3, #12]
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	015a      	lsls	r2, r3, #5
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	4413      	add	r3, r2
 800aefa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aefe:	460a      	mov	r2, r1
 800af00:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800af02:	6a3b      	ldr	r3, [r7, #32]
 800af04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bf0c      	ite	eq
 800af12:	2301      	moveq	r3, #1
 800af14:	2300      	movne	r3, #0
 800af16:	b2db      	uxtb	r3, r3
 800af18:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	015a      	lsls	r2, r3, #5
 800af1e:	6a3b      	ldr	r3, [r7, #32]
 800af20:	4413      	add	r3, r2
 800af22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	69fa      	ldr	r2, [r7, #28]
 800af2a:	0151      	lsls	r1, r2, #5
 800af2c:	6a3a      	ldr	r2, [r7, #32]
 800af2e:	440a      	add	r2, r1
 800af30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800af38:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	015a      	lsls	r2, r3, #5
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	4413      	add	r3, r2
 800af42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	7e7b      	ldrb	r3, [r7, #25]
 800af4a:	075b      	lsls	r3, r3, #29
 800af4c:	69f9      	ldr	r1, [r7, #28]
 800af4e:	0148      	lsls	r0, r1, #5
 800af50:	6a39      	ldr	r1, [r7, #32]
 800af52:	4401      	add	r1, r0
 800af54:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800af58:	4313      	orrs	r3, r2
 800af5a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	015a      	lsls	r2, r3, #5
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	4413      	add	r3, r2
 800af64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a41      	ldr	r2, [pc, #260]	; (800b070 <USB_HC_StartXfer+0x284>)
 800af6c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800af6e:	4b40      	ldr	r3, [pc, #256]	; (800b070 <USB_HC_StartXfer+0x284>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af76:	4a3e      	ldr	r2, [pc, #248]	; (800b070 <USB_HC_StartXfer+0x284>)
 800af78:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	78db      	ldrb	r3, [r3, #3]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d006      	beq.n	800af90 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800af82:	4b3b      	ldr	r3, [pc, #236]	; (800b070 <USB_HC_StartXfer+0x284>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af8a:	4a39      	ldr	r2, [pc, #228]	; (800b070 <USB_HC_StartXfer+0x284>)
 800af8c:	6013      	str	r3, [r2, #0]
 800af8e:	e005      	b.n	800af9c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800af90:	4b37      	ldr	r3, [pc, #220]	; (800b070 <USB_HC_StartXfer+0x284>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af98:	4a35      	ldr	r2, [pc, #212]	; (800b070 <USB_HC_StartXfer+0x284>)
 800af9a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af9c:	4b34      	ldr	r3, [pc, #208]	; (800b070 <USB_HC_StartXfer+0x284>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afa4:	4a32      	ldr	r2, [pc, #200]	; (800b070 <USB_HC_StartXfer+0x284>)
 800afa6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	015a      	lsls	r2, r3, #5
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	4413      	add	r3, r2
 800afb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afb4:	461a      	mov	r2, r3
 800afb6:	4b2e      	ldr	r3, [pc, #184]	; (800b070 <USB_HC_StartXfer+0x284>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800afbc:	79fb      	ldrb	r3, [r7, #7]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d14e      	bne.n	800b060 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	78db      	ldrb	r3, [r3, #3]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d14a      	bne.n	800b060 <USB_HC_StartXfer+0x274>
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d046      	beq.n	800b060 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	79db      	ldrb	r3, [r3, #7]
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	d830      	bhi.n	800b03c <USB_HC_StartXfer+0x250>
 800afda:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <USB_HC_StartXfer+0x1f4>)
 800afdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe0:	0800aff1 	.word	0x0800aff1
 800afe4:	0800b015 	.word	0x0800b015
 800afe8:	0800aff1 	.word	0x0800aff1
 800afec:	0800b015 	.word	0x0800b015
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	3303      	adds	r3, #3
 800aff6:	089b      	lsrs	r3, r3, #2
 800aff8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800affa:	8afa      	ldrh	r2, [r7, #22]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b000:	b29b      	uxth	r3, r3
 800b002:	429a      	cmp	r2, r3
 800b004:	d91c      	bls.n	800b040 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	f043 0220 	orr.w	r2, r3, #32
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	619a      	str	r2, [r3, #24]
          }
          break;
 800b012:	e015      	b.n	800b040 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	691b      	ldr	r3, [r3, #16]
 800b018:	3303      	adds	r3, #3
 800b01a:	089b      	lsrs	r3, r3, #2
 800b01c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b01e:	8afa      	ldrh	r2, [r7, #22]
 800b020:	6a3b      	ldr	r3, [r7, #32]
 800b022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d90a      	bls.n	800b044 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	619a      	str	r2, [r3, #24]
          }
          break;
 800b03a:	e003      	b.n	800b044 <USB_HC_StartXfer+0x258>

        default:
          break;
 800b03c:	bf00      	nop
 800b03e:	e002      	b.n	800b046 <USB_HC_StartXfer+0x25a>
          break;
 800b040:	bf00      	nop
 800b042:	e000      	b.n	800b046 <USB_HC_StartXfer+0x25a>
          break;
 800b044:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	68d9      	ldr	r1, [r3, #12]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	785a      	ldrb	r2, [r3, #1]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	b298      	uxth	r0, r3
 800b054:	2300      	movs	r3, #0
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	4603      	mov	r3, r0
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f7ff fb92 	bl	800a784 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3728      	adds	r7, #40	; 0x28
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	1ff80000 	.word	0x1ff80000
 800b070:	200000d0 	.word	0x200000d0

0800b074 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b086:	695b      	ldr	r3, [r3, #20]
 800b088:	b29b      	uxth	r3, r3
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b096:	b480      	push	{r7}
 800b098:	b087      	sub	sp, #28
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	460b      	mov	r3, r1
 800b0a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b0a6:	78fb      	ldrb	r3, [r7, #3]
 800b0a8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	015a      	lsls	r2, r3, #5
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	0c9b      	lsrs	r3, r3, #18
 800b0be:	f003 0303 	and.w	r3, r3, #3
 800b0c2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d002      	beq.n	800b0d0 <USB_HC_Halt+0x3a>
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d16c      	bne.n	800b1aa <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	015a      	lsls	r2, r3, #5
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	0151      	lsls	r1, r2, #5
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	440a      	add	r2, r1
 800b0e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0ee:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d143      	bne.n	800b184 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	015a      	lsls	r2, r3, #5
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	4413      	add	r3, r2
 800b104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	0151      	lsls	r1, r2, #5
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	440a      	add	r2, r1
 800b112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b11a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	015a      	lsls	r2, r3, #5
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	4413      	add	r3, r2
 800b124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	0151      	lsls	r1, r2, #5
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	440a      	add	r2, r1
 800b132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b13a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	4413      	add	r3, r2
 800b144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	0151      	lsls	r1, r2, #5
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	440a      	add	r2, r1
 800b152:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b156:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b15a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	3301      	adds	r3, #1
 800b160:	617b      	str	r3, [r7, #20]
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b168:	d81d      	bhi.n	800b1a6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	015a      	lsls	r2, r3, #5
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	4413      	add	r3, r2
 800b172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b17c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b180:	d0ec      	beq.n	800b15c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b182:	e080      	b.n	800b286 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	015a      	lsls	r2, r3, #5
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	4413      	add	r3, r2
 800b18c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	0151      	lsls	r1, r2, #5
 800b196:	693a      	ldr	r2, [r7, #16]
 800b198:	440a      	add	r2, r1
 800b19a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b19e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1a2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b1a4:	e06f      	b.n	800b286 <USB_HC_Halt+0x1f0>
          break;
 800b1a6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b1a8:	e06d      	b.n	800b286 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	015a      	lsls	r2, r3, #5
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	0151      	lsls	r1, r2, #5
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	440a      	add	r2, r1
 800b1c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b1c8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d143      	bne.n	800b262 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	015a      	lsls	r2, r3, #5
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	0151      	lsls	r1, r2, #5
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	440a      	add	r2, r1
 800b1f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1f8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	015a      	lsls	r2, r3, #5
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	4413      	add	r3, r2
 800b202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	0151      	lsls	r1, r2, #5
 800b20c:	693a      	ldr	r2, [r7, #16]
 800b20e:	440a      	add	r2, r1
 800b210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b218:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	015a      	lsls	r2, r3, #5
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	4413      	add	r3, r2
 800b222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	0151      	lsls	r1, r2, #5
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	440a      	add	r2, r1
 800b230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b234:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b238:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	3301      	adds	r3, #1
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b246:	d81d      	bhi.n	800b284 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	015a      	lsls	r2, r3, #5
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	4413      	add	r3, r2
 800b250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b25a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b25e:	d0ec      	beq.n	800b23a <USB_HC_Halt+0x1a4>
 800b260:	e011      	b.n	800b286 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	015a      	lsls	r2, r3, #5
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	4413      	add	r3, r2
 800b26a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	0151      	lsls	r1, r2, #5
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	440a      	add	r2, r1
 800b278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b27c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b280:	6013      	str	r3, [r2, #0]
 800b282:	e000      	b.n	800b286 <USB_HC_Halt+0x1f0>
          break;
 800b284:	bf00      	nop
    }
  }

  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	371c      	adds	r7, #28
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b294:	b480      	push	{r7}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	460b      	mov	r3, r1
 800b29e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b2a4:	78fb      	ldrb	r3, [r7, #3]
 800b2a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	04da      	lsls	r2, r3, #19
 800b2b0:	4b15      	ldr	r3, [pc, #84]	; (800b308 <USB_DoPing+0x74>)
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	0151      	lsls	r1, r2, #5
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	440a      	add	r2, r1
 800b2bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b2c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	015a      	lsls	r2, r3, #5
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b2dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b2e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	015a      	lsls	r2, r3, #5
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	371c      	adds	r7, #28
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	1ff80000 	.word	0x1ff80000

0800b30c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f7ff f9ae 	bl	800a67e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b322:	2110      	movs	r1, #16
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7ff f9e5 	bl	800a6f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff fa08 	bl	800a740 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b330:	2300      	movs	r3, #0
 800b332:	613b      	str	r3, [r7, #16]
 800b334:	e01f      	b.n	800b376 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	015a      	lsls	r2, r3, #5
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	4413      	add	r3, r2
 800b33e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b34c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b354:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b35c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	015a      	lsls	r2, r3, #5
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	4413      	add	r3, r2
 800b366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b36a:	461a      	mov	r2, r3
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	3301      	adds	r3, #1
 800b374:	613b      	str	r3, [r7, #16]
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	2b0f      	cmp	r3, #15
 800b37a:	d9dc      	bls.n	800b336 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b37c:	2300      	movs	r3, #0
 800b37e:	613b      	str	r3, [r7, #16]
 800b380:	e034      	b.n	800b3ec <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	015a      	lsls	r2, r3, #5
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	4413      	add	r3, r2
 800b38a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b398:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3a8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	617b      	str	r3, [r7, #20]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3c8:	d80c      	bhi.n	800b3e4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	015a      	lsls	r2, r3, #5
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3e0:	d0ec      	beq.n	800b3bc <USB_StopHost+0xb0>
 800b3e2:	e000      	b.n	800b3e6 <USB_StopHost+0xda>
        break;
 800b3e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	613b      	str	r3, [r7, #16]
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	2b0f      	cmp	r3, #15
 800b3f0:	d9c7      	bls.n	800b382 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b3fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f04f 32ff 	mov.w	r2, #4294967295
 800b406:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f7ff f927 	bl	800a65c <USB_EnableGlobalInt>

  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800b418:	b590      	push	{r4, r7, lr}
 800b41a:	b089      	sub	sp, #36	; 0x24
 800b41c:	af04      	add	r7, sp, #16
 800b41e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800b420:	2302      	movs	r3, #2
 800b422:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800b424:	2301      	movs	r3, #1
 800b426:	2202      	movs	r2, #2
 800b428:	2102      	movs	r1, #2
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 fc8c 	bl	800bd48 <USBH_FindInterface>
 800b430:	4603      	mov	r3, r0
 800b432:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800b434:	7bbb      	ldrb	r3, [r7, #14]
 800b436:	2bff      	cmp	r3, #255	; 0xff
 800b438:	f000 812a 	beq.w	800b690 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800b43c:	7bbb      	ldrb	r3, [r7, #14]
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 fc65 	bl	800bd10 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800b44c:	2050      	movs	r0, #80	; 0x50
 800b44e:	f014 fd4f 	bl	801fef0 <malloc>
 800b452:	4603      	mov	r3, r0
 800b454:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b45c:	69db      	ldr	r3, [r3, #28]
 800b45e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b460:	7bbb      	ldrb	r3, [r7, #14]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	211a      	movs	r1, #26
 800b466:	fb01 f303 	mul.w	r3, r1, r3
 800b46a:	4413      	add	r3, r2
 800b46c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	b25b      	sxtb	r3, r3
 800b474:	2b00      	cmp	r3, #0
 800b476:	da15      	bge.n	800b4a4 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	211a      	movs	r1, #26
 800b47e:	fb01 f303 	mul.w	r3, r1, r3
 800b482:	4413      	add	r3, r2
 800b484:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800b488:	781a      	ldrb	r2, [r3, #0]
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b48e:	7bbb      	ldrb	r3, [r7, #14]
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	211a      	movs	r1, #26
 800b494:	fb01 f303 	mul.w	r3, r1, r3
 800b498:	4413      	add	r3, r2
 800b49a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800b49e:	881a      	ldrh	r2, [r3, #0]
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	785b      	ldrb	r3, [r3, #1]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f001 ff2f 	bl	800d30e <USBH_AllocPipe>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	7819      	ldrb	r1, [r3, #0]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	7858      	ldrb	r0, [r3, #1]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	8952      	ldrh	r2, [r2, #10]
 800b4d0:	9202      	str	r2, [sp, #8]
 800b4d2:	2203      	movs	r2, #3
 800b4d4:	9201      	str	r2, [sp, #4]
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	4623      	mov	r3, r4
 800b4da:	4602      	mov	r2, r0
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f001 fee7 	bl	800d2b0 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f00d fcf4 	bl	8018ed8 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	210a      	movs	r1, #10
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fc26 	bl	800bd48 <USBH_FindInterface>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	2bff      	cmp	r3, #255	; 0xff
 800b504:	f000 80c4 	beq.w	800b690 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b508:	7bbb      	ldrb	r3, [r7, #14]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	211a      	movs	r1, #26
 800b50e:	fb01 f303 	mul.w	r3, r1, r3
 800b512:	4413      	add	r3, r2
 800b514:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	b25b      	sxtb	r3, r3
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	da16      	bge.n	800b54e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b520:	7bbb      	ldrb	r3, [r7, #14]
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	211a      	movs	r1, #26
 800b526:	fb01 f303 	mul.w	r3, r1, r3
 800b52a:	4413      	add	r3, r2
 800b52c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800b530:	781a      	ldrb	r2, [r3, #0]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b536:	7bbb      	ldrb	r3, [r7, #14]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	211a      	movs	r1, #26
 800b53c:	fb01 f303 	mul.w	r3, r1, r3
 800b540:	4413      	add	r3, r2
 800b542:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800b546:	881a      	ldrh	r2, [r3, #0]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	835a      	strh	r2, [r3, #26]
 800b54c:	e015      	b.n	800b57a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b54e:	7bbb      	ldrb	r3, [r7, #14]
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	211a      	movs	r1, #26
 800b554:	fb01 f303 	mul.w	r3, r1, r3
 800b558:	4413      	add	r3, r2
 800b55a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800b55e:	781a      	ldrb	r2, [r3, #0]
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b564:	7bbb      	ldrb	r3, [r7, #14]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	211a      	movs	r1, #26
 800b56a:	fb01 f303 	mul.w	r3, r1, r3
 800b56e:	4413      	add	r3, r2
 800b570:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800b574:	881a      	ldrh	r2, [r3, #0]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b57a:	7bbb      	ldrb	r3, [r7, #14]
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	211a      	movs	r1, #26
 800b580:	fb01 f303 	mul.w	r3, r1, r3
 800b584:	4413      	add	r3, r2
 800b586:	f203 3352 	addw	r3, r3, #850	; 0x352
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	b25b      	sxtb	r3, r3
 800b58e:	2b00      	cmp	r3, #0
 800b590:	da16      	bge.n	800b5c0 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	211a      	movs	r1, #26
 800b598:	fb01 f303 	mul.w	r3, r1, r3
 800b59c:	4413      	add	r3, r2
 800b59e:	f203 3352 	addw	r3, r3, #850	; 0x352
 800b5a2:	781a      	ldrb	r2, [r3, #0]
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b5a8:	7bbb      	ldrb	r3, [r7, #14]
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	211a      	movs	r1, #26
 800b5ae:	fb01 f303 	mul.w	r3, r1, r3
 800b5b2:	4413      	add	r3, r2
 800b5b4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800b5b8:	881a      	ldrh	r2, [r3, #0]
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	835a      	strh	r2, [r3, #26]
 800b5be:	e015      	b.n	800b5ec <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b5c0:	7bbb      	ldrb	r3, [r7, #14]
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	211a      	movs	r1, #26
 800b5c6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ca:	4413      	add	r3, r2
 800b5cc:	f203 3352 	addw	r3, r3, #850	; 0x352
 800b5d0:	781a      	ldrb	r2, [r3, #0]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	211a      	movs	r1, #26
 800b5dc:	fb01 f303 	mul.w	r3, r1, r3
 800b5e0:	4413      	add	r3, r2
 800b5e2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800b5e6:	881a      	ldrh	r2, [r3, #0]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	7b9b      	ldrb	r3, [r3, #14]
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 fe8b 	bl	800d30e <USBH_AllocPipe>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	7bdb      	ldrb	r3, [r3, #15]
 800b604:	4619      	mov	r1, r3
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f001 fe81 	bl	800d30e <USBH_AllocPipe>
 800b60c:	4603      	mov	r3, r0
 800b60e:	461a      	mov	r2, r3
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	7b59      	ldrb	r1, [r3, #13]
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	7b98      	ldrb	r0, [r3, #14]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	8b12      	ldrh	r2, [r2, #24]
 800b62c:	9202      	str	r2, [sp, #8]
 800b62e:	2202      	movs	r2, #2
 800b630:	9201      	str	r2, [sp, #4]
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	4623      	mov	r3, r4
 800b636:	4602      	mov	r2, r0
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f001 fe39 	bl	800d2b0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	7b19      	ldrb	r1, [r3, #12]
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	7bd8      	ldrb	r0, [r3, #15]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	8b52      	ldrh	r2, [r2, #26]
 800b656:	9202      	str	r2, [sp, #8]
 800b658:	2202      	movs	r2, #2
 800b65a:	9201      	str	r2, [sp, #4]
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	4623      	mov	r3, r4
 800b660:	4602      	mov	r2, r0
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f001 fe24 	bl	800d2b0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	7b5b      	ldrb	r3, [r3, #13]
 800b674:	2200      	movs	r2, #0
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f00d fc2d 	bl	8018ed8 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	7b1b      	ldrb	r3, [r3, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	4619      	mov	r1, r3
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f00d fc26 	bl	8018ed8 <USBH_LL_SetToggle>
      status = USBH_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800b690:	7bfb      	ldrb	r3, [r7, #15]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	bd90      	pop	{r4, r7, pc}

0800b69a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b084      	sub	sp, #16
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b6a8:	69db      	ldr	r3, [r3, #28]
 800b6aa:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00e      	beq.n	800b6d2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f001 fe17 	bl	800d2ee <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f001 fe3f 	bl	800d34a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	7b1b      	ldrb	r3, [r3, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00e      	beq.n	800b6f8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	7b1b      	ldrb	r3, [r3, #12]
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f001 fe04 	bl	800d2ee <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	7b1b      	ldrb	r3, [r3, #12]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f001 fe2c 	bl	800d34a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	7b5b      	ldrb	r3, [r3, #13]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00e      	beq.n	800b71e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	7b5b      	ldrb	r3, [r3, #13]
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f001 fdf1 	bl	800d2ee <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	7b5b      	ldrb	r3, [r3, #13]
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f001 fe19 	bl	800d34a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b724:	69db      	ldr	r3, [r3, #28]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00b      	beq.n	800b742 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	4618      	mov	r0, r3
 800b734:	f014 fbe4 	bl	801ff00 <free>
    phost->pActiveClass->pData = 0U;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b73e:	2200      	movs	r2, #0
 800b740:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800b754:	2302      	movs	r3, #2
 800b756:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b75e:	69db      	ldr	r3, [r3, #28]
 800b760:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	3340      	adds	r3, #64	; 0x40
 800b766:	4619      	mov	r1, r3
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f8b2 	bl	800b8d2 <GetLineCoding>
 800b76e:	4603      	mov	r3, r0
 800b770:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800b772:	7bfb      	ldrb	r3, [r7, #15]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d105      	bne.n	800b784 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b77e:	2102      	movs	r1, #2
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	4798      	blx	r3
  }
  return status;
 800b784:	7bfb      	ldrb	r3, [r7, #15]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
	...

0800b790 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b798:	2301      	movs	r3, #1
 800b79a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b79c:	2300      	movs	r3, #0
 800b79e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b7a6:	69db      	ldr	r3, [r3, #28]
 800b7a8:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b7b0:	2b04      	cmp	r3, #4
 800b7b2:	d877      	bhi.n	800b8a4 <USBH_CDC_Process+0x114>
 800b7b4:	a201      	add	r2, pc, #4	; (adr r2, 800b7bc <USBH_CDC_Process+0x2c>)
 800b7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ba:	bf00      	nop
 800b7bc:	0800b7d1 	.word	0x0800b7d1
 800b7c0:	0800b7d7 	.word	0x0800b7d7
 800b7c4:	0800b807 	.word	0x0800b807
 800b7c8:	0800b87b 	.word	0x0800b87b
 800b7cc:	0800b889 	.word	0x0800b889
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b7d4:	e06d      	b.n	800b8b2 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f897 	bl	800b910 <SetLineCoding>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800b7e6:	7bbb      	ldrb	r3, [r7, #14]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d104      	bne.n	800b7f6 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800b7f4:	e058      	b.n	800b8a8 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800b7f6:	7bbb      	ldrb	r3, [r7, #14]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d055      	beq.n	800b8a8 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	2204      	movs	r2, #4
 800b800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800b804:	e050      	b.n	800b8a8 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	3340      	adds	r3, #64	; 0x40
 800b80a:	4619      	mov	r1, r3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 f860 	bl	800b8d2 <GetLineCoding>
 800b812:	4603      	mov	r3, r0
 800b814:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800b816:	7bbb      	ldrb	r3, [r7, #14]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d126      	bne.n	800b86a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	2200      	movs	r2, #0
 800b820:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b82e:	791b      	ldrb	r3, [r3, #4]
 800b830:	429a      	cmp	r2, r3
 800b832:	d13b      	bne.n	800b8ac <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b83e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b840:	429a      	cmp	r2, r3
 800b842:	d133      	bne.n	800b8ac <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b84e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b850:	429a      	cmp	r2, r3
 800b852:	d12b      	bne.n	800b8ac <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b85c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b85e:	429a      	cmp	r2, r3
 800b860:	d124      	bne.n	800b8ac <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f984 	bl	800bb70 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800b868:	e020      	b.n	800b8ac <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800b86a:	7bbb      	ldrb	r3, [r7, #14]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d01d      	beq.n	800b8ac <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	2204      	movs	r2, #4
 800b874:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800b878:	e018      	b.n	800b8ac <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f867 	bl	800b94e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f8f8 	bl	800ba76 <CDC_ProcessReception>
    break;
 800b886:	e014      	b.n	800b8b2 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800b888:	2100      	movs	r1, #0
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fffa 	bl	800c884 <USBH_ClrFeature>
 800b890:	4603      	mov	r3, r0
 800b892:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800b894:	7bbb      	ldrb	r3, [r7, #14]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10a      	bne.n	800b8b0 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800b8a2:	e005      	b.n	800b8b0 <USBH_CDC_Process+0x120>

  default:
    break;
 800b8a4:	bf00      	nop
 800b8a6:	e004      	b.n	800b8b2 <USBH_CDC_Process+0x122>
    break;
 800b8a8:	bf00      	nop
 800b8aa:	e002      	b.n	800b8b2 <USBH_CDC_Process+0x122>
    break;
 800b8ac:	bf00      	nop
 800b8ae:	e000      	b.n	800b8b2 <USBH_CDC_Process+0x122>
    break;
 800b8b0:	bf00      	nop

  }

  return status;
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	370c      	adds	r7, #12
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	22a1      	movs	r2, #161	; 0xa1
 800b8e0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2221      	movs	r2, #33	; 0x21
 800b8e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2207      	movs	r2, #7
 800b8f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2207      	movs	r2, #7
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 f99f 	bl	800cc44 <USBH_CtlReq>
 800b906:	4603      	mov	r3, r0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3708      	adds	r7, #8
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2221      	movs	r2, #33	; 0x21
 800b91e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2220      	movs	r2, #32
 800b924:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2207      	movs	r2, #7
 800b936:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2207      	movs	r2, #7
 800b93c:	4619      	mov	r1, r3
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f001 f980 	bl	800cc44 <USBH_CtlReq>
 800b944:	4603      	mov	r3, r0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b086      	sub	sp, #24
 800b952:	af02      	add	r7, sp, #8
 800b954:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b95c:	69db      	ldr	r3, [r3, #28]
 800b95e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b960:	2300      	movs	r3, #0
 800b962:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d002      	beq.n	800b974 <CDC_ProcessTransmission+0x26>
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d025      	beq.n	800b9be <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800b972:	e07c      	b.n	800ba6e <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	8b12      	ldrh	r2, [r2, #24]
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d90c      	bls.n	800b99a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	69d9      	ldr	r1, [r3, #28]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	8b1a      	ldrh	r2, [r3, #24]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	7b58      	ldrb	r0, [r3, #13]
 800b98c:	2301      	movs	r3, #1
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	4603      	mov	r3, r0
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f001 fc49 	bl	800d22a <USBH_BulkSendData>
 800b998:	e00c      	b.n	800b9b4 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	7b58      	ldrb	r0, [r3, #13]
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f001 fc3b 	bl	800d22a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800b9bc:	e057      	b.n	800ba6e <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	7b5b      	ldrb	r3, [r3, #13]
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f00d fa5d 	bl	8018e84 <USBH_LL_GetURBState>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800b9ce:	7afb      	ldrb	r3, [r7, #11]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d136      	bne.n	800ba42 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	8b12      	ldrh	r2, [r2, #24]
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d90e      	bls.n	800b9fe <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	8b12      	ldrh	r2, [r2, #24]
 800b9e8:	1a9a      	subs	r2, r3, r2
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	69db      	ldr	r3, [r3, #28]
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	8b12      	ldrh	r2, [r2, #24]
 800b9f6:	441a      	add	r2, r3
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	61da      	str	r2, [r3, #28]
 800b9fc:	e002      	b.n	800ba04 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d004      	beq.n	800ba16 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800ba14:	e006      	b.n	800ba24 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f892 	bl	800bb48 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2204      	movs	r2, #4
 800ba28:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba38:	2200      	movs	r2, #0
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	f005 faee 	bl	801101c <osMessagePut>
    break;
 800ba40:	e014      	b.n	800ba6c <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800ba42:	7afb      	ldrb	r3, [r7, #11]
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	d111      	bne.n	800ba6c <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2204      	movs	r2, #4
 800ba54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba64:	2200      	movs	r2, #0
 800ba66:	4619      	mov	r1, r3
 800ba68:	f005 fad8 	bl	801101c <osMessagePut>
    break;
 800ba6c:	bf00      	nop
  }
}
 800ba6e:	bf00      	nop
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b086      	sub	sp, #24
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ba84:	69db      	ldr	r3, [r3, #28]
 800ba86:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ba92:	2b03      	cmp	r3, #3
 800ba94:	d002      	beq.n	800ba9c <CDC_ProcessReception+0x26>
 800ba96:	2b04      	cmp	r3, #4
 800ba98:	d00e      	beq.n	800bab8 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800ba9a:	e051      	b.n	800bb40 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	6a19      	ldr	r1, [r3, #32]
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	8b5a      	ldrh	r2, [r3, #26]
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	7b1b      	ldrb	r3, [r3, #12]
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f001 fbe3 	bl	800d274 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	2204      	movs	r2, #4
 800bab2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800bab6:	e043      	b.n	800bb40 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	7b1b      	ldrb	r3, [r3, #12]
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f00d f9e0 	bl	8018e84 <USBH_LL_GetURBState>
 800bac4:	4603      	mov	r3, r0
 800bac6:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800bac8:	7cfb      	ldrb	r3, [r7, #19]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d137      	bne.n	800bb3e <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	7b1b      	ldrb	r3, [r3, #12]
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f00d f943 	bl	8018d60 <USBH_LL_GetLastXferSize>
 800bada:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d016      	beq.n	800bb14 <CDC_ProcessReception+0x9e>
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	8b5b      	ldrh	r3, [r3, #26]
 800baea:	461a      	mov	r2, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	4293      	cmp	r3, r2
 800baf0:	d910      	bls.n	800bb14 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	1ad2      	subs	r2, r2, r3
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	6a1a      	ldr	r2, [r3, #32]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	441a      	add	r2, r3
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	2203      	movs	r2, #3
 800bb0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800bb12:	e006      	b.n	800bb22 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f81d 	bl	800bb5c <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2204      	movs	r2, #4
 800bb26:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb36:	2200      	movs	r2, #0
 800bb38:	4619      	mov	r1, r3
 800bb3a:	f005 fa6f 	bl	801101c <osMessagePut>
    break;
 800bb3e:	bf00      	nop
  }
}
 800bb40:	bf00      	nop
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]

}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]

}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]

}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800bb84:	b5b0      	push	{r4, r5, r7, lr}
 800bb86:	b08c      	sub	sp, #48	; 0x30
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e03c      	b.n	800bc16 <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	79fa      	ldrb	r2, [r7, #7]
 800bba0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f000 f837 	bl	800bc28 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d003      	beq.n	800bbc8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800bbc8:	4a15      	ldr	r2, [pc, #84]	; (800bc20 <USBH_Init+0x9c>)
 800bbca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbd2:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800bbd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbda:	2100      	movs	r1, #0
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f005 fa0b 	bl	8010ff8 <osMessageCreate>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800bbea:	4b0e      	ldr	r3, [pc, #56]	; (800bc24 <USBH_Init+0xa0>)
 800bbec:	f107 0414 	add.w	r4, r7, #20
 800bbf0:	461d      	mov	r5, r3
 800bbf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbf6:	682b      	ldr	r3, [r5, #0]
 800bbf8:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800bbfa:	f107 0314 	add.w	r3, r7, #20
 800bbfe:	68f9      	ldr	r1, [r7, #12]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f005 f915 	bl	8010e30 <osThreadCreate>
 800bc06:	4602      	mov	r2, r0
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f00c fff4 	bl	8018bfc <USBH_LL_Init>

  return USBH_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3730      	adds	r7, #48	; 0x30
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bdb0      	pop	{r4, r5, r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	08020e3c 	.word	0x08020e3c
 800bc24:	08020e50 	.word	0x08020e50

0800bc28 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800bc34:	e008      	b.n	800bc48 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	32e0      	adds	r2, #224	; 0xe0
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3301      	adds	r3, #1
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2b0e      	cmp	r3, #14
 800bc4c:	d9f3      	bls.n	800bc36 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	e009      	b.n	800bc68 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	4413      	add	r3, r2
 800bc5a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bc5e:	2200      	movs	r2, #0
 800bc60:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	3301      	adds	r3, #1
 800bc66:	60fb      	str	r3, [r7, #12]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc6e:	d3f1      	bcc.n	800bc54 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2240      	movs	r2, #64	; 0x40
 800bc94:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2201      	movs	r2, #1
 800bca8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bcba:	b480      	push	{r7}
 800bcbc:	b085      	sub	sp, #20
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d017      	beq.n	800bcfe <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10f      	bne.n	800bcf8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcde:	1c59      	adds	r1, r3, #1
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	33dc      	adds	r3, #220	; 0xdc
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	73fb      	strb	r3, [r7, #15]
 800bcf6:	e004      	b.n	800bd02 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	73fb      	strb	r3, [r7, #15]
 800bcfc:	e001      	b.n	800bd02 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bcfe:	2302      	movs	r3, #2
 800bd00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800bd26:	78fa      	ldrb	r2, [r7, #3]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d204      	bcs.n	800bd36 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	78fa      	ldrb	r2, [r7, #3]
 800bd30:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800bd34:	e001      	b.n	800bd3a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bd36:	2302      	movs	r3, #2
 800bd38:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	4608      	mov	r0, r1
 800bd52:	4611      	mov	r1, r2
 800bd54:	461a      	mov	r2, r3
 800bd56:	4603      	mov	r3, r0
 800bd58:	70fb      	strb	r3, [r7, #3]
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	70bb      	strb	r3, [r7, #2]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800bd62:	2300      	movs	r3, #0
 800bd64:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800bd70:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bd72:	e025      	b.n	800bdc0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bd74:	7dfb      	ldrb	r3, [r7, #23]
 800bd76:	221a      	movs	r2, #26
 800bd78:	fb02 f303 	mul.w	r3, r2, r3
 800bd7c:	3308      	adds	r3, #8
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	4413      	add	r3, r2
 800bd82:	3302      	adds	r3, #2
 800bd84:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	795b      	ldrb	r3, [r3, #5]
 800bd8a:	78fa      	ldrb	r2, [r7, #3]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d002      	beq.n	800bd96 <USBH_FindInterface+0x4e>
 800bd90:	78fb      	ldrb	r3, [r7, #3]
 800bd92:	2bff      	cmp	r3, #255	; 0xff
 800bd94:	d111      	bne.n	800bdba <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800bd9a:	78ba      	ldrb	r2, [r7, #2]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d002      	beq.n	800bda6 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800bda0:	78bb      	ldrb	r3, [r7, #2]
 800bda2:	2bff      	cmp	r3, #255	; 0xff
 800bda4:	d109      	bne.n	800bdba <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800bdaa:	787a      	ldrb	r2, [r7, #1]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d002      	beq.n	800bdb6 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bdb0:	787b      	ldrb	r3, [r7, #1]
 800bdb2:	2bff      	cmp	r3, #255	; 0xff
 800bdb4:	d101      	bne.n	800bdba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bdb6:	7dfb      	ldrb	r3, [r7, #23]
 800bdb8:	e006      	b.n	800bdc8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bdba:	7dfb      	ldrb	r3, [r7, #23]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bdc0:	7dfb      	ldrb	r3, [r7, #23]
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d9d6      	bls.n	800bd74 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bdc6:	23ff      	movs	r3, #255	; 0xff
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	371c      	adds	r7, #28
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f00c ff49 	bl	8018c74 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800bde2:	2101      	movs	r1, #1
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f00d f860 	bl	8018eaa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b088      	sub	sp, #32
 800bdf8:	af04      	add	r7, sp, #16
 800bdfa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bdfc:	2302      	movs	r3, #2
 800bdfe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800be00:	2300      	movs	r3, #0
 800be02:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fb7e 	bl	800c506 <USBH_IsPortEnabled>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10c      	bne.n	800be2a <USBH_Process+0x36>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	b2db      	uxtb	r3, r3
 800be16:	2b00      	cmp	r3, #0
 800be18:	d007      	beq.n	800be2a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b03      	cmp	r3, #3
 800be22:	d002      	beq.n	800be2a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2203      	movs	r2, #3
 800be28:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	2b0b      	cmp	r3, #11
 800be32:	f200 81ab 	bhi.w	800c18c <USBH_Process+0x398>
 800be36:	a201      	add	r2, pc, #4	; (adr r2, 800be3c <USBH_Process+0x48>)
 800be38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3c:	0800be6d 	.word	0x0800be6d
 800be40:	0800beab 	.word	0x0800beab
 800be44:	0800bebf 	.word	0x0800bebf
 800be48:	0800c167 	.word	0x0800c167
 800be4c:	0800c18d 	.word	0x0800c18d
 800be50:	0800bf69 	.word	0x0800bf69
 800be54:	0800c101 	.word	0x0800c101
 800be58:	0800bf99 	.word	0x0800bf99
 800be5c:	0800bfd5 	.word	0x0800bfd5
 800be60:	0800c00f 	.word	0x0800c00f
 800be64:	0800c057 	.word	0x0800c057
 800be68:	0800c14f 	.word	0x0800c14f
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be72:	b2db      	uxtb	r3, r3
 800be74:	2b00      	cmp	r3, #0
 800be76:	f000 818b 	beq.w	800c190 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2201      	movs	r2, #1
 800be7e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800be80:	20c8      	movs	r0, #200	; 0xc8
 800be82:	f00d f85c 	bl	8018f3e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f00c ff4f 	bl	8018d2a <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2201      	movs	r2, #1
 800be90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bea0:	2200      	movs	r2, #0
 800bea2:	4619      	mov	r1, r3
 800bea4:	f005 f8ba 	bl	801101c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800bea8:	e172      	b.n	800c190 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	f040 816f 	bne.w	800c194 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2202      	movs	r2, #2
 800beba:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bebc:	e16a      	b.n	800c194 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800bebe:	2064      	movs	r0, #100	; 0x64
 800bec0:	f00d f83d 	bl	8018f3e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f00c ff0b 	bl	8018ce0 <USBH_LL_GetSpeed>
 800beca:	4603      	mov	r3, r0
 800becc:	461a      	mov	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2205      	movs	r2, #5
 800bed8:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800beda:	2100      	movs	r1, #0
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f001 fa16 	bl	800d30e <USBH_AllocPipe>
 800bee2:	4603      	mov	r3, r0
 800bee4:	461a      	mov	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800beea:	2180      	movs	r1, #128	; 0x80
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f001 fa0e 	bl	800d30e <USBH_AllocPipe>
 800bef2:	4603      	mov	r3, r0
 800bef4:	461a      	mov	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	7919      	ldrb	r1, [r3, #4]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800bf0e:	b292      	uxth	r2, r2
 800bf10:	9202      	str	r2, [sp, #8]
 800bf12:	2200      	movs	r2, #0
 800bf14:	9201      	str	r2, [sp, #4]
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2280      	movs	r2, #128	; 0x80
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f001 f9c7 	bl	800d2b0 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	7959      	ldrb	r1, [r3, #5]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800bf36:	b292      	uxth	r2, r2
 800bf38:	9202      	str	r2, [sp, #8]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	9201      	str	r2, [sp, #4]
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	4603      	mov	r3, r0
 800bf42:	2200      	movs	r2, #0
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f001 f9b3 	bl	800d2b0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf5e:	2200      	movs	r2, #0
 800bf60:	4619      	mov	r1, r3
 800bf62:	f005 f85b 	bl	801101c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800bf66:	e120      	b.n	800c1aa <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 f923 	bl	800c1b4 <USBH_HandleEnum>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f040 8111 	bne.w	800c198 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d103      	bne.n	800bf90 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2208      	movs	r2, #8
 800bf8c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800bf8e:	e103      	b.n	800c198 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2207      	movs	r2, #7
 800bf94:	701a      	strb	r2, [r3, #0]
    break;
 800bf96:	e0ff      	b.n	800c198 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f000 80fc 	beq.w	800c19c <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bfaa:	2101      	movs	r1, #1
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2208      	movs	r2, #8
 800bfb4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2205      	movs	r2, #5
 800bfba:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfca:	2200      	movs	r2, #0
 800bfcc:	4619      	mov	r1, r3
 800bfce:	f005 f825 	bl	801101c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800bfd2:	e0e3      	b.n	800c19c <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	4619      	mov	r1, r3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 fc09 	bl	800c7f6 <USBH_SetCfg>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d102      	bne.n	800bff0 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2209      	movs	r2, #9
 800bfee:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c004:	2200      	movs	r2, #0
 800c006:	4619      	mov	r1, r3
 800c008:	f005 f808 	bl	801101c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800c00c:	e0cd      	b.n	800c1aa <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800c014:	f003 0320 	and.w	r3, r3, #32
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00a      	beq.n	800c032 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c01c:	2101      	movs	r1, #1
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fc0c 	bl	800c83c <USBH_SetFeature>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d106      	bne.n	800c038 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	220a      	movs	r2, #10
 800c02e:	701a      	strb	r2, [r3, #0]
 800c030:	e002      	b.n	800c038 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	220a      	movs	r2, #10
 800c036:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c04c:	2200      	movs	r2, #0
 800c04e:	4619      	mov	r1, r3
 800c050:	f004 ffe4 	bl	801101c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800c054:	e0a9      	b.n	800c1aa <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d040      	beq.n	800c0e2 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c068:	2300      	movs	r3, #0
 800c06a:	73fb      	strb	r3, [r7, #15]
 800c06c:	e017      	b.n	800c09e <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	33dc      	adds	r3, #220	; 0xdc
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4413      	add	r3, r2
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	791a      	ldrb	r2, [r3, #4]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800c082:	429a      	cmp	r2, r3
 800c084:	d108      	bne.n	800c098 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800c086:	7bfb      	ldrb	r3, [r7, #15]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	33dc      	adds	r3, #220	; 0xdc
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	4413      	add	r3, r2
 800c090:	685a      	ldr	r2, [r3, #4]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c098:	7bfb      	ldrb	r3, [r7, #15]
 800c09a:	3301      	adds	r3, #1
 800c09c:	73fb      	strb	r3, [r7, #15]
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d0e4      	beq.n	800c06e <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d016      	beq.n	800c0dc <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	4798      	blx	r3
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d109      	bne.n	800c0d4 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2206      	movs	r2, #6
 800c0c4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c0cc:	2103      	movs	r1, #3
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	4798      	blx	r3
 800c0d2:	e006      	b.n	800c0e2 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	220d      	movs	r2, #13
 800c0d8:	701a      	strb	r2, [r3, #0]
 800c0da:	e002      	b.n	800c0e2 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	220d      	movs	r2, #13
 800c0e0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2205      	movs	r2, #5
 800c0e6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	f004 ff8f 	bl	801101c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800c0fe:	e054      	b.n	800c1aa <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00f      	beq.n	800c12a <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	4798      	blx	r3
 800c116:	4603      	mov	r3, r0
 800c118:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800c11a:	7bbb      	ldrb	r3, [r7, #14]
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d13e      	bne.n	800c1a0 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	220b      	movs	r2, #11
 800c126:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800c128:	e03a      	b.n	800c1a0 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	220d      	movs	r2, #13
 800c12e:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2205      	movs	r2, #5
 800c134:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c144:	2200      	movs	r2, #0
 800c146:	4619      	mov	r1, r3
 800c148:	f004 ff68 	bl	801101c <osMessagePut>
    break;
 800c14c:	e028      	b.n	800c1a0 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c154:	2b00      	cmp	r3, #0
 800c156:	d025      	beq.n	800c1a4 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	4798      	blx	r3
    }
    break;
 800c164:	e01e      	b.n	800c1a4 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7ff fd5e 	bl	800bc28 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c172:	2b00      	cmp	r3, #0
 800c174:	d018      	beq.n	800c1a8 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800c18a:	e00d      	b.n	800c1a8 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800c18c:	bf00      	nop
 800c18e:	e00c      	b.n	800c1aa <USBH_Process+0x3b6>
    break;
 800c190:	bf00      	nop
 800c192:	e00a      	b.n	800c1aa <USBH_Process+0x3b6>
    break;
 800c194:	bf00      	nop
 800c196:	e008      	b.n	800c1aa <USBH_Process+0x3b6>
    break;
 800c198:	bf00      	nop
 800c19a:	e006      	b.n	800c1aa <USBH_Process+0x3b6>
    break;
 800c19c:	bf00      	nop
 800c19e:	e004      	b.n	800c1aa <USBH_Process+0x3b6>
    break;
 800c1a0:	bf00      	nop
 800c1a2:	e002      	b.n	800c1aa <USBH_Process+0x3b6>
    break;
 800c1a4:	bf00      	nop
 800c1a6:	e000      	b.n	800c1aa <USBH_Process+0x3b6>
    break;
 800c1a8:	bf00      	nop
  }
 return USBH_OK;
 800c1aa:	2300      	movs	r3, #0
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b088      	sub	sp, #32
 800c1b8:	af04      	add	r7, sp, #16
 800c1ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	785b      	ldrb	r3, [r3, #1]
 800c1c4:	2b07      	cmp	r3, #7
 800c1c6:	f200 8132 	bhi.w	800c42e <USBH_HandleEnum+0x27a>
 800c1ca:	a201      	add	r2, pc, #4	; (adr r2, 800c1d0 <USBH_HandleEnum+0x1c>)
 800c1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d0:	0800c1f1 	.word	0x0800c1f1
 800c1d4:	0800c263 	.word	0x0800c263
 800c1d8:	0800c27b 	.word	0x0800c27b
 800c1dc:	0800c2f1 	.word	0x0800c2f1
 800c1e0:	0800c309 	.word	0x0800c309
 800c1e4:	0800c327 	.word	0x0800c327
 800c1e8:	0800c393 	.word	0x0800c393
 800c1ec:	0800c3e3 	.word	0x0800c3e3
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800c1f0:	2108      	movs	r1, #8
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fa2f 	bl	800c656 <USBH_Get_DevDesc>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f040 8119 	bne.w	800c432 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	7919      	ldrb	r1, [r3, #4]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800c224:	b292      	uxth	r2, r2
 800c226:	9202      	str	r2, [sp, #8]
 800c228:	2200      	movs	r2, #0
 800c22a:	9201      	str	r2, [sp, #4]
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	4603      	mov	r3, r0
 800c230:	2280      	movs	r2, #128	; 0x80
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f001 f83c 	bl	800d2b0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	7959      	ldrb	r1, [r3, #5]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800c24c:	b292      	uxth	r2, r2
 800c24e:	9202      	str	r2, [sp, #8]
 800c250:	2200      	movs	r2, #0
 800c252:	9201      	str	r2, [sp, #4]
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	4603      	mov	r3, r0
 800c258:	2200      	movs	r2, #0
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f001 f828 	bl	800d2b0 <USBH_OpenPipe>

    }
    break;
 800c260:	e0e7      	b.n	800c432 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800c262:	2112      	movs	r1, #18
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 f9f6 	bl	800c656 <USBH_Get_DevDesc>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f040 80e2 	bne.w	800c436 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2202      	movs	r2, #2
 800c276:	705a      	strb	r2, [r3, #1]

    }
    break;
 800c278:	e0dd      	b.n	800c436 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800c27a:	2101      	movs	r1, #1
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fa96 	bl	800c7ae <USBH_SetAddress>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	f040 80d8 	bne.w	800c43a <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800c28a:	2002      	movs	r0, #2
 800c28c:	f00c fe57 	bl	8018f3e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2203      	movs	r2, #3
 800c29c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	7919      	ldrb	r1, [r3, #4]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800c2b2:	b292      	uxth	r2, r2
 800c2b4:	9202      	str	r2, [sp, #8]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	9201      	str	r2, [sp, #4]
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2280      	movs	r2, #128	; 0x80
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 fff5 	bl	800d2b0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	7959      	ldrb	r1, [r3, #5]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800c2da:	b292      	uxth	r2, r2
 800c2dc:	9202      	str	r2, [sp, #8]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	9201      	str	r2, [sp, #4]
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 ffe1 	bl	800d2b0 <USBH_OpenPipe>
    }
    break;
 800c2ee:	e0a4      	b.n	800c43a <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800c2f0:	2109      	movs	r1, #9
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f9d7 	bl	800c6a6 <USBH_Get_CfgDesc>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	f040 809f 	bne.w	800c43e <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2204      	movs	r2, #4
 800c304:	705a      	strb	r2, [r3, #1]
    }
    break;
 800c306:	e09a      	b.n	800c43e <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800c30e:	4619      	mov	r1, r3
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f9c8 	bl	800c6a6 <USBH_Get_CfgDesc>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f040 8092 	bne.w	800c442 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2205      	movs	r2, #5
 800c322:	705a      	strb	r2, [r3, #1]
    }
    break;
 800c324:	e08d      	b.n	800c442 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d01e      	beq.n	800c36e <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800c33c:	23ff      	movs	r3, #255	; 0xff
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f9d5 	bl	800c6ee <USBH_Get_StringDesc>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d17d      	bne.n	800c446 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2206      	movs	r2, #6
 800c34e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2205      	movs	r2, #5
 800c354:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c364:	2200      	movs	r2, #0
 800c366:	4619      	mov	r1, r3
 800c368:	f004 fe58 	bl	801101c <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800c36c:	e06b      	b.n	800c446 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2206      	movs	r2, #6
 800c372:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2205      	movs	r2, #5
 800c378:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c388:	2200      	movs	r2, #0
 800c38a:	4619      	mov	r1, r3
 800c38c:	f004 fe46 	bl	801101c <osMessagePut>
    break;
 800c390:	e059      	b.n	800c446 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d010      	beq.n	800c3be <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800c3a8:	23ff      	movs	r3, #255	; 0xff
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 f99f 	bl	800c6ee <USBH_Get_StringDesc>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d149      	bne.n	800c44a <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2207      	movs	r2, #7
 800c3ba:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800c3bc:	e045      	b.n	800c44a <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2207      	movs	r2, #7
 800c3c2:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2205      	movs	r2, #5
 800c3c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c3d8:	2200      	movs	r2, #0
 800c3da:	4619      	mov	r1, r3
 800c3dc:	f004 fe1e 	bl	801101c <osMessagePut>
    break;
 800c3e0:	e033      	b.n	800c44a <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00f      	beq.n	800c40c <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800c3f8:	23ff      	movs	r3, #255	; 0xff
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 f977 	bl	800c6ee <USBH_Get_StringDesc>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d123      	bne.n	800c44e <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800c40a:	e020      	b.n	800c44e <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2205      	movs	r2, #5
 800c414:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c424:	2200      	movs	r2, #0
 800c426:	4619      	mov	r1, r3
 800c428:	f004 fdf8 	bl	801101c <osMessagePut>
    break;
 800c42c:	e00f      	b.n	800c44e <USBH_HandleEnum+0x29a>

  default:
    break;
 800c42e:	bf00      	nop
 800c430:	e00e      	b.n	800c450 <USBH_HandleEnum+0x29c>
    break;
 800c432:	bf00      	nop
 800c434:	e00c      	b.n	800c450 <USBH_HandleEnum+0x29c>
    break;
 800c436:	bf00      	nop
 800c438:	e00a      	b.n	800c450 <USBH_HandleEnum+0x29c>
    break;
 800c43a:	bf00      	nop
 800c43c:	e008      	b.n	800c450 <USBH_HandleEnum+0x29c>
    break;
 800c43e:	bf00      	nop
 800c440:	e006      	b.n	800c450 <USBH_HandleEnum+0x29c>
    break;
 800c442:	bf00      	nop
 800c444:	e004      	b.n	800c450 <USBH_HandleEnum+0x29c>
    break;
 800c446:	bf00      	nop
 800c448:	e002      	b.n	800c450 <USBH_HandleEnum+0x29c>
    break;
 800c44a:	bf00      	nop
 800c44c:	e000      	b.n	800c450 <USBH_HandleEnum+0x29c>
    break;
 800c44e:	bf00      	nop
  }
  return Status;
 800c450:	7bfb      	ldrb	r3, [r7, #15]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop

0800c45c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800c46e:	bf00      	nop
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b082      	sub	sp, #8
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800c488:	1c5a      	adds	r2, r3, #1
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 f804 	bl	800c49e <USBH_HandleSof>
}
 800c496:	bf00      	nop
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b082      	sub	sp, #8
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b0b      	cmp	r3, #11
 800c4ae:	d10a      	bne.n	800c4c6 <USBH_HandleSof+0x28>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d005      	beq.n	800c4c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	4798      	blx	r3
  }
}
 800c4c6:	bf00      	nop
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	b083      	sub	sp, #12
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800c4de:	bf00      	nop
}
 800c4e0:	370c      	adds	r7, #12
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr

0800c4ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800c4ea:	b480      	push	{r7}
 800c4ec:	b083      	sub	sp, #12
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800c4fa:	bf00      	nop
}
 800c4fc:	370c      	adds	r7, #12
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800c506:	b480      	push	{r7}
 800c508:	b083      	sub	sp, #12
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800c514:	4618      	mov	r0, r3
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d10f      	bne.n	800c552 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2201      	movs	r2, #1
 800c536:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00e      	beq.n	800c562 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c54a:	2104      	movs	r1, #4
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	4798      	blx	r3
 800c550:	e007      	b.n	800c562 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d102      	bne.n	800c562 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2202      	movs	r2, #2
 800c560:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2201      	movs	r2, #1
 800c566:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c576:	2200      	movs	r2, #0
 800c578:	4619      	mov	r1, r3
 800c57a:	f004 fd4f 	bl	801101c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f00c fb8a 	bl	8018caa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	791b      	ldrb	r3, [r3, #4]
 800c59a:	4619      	mov	r1, r3
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fed4 	bl	800d34a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	795b      	ldrb	r3, [r3, #5]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fece 	bl	800d34a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d005      	beq.n	800c5cc <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c5c6:	2105      	movs	r1, #5
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f00c fb51 	bl	8018c74 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2203      	movs	r2, #3
 800c5d6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	f004 fd14 	bl	801101c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b086      	sub	sp, #24
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800c60c:	f107 030c 	add.w	r3, r7, #12
 800c610:	f04f 32ff 	mov.w	r2, #4294967295
 800c614:	4618      	mov	r0, r3
 800c616:	f004 fd41 	bl	801109c <osMessageGet>
    if(event.status == osEventMessage)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b10      	cmp	r3, #16
 800c61e:	d1f2      	bne.n	800c606 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7ff fbe7 	bl	800bdf4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800c626:	e7ee      	b.n	800c606 <USBH_Process_OS+0x8>

0800c628 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c644:	2200      	movs	r2, #0
 800c646:	4619      	mov	r1, r3
 800c648:	f004 fce8 	bl	801101c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b086      	sub	sp, #24
 800c65a:	af02      	add	r7, sp, #8
 800c65c:	6078      	str	r0, [r7, #4]
 800c65e:	460b      	mov	r3, r1
 800c660:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800c668:	78fb      	ldrb	r3, [r7, #3]
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	4613      	mov	r3, r2
 800c670:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c674:	2100      	movs	r1, #0
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f864 	bl	800c744 <USBH_GetDescriptor>
 800c67c:	4603      	mov	r3, r0
 800c67e:	73fb      	strb	r3, [r7, #15]
 800c680:	7bfb      	ldrb	r3, [r7, #15]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d10a      	bne.n	800c69c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f203 3022 	addw	r0, r3, #802	; 0x322
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c692:	78fa      	ldrb	r2, [r7, #3]
 800c694:	b292      	uxth	r2, r2
 800c696:	4619      	mov	r1, r3
 800c698:	f000 f918 	bl	800c8cc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800c69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b086      	sub	sp, #24
 800c6aa:	af02      	add	r7, sp, #8
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	331c      	adds	r3, #28
 800c6b6:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800c6b8:	887b      	ldrh	r3, [r7, #2]
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 f83d 	bl	800c744 <USBH_GetDescriptor>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	72fb      	strb	r3, [r7, #11]
 800c6ce:	7afb      	ldrb	r3, [r7, #11]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d107      	bne.n	800c6e4 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800c6da:	887a      	ldrh	r2, [r7, #2]
 800c6dc:	68f9      	ldr	r1, [r7, #12]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 f964 	bl	800c9ac <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800c6e4:	7afb      	ldrb	r3, [r7, #11]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b088      	sub	sp, #32
 800c6f2:	af02      	add	r7, sp, #8
 800c6f4:	60f8      	str	r0, [r7, #12]
 800c6f6:	607a      	str	r2, [r7, #4]
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	72fb      	strb	r3, [r7, #11]
 800c6fe:	4613      	mov	r3, r2
 800c700:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800c702:	7afb      	ldrb	r3, [r7, #11]
 800c704:	b29b      	uxth	r3, r3
 800c706:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c70a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800c712:	893b      	ldrh	r3, [r7, #8]
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	460b      	mov	r3, r1
 800c718:	2100      	movs	r1, #0
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f000 f812 	bl	800c744 <USBH_GetDescriptor>
 800c720:	4603      	mov	r3, r0
 800c722:	75fb      	strb	r3, [r7, #23]
 800c724:	7dfb      	ldrb	r3, [r7, #23]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d107      	bne.n	800c73a <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c730:	893a      	ldrh	r2, [r7, #8]
 800c732:	6879      	ldr	r1, [r7, #4]
 800c734:	4618      	mov	r0, r3
 800c736:	f000 fa37 	bl	800cba8 <USBH_ParseStringDesc>
  }
  return status;
 800c73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3718      	adds	r7, #24
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	607b      	str	r3, [r7, #4]
 800c74e:	460b      	mov	r3, r1
 800c750:	72fb      	strb	r3, [r7, #11]
 800c752:	4613      	mov	r3, r2
 800c754:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	789b      	ldrb	r3, [r3, #2]
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d11c      	bne.n	800c798 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c75e:	7afb      	ldrb	r3, [r7, #11]
 800c760:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c764:	b2da      	uxtb	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2206      	movs	r2, #6
 800c76e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	893a      	ldrh	r2, [r7, #8]
 800c774:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c776:	893b      	ldrh	r3, [r7, #8]
 800c778:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c77c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c780:	d104      	bne.n	800c78c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f240 4209 	movw	r2, #1033	; 0x409
 800c788:	829a      	strh	r2, [r3, #20]
 800c78a:	e002      	b.n	800c792 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2200      	movs	r2, #0
 800c790:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	8b3a      	ldrh	r2, [r7, #24]
 800c796:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800c798:	8b3b      	ldrh	r3, [r7, #24]
 800c79a:	461a      	mov	r2, r3
 800c79c:	6879      	ldr	r1, [r7, #4]
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	f000 fa50 	bl	800cc44 <USBH_CtlReq>
 800c7a4:	4603      	mov	r3, r0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b082      	sub	sp, #8
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	789b      	ldrb	r3, [r3, #2]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d10f      	bne.n	800c7e2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2205      	movs	r2, #5
 800c7cc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c7ce:	78fb      	ldrb	r3, [r7, #3]
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fa2c 	bl	800cc44 <USBH_CtlReq>
 800c7ec:	4603      	mov	r3, r0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b082      	sub	sp, #8
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	460b      	mov	r3, r1
 800c800:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	789b      	ldrb	r3, [r3, #2]
 800c806:	2b01      	cmp	r3, #1
 800c808:	d10e      	bne.n	800c828 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2209      	movs	r2, #9
 800c814:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	887a      	ldrh	r2, [r7, #2]
 800c81a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800c828:	2200      	movs	r2, #0
 800c82a:	2100      	movs	r1, #0
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 fa09 	bl	800cc44 <USBH_CtlReq>
 800c832:	4603      	mov	r3, r0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	789b      	ldrb	r3, [r3, #2]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d10f      	bne.n	800c870 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2203      	movs	r2, #3
 800c85a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c85c:	78fb      	ldrb	r3, [r7, #3]
 800c85e:	b29a      	uxth	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c870:	2200      	movs	r2, #0
 800c872:	2100      	movs	r1, #0
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 f9e5 	bl	800cc44 <USBH_CtlReq>
 800c87a:	4603      	mov	r3, r0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3708      	adds	r7, #8
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	460b      	mov	r3, r1
 800c88e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	789b      	ldrb	r3, [r3, #2]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d10f      	bne.n	800c8b8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2202      	movs	r2, #2
 800c89c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c8aa:	78fb      	ldrb	r3, [r7, #3]
 800c8ac:	b29a      	uxth	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f9c1 	bl	800cc44 <USBH_CtlReq>
 800c8c2:	4603      	mov	r3, r0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	781a      	ldrb	r2, [r3, #0]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	785a      	ldrb	r2, [r3, #1]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	3302      	adds	r3, #2
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	3303      	adds	r3, #3
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	021b      	lsls	r3, r3, #8
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	4313      	orrs	r3, r2
 800c900:	b29a      	uxth	r2, r3
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	791a      	ldrb	r2, [r3, #4]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	795a      	ldrb	r2, [r3, #5]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	799a      	ldrb	r2, [r3, #6]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	79da      	ldrb	r2, [r3, #7]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c926:	88fb      	ldrh	r3, [r7, #6]
 800c928:	2b08      	cmp	r3, #8
 800c92a:	d939      	bls.n	800c9a0 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	3308      	adds	r3, #8
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	b29a      	uxth	r2, r3
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	3309      	adds	r3, #9
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	021b      	lsls	r3, r3, #8
 800c93e:	b29b      	uxth	r3, r3
 800c940:	4313      	orrs	r3, r2
 800c942:	b29a      	uxth	r2, r3
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	330a      	adds	r3, #10
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	b29a      	uxth	r2, r3
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	330b      	adds	r3, #11
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	b29b      	uxth	r3, r3
 800c958:	021b      	lsls	r3, r3, #8
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	4313      	orrs	r3, r2
 800c95e:	b29a      	uxth	r2, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	330c      	adds	r3, #12
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	330d      	adds	r3, #13
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	b29b      	uxth	r3, r3
 800c974:	021b      	lsls	r3, r3, #8
 800c976:	b29b      	uxth	r3, r3
 800c978:	4313      	orrs	r3, r2
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	7b9a      	ldrb	r2, [r3, #14]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	7bda      	ldrb	r2, [r3, #15]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	7c1a      	ldrb	r2, [r3, #16]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	7c5a      	ldrb	r2, [r3, #17]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	745a      	strb	r2, [r3, #17]
  }
}
 800c9a0:	bf00      	nop
 800c9a2:	3714      	adds	r7, #20
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b08a      	sub	sp, #40	; 0x28
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	781a      	ldrb	r2, [r3, #0]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	785a      	ldrb	r2, [r3, #1]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	3302      	adds	r3, #2
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	3303      	adds	r3, #3
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	021b      	lsls	r3, r3, #8
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	791a      	ldrb	r2, [r3, #4]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	795a      	ldrb	r2, [r3, #5]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	799a      	ldrb	r2, [r3, #6]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	79da      	ldrb	r2, [r3, #7]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	7a1a      	ldrb	r2, [r3, #8]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ca22:	88fb      	ldrh	r3, [r7, #6]
 800ca24:	2b09      	cmp	r3, #9
 800ca26:	d95f      	bls.n	800cae8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ca28:	2309      	movs	r3, #9
 800ca2a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca30:	e051      	b.n	800cad6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ca32:	f107 0316 	add.w	r3, r7, #22
 800ca36:	4619      	mov	r1, r3
 800ca38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca3a:	f000 f8e8 	bl	800cc0e <USBH_GetNextDesc>
 800ca3e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ca40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca42:	785b      	ldrb	r3, [r3, #1]
 800ca44:	2b04      	cmp	r3, #4
 800ca46:	d146      	bne.n	800cad6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ca48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca4c:	221a      	movs	r2, #26
 800ca4e:	fb02 f303 	mul.w	r3, r2, r3
 800ca52:	3308      	adds	r3, #8
 800ca54:	68fa      	ldr	r2, [r7, #12]
 800ca56:	4413      	add	r3, r2
 800ca58:	3302      	adds	r3, #2
 800ca5a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800ca5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca5e:	69f8      	ldr	r0, [r7, #28]
 800ca60:	f000 f846 	bl	800caf0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ca64:	2300      	movs	r3, #0
 800ca66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ca6e:	e022      	b.n	800cab6 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800ca70:	f107 0316 	add.w	r3, r7, #22
 800ca74:	4619      	mov	r1, r3
 800ca76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca78:	f000 f8c9 	bl	800cc0e <USBH_GetNextDesc>
 800ca7c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca80:	785b      	ldrb	r3, [r3, #1]
 800ca82:	2b05      	cmp	r3, #5
 800ca84:	d117      	bne.n	800cab6 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ca86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca8a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ca8e:	3201      	adds	r2, #1
 800ca90:	00d2      	lsls	r2, r2, #3
 800ca92:	211a      	movs	r1, #26
 800ca94:	fb01 f303 	mul.w	r3, r1, r3
 800ca98:	4413      	add	r3, r2
 800ca9a:	3308      	adds	r3, #8
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	4413      	add	r3, r2
 800caa0:	3304      	adds	r3, #4
 800caa2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800caa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800caa6:	69b8      	ldr	r0, [r7, #24]
 800caa8:	f000 f851 	bl	800cb4e <USBH_ParseEPDesc>
            ep_ix++;
 800caac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cab0:	3301      	adds	r3, #1
 800cab2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	791b      	ldrb	r3, [r3, #4]
 800caba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d204      	bcs.n	800cacc <USBH_ParseCfgDesc+0x120>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	885a      	ldrh	r2, [r3, #2]
 800cac6:	8afb      	ldrh	r3, [r7, #22]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d8d1      	bhi.n	800ca70 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800cacc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cad0:	3301      	adds	r3, #1
 800cad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cad6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d804      	bhi.n	800cae8 <USBH_ParseCfgDesc+0x13c>
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	885a      	ldrh	r2, [r3, #2]
 800cae2:	8afb      	ldrh	r3, [r7, #22]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d8a4      	bhi.n	800ca32 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800cae8:	bf00      	nop
 800caea:	3728      	adds	r7, #40	; 0x28
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	781a      	ldrb	r2, [r3, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	785a      	ldrb	r2, [r3, #1]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	789a      	ldrb	r2, [r3, #2]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	78da      	ldrb	r2, [r3, #3]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	791a      	ldrb	r2, [r3, #4]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	795a      	ldrb	r2, [r3, #5]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	799a      	ldrb	r2, [r3, #6]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	79da      	ldrb	r2, [r3, #7]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	7a1a      	ldrb	r2, [r3, #8]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	721a      	strb	r2, [r3, #8]
}
 800cb42:	bf00      	nop
 800cb44:	370c      	adds	r7, #12
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr

0800cb4e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800cb4e:	b480      	push	{r7}
 800cb50:	b083      	sub	sp, #12
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	781a      	ldrb	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	785a      	ldrb	r2, [r3, #1]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	789a      	ldrb	r2, [r3, #2]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	78da      	ldrb	r2, [r3, #3]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	b29a      	uxth	r2, r3
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	3305      	adds	r3, #5
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	021b      	lsls	r3, r3, #8
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	b29a      	uxth	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	799a      	ldrb	r2, [r3, #6]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	719a      	strb	r2, [r3, #6]
}
 800cb9c:	bf00      	nop
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b087      	sub	sp, #28
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	2b03      	cmp	r3, #3
 800cbbe:	d120      	bne.n	800cc02 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	1e9a      	subs	r2, r3, #2
 800cbc6:	88fb      	ldrh	r3, [r7, #6]
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	bf28      	it	cs
 800cbcc:	4613      	movcs	r3, r2
 800cbce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	3302      	adds	r3, #2
 800cbd4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	82fb      	strh	r3, [r7, #22]
 800cbda:	e00b      	b.n	800cbf4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cbdc:	8afb      	ldrh	r3, [r7, #22]
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	781a      	ldrb	r2, [r3, #0]
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	3301      	adds	r3, #1
 800cbec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cbee:	8afb      	ldrh	r3, [r7, #22]
 800cbf0:	3302      	adds	r3, #2
 800cbf2:	82fb      	strh	r3, [r7, #22]
 800cbf4:	8afa      	ldrh	r2, [r7, #22]
 800cbf6:	8abb      	ldrh	r3, [r7, #20]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d3ef      	bcc.n	800cbdc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	701a      	strb	r2, [r3, #0]
  }
}
 800cc02:	bf00      	nop
 800cc04:	371c      	adds	r7, #28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800cc0e:	b480      	push	{r7}
 800cc10:	b085      	sub	sp, #20
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	881a      	ldrh	r2, [r3, #0]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	4413      	add	r3, r2
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4413      	add	r3, r2
 800cc34:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800cc36:	68fb      	ldr	r3, [r7, #12]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	4613      	mov	r3, r2
 800cc50:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cc52:	2301      	movs	r3, #1
 800cc54:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	789b      	ldrb	r3, [r3, #2]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d002      	beq.n	800cc64 <USBH_CtlReq+0x20>
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	d01d      	beq.n	800cc9e <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800cc62:	e042      	b.n	800ccea <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	88fa      	ldrh	r2, [r7, #6]
 800cc6e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2201      	movs	r2, #1
 800cc74:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2202      	movs	r2, #2
 800cc7a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2203      	movs	r2, #3
 800cc84:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc94:	2200      	movs	r2, #0
 800cc96:	4619      	mov	r1, r3
 800cc98:	f004 f9c0 	bl	801101c <osMessagePut>
    break;
 800cc9c:	e025      	b.n	800ccea <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f000 f828 	bl	800ccf4 <USBH_HandleControl>
 800cca4:	4603      	mov	r3, r0
 800cca6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800cca8:	7dfb      	ldrb	r3, [r7, #23]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d108      	bne.n	800ccc0 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	75fb      	strb	r3, [r7, #23]
    break;
 800ccbe:	e013      	b.n	800cce8 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	d108      	bne.n	800ccd8 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	75fb      	strb	r3, [r7, #23]
    break;
 800ccd6:	e007      	b.n	800cce8 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800ccd8:	7dfb      	ldrb	r3, [r7, #23]
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d104      	bne.n	800cce8 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2201      	movs	r2, #1
 800cce2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800cce4:	2302      	movs	r3, #2
 800cce6:	75fb      	strb	r3, [r7, #23]
    break;
 800cce8:	bf00      	nop
  }
  return status;
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3718      	adds	r7, #24
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af02      	add	r7, sp, #8
 800ccfa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cd00:	2300      	movs	r3, #0
 800cd02:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	7e1b      	ldrb	r3, [r3, #24]
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	2b0a      	cmp	r3, #10
 800cd0c:	f200 821f 	bhi.w	800d14e <USBH_HandleControl+0x45a>
 800cd10:	a201      	add	r2, pc, #4	; (adr r2, 800cd18 <USBH_HandleControl+0x24>)
 800cd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd16:	bf00      	nop
 800cd18:	0800cd45 	.word	0x0800cd45
 800cd1c:	0800cd5f 	.word	0x0800cd5f
 800cd20:	0800ce01 	.word	0x0800ce01
 800cd24:	0800ce27 	.word	0x0800ce27
 800cd28:	0800ceb3 	.word	0x0800ceb3
 800cd2c:	0800cedf 	.word	0x0800cedf
 800cd30:	0800cfa1 	.word	0x0800cfa1
 800cd34:	0800cfc3 	.word	0x0800cfc3
 800cd38:	0800d055 	.word	0x0800d055
 800cd3c:	0800d07d 	.word	0x0800d07d
 800cd40:	0800d10f 	.word	0x0800d10f
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f103 0110 	add.w	r1, r3, #16
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	795b      	ldrb	r3, [r3, #5]
 800cd4e:	461a      	mov	r2, r3
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 fa0d 	bl	800d170 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2202      	movs	r2, #2
 800cd5a:	761a      	strb	r2, [r3, #24]
    break;
 800cd5c:	e202      	b.n	800d164 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	795b      	ldrb	r3, [r3, #5]
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f00c f88d 	bl	8018e84 <USBH_LL_GetURBState>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800cd6e:	7bbb      	ldrb	r3, [r7, #14]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d12c      	bne.n	800cdce <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7c1b      	ldrb	r3, [r3, #16]
 800cd78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd7c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	8adb      	ldrh	r3, [r3, #22]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00a      	beq.n	800cd9c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800cd86:	7b7b      	ldrb	r3, [r7, #13]
 800cd88:	2b80      	cmp	r3, #128	; 0x80
 800cd8a:	d103      	bne.n	800cd94 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2203      	movs	r2, #3
 800cd90:	761a      	strb	r2, [r3, #24]
 800cd92:	e00d      	b.n	800cdb0 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2205      	movs	r2, #5
 800cd98:	761a      	strb	r2, [r3, #24]
 800cd9a:	e009      	b.n	800cdb0 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800cd9c:	7b7b      	ldrb	r3, [r7, #13]
 800cd9e:	2b80      	cmp	r3, #128	; 0x80
 800cda0:	d103      	bne.n	800cdaa <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2209      	movs	r2, #9
 800cda6:	761a      	strb	r2, [r3, #24]
 800cda8:	e002      	b.n	800cdb0 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2207      	movs	r2, #7
 800cdae:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2203      	movs	r2, #3
 800cdb4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	f004 f928 	bl	801101c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cdcc:	e1c1      	b.n	800d152 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cdce:	7bbb      	ldrb	r3, [r7, #14]
 800cdd0:	2b04      	cmp	r3, #4
 800cdd2:	d003      	beq.n	800cddc <USBH_HandleControl+0xe8>
 800cdd4:	7bbb      	ldrb	r3, [r7, #14]
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	f040 81bb 	bne.w	800d152 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	220b      	movs	r2, #11
 800cde0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2203      	movs	r2, #3
 800cde6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	f004 f90f 	bl	801101c <osMessagePut>
    break;
 800cdfe:	e1a8      	b.n	800d152 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6899      	ldr	r1, [r3, #8]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	899a      	ldrh	r2, [r3, #12]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	791b      	ldrb	r3, [r3, #4]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f9e8 	bl	800d1ee <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2204      	movs	r2, #4
 800ce22:	761a      	strb	r2, [r3, #24]
    break;
 800ce24:	e19e      	b.n	800d164 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	791b      	ldrb	r3, [r3, #4]
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f00c f829 	bl	8018e84 <USBH_LL_GetURBState>
 800ce32:	4603      	mov	r3, r0
 800ce34:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800ce36:	7bbb      	ldrb	r3, [r7, #14]
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d110      	bne.n	800ce5e <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2209      	movs	r2, #9
 800ce40:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2203      	movs	r2, #3
 800ce46:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce56:	2200      	movs	r2, #0
 800ce58:	4619      	mov	r1, r3
 800ce5a:	f004 f8df 	bl	801101c <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800ce5e:	7bbb      	ldrb	r3, [r7, #14]
 800ce60:	2b05      	cmp	r3, #5
 800ce62:	d110      	bne.n	800ce86 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800ce64:	2303      	movs	r3, #3
 800ce66:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2203      	movs	r2, #3
 800ce6c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	4619      	mov	r1, r3
 800ce80:	f004 f8cc 	bl	801101c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ce84:	e167      	b.n	800d156 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800ce86:	7bbb      	ldrb	r3, [r7, #14]
 800ce88:	2b04      	cmp	r3, #4
 800ce8a:	f040 8164 	bne.w	800d156 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	220b      	movs	r2, #11
 800ce92:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2203      	movs	r2, #3
 800ce98:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cea8:	2200      	movs	r2, #0
 800ceaa:	4619      	mov	r1, r3
 800ceac:	f004 f8b6 	bl	801101c <osMessagePut>
    break;
 800ceb0:	e151      	b.n	800d156 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6899      	ldr	r1, [r3, #8]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	899a      	ldrh	r2, [r3, #12]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	7958      	ldrb	r0, [r3, #5]
 800cebe:	2301      	movs	r3, #1
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	4603      	mov	r3, r0
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 f96d 	bl	800d1a4 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ced0:	b29a      	uxth	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2206      	movs	r2, #6
 800ceda:	761a      	strb	r2, [r3, #24]
    break;
 800cedc:	e142      	b.n	800d164 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	795b      	ldrb	r3, [r3, #5]
 800cee2:	4619      	mov	r1, r3
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f00b ffcd 	bl	8018e84 <USBH_LL_GetURBState>
 800ceea:	4603      	mov	r3, r0
 800ceec:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800ceee:	7bbb      	ldrb	r3, [r7, #14]
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d111      	bne.n	800cf18 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2207      	movs	r2, #7
 800cef8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2203      	movs	r2, #3
 800cefe:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf0e:	2200      	movs	r2, #0
 800cf10:	4619      	mov	r1, r3
 800cf12:	f004 f883 	bl	801101c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cf16:	e120      	b.n	800d15a <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	2b05      	cmp	r3, #5
 800cf1c:	d113      	bne.n	800cf46 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	220c      	movs	r2, #12
 800cf22:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800cf24:	2303      	movs	r3, #3
 800cf26:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2203      	movs	r2, #3
 800cf2c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	4619      	mov	r1, r3
 800cf40:	f004 f86c 	bl	801101c <osMessagePut>
    break;
 800cf44:	e109      	b.n	800d15a <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800cf46:	7bbb      	ldrb	r3, [r7, #14]
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d111      	bne.n	800cf70 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2205      	movs	r2, #5
 800cf50:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2203      	movs	r2, #3
 800cf56:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf66:	2200      	movs	r2, #0
 800cf68:	4619      	mov	r1, r3
 800cf6a:	f004 f857 	bl	801101c <osMessagePut>
    break;
 800cf6e:	e0f4      	b.n	800d15a <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800cf70:	7bbb      	ldrb	r3, [r7, #14]
 800cf72:	2b04      	cmp	r3, #4
 800cf74:	f040 80f1 	bne.w	800d15a <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	220b      	movs	r2, #11
 800cf7c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800cf7e:	2302      	movs	r3, #2
 800cf80:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2203      	movs	r2, #3
 800cf86:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf96:	2200      	movs	r2, #0
 800cf98:	4619      	mov	r1, r3
 800cf9a:	f004 f83f 	bl	801101c <osMessagePut>
    break;
 800cf9e:	e0dc      	b.n	800d15a <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	791b      	ldrb	r3, [r3, #4]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	2100      	movs	r1, #0
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 f920 	bl	800d1ee <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2208      	movs	r2, #8
 800cfbe:	761a      	strb	r2, [r3, #24]

    break;
 800cfc0:	e0d0      	b.n	800d164 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	791b      	ldrb	r3, [r3, #4]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f00b ff5b 	bl	8018e84 <USBH_LL_GetURBState>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800cfd2:	7bbb      	ldrb	r3, [r7, #14]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d113      	bne.n	800d000 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	220d      	movs	r2, #13
 800cfdc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2203      	movs	r2, #3
 800cfe6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cff6:	2200      	movs	r2, #0
 800cff8:	4619      	mov	r1, r3
 800cffa:	f004 f80f 	bl	801101c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cffe:	e0ae      	b.n	800d15e <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 800d000:	7bbb      	ldrb	r3, [r7, #14]
 800d002:	2b04      	cmp	r3, #4
 800d004:	d111      	bne.n	800d02a <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	220b      	movs	r2, #11
 800d00a:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2203      	movs	r2, #3
 800d010:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d020:	2200      	movs	r2, #0
 800d022:	4619      	mov	r1, r3
 800d024:	f003 fffa 	bl	801101c <osMessagePut>
    break;
 800d028:	e099      	b.n	800d15e <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800d02a:	7bbb      	ldrb	r3, [r7, #14]
 800d02c:	2b05      	cmp	r3, #5
 800d02e:	f040 8096 	bne.w	800d15e <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800d032:	2303      	movs	r3, #3
 800d034:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2203      	movs	r2, #3
 800d03a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d04a:	2200      	movs	r2, #0
 800d04c:	4619      	mov	r1, r3
 800d04e:	f003 ffe5 	bl	801101c <osMessagePut>
    break;
 800d052:	e084      	b.n	800d15e <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	795a      	ldrb	r2, [r3, #5]
 800d058:	2301      	movs	r3, #1
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	4613      	mov	r3, r2
 800d05e:	2200      	movs	r2, #0
 800d060:	2100      	movs	r1, #0
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 f89e 	bl	800d1a4 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800d06e:	b29a      	uxth	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	220a      	movs	r2, #10
 800d078:	761a      	strb	r2, [r3, #24]
    break;
 800d07a:	e073      	b.n	800d164 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	795b      	ldrb	r3, [r3, #5]
 800d080:	4619      	mov	r1, r3
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f00b fefe 	bl	8018e84 <USBH_LL_GetURBState>
 800d088:	4603      	mov	r3, r0
 800d08a:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800d08c:	7bbb      	ldrb	r3, [r7, #14]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d113      	bne.n	800d0ba <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800d092:	2300      	movs	r3, #0
 800d094:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	220d      	movs	r2, #13
 800d09a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2203      	movs	r2, #3
 800d0a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	f003 ffb2 	bl	801101c <osMessagePut>
#endif
#endif
      }

    }
    break;
 800d0b8:	e053      	b.n	800d162 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800d0ba:	7bbb      	ldrb	r3, [r7, #14]
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d111      	bne.n	800d0e4 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2209      	movs	r2, #9
 800d0c4:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2203      	movs	r2, #3
 800d0ca:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0da:	2200      	movs	r2, #0
 800d0dc:	4619      	mov	r1, r3
 800d0de:	f003 ff9d 	bl	801101c <osMessagePut>
    break;
 800d0e2:	e03e      	b.n	800d162 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 800d0e4:	7bbb      	ldrb	r3, [r7, #14]
 800d0e6:	2b04      	cmp	r3, #4
 800d0e8:	d13b      	bne.n	800d162 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	220b      	movs	r2, #11
 800d0ee:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2203      	movs	r2, #3
 800d0f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d104:	2200      	movs	r2, #0
 800d106:	4619      	mov	r1, r3
 800d108:	f003 ff88 	bl	801101c <osMessagePut>
    break;
 800d10c:	e029      	b.n	800d162 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	7e5b      	ldrb	r3, [r3, #25]
 800d112:	3301      	adds	r3, #1
 800d114:	b2da      	uxtb	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	765a      	strb	r2, [r3, #25]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	7e5b      	ldrb	r3, [r3, #25]
 800d11e:	2b02      	cmp	r3, #2
 800d120:	d809      	bhi.n	800d136 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f00b fdc1 	bl	8018caa <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2201      	movs	r2, #1
 800d12c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2201      	movs	r2, #1
 800d132:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800d134:	e016      	b.n	800d164 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d13c:	2106      	movs	r1, #6
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800d148:	2302      	movs	r3, #2
 800d14a:	73fb      	strb	r3, [r7, #15]
    break;
 800d14c:	e00a      	b.n	800d164 <USBH_HandleControl+0x470>

  default:
    break;
 800d14e:	bf00      	nop
 800d150:	e008      	b.n	800d164 <USBH_HandleControl+0x470>
    break;
 800d152:	bf00      	nop
 800d154:	e006      	b.n	800d164 <USBH_HandleControl+0x470>
    break;
 800d156:	bf00      	nop
 800d158:	e004      	b.n	800d164 <USBH_HandleControl+0x470>
    break;
 800d15a:	bf00      	nop
 800d15c:	e002      	b.n	800d164 <USBH_HandleControl+0x470>
    break;
 800d15e:	bf00      	nop
 800d160:	e000      	b.n	800d164 <USBH_HandleControl+0x470>
    break;
 800d162:	bf00      	nop
  }
  return status;
 800d164:	7bfb      	ldrb	r3, [r7, #15]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop

0800d170 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b088      	sub	sp, #32
 800d174:	af04      	add	r7, sp, #16
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	4613      	mov	r3, r2
 800d17c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800d17e:	79f9      	ldrb	r1, [r7, #7]
 800d180:	2300      	movs	r3, #0
 800d182:	9303      	str	r3, [sp, #12]
 800d184:	2308      	movs	r3, #8
 800d186:	9302      	str	r3, [sp, #8]
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	9301      	str	r3, [sp, #4]
 800d18c:	2300      	movs	r3, #0
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	2300      	movs	r3, #0
 800d192:	2200      	movs	r2, #0
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f00b fe44 	bl	8018e22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d19a:	2300      	movs	r3, #0
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b088      	sub	sp, #32
 800d1a8:	af04      	add	r7, sp, #16
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	60b9      	str	r1, [r7, #8]
 800d1ae:	4611      	mov	r1, r2
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	80fb      	strh	r3, [r7, #6]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800d1c8:	7979      	ldrb	r1, [r7, #5]
 800d1ca:	7e3b      	ldrb	r3, [r7, #24]
 800d1cc:	9303      	str	r3, [sp, #12]
 800d1ce:	88fb      	ldrh	r3, [r7, #6]
 800d1d0:	9302      	str	r3, [sp, #8]
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	9301      	str	r3, [sp, #4]
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	2300      	movs	r3, #0
 800d1dc:	2200      	movs	r2, #0
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	f00b fe1f 	bl	8018e22 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b088      	sub	sp, #32
 800d1f2:	af04      	add	r7, sp, #16
 800d1f4:	60f8      	str	r0, [r7, #12]
 800d1f6:	60b9      	str	r1, [r7, #8]
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	80fb      	strh	r3, [r7, #6]
 800d200:	4613      	mov	r3, r2
 800d202:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800d204:	7979      	ldrb	r1, [r7, #5]
 800d206:	2300      	movs	r3, #0
 800d208:	9303      	str	r3, [sp, #12]
 800d20a:	88fb      	ldrh	r3, [r7, #6]
 800d20c:	9302      	str	r3, [sp, #8]
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	9301      	str	r3, [sp, #4]
 800d212:	2301      	movs	r3, #1
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	2300      	movs	r3, #0
 800d218:	2201      	movs	r2, #1
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f00b fe01 	bl	8018e22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d220:	2300      	movs	r3, #0

}
 800d222:	4618      	mov	r0, r3
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800d22a:	b580      	push	{r7, lr}
 800d22c:	b088      	sub	sp, #32
 800d22e:	af04      	add	r7, sp, #16
 800d230:	60f8      	str	r0, [r7, #12]
 800d232:	60b9      	str	r1, [r7, #8]
 800d234:	4611      	mov	r1, r2
 800d236:	461a      	mov	r2, r3
 800d238:	460b      	mov	r3, r1
 800d23a:	80fb      	strh	r3, [r7, #6]
 800d23c:	4613      	mov	r3, r2
 800d23e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d24a:	2300      	movs	r3, #0
 800d24c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800d24e:	7979      	ldrb	r1, [r7, #5]
 800d250:	7e3b      	ldrb	r3, [r7, #24]
 800d252:	9303      	str	r3, [sp, #12]
 800d254:	88fb      	ldrh	r3, [r7, #6]
 800d256:	9302      	str	r3, [sp, #8]
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	9301      	str	r3, [sp, #4]
 800d25c:	2301      	movs	r3, #1
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	2302      	movs	r3, #2
 800d262:	2200      	movs	r2, #0
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f00b fddc 	bl	8018e22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3710      	adds	r7, #16
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b088      	sub	sp, #32
 800d278:	af04      	add	r7, sp, #16
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	4611      	mov	r1, r2
 800d280:	461a      	mov	r2, r3
 800d282:	460b      	mov	r3, r1
 800d284:	80fb      	strh	r3, [r7, #6]
 800d286:	4613      	mov	r3, r2
 800d288:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800d28a:	7979      	ldrb	r1, [r7, #5]
 800d28c:	2300      	movs	r3, #0
 800d28e:	9303      	str	r3, [sp, #12]
 800d290:	88fb      	ldrh	r3, [r7, #6]
 800d292:	9302      	str	r3, [sp, #8]
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	9301      	str	r3, [sp, #4]
 800d298:	2301      	movs	r3, #1
 800d29a:	9300      	str	r3, [sp, #0]
 800d29c:	2302      	movs	r3, #2
 800d29e:	2201      	movs	r2, #1
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	f00b fdbe 	bl	8018e22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3710      	adds	r7, #16
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af04      	add	r7, sp, #16
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	4608      	mov	r0, r1
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	461a      	mov	r2, r3
 800d2be:	4603      	mov	r3, r0
 800d2c0:	70fb      	strb	r3, [r7, #3]
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	70bb      	strb	r3, [r7, #2]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800d2ca:	7878      	ldrb	r0, [r7, #1]
 800d2cc:	78ba      	ldrb	r2, [r7, #2]
 800d2ce:	78f9      	ldrb	r1, [r7, #3]
 800d2d0:	8b3b      	ldrh	r3, [r7, #24]
 800d2d2:	9302      	str	r3, [sp, #8]
 800d2d4:	7d3b      	ldrb	r3, [r7, #20]
 800d2d6:	9301      	str	r3, [sp, #4]
 800d2d8:	7c3b      	ldrb	r3, [r7, #16]
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	4603      	mov	r3, r0
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f00b fd51 	bl	8018d86 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800d2e4:	2300      	movs	r3, #0

}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3708      	adds	r7, #8
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b082      	sub	sp, #8
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800d2fa:	78fb      	ldrb	r3, [r7, #3]
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f00b fd70 	bl	8018de4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d304:	2300      	movs	r3, #0

}
 800d306:	4618      	mov	r0, r3
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b084      	sub	sp, #16
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
 800d316:	460b      	mov	r3, r1
 800d318:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f831 	bl	800d382 <USBH_GetFreePipe>
 800d320:	4603      	mov	r3, r0
 800d322:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d324:	89fb      	ldrh	r3, [r7, #14]
 800d326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d007      	beq.n	800d33e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800d32e:	78fb      	ldrb	r3, [r7, #3]
 800d330:	89fa      	ldrh	r2, [r7, #14]
 800d332:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	32e0      	adds	r2, #224	; 0xe0
 800d33a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800d33e:	89fb      	ldrh	r3, [r7, #14]
 800d340:	b2db      	uxtb	r3, r3
}
 800d342:	4618      	mov	r0, r3
 800d344:	3710      	adds	r7, #16
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d34a:	b480      	push	{r7}
 800d34c:	b083      	sub	sp, #12
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	460b      	mov	r3, r1
 800d354:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800d356:	78fb      	ldrb	r3, [r7, #3]
 800d358:	2b0a      	cmp	r3, #10
 800d35a:	d80b      	bhi.n	800d374 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800d35c:	78fa      	ldrb	r2, [r7, #3]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	32e0      	adds	r2, #224	; 0xe0
 800d362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d366:	78fa      	ldrb	r2, [r7, #3]
 800d368:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	32e0      	adds	r2, #224	; 0xe0
 800d370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr

0800d382 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800d382:	b480      	push	{r7}
 800d384:	b085      	sub	sp, #20
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d38a:	2300      	movs	r3, #0
 800d38c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d38e:	2300      	movs	r3, #0
 800d390:	73fb      	strb	r3, [r7, #15]
 800d392:	e00e      	b.n	800d3b2 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d394:	7bfa      	ldrb	r2, [r7, #15]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	32e0      	adds	r2, #224	; 0xe0
 800d39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d39e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d102      	bne.n	800d3ac <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	e007      	b.n	800d3bc <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800d3ac:	7bfb      	ldrb	r3, [r7, #15]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	73fb      	strb	r3, [r7, #15]
 800d3b2:	7bfb      	ldrb	r3, [r7, #15]
 800d3b4:	2b0a      	cmp	r3, #10
 800d3b6:	d9ed      	bls.n	800d394 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800d3b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3714      	adds	r7, #20
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
    {
 800d3d0:	4a04      	ldr	r2, [pc, #16]	; (800d3e4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	601a      	str	r2, [r3, #0]
    }
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr
 800d3e4:	0802138c 	.word	0x0802138c

0800d3e8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
    }
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7ff ffe9 	bl	800d3c8 <_ZN8touchgfx15TouchControllerD1Ev>
 800d3f6:	2104      	movs	r1, #4
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f012 fcfc 	bl	801fdf6 <_ZdlPvj>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	4618      	mov	r0, r3
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800d408:	b480      	push	{r7}
 800d40a:	b085      	sub	sp, #20
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	4608      	mov	r0, r1
 800d412:	4611      	mov	r1, r2
 800d414:	461a      	mov	r2, r3
 800d416:	4603      	mov	r3, r0
 800d418:	817b      	strh	r3, [r7, #10]
 800d41a:	460b      	mov	r3, r1
 800d41c:	813b      	strh	r3, [r7, #8]
 800d41e:	4613      	mov	r3, r2
 800d420:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	897a      	ldrh	r2, [r7, #10]
 800d426:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	893a      	ldrh	r2, [r7, #8]
 800d42c:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	88fa      	ldrh	r2, [r7, #6]
 800d432:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	8b3a      	ldrh	r2, [r7, #24]
 800d438:	80da      	strh	r2, [r3, #6]
    }
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	4618      	mov	r0, r3
 800d43e:	3714      	adds	r7, #20
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <_ZNK8touchgfx4Rect5rightEv>:
     *
     *        Gets the x coordinate of the right edge of the Rect.
     *
     * @return x coordinate of the right edge.
     */
    inline int16_t right() const
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
    {
        return x + width;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d456:	b29a      	uxth	r2, r3
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d45e:	b29b      	uxth	r3, r3
 800d460:	4413      	add	r3, r2
 800d462:	b29b      	uxth	r3, r3
 800d464:	b21b      	sxth	r3, r3
    }
 800d466:	4618      	mov	r0, r3
 800d468:	370c      	adds	r7, #12
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr

0800d472 <_ZNK8touchgfx4Rect6bottomEv>:
     *
     *        Gets the y coordinate of the bottom edge of the Rect.
     *
     * @return y coordinate of the buttom edge.
     */
    inline int16_t bottom() const
 800d472:	b480      	push	{r7}
 800d474:	b083      	sub	sp, #12
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
    {
        return y + height;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d480:	b29a      	uxth	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d488:	b29b      	uxth	r3, r3
 800d48a:	4413      	add	r3, r2
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	b21b      	sxth	r3, r3
    }
 800d490:	4618      	mov	r0, r3
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <_ZNK8touchgfx4Rect9intersectEss>:
     * @param otherX The x coordinate of the point.
     * @param otherY The y coordinate of the point.
     *
     * @return true if point lies inside rectangle.
     */
    bool intersect(int16_t otherX, int16_t otherY) const
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	807b      	strh	r3, [r7, #2]
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	803b      	strh	r3, [r7, #0]
    {
        return (otherX >= x && otherX < right() &&
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f9b3 3000 	ldrsh.w	r3, [r3]
                otherY >= y && otherY < bottom());
 800d4b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	db1a      	blt.n	800d4f0 <_ZNK8touchgfx4Rect9intersectEss+0x54>
        return (otherX >= x && otherX < right() &&
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7ff ffc4 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	da11      	bge.n	800d4f0 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return (otherX >= x && otherX < right() &&
 800d4d2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	db0a      	blt.n	800d4f0 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7ff ffc9 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	da01      	bge.n	800d4f0 <_ZNK8touchgfx4Rect9intersectEss+0x54>
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e000      	b.n	800d4f2 <_ZNK8touchgfx4Rect9intersectEss+0x56>
 800d4f0:	2300      	movs	r3, #0
    }
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3708      	adds	r7, #8
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <_ZNK8touchgfx4Rect9intersectERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return true if the two rectangles intersect.
     */
    bool intersect(const Rect& other) const
 800d4fa:	b590      	push	{r4, r7, lr}
 800d4fc:	b083      	sub	sp, #12
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
 800d502:	6039      	str	r1, [r7, #0]
    {
        return !(x >= other.right() || right() <= other.x ||
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f9b3 4000 	ldrsh.w	r4, [r3]
 800d50a:	6838      	ldr	r0, [r7, #0]
 800d50c:	f7ff ff9c 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 800d510:	4603      	mov	r3, r0
 800d512:	429c      	cmp	r4, r3
 800d514:	da1e      	bge.n	800d554 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7ff ff96 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 800d51c:	4603      	mov	r3, r0
 800d51e:	461a      	mov	r2, r3
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d526:	429a      	cmp	r2, r3
 800d528:	dd14      	ble.n	800d554 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 800d530:	6838      	ldr	r0, [r7, #0]
 800d532:	f7ff ff9e 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 800d536:	4603      	mov	r3, r0
        return !(x >= other.right() || right() <= other.x ||
 800d538:	429c      	cmp	r4, r3
 800d53a:	da0b      	bge.n	800d554 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7ff ff98 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 800d542:	4603      	mov	r3, r0
 800d544:	461a      	mov	r2, r3
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return !(x >= other.right() || right() <= other.x ||
 800d54c:	429a      	cmp	r2, r3
 800d54e:	dd01      	ble.n	800d554 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800d550:	2301      	movs	r3, #1
 800d552:	e000      	b.n	800d556 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5c>
 800d554:	2300      	movs	r3, #0
    }
 800d556:	4618      	mov	r0, r3
 800d558:	370c      	adds	r7, #12
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd90      	pop	{r4, r7, pc}

0800d55e <_ZNK8touchgfx4RectanERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return Intersecting rectangle or Rect(0, 0, 0, 0) in case of no intersection.
     */
    Rect operator &(const Rect& other) const
 800d55e:	b580      	push	{r7, lr}
 800d560:	b084      	sub	sp, #16
 800d562:	af00      	add	r7, sp, #0
 800d564:	60f8      	str	r0, [r7, #12]
 800d566:	60b9      	str	r1, [r7, #8]
 800d568:	607a      	str	r2, [r7, #4]
    {
        Rect r = *this;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	68ba      	ldr	r2, [r7, #8]
 800d56e:	6811      	ldr	r1, [r2, #0]
 800d570:	6852      	ldr	r2, [r2, #4]
 800d572:	6019      	str	r1, [r3, #0]
 800d574:	605a      	str	r2, [r3, #4]
        r &= other;
 800d576:	6879      	ldr	r1, [r7, #4]
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f000 f805 	bl	800d588 <_ZN8touchgfx4RectaNERKS0_>
        return r;
 800d57e:	bf00      	nop
    }
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <_ZN8touchgfx4RectaNERKS0_>:
     *        Assigns this Rect to the intersection of the current Rect and the assigned Rect.
     *        The assignment will result in a Rect(0, 0, 0, 0) if they do not intersect.
     *
     * @param other The rect to intersect with.
     */
    void operator &=(const Rect& other)
 800d588:	b590      	push	{r4, r7, lr}
 800d58a:	b085      	sub	sp, #20
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
    {
        if (intersect(other))
 800d592:	6839      	ldr	r1, [r7, #0]
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7ff ffb0 	bl	800d4fa <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d05f      	beq.n	800d660 <_ZN8touchgfx4RectaNERKS0_+0xd8>
        {
            int16_t newX = MAX(x, other.x);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	dd03      	ble.n	800d5b8 <_ZN8touchgfx4RectaNERKS0_+0x30>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5b6:	e002      	b.n	800d5be <_ZN8touchgfx4RectaNERKS0_+0x36>
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5be:	81fb      	strh	r3, [r7, #14]
            int16_t newY = MAX(y, other.y);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	dd04      	ble.n	800d5da <_ZN8touchgfx4RectaNERKS0_+0x52>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	3302      	adds	r3, #2
 800d5d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5d8:	e002      	b.n	800d5e0 <_ZN8touchgfx4RectaNERKS0_+0x58>
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d5e0:	81bb      	strh	r3, [r7, #12]

            width = MIN(right(), other.right()) - newX;
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f7ff ff30 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	461c      	mov	r4, r3
 800d5ec:	6838      	ldr	r0, [r7, #0]
 800d5ee:	f7ff ff2b 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	429c      	cmp	r4, r3
 800d5f6:	da05      	bge.n	800d604 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7ff ff25 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 800d5fe:	4603      	mov	r3, r0
 800d600:	b29b      	uxth	r3, r3
 800d602:	e004      	b.n	800d60e <_ZN8touchgfx4RectaNERKS0_+0x86>
 800d604:	6838      	ldr	r0, [r7, #0]
 800d606:	f7ff ff1f 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 800d60a:	4603      	mov	r3, r0
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	89fa      	ldrh	r2, [r7, #14]
 800d610:	1a9b      	subs	r3, r3, r2
 800d612:	b29b      	uxth	r3, r3
 800d614:	b21a      	sxth	r2, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	809a      	strh	r2, [r3, #4]
            height = MIN(bottom(), other.bottom()) - newY;
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f7ff ff29 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 800d620:	4603      	mov	r3, r0
 800d622:	461c      	mov	r4, r3
 800d624:	6838      	ldr	r0, [r7, #0]
 800d626:	f7ff ff24 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 800d62a:	4603      	mov	r3, r0
 800d62c:	429c      	cmp	r4, r3
 800d62e:	da05      	bge.n	800d63c <_ZN8touchgfx4RectaNERKS0_+0xb4>
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7ff ff1e 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 800d636:	4603      	mov	r3, r0
 800d638:	b29b      	uxth	r3, r3
 800d63a:	e004      	b.n	800d646 <_ZN8touchgfx4RectaNERKS0_+0xbe>
 800d63c:	6838      	ldr	r0, [r7, #0]
 800d63e:	f7ff ff18 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 800d642:	4603      	mov	r3, r0
 800d644:	b29b      	uxth	r3, r3
 800d646:	89ba      	ldrh	r2, [r7, #12]
 800d648:	1a9b      	subs	r3, r3, r2
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	b21a      	sxth	r2, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	80da      	strh	r2, [r3, #6]
            x = newX;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	89fa      	ldrh	r2, [r7, #14]
 800d656:	801a      	strh	r2, [r3, #0]
            y = newY;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	89ba      	ldrh	r2, [r7, #12]
 800d65c:	805a      	strh	r2, [r3, #2]
            x = 0;
            y = 0;
            width = 0;
            height = 0;
        }
    }
 800d65e:	e00b      	b.n	800d678 <_ZN8touchgfx4RectaNERKS0_+0xf0>
            x = 0;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	801a      	strh	r2, [r3, #0]
            y = 0;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	805a      	strh	r2, [r3, #2]
            width = 0;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	809a      	strh	r2, [r3, #4]
            height = 0;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	80da      	strh	r2, [r3, #6]
    }
 800d678:	bf00      	nop
 800d67a:	3714      	adds	r7, #20
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd90      	pop	{r4, r7, pc}

0800d680 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
     *        Increases the area covered by this rectangle to encompass the area covered by
     *        supplied rectangle.
     *
     * @param other The other rectangle.
     */
    void expandToFit(const Rect& other)
 800d680:	b590      	push	{r4, r7, lr}
 800d682:	b085      	sub	sp, #20
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
    {
        if (!other.isEmpty())
 800d68a:	6838      	ldr	r0, [r7, #0]
 800d68c:	f000 f884 	bl	800d798 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d690:	4603      	mov	r3, r0
 800d692:	f083 0301 	eor.w	r3, r3, #1
 800d696:	b2db      	uxtb	r3, r3
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d079      	beq.n	800d790 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
        {
            if (isEmpty())
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 f87b 	bl	800d798 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d014      	beq.n	800d6d2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
            {
                x = other.x;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	801a      	strh	r2, [r3, #0]
                y = other.y;
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	805a      	strh	r2, [r3, #2]
                width = other.width;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	809a      	strh	r2, [r3, #4]
                height = other.height;
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	80da      	strh	r2, [r3, #6]
                y = newY;
                width = endPointX - newX;
                height = endPointY - newY;
            }
        }
    }
 800d6d0:	e05e      	b.n	800d790 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
                int16_t newX = MIN(x, other.x);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	da03      	bge.n	800d6ea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6a>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d6e8:	e002      	b.n	800d6f0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d6f0:	81fb      	strh	r3, [r7, #14]
                int16_t newY = MIN(y, other.y);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	da04      	bge.n	800d70c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8c>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	3302      	adds	r3, #2
 800d706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d70a:	e002      	b.n	800d712 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x92>
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d712:	81bb      	strh	r3, [r7, #12]
                int16_t endPointX = MAX(right(), other.right());
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f7ff fe97 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 800d71a:	4603      	mov	r3, r0
 800d71c:	461c      	mov	r4, r3
 800d71e:	6838      	ldr	r0, [r7, #0]
 800d720:	f7ff fe92 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 800d724:	4603      	mov	r3, r0
 800d726:	429c      	cmp	r4, r3
 800d728:	dd04      	ble.n	800d734 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xb4>
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7ff fe8c 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 800d730:	4603      	mov	r3, r0
 800d732:	e003      	b.n	800d73c <_ZN8touchgfx4Rect11expandToFitERKS0_+0xbc>
 800d734:	6838      	ldr	r0, [r7, #0]
 800d736:	f7ff fe87 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 800d73a:	4603      	mov	r3, r0
 800d73c:	817b      	strh	r3, [r7, #10]
                int16_t endPointY = MAX(bottom(), other.bottom());
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7ff fe97 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 800d744:	4603      	mov	r3, r0
 800d746:	461c      	mov	r4, r3
 800d748:	6838      	ldr	r0, [r7, #0]
 800d74a:	f7ff fe92 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 800d74e:	4603      	mov	r3, r0
 800d750:	429c      	cmp	r4, r3
 800d752:	dd04      	ble.n	800d75e <_ZN8touchgfx4Rect11expandToFitERKS0_+0xde>
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7ff fe8c 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 800d75a:	4603      	mov	r3, r0
 800d75c:	e003      	b.n	800d766 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xe6>
 800d75e:	6838      	ldr	r0, [r7, #0]
 800d760:	f7ff fe87 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 800d764:	4603      	mov	r3, r0
 800d766:	813b      	strh	r3, [r7, #8]
                x = newX;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	89fa      	ldrh	r2, [r7, #14]
 800d76c:	801a      	strh	r2, [r3, #0]
                y = newY;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	89ba      	ldrh	r2, [r7, #12]
 800d772:	805a      	strh	r2, [r3, #2]
                width = endPointX - newX;
 800d774:	897a      	ldrh	r2, [r7, #10]
 800d776:	89fb      	ldrh	r3, [r7, #14]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	b21a      	sxth	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	809a      	strh	r2, [r3, #4]
                height = endPointY - newY;
 800d782:	893a      	ldrh	r2, [r7, #8]
 800d784:	89bb      	ldrh	r3, [r7, #12]
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	b29b      	uxth	r3, r3
 800d78a:	b21a      	sxth	r2, r3
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	80da      	strh	r2, [r3, #6]
    }
 800d790:	bf00      	nop
 800d792:	3714      	adds	r7, #20
 800d794:	46bd      	mov	sp, r7
 800d796:	bd90      	pop	{r4, r7, pc}

0800d798 <_ZNK8touchgfx4Rect7isEmptyEv>:
     *
     *        Query if this object is empty.
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
    {
        return ((width == 0) || (height == 0));
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d004      	beq.n	800d7b4 <_ZNK8touchgfx4Rect7isEmptyEv+0x1c>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d101      	bne.n	800d7b8 <_ZNK8touchgfx4Rect7isEmptyEv+0x20>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	e000      	b.n	800d7ba <_ZNK8touchgfx4Rect7isEmptyEv+0x22>
 800d7b8:	2300      	movs	r3, #0
    }
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	370c      	adds	r7, #12
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr
	...

0800d7c8 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	4a04      	ldr	r2, [pc, #16]	; (800d7e4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr
 800d7e4:	08023188 	.word	0x08023188

0800d7e8 <_ZN8touchgfx8DrawableD0Ev>:
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f7ff ffe9 	bl	800d7c8 <_ZN8touchgfx8DrawableD1Ev>
 800d7f6:	2128      	movs	r1, #40	; 0x28
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f012 fafc 	bl	801fdf6 <_ZdlPvj>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4618      	mov	r0, r3
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <_ZNK8touchgfx8Drawable7getRectEv>:
     *        Gets the rectangle this Drawable covers, in coordinates relative to its parent.
     *
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     */
    const Rect& getRect() const
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
    {
        return rect;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	3304      	adds	r3, #4
    }
 800d814:	4618      	mov	r0, r3
 800d816:	370c      	adds	r7, #12
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	4608      	mov	r0, r1
 800d82a:	4611      	mov	r1, r2
 800d82c:	461a      	mov	r2, r3
 800d82e:	4603      	mov	r3, r0
 800d830:	817b      	strh	r3, [r7, #10]
 800d832:	460b      	mov	r3, r1
 800d834:	813b      	strh	r3, [r7, #8]
 800d836:	4613      	mov	r3, r2
 800d838:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	3334      	adds	r3, #52	; 0x34
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d846:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	4798      	blx	r3
        setWidth(width);
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	3338      	adds	r3, #56	; 0x38
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d85a:	4611      	mov	r1, r2
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	4798      	blx	r3
        setHeight(height);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	333c      	adds	r3, #60	; 0x3c
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800d86c:	4611      	mov	r1, r2
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	4798      	blx	r3
    };
 800d872:	bf00      	nop
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800d87a:	b480      	push	{r7}
 800d87c:	b083      	sub	sp, #12
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800d888:	4618      	mov	r0, r3
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	370c      	adds	r7, #12
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr

0800d8ae <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800d8ae:	b480      	push	{r7}
 800d8b0:	b083      	sub	sp, #12
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	887a      	ldrh	r2, [r7, #2]
 800d8be:	809a      	strh	r2, [r3, #4]
    }
 800d8c0:	bf00      	nop
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	887a      	ldrh	r2, [r7, #2]
 800d8dc:	80da      	strh	r2, [r3, #6]
    }
 800d8de:	bf00      	nop
 800d8e0:	370c      	adds	r7, #12
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800d8ea:	b580      	push	{r7, lr}
 800d8ec:	b082      	sub	sp, #8
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	807b      	strh	r3, [r7, #2]
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	332c      	adds	r3, #44	; 0x2c
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d906:	4611      	mov	r1, r2
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	4798      	blx	r3
        setY(y);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	3330      	adds	r3, #48	; 0x30
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d918:	4611      	mov	r1, r2
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	4798      	blx	r3
    }
 800d91e:	bf00      	nop
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800d926:	b480      	push	{r7}
 800d928:	b083      	sub	sp, #12
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
 800d92e:	460b      	mov	r3, r1
 800d930:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	887a      	ldrh	r2, [r7, #2]
 800d936:	811a      	strh	r2, [r3, #8]
    }
 800d938:	bf00      	nop
 800d93a:	370c      	adds	r7, #12
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	460b      	mov	r3, r1
 800d94e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	887a      	ldrh	r2, [r7, #2]
 800d954:	815a      	strh	r2, [r3, #10]
    }
 800d956:	bf00      	nop
 800d958:	370c      	adds	r7, #12
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr

0800d962 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800d962:	b480      	push	{r7}
 800d964:	b083      	sub	sp, #12
 800d966:	af00      	add	r7, sp, #0
 800d968:	6078      	str	r0, [r7, #4]
 800d96a:	bf00      	nop
 800d96c:	370c      	adds	r7, #12
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr

0800d976 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800d976:	b480      	push	{r7}
 800d978:	b083      	sub	sp, #12
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
 800d97e:	6039      	str	r1, [r7, #0]
 800d980:	bf00      	nop
 800d982:	370c      	adds	r7, #12
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
 800d996:	bf00      	nop
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800d9a2:	b480      	push	{r7}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	6039      	str	r1, [r7, #0]
 800d9ac:	bf00      	nop
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800d9da:	4618      	mov	r0, r3
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr

0800d9e6 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800d9e6:	b480      	push	{r7}
 800d9e8:	b083      	sub	sp, #12
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	460b      	mov	r3, r1
 800da0a:	807b      	strh	r3, [r7, #2]
 800da0c:	4613      	mov	r3, r2
 800da0e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	3354      	adds	r3, #84	; 0x54
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	8879      	ldrh	r1, [r7, #2]
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800da20:	b292      	uxth	r2, r2
 800da22:	1a8a      	subs	r2, r1, r2
 800da24:	b292      	uxth	r2, r2
 800da26:	b210      	sxth	r0, r2
 800da28:	8839      	ldrh	r1, [r7, #0]
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800da30:	b292      	uxth	r2, r2
 800da32:	1a8a      	subs	r2, r1, r2
 800da34:	b292      	uxth	r2, r2
 800da36:	b212      	sxth	r2, r2
 800da38:	4601      	mov	r1, r0
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	4798      	blx	r3
    }
 800da3e:	bf00      	nop
 800da40:	3708      	adds	r7, #8
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
	...

0800da48 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	4a05      	ldr	r2, [pc, #20]	; (800da68 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	601a      	str	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	4618      	mov	r0, r3
 800da5a:	f7ff feb5 	bl	800d7c8 <_ZN8touchgfx8DrawableD1Ev>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	4618      	mov	r0, r3
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	080213a4 	.word	0x080213a4

0800da6c <_ZN8touchgfx9ContainerD0Ev>:
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f7ff ffe7 	bl	800da48 <_ZN8touchgfx9ContainerD1Ev>
 800da7a:	212c      	movs	r1, #44	; 0x2c
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f012 f9ba 	bl	801fdf6 <_ZdlPvj>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4618      	mov	r0, r3
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <_ZNK8touchgfx9Container7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_CONTAINER;
 800da94:	2312      	movs	r3, #18
    }
 800da96:	4618      	mov	r0, r3
 800da98:	370c      	adds	r7, #12
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr

0800daa2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
#include <touchgfx/Screen.hpp>

namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
 800daa2:	b480      	push	{r7}
 800daa4:	b085      	sub	sp, #20
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	6039      	str	r1, [r7, #0]
    bool found = false;
 800daac:	2300      	movs	r3, #0
 800daae:	73fb      	strb	r3, [r7, #15]
    Drawable* head = firstChild;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dab4:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d00d      	beq.n	800dad8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
 800dabc:	7bfb      	ldrb	r3, [r7, #15]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d10a      	bne.n	800dad8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
    {
        found = (head == &d);
 800dac2:	68ba      	ldr	r2, [r7, #8]
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	bf0c      	ite	eq
 800daca:	2301      	moveq	r3, #1
 800dacc:	2300      	movne	r3, #0
 800dace:	73fb      	strb	r3, [r7, #15]
        head = head->nextSibling;
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800dad6:	e7ee      	b.n	800dab6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    }
    return found;
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3714      	adds	r7, #20
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr
	...

0800dae8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:

void Container::add(Drawable& d)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
    assert(&d != this && "Cannot add Drawable to self");
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	683a      	ldr	r2, [r7, #0]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d105      	bne.n	800db06 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800dafa:	4b22      	ldr	r3, [pc, #136]	; (800db84 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x9c>)
 800dafc:	4a22      	ldr	r2, [pc, #136]	; (800db88 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800dafe:	2123      	movs	r1, #35	; 0x23
 800db00:	4822      	ldr	r0, [pc, #136]	; (800db8c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800db02:	f012 f995 	bl	801fe30 <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	695b      	ldr	r3, [r3, #20]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d005      	beq.n	800db1a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
 800db0e:	4b20      	ldr	r3, [pc, #128]	; (800db90 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa8>)
 800db10:	4a1d      	ldr	r2, [pc, #116]	; (800db88 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800db12:	2124      	movs	r1, #36	; 0x24
 800db14:	481d      	ldr	r0, [pc, #116]	; (800db8c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800db16:	f012 f98b 	bl	801fe30 <__assert_func>

    // Initialize d to have this as parent and no sibling.
    d.parent = this;
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	615a      	str	r2, [r3, #20]
    d.nextSibling = 0;
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	2200      	movs	r2, #0
 800db24:	619a      	str	r2, [r3, #24]

    // Check if d is the first child to be added (container is empty)
    if (!firstChild)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d103      	bne.n	800db36 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
    {
        firstChild = &d;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	683a      	ldr	r2, [r7, #0]
 800db32:	629a      	str	r2, [r3, #40]	; 0x28
        }
        assert(head != &d && "Cannot add Drawable multiple times");
        // Make last child now point to d.
        head->nextSibling = &d;
    }
}
 800db34:	e021      	b.n	800db7a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x92>
        Drawable* head = firstChild;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db3a:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	699b      	ldr	r3, [r3, #24]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d00d      	beq.n	800db60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x78>
            assert(head != &d && "Cannot add Drawable multiple times");
 800db44:	68fa      	ldr	r2, [r7, #12]
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d105      	bne.n	800db58 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x70>
 800db4c:	4b11      	ldr	r3, [pc, #68]	; (800db94 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800db4e:	4a0e      	ldr	r2, [pc, #56]	; (800db88 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800db50:	2135      	movs	r1, #53	; 0x35
 800db52:	480e      	ldr	r0, [pc, #56]	; (800db8c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800db54:	f012 f96c 	bl	801fe30 <__assert_func>
            head = head->nextSibling;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	699b      	ldr	r3, [r3, #24]
 800db5c:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800db5e:	e7ed      	b.n	800db3c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>
        assert(head != &d && "Cannot add Drawable multiple times");
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	429a      	cmp	r2, r3
 800db66:	d105      	bne.n	800db74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x8c>
 800db68:	4b0a      	ldr	r3, [pc, #40]	; (800db94 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800db6a:	4a07      	ldr	r2, [pc, #28]	; (800db88 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800db6c:	2138      	movs	r1, #56	; 0x38
 800db6e:	4807      	ldr	r0, [pc, #28]	; (800db8c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800db70:	f012 f95e 	bl	801fe30 <__assert_func>
        head->nextSibling = &d;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	683a      	ldr	r2, [r7, #0]
 800db78:	619a      	str	r2, [r3, #24]
}
 800db7a:	bf00      	nop
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	08020e64 	.word	0x08020e64
 800db88:	0802142c 	.word	0x0802142c
 800db8c:	08020e90 	.word	0x08020e90
 800db90:	08020ee8 	.word	0x08020ee8
 800db94:	08020f20 	.word	0x08020f20

0800db98 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:

void Container::remove(Drawable& d)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
    if (!firstChild)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d031      	beq.n	800dc0e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x76>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbae:	683a      	ldr	r2, [r7, #0]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d112      	bne.n	800dbda <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x42>
    {
        // d is first child.
        d.parent = 0;
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	615a      	str	r2, [r3, #20]
        if (!d.nextSibling)
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	699b      	ldr	r3, [r3, #24]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d103      	bne.n	800dbca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x32>
        {
            // d was only child, so now this container is empty
            firstChild = 0;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	629a      	str	r2, [r3, #40]	; 0x28
        else
        {
            firstChild = d.nextSibling;
            d.nextSibling = 0;
        }
        return;
 800dbc8:	e022      	b.n	800dc10 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
            firstChild = d.nextSibling;
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	699a      	ldr	r2, [r3, #24]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	629a      	str	r2, [r3, #40]	; 0x28
            d.nextSibling = 0;
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	619a      	str	r2, [r3, #24]
        return;
 800dbd8:	e01a      	b.n	800dc10 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    }
    Drawable* tmp = firstChild;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbde:	60fb      	str	r3, [r7, #12]

    while (tmp)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d014      	beq.n	800dc10 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    {
        if (tmp->nextSibling == &d)
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	699b      	ldr	r3, [r3, #24]
 800dbea:	683a      	ldr	r2, [r7, #0]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d10a      	bne.n	800dc06 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x6e>
        {
            tmp->nextSibling = d.nextSibling;
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	699a      	ldr	r2, [r3, #24]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	615a      	str	r2, [r3, #20]
            d.nextSibling = 0;
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2200      	movs	r2, #0
 800dc02:	619a      	str	r2, [r3, #24]
            return;
 800dc04:	e004      	b.n	800dc10 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
        }
        else
        {
            tmp = tmp->nextSibling;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	699b      	ldr	r3, [r3, #24]
 800dc0a:	60fb      	str	r3, [r7, #12]
    while (tmp)
 800dc0c:	e7e8      	b.n	800dbe0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x48>
        return;
 800dc0e:	bf00      	nop
        }
    }
}
 800dc10:	3714      	adds	r7, #20
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
 800dc1a:	b480      	push	{r7}
 800dc1c:	b085      	sub	sp, #20
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
    while (firstChild)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00e      	beq.n	800dc48 <_ZN8touchgfx9Container9removeAllEv+0x2e>
    {
        Drawable* d = firstChild;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2e:	60fb      	str	r3, [r7, #12]
        firstChild = firstChild->nextSibling;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc34:	699a      	ldr	r2, [r3, #24]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	629a      	str	r2, [r3, #40]	; 0x28
        d->parent = 0;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2200      	movs	r2, #0
 800dc44:	619a      	str	r2, [r3, #24]
    while (firstChild)
 800dc46:	e7ec      	b.n	800dc22 <_ZN8touchgfx9Container9removeAllEv+0x8>
    }
}
 800dc48:	bf00      	nop
 800dc4a:	3714      	adds	r7, #20
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
    firstChild = 0;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	629a      	str	r2, [r3, #40]	; 0x28
}
 800dc62:	bf00      	nop
 800dc64:	370c      	adds	r7, #12
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr

0800dc6e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:

void Container::draw(const Rect& invalidatedArea) const
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b088      	sub	sp, #32
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
 800dc76:	6039      	str	r1, [r7, #0]
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7ff fea6 	bl	800d9cc <_ZNK8touchgfx8Drawable9isVisibleEv>
 800dc80:	4603      	mov	r3, r0
 800dc82:	f083 0301 	eor.w	r3, r3, #1
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d103      	bne.n	800dc94 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x26>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d101      	bne.n	800dc98 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2a>
 800dc94:	2301      	movs	r3, #1
 800dc96:	e000      	b.n	800dc9a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2c>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d14e      	bne.n	800dd3c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xce>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 800dc9e:	683a      	ldr	r2, [r7, #0]
 800dca0:	f107 0314 	add.w	r3, r7, #20
 800dca4:	6810      	ldr	r0, [r2, #0]
 800dca6:	6851      	ldr	r1, [r2, #4]
 800dca8:	c303      	stmia	r3!, {r0, r1}
    Drawable* d = firstChild;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcae:	61fb      	str	r3, [r7, #28]
    while (d)
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d043      	beq.n	800dd3e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd0>
    {
        if (d->isVisible())
 800dcb6:	69f8      	ldr	r0, [r7, #28]
 800dcb8:	f7ff fe88 	bl	800d9cc <_ZNK8touchgfx8Drawable9isVisibleEv>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d038      	beq.n	800dd34 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
        {
            Rect drawableRegion = tmp & d->getRect();
 800dcc2:	69f8      	ldr	r0, [r7, #28]
 800dcc4:	f7ff fda0 	bl	800d808 <_ZNK8touchgfx8Drawable7getRectEv>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	f107 030c 	add.w	r3, r7, #12
 800dcce:	f107 0114 	add.w	r1, r7, #20
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7ff fc43 	bl	800d55e <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800dcd8:	f107 030c 	add.w	r3, r7, #12
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7ff fd5b 	bl	800d798 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dce2:	4603      	mov	r3, r0
 800dce4:	f083 0301 	eor.w	r3, r3, #1
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d022      	beq.n	800dd34 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
            {
                // This child has a non-empty intersection with the invalidated area.
                // Convert region to the Drawable's coordinate system and draw.
                drawableRegion.x -= d->getX();
 800dcee:	69f8      	ldr	r0, [r7, #28]
 800dcf0:	f7ff fdc3 	bl	800d87a <_ZNK8touchgfx8Drawable4getXEv>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	b28b      	uxth	r3, r1
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	b21b      	sxth	r3, r3
 800dd06:	81bb      	strh	r3, [r7, #12]
                drawableRegion.y -= d->getY();
 800dd08:	69f8      	ldr	r0, [r7, #28]
 800dd0a:	f7ff fdc3 	bl	800d894 <_ZNK8touchgfx8Drawable4getYEv>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	4619      	mov	r1, r3
 800dd12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	b28b      	uxth	r3, r1
 800dd1a:	1ad3      	subs	r3, r2, r3
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	b21b      	sxth	r3, r3
 800dd20:	81fb      	strh	r3, [r7, #14]
                d->draw(drawableRegion);
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	3308      	adds	r3, #8
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f107 020c 	add.w	r2, r7, #12
 800dd2e:	4611      	mov	r1, r2
 800dd30:	69f8      	ldr	r0, [r7, #28]
 800dd32:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	699b      	ldr	r3, [r3, #24]
 800dd38:	61fb      	str	r3, [r7, #28]
    while (d)
 800dd3a:	e7b9      	b.n	800dcb0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x42>
        return;
 800dd3c:	bf00      	nop
    }
}
 800dd3e:	3720      	adds	r7, #32
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 800dd44:	b590      	push	{r4, r7, lr}
 800dd46:	b087      	sub	sp, #28
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	607b      	str	r3, [r7, #4]
 800dd4e:	460b      	mov	r3, r1
 800dd50:	817b      	strh	r3, [r7, #10]
 800dd52:	4613      	mov	r3, r2
 800dd54:	813b      	strh	r3, [r7, #8]
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7ff fe44 	bl	800d9e6 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d002      	beq.n	800dd6a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x26>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	601a      	str	r2, [r3, #0]
    }

    Drawable* d = firstChild;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd6e:	617b      	str	r3, [r7, #20]
    while (d)
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d038      	beq.n	800dde8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0xa4>
    {
        // Iterate over children.
        if (d->isVisible() && d->getRect().intersect(x, y))
 800dd76:	6978      	ldr	r0, [r7, #20]
 800dd78:	f7ff fe28 	bl	800d9cc <_ZNK8touchgfx8Drawable9isVisibleEv>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00e      	beq.n	800dda0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800dd82:	6978      	ldr	r0, [r7, #20]
 800dd84:	f7ff fd40 	bl	800d808 <_ZNK8touchgfx8Drawable7getRectEv>
 800dd88:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dd8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dd90:	4619      	mov	r1, r3
 800dd92:	f7ff fb83 	bl	800d49c <_ZNK8touchgfx4Rect9intersectEss>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d001      	beq.n	800dda0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	e000      	b.n	800dda2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800dda0:	2300      	movs	r3, #0
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d01c      	beq.n	800dde0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x9c>
        {
            int16_t xadj = x - d->getX();
 800dda6:	897c      	ldrh	r4, [r7, #10]
 800dda8:	6978      	ldr	r0, [r7, #20]
 800ddaa:	f7ff fd66 	bl	800d87a <_ZNK8touchgfx8Drawable4getXEv>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	1ae3      	subs	r3, r4, r3
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	827b      	strh	r3, [r7, #18]
            int16_t yadj = y - d->getY();
 800ddb8:	893c      	ldrh	r4, [r7, #8]
 800ddba:	6978      	ldr	r0, [r7, #20]
 800ddbc:	f7ff fd6a 	bl	800d894 <_ZNK8touchgfx8Drawable4getYEv>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	1ae3      	subs	r3, r4, r3
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	823b      	strh	r3, [r7, #16]
            d->getLastChild(xadj, yadj, last);
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	331c      	adds	r3, #28
 800ddd0:	681c      	ldr	r4, [r3, #0]
 800ddd2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ddd6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6978      	ldr	r0, [r7, #20]
 800ddde:	47a0      	blx	r4
        }
        d = d->nextSibling;
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	699b      	ldr	r3, [r3, #24]
 800dde4:	617b      	str	r3, [r7, #20]
    while (d)
 800dde6:	e7c3      	b.n	800dd70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x2c>
    }
}
 800dde8:	bf00      	nop
 800ddea:	371c      	adds	r7, #28
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd90      	pop	{r4, r7, pc}

0800ddf0 <_ZNK8touchgfx9Container12getSolidRectEv>:

Rect Container::getSolidRect() const
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af02      	add	r7, sp, #8
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, 0, 0);
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	2300      	movs	r3, #0
 800de00:	2200      	movs	r2, #0
 800de02:	2100      	movs	r1, #0
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff faff 	bl	800d408 <_ZN8touchgfx4RectC1Essss>
}
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b086      	sub	sp, #24
 800de16:	af02      	add	r7, sp, #8
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de20:	60fb      	str	r3, [r7, #12]
    Rect contained(0, 0, 0, 0);
 800de22:	2300      	movs	r3, #0
 800de24:	9300      	str	r3, [sp, #0]
 800de26:	2300      	movs	r3, #0
 800de28:	2200      	movs	r2, #0
 800de2a:	2100      	movs	r1, #0
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f7ff faeb 	bl	800d408 <_ZN8touchgfx4RectC1Essss>
    while (d)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d00b      	beq.n	800de50 <_ZNK8touchgfx9Container16getContainedAreaEv+0x3e>
    {
        contained.expandToFit(d->getRect());
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f7ff fce5 	bl	800d808 <_ZNK8touchgfx8Drawable7getRectEv>
 800de3e:	4603      	mov	r3, r0
 800de40:	4619      	mov	r1, r3
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7ff fc1c 	bl	800d680 <_ZN8touchgfx4Rect11expandToFitERKS0_>
        d = d->nextSibling;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	699b      	ldr	r3, [r3, #24]
 800de4c:	60fb      	str	r3, [r7, #12]
    while (d)
 800de4e:	e7f0      	b.n	800de32 <_ZNK8touchgfx9Container16getContainedAreaEv+0x20>
    }
    return contained;
 800de50:	bf00      	nop
}
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}

0800de5a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 800de5a:	b580      	push	{r7, lr}
 800de5c:	b084      	sub	sp, #16
 800de5e:	af00      	add	r7, sp, #0
 800de60:	6078      	str	r0, [r7, #4]
 800de62:	460b      	mov	r3, r1
 800de64:	807b      	strh	r3, [r7, #2]
 800de66:	4613      	mov	r3, r2
 800de68:	803b      	strh	r3, [r7, #0]
    Drawable* d = firstChild;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de6e:	60fb      	str	r3, [r7, #12]
    while (d)
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00d      	beq.n	800de92 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x38>
    {
        d->moveRelative(deltaX, deltaY);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	3354      	adds	r3, #84	; 0x54
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800de82:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	4798      	blx	r3
        d = d->nextSibling;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	699b      	ldr	r3, [r3, #24]
 800de8e:	60fb      	str	r3, [r7, #12]
    while (d)
 800de90:	e7ee      	b.n	800de70 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x16>
    }
}
 800de92:	bf00      	nop
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b084      	sub	sp, #16
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
 800dea2:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dea8:	60fb      	str	r3, [r7, #12]
    while (d)
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00a      	beq.n	800dec6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x2c>
    {
        function->execute(*d);
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	3308      	adds	r3, #8
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	68f9      	ldr	r1, [r7, #12]
 800deba:	6838      	ldr	r0, [r7, #0]
 800debc:	4798      	blx	r3
        d = d->nextSibling;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	699b      	ldr	r3, [r3, #24]
 800dec2:	60fb      	str	r3, [r7, #12]
    while (d)
 800dec4:	e7f1      	b.n	800deaa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x10>
    }
}
 800dec6:	bf00      	nop
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b086      	sub	sp, #24
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	60f8      	str	r0, [r7, #12]
 800ded6:	60b9      	str	r1, [r7, #8]
 800ded8:	607a      	str	r2, [r7, #4]
    if (!firstChild)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d107      	bne.n	800def2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
    {
        // Insert as only element
        add(d);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3364      	adds	r3, #100	; 0x64
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	6879      	ldr	r1, [r7, #4]
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	4798      	blx	r3
        return;
 800def0:	e026      	b.n	800df40 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else if (!previous)
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10a      	bne.n	800df0e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x40>
    {
        // Insert as head element
        d.nextSibling = firstChild;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	619a      	str	r2, [r3, #24]
        firstChild = &d;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	629a      	str	r2, [r3, #40]	; 0x28
        d.parent = this;
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	615a      	str	r2, [r3, #20]
 800df0c:	e018      	b.n	800df40 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else
    {
        Drawable* tmp = firstChild;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df12:	617b      	str	r3, [r7, #20]
        while (tmp)
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d012      	beq.n	800df40 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
        {
            if (tmp == previous)
 800df1a:	697a      	ldr	r2, [r7, #20]
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d10a      	bne.n	800df38 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x6a>
            {
                d.nextSibling = tmp->nextSibling;
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	699a      	ldr	r2, [r3, #24]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	619a      	str	r2, [r3, #24]
                tmp->nextSibling = &d;
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	619a      	str	r2, [r3, #24]
                d.parent = this;
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	615a      	str	r2, [r3, #20]
                return;
 800df36:	e003      	b.n	800df40 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
            }
            tmp = tmp->nextSibling;
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	699b      	ldr	r3, [r3, #24]
 800df3c:	617b      	str	r3, [r7, #20]
        while (tmp)
 800df3e:	e7e9      	b.n	800df14 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x46>
        }
    }
}
 800df40:	3718      	adds	r7, #24
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b088      	sub	sp, #32
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	60f8      	str	r0, [r7, #12]
 800df4e:	60b9      	str	r1, [r7, #8]
 800df50:	607a      	str	r2, [r7, #4]
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	4618      	mov	r0, r3
 800df56:	f7ff fd39 	bl	800d9cc <_ZNK8touchgfx8Drawable9isVisibleEv>
 800df5a:	4603      	mov	r3, r0
 800df5c:	f083 0301 	eor.w	r3, r3, #1
 800df60:	b2db      	uxtb	r3, r3
 800df62:	2b00      	cmp	r3, #0
 800df64:	d14b      	bne.n	800dffe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb8>
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d049      	beq.n	800e002 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
    {
        // If this container is empty, do not add anyone.
        return;
    }
    Drawable* d = firstChild;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df72:	61fb      	str	r3, [r7, #28]
    while (d)
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d044      	beq.n	800e004 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
    {
        if (d->isVisible())
 800df7a:	69f8      	ldr	r0, [r7, #28]
 800df7c:	f7ff fd26 	bl	800d9cc <_ZNK8touchgfx8Drawable9isVisibleEv>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d037      	beq.n	800dff6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
        {
            // Only drawables intersecting with the specified invalidated area will be added.
            Rect drawableRegion = invalidatedArea & d->getRect();
 800df86:	69f8      	ldr	r0, [r7, #28]
 800df88:	f7ff fc3e 	bl	800d808 <_ZNK8touchgfx8Drawable7getRectEv>
 800df8c:	4602      	mov	r2, r0
 800df8e:	f107 0314 	add.w	r3, r7, #20
 800df92:	68b9      	ldr	r1, [r7, #8]
 800df94:	4618      	mov	r0, r3
 800df96:	f7ff fae2 	bl	800d55e <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800df9a:	f107 0314 	add.w	r3, r7, #20
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7ff fbfa 	bl	800d798 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	f083 0301 	eor.w	r3, r3, #1
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d022      	beq.n	800dff6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
            {
                drawableRegion.x -= d->getX();
 800dfb0:	69f8      	ldr	r0, [r7, #28]
 800dfb2:	f7ff fc62 	bl	800d87a <_ZNK8touchgfx8Drawable4getXEv>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	4619      	mov	r1, r3
 800dfba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	b28b      	uxth	r3, r1
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	b21b      	sxth	r3, r3
 800dfc8:	82bb      	strh	r3, [r7, #20]
                drawableRegion.y -= d->getY();
 800dfca:	69f8      	ldr	r0, [r7, #28]
 800dfcc:	f7ff fc62 	bl	800d894 <_ZNK8touchgfx8Drawable4getYEv>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	b28b      	uxth	r3, r1
 800dfdc:	1ad3      	subs	r3, r2, r3
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	b21b      	sxth	r3, r3
 800dfe2:	82fb      	strh	r3, [r7, #22]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	3360      	adds	r3, #96	; 0x60
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f107 0114 	add.w	r1, r7, #20
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	69f8      	ldr	r0, [r7, #28]
 800dff4:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	699b      	ldr	r3, [r3, #24]
 800dffa:	61fb      	str	r3, [r7, #28]
    while (d)
 800dffc:	e7ba      	b.n	800df74 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x2e>
        return;
 800dffe:	bf00      	nop
 800e000:	e000      	b.n	800e004 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
        return;
 800e002:	bf00      	nop
    }
}
 800e004:	3720      	adds	r7, #32
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}

0800e00a <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 800e00a:	b480      	push	{r7}
 800e00c:	b083      	sub	sp, #12
 800e00e:	af00      	add	r7, sp, #0
 800e010:	6078      	str	r0, [r7, #4]
        return rect.width;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800e018:	4618      	mov	r0, r3
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
        return rect.height;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800e032:	4618      	mov	r0, r3
 800e034:	370c      	adds	r7, #12
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr
	...

0800e040 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
 *       taking zero, one, two or three arguments.
 *
 * @tparam T1 The type of the first argument in the member function, or void if none.
 */
template <class T1>
class GenericCallback<T1, void, void>
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	4a04      	ldr	r2, [pc, #16]	; (800e05c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	601a      	str	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4618      	mov	r0, r3
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	08021470 	.word	0x08021470

0800e060 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
    {
    }
 800e068:	4a04      	ldr	r2, [pc, #16]	; (800e07c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	601a      	str	r2, [r3, #0]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4618      	mov	r0, r3
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr
 800e07c:	08021470 	.word	0x08021470

0800e080 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
    }
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7ff ffe9 	bl	800e060 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e08e:	2104      	movs	r1, #4
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f011 feb0 	bl	801fdf6 <_ZdlPvj>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4618      	mov	r0, r3
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <_ZN8touchgfx4RectC1Ev>:
    Rect()
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
        this->x = 0;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	80da      	strh	r2, [r3, #6]
    }
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	370c      	adds	r7, #12
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr

0800e0ce <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800e0ce:	b480      	push	{r7}
 800e0d0:	b083      	sub	sp, #12
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	807b      	strh	r3, [r7, #2]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	887a      	ldrh	r2, [r7, #2]
 800e0de:	801a      	strh	r2, [r3, #0]
    {
    }
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	370c      	adds	r7, #12
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
	...

0800e0f0 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af02      	add	r7, sp, #8
 800e0f6:	6078      	str	r0, [r7, #4]
        visible(true)
 800e0f8:	4a13      	ldr	r2, [pc, #76]	; (800e148 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	601a      	str	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	1d18      	adds	r0, r3, #4
 800e102:	2300      	movs	r3, #0
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	2300      	movs	r3, #0
 800e108:	2200      	movs	r2, #0
 800e10a:	2100      	movs	r1, #0
 800e10c:	f7ff f97c 	bl	800d408 <_ZN8touchgfx4RectC1Essss>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	330c      	adds	r3, #12
 800e114:	4618      	mov	r0, r3
 800e116:	f7ff ffc3 	bl	800e0a0 <_ZN8touchgfx4RectC1Ev>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	615a      	str	r2, [r3, #20]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2200      	movs	r2, #0
 800e124:	619a      	str	r2, [r3, #24]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2200      	movs	r2, #0
 800e12a:	61da      	str	r2, [r3, #28]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2201      	movs	r2, #1
 800e138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4618      	mov	r0, r3
 800e140:	3708      	adds	r7, #8
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	08023188 	.word	0x08023188

0800e14c <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	460b      	mov	r3, r1
 800e156:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	78fa      	ldrb	r2, [r7, #3]
 800e15c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800e160:	bf00      	nop
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr

0800e16c <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	460b      	mov	r3, r1
 800e176:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	78fa      	ldrb	r2, [r7, #3]
 800e17c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800e180:	bf00      	nop
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e19a:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1a2:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1aa:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800e1ac:	bf00      	nop
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800e1c4:	68f8      	ldr	r0, [r7, #12]
 800e1c6:	f7ff ffe1 	bl	800e18c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	68fa      	ldr	r2, [r7, #12]
 800e1d6:	601a      	str	r2, [r3, #0]
    }
 800e1d8:	bf00      	nop
 800e1da:	3710      	adds	r7, #16
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <_ZN8touchgfx9ContainerC1Ev>:
    Container() : Drawable(),
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
        firstChild(0)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7ff ff80 	bl	800e0f0 <_ZN8touchgfx8DrawableC1Ev>
 800e1f0:	4a05      	ldr	r2, [pc, #20]	; (800e208 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	601a      	str	r2, [r3, #0]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	4618      	mov	r0, r3
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	080213a4 	.word	0x080213a4

0800e20c <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	4618      	mov	r0, r3
 800e218:	f7ff ff6a 	bl	800e0f0 <_ZN8touchgfx8DrawableC1Ev>
 800e21c:	4a03      	ldr	r2, [pc, #12]	; (800e22c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	4618      	mov	r0, r3
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	08021488 	.word	0x08021488

0800e230 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	4a05      	ldr	r2, [pc, #20]	; (800e250 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	601a      	str	r2, [r3, #0]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4618      	mov	r0, r3
 800e242:	f7ff fac1 	bl	800d7c8 <_ZN8touchgfx8DrawableD1Ev>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	4618      	mov	r0, r3
 800e24a:	3708      	adds	r7, #8
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	08021488 	.word	0x08021488

0800e254 <_ZN8touchgfx6WidgetD0Ev>:
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f7ff ffe7 	bl	800e230 <_ZN8touchgfx6WidgetD1Ev>
 800e262:	2128      	movs	r1, #40	; 0x28
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f011 fdc6 	bl	801fdf6 <_ZdlPvj>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4618      	mov	r0, r3
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800e274:	b580      	push	{r7, lr}
 800e276:	b084      	sub	sp, #16
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	607b      	str	r3, [r7, #4]
 800e27e:	460b      	mov	r3, r1
 800e280:	817b      	strh	r3, [r7, #10]
 800e282:	4613      	mov	r3, r2
 800e284:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	4618      	mov	r0, r3
 800e28a:	f7ff fb9f 	bl	800d9cc <_ZNK8touchgfx8Drawable9isVisibleEv>
 800e28e:	4603      	mov	r3, r0
 800e290:	2b00      	cmp	r3, #0
 800e292:	d008      	beq.n	800e2a6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	4618      	mov	r0, r3
 800e298:	f7ff fba5 	bl	800d9e6 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d001      	beq.n	800e2a6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	e000      	b.n	800e2a8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d002      	beq.n	800e2b2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800e2ac:	68fa      	ldr	r2, [r7, #12]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	601a      	str	r2, [r3, #0]
        }
    }
 800e2b2:	bf00      	nop
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <_ZNK8touchgfx6Widget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
 800e2ba:	b480      	push	{r7}
 800e2bc:	b083      	sub	sp, #12
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_WIDGET;
 800e2c2:	2301      	movs	r3, #1
    }
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7ff ff95 	bl	800e20c <_ZN8touchgfx6WidgetC1Ev>
 800e2e2:	4a0b      	ldr	r2, [pc, #44]	; (800e310 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	601a      	str	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	3326      	adds	r3, #38	; 0x26
 800e2ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7ff feec 	bl	800e0ce <_ZN8touchgfx6BitmapC1Et>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	22ff      	movs	r2, #255	; 0xff
 800e2fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800e2fe:	6839      	ldr	r1, [r7, #0]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f002 f82c 	bl	801035e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4618      	mov	r0, r3
 800e30a:	3708      	adds	r7, #8
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	0802178c 	.word	0x0802178c

0800e314 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	4a05      	ldr	r2, [pc, #20]	; (800e334 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	601a      	str	r2, [r3, #0]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	4618      	mov	r0, r3
 800e326:	f7ff ff83 	bl	800e230 <_ZN8touchgfx6WidgetD1Ev>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	4618      	mov	r0, r3
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	0802178c 	.word	0x0802178c

0800e338 <_ZN8touchgfx5ImageD0Ev>:
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7ff ffe7 	bl	800e314 <_ZN8touchgfx5ImageD1Ev>
 800e346:	212c      	movs	r1, #44	; 0x2c
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f011 fd54 	bl	801fdf6 <_ZdlPvj>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4618      	mov	r0, r3
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <_ZN8touchgfx5EventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Event() { }
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	4a04      	ldr	r2, [pc, #16]	; (800e374 <_ZN8touchgfx5EventD1Ev+0x1c>)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	601a      	str	r2, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4618      	mov	r0, r3
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr
 800e374:	0802151c 	.word	0x0802151c

0800e378 <_ZN8touchgfx5EventD0Ev>:
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7ff ffe9 	bl	800e358 <_ZN8touchgfx5EventD1Ev>
 800e386:	2104      	movs	r1, #4
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f011 fd34 	bl	801fdf6 <_ZdlPvj>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	4618      	mov	r0, r3
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	4a05      	ldr	r2, [pc, #20]	; (800e3b8 <_ZN8touchgfx10ClickEventD1Ev+0x20>)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	601a      	str	r2, [r3, #0]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7ff ffd5 	bl	800e358 <_ZN8touchgfx5EventD1Ev>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	08021508 	.word	0x08021508

0800e3bc <_ZN8touchgfx10ClickEventD0Ev>:
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f7ff ffe7 	bl	800e398 <_ZN8touchgfx10ClickEventD1Ev>
 800e3ca:	210c      	movs	r1, #12
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f011 fd12 	bl	801fdf6 <_ZdlPvj>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <_ZNK8touchgfx10ClickEvent4getXEv>:
     *
     *        Gets the x coordinate of this event.
     *
     * @return The x coordinate of this event.
     */
    int16_t getX() const
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
    {
        return _x;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	370c      	adds	r7, #12
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr

0800e3f6 <_ZNK8touchgfx10ClickEvent4getYEv>:
     *
     *        Gets the y coordinate of this event.
     *
     * @return The y coordinate of this event.
     */
    int16_t getY() const
 800e3f6:	b480      	push	{r7}
 800e3f8:	b083      	sub	sp, #12
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
    {
        return _y;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800e404:	4618      	mov	r0, r3
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
    {
        return _type;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	791b      	ldrb	r3, [r3, #4]
    }
 800e41c:	4618      	mov	r0, r3
 800e41e:	370c      	adds	r7, #12
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_CLICK;
 800e430:	2300      	movs	r3, #0
    }
 800e432:	4618      	mov	r0, r3
 800e434:	370c      	adds	r7, #12
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr
	...

0800e440 <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	4a05      	ldr	r2, [pc, #20]	; (800e460 <_ZN8touchgfx9DragEventD1Ev+0x20>)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	601a      	str	r2, [r3, #0]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4618      	mov	r0, r3
 800e452:	f7ff ff81 	bl	800e358 <_ZN8touchgfx5EventD1Ev>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	4618      	mov	r0, r3
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	080214f4 	.word	0x080214f4

0800e464 <_ZN8touchgfx9DragEventD0Ev>:
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f7ff ffe7 	bl	800e440 <_ZN8touchgfx9DragEventD1Ev>
 800e472:	2110      	movs	r1, #16
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f011 fcbe 	bl	801fdf6 <_ZdlPvj>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	4618      	mov	r0, r3
 800e47e:	3708      	adds	r7, #8
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <_ZNK8touchgfx9DragEvent9getDeltaXEv>:
     *
     *        Gets the distance in x coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaX() const
 800e484:	b480      	push	{r7}
 800e486:	b083      	sub	sp, #12
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
    {
        return _newX - _oldX;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e492:	b29a      	uxth	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	b21b      	sxth	r3, r3
    }
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	370c      	adds	r7, #12
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr

0800e4ae <_ZNK8touchgfx9DragEvent9getDeltaYEv>:
     *
     *        Gets the distance in y coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaY() const
 800e4ae:	b480      	push	{r7}
 800e4b0:	b083      	sub	sp, #12
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
    {
        return _newY - _oldY;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	b21b      	sxth	r3, r3
    }
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	370c      	adds	r7, #12
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_DRAG;
 800e4e0:	2301      	movs	r3, #1
    }
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	370c      	adds	r7, #12
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr

0800e4ee <_ZNK8touchgfx12GestureEvent11getVelocityEv>:
     *
     *        Gets the velocity of this gesture event.
     *
     * @return The velocity of this gesture event.
     */
    int16_t getVelocity() const
 800e4ee:	b480      	push	{r7}
 800e4f0:	b083      	sub	sp, #12
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
    {
        return velocity;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <_ZNK8touchgfx12GestureEvent7getTypeEv>:
     *
     *        Gets the type of this gesture event.
     *
     * @return The type of this gesture event.
     */
    GestureType getType() const
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
    {
        return type;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	791b      	ldrb	r3, [r3, #4]
    }
 800e514:	4618      	mov	r0, r3
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800e520:	b480      	push	{r7}
 800e522:	af00      	add	r7, sp, #0
    {
        return instance;
 800e524:	4b03      	ldr	r3, [pc, #12]	; (800e534 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800e526:	681b      	ldr	r3, [r3, #0]
    }
 800e528:	4618      	mov	r0, r3
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	20009cd4 	.word	0x20009cd4

0800e538 <_ZN8touchgfx3absIsEET_S1_>:
 * @param d The entity on which to perform the abs.
 *
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	4603      	mov	r3, r0
 800e540:	80fb      	strh	r3, [r7, #6]
{
    if (d < 0)
 800e542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e546:	2b00      	cmp	r3, #0
 800e548:	da04      	bge.n	800e554 <_ZN8touchgfx3absIsEET_S1_+0x1c>
    {
        return -d;
 800e54a:	88fb      	ldrh	r3, [r7, #6]
 800e54c:	425b      	negs	r3, r3
 800e54e:	b29b      	uxth	r3, r3
 800e550:	b21b      	sxth	r3, r3
 800e552:	e001      	b.n	800e558 <_ZN8touchgfx3absIsEET_S1_+0x20>
    }
    return d;
 800e554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    TiledImage(const Bitmap& bmp = Bitmap()) : Image(bmp), xOffset(0), yOffset(0)
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6839      	ldr	r1, [r7, #0]
 800e572:	4618      	mov	r0, r3
 800e574:	f7ff feac 	bl	800e2d0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e578:	4a06      	ldr	r2, [pc, #24]	; (800e594 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE+0x30>)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	601a      	str	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	859a      	strh	r2, [r3, #44]	; 0x2c
    {
    }
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4618      	mov	r0, r3
 800e58e:	3708      	adds	r7, #8
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	080217fc 	.word	0x080217fc

0800e598 <_ZN8touchgfx10TiledImageD1Ev>:
class TiledImage : public Image
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	4a05      	ldr	r2, [pc, #20]	; (800e5b8 <_ZN8touchgfx10TiledImageD1Ev+0x20>)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	601a      	str	r2, [r3, #0]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff feb3 	bl	800e314 <_ZN8touchgfx5ImageD1Ev>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	080217fc 	.word	0x080217fc

0800e5bc <_ZN8touchgfx10TiledImageD0Ev>:
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7ff ffe7 	bl	800e598 <_ZN8touchgfx10TiledImageD1Ev>
 800e5ca:	2130      	movs	r1, #48	; 0x30
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f011 fc12 	bl	801fdf6 <_ZdlPvj>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <_ZN8touchgfx5Image8setAlphaEh>:
     *
     *        Sets the alpha channel for the image.
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    void setAlpha(uint8_t alpha)
 800e5dc:	b480      	push	{r7}
 800e5de:	b083      	sub	sp, #12
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	78fa      	ldrb	r2, [r7, #3]
 800e5ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 800e5f0:	bf00      	nop
 800e5f2:	370c      	adds	r7, #12
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr

0800e5fc <_ZNK8touchgfx5Image8getAlphaEv>:
     *
     *        Gets the current alpha value.
     *
     * @return The current alpha value.
     */
    uint8_t getAlpha() const
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    }
 800e60a:	4618      	mov	r0, r3
 800e60c:	370c      	adds	r7, #12
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr

0800e616 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 800e616:	b480      	push	{r7}
 800e618:	b083      	sub	sp, #12
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2200      	movs	r2, #0
 800e622:	601a      	str	r2, [r3, #0]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	4618      	mov	r0, r3
 800e628:	370c      	adds	r7, #12
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr
	...

0800e634 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800e634:	b480      	push	{r7}
 800e636:	af00      	add	r7, sp, #0
    {
        return instance->lcdRef;
 800e638:	4b03      	ldr	r3, [pc, #12]	; (800e648 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	689b      	ldr	r3, [r3, #8]
    }
 800e63e:	4618      	mov	r0, r3
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr
 800e648:	20009cd4 	.word	0x20009cd4

0800e64c <_ZN8touchgfx12DrawableListD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DrawableList()
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
    {
 800e654:	4a05      	ldr	r2, [pc, #20]	; (800e66c <_ZN8touchgfx12DrawableListD1Ev+0x20>)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	601a      	str	r2, [r3, #0]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7ff f9f3 	bl	800da48 <_ZN8touchgfx9ContainerD1Ev>
    }
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	4618      	mov	r0, r3
 800e666:	3708      	adds	r7, #8
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	08021530 	.word	0x08021530

0800e670 <_ZN8touchgfx12DrawableListD0Ev>:
    virtual ~DrawableList()
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
    }
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7ff ffe7 	bl	800e64c <_ZN8touchgfx12DrawableListD1Ev>
 800e67e:	214c      	movs	r1, #76	; 0x4c
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f011 fbb8 	bl	801fdf6 <_ZdlPvj>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4618      	mov	r0, r3
 800e68a:	3708      	adds	r7, #8
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <_ZN8touchgfx12DrawableListC1Ev>:

#include <touchgfx/containers/scrollers/DrawableList.hpp>

namespace touchgfx
{
DrawableList::DrawableList()
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
      firstItem(0),
      firstDrawable(0),
      drawablesInitialized(false),
      firstDrawableIndex(0),
      drawableItems(0),
      updateDrawable(0)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7ff fda0 	bl	800e1e0 <_ZN8touchgfx9ContainerC1Ev>
 800e6a0:	4a19      	ldr	r2, [pc, #100]	; (800e708 <_ZN8touchgfx12DrawableListC1Ev+0x78>)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	631a      	str	r2, [r3, #48]	; 0x30
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	869a      	strh	r2, [r3, #52]	; 0x34
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	86da      	strh	r2, [r3, #54]	; 0x36
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	871a      	strh	r2, [r3, #56]	; 0x38
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	875a      	strh	r2, [r3, #58]	; 0x3a
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	879a      	strh	r2, [r3, #60]	; 0x3c
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	645a      	str	r2, [r3, #68]	; 0x44
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	649a      	str	r2, [r3, #72]	; 0x48
{
}
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4618      	mov	r0, r3
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	08021530 	.word	0x08021530

0800e70c <_ZN8touchgfx12DrawableList8setWidthEs>:

void DrawableList::setWidth(int16_t width)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	460b      	mov	r3, r1
 800e716:	807b      	strh	r3, [r7, #2]
    Container::setWidth(width);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e71e:	4611      	mov	r1, r2
 800e720:	4618      	mov	r0, r3
 800e722:	f7ff f900 	bl	800d926 <_ZN8touchgfx8Drawable8setWidthEs>
    refreshDrawables();
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 fbe9 	bl	800eefe <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
}
 800e72c:	bf00      	nop
 800e72e:	3708      	adds	r7, #8
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <_ZN8touchgfx12DrawableList9setHeightEs>:

void DrawableList::setHeight(int16_t height)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	460b      	mov	r3, r1
 800e73e:	807b      	strh	r3, [r7, #2]
    Container::setHeight(height);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e746:	4611      	mov	r1, r2
 800e748:	4618      	mov	r0, r3
 800e74a:	f7ff f8fb 	bl	800d944 <_ZN8touchgfx8Drawable9setHeightEs>
    refreshDrawables();
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 fbd5 	bl	800eefe <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
}
 800e754:	bf00      	nop
 800e756:	3708      	adds	r7, #8
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <_ZN8touchgfx12DrawableList13setHorizontalEb>:

void DrawableList::setHorizontal(bool horizontal)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	460b      	mov	r3, r1
 800e766:	70fb      	strb	r3, [r7, #3]
    if (horizontal != isHorizontal)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e76e:	78fa      	ldrb	r2, [r7, #3]
 800e770:	429a      	cmp	r2, r3
 800e772:	d006      	beq.n	800e782 <_ZN8touchgfx12DrawableList13setHorizontalEb+0x26>
    {
        isHorizontal = horizontal;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	78fa      	ldrb	r2, [r7, #3]
 800e778:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        refreshDrawables();
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 fbbe 	bl	800eefe <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
    }
}
 800e782:	bf00      	nop
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <_ZNK8touchgfx12DrawableList13getHorizontalEv>:

bool DrawableList::getHorizontal() const
{
 800e78a:	b480      	push	{r7}
 800e78c:	b083      	sub	sp, #12
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
    return isHorizontal;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}
 800e798:	4618      	mov	r0, r3
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr

0800e7a4 <_ZN8touchgfx12DrawableList11setCircularEb>:

void DrawableList::setCircular(bool circular)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	70fb      	strb	r3, [r7, #3]
    if (circular != isCircular)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7b6:	78fa      	ldrb	r2, [r7, #3]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d006      	beq.n	800e7ca <_ZN8touchgfx12DrawableList11setCircularEb+0x26>
    {
        isCircular = circular;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	78fa      	ldrb	r2, [r7, #3]
 800e7c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        refreshDrawables();
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f000 fb9a 	bl	800eefe <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
    }
}
 800e7ca:	bf00      	nop
 800e7cc:	3708      	adds	r7, #8
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}

0800e7d2 <_ZNK8touchgfx12DrawableList11getCircularEv>:

bool DrawableList::getCircular() const
{
 800e7d2:	b480      	push	{r7}
 800e7d4:	b083      	sub	sp, #12
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
    return isCircular;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	370c      	adds	r7, #12
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr

0800e7ec <_ZN8touchgfx12DrawableList15setDrawableSizeEss>:

void DrawableList::setDrawableSize(int16_t drawableSize, int16_t drawableMargin)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b083      	sub	sp, #12
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	807b      	strh	r3, [r7, #2]
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	803b      	strh	r3, [r7, #0]
    itemSize = drawableSize + 2 * drawableMargin;
 800e7fc:	883b      	ldrh	r3, [r7, #0]
 800e7fe:	005b      	lsls	r3, r3, #1
 800e800:	b29a      	uxth	r2, r3
 800e802:	887b      	ldrh	r3, [r7, #2]
 800e804:	4413      	add	r3, r2
 800e806:	b29b      	uxth	r3, r3
 800e808:	b21a      	sxth	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	869a      	strh	r2, [r3, #52]	; 0x34
    itemMargin = drawableMargin;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	883a      	ldrh	r2, [r7, #0]
 800e812:	86da      	strh	r2, [r3, #54]	; 0x36
}
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>:

void DrawableList::setDrawables(DrawableListItemsInterface& drawableListItems,
                                int16_t drawableItemIndexOffset,
                                GenericCallback<DrawableListItemsInterface*, int16_t, int16_t>& updateDrawableCallback)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	603b      	str	r3, [r7, #0]
 800e82c:	4613      	mov	r3, r2
 800e82e:	80fb      	strh	r3, [r7, #6]
    drawableItems = &drawableListItems;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	68ba      	ldr	r2, [r7, #8]
 800e834:	645a      	str	r2, [r3, #68]	; 0x44
    firstDrawableIndex = drawableItemIndexOffset;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	88fa      	ldrh	r2, [r7, #6]
 800e83a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    updateDrawable = &updateDrawableCallback;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	683a      	ldr	r2, [r7, #0]
 800e842:	649a      	str	r2, [r3, #72]	; 0x48

    refreshDrawables();
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	f000 fb5a 	bl	800eefe <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
}
 800e84a:	bf00      	nop
 800e84c:	3710      	adds	r7, #16
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <_ZNK8touchgfx12DrawableList11getItemSizeEv>:
{
    return numDrawables;
}

int16_t DrawableList::getItemSize() const
{
 800e852:	b480      	push	{r7}
 800e854:	b083      	sub	sp, #12
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
    return itemSize;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
}
 800e860:	4618      	mov	r0, r3
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>:

int16_t DrawableList::getDrawableSize() const
{
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
    return itemSize - 2 * itemMargin;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800e87a:	b29a      	uxth	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800e882:	b29b      	uxth	r3, r3
 800e884:	005b      	lsls	r3, r3, #1
 800e886:	b29b      	uxth	r3, r3
 800e888:	1ad3      	subs	r3, r2, r3
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	b21b      	sxth	r3, r3
}
 800e88e:	4618      	mov	r0, r3
 800e890:	370c      	adds	r7, #12
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr

0800e89a <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>:

int16_t DrawableList::getDrawableMargin() const
{
 800e89a:	b480      	push	{r7}
 800e89c:	b083      	sub	sp, #12
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
    return itemMargin;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>:

void DrawableList::setNumberOfItems(int16_t numberOfItems)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	807b      	strh	r3, [r7, #2]
    numItems = numberOfItems;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	887a      	ldrh	r2, [r7, #2]
 800e8c4:	871a      	strh	r2, [r3, #56]	; 0x38
    refreshDrawables();
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 fb19 	bl	800eefe <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
}
 800e8cc:	bf00      	nop
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>:

int16_t DrawableList::getNumberOfItems() const
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
    return numItems;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	370c      	adds	r7, #12
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr

0800e8ee <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>:

int16_t DrawableList::getRequiredNumberOfDrawables() const
{
 800e8ee:	b580      	push	{r7, lr}
 800e8f0:	b084      	sub	sp, #16
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
    if (drawableItems == 0 || itemSize <= 0)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d004      	beq.n	800e908 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x1a>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800e904:	2b00      	cmp	r3, #0
 800e906:	dc01      	bgt.n	800e90c <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x1e>
    {
        return 0;
 800e908:	2300      	movs	r3, #0
 800e90a:	e05b      	b.n	800e9c4 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0xd6>
    }

    // Calculate number of required drawables. Worst case is one pixel visible of drawable at top and rest stacked tightly
    int16_t requiredDrawables = 1 + (((isHorizontal ? getWidth() : getHeight()) - 1) + (itemSize - 1)) / itemSize;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e912:	2b00      	cmp	r3, #0
 800e914:	d006      	beq.n	800e924 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x36>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4618      	mov	r0, r3
 800e91a:	f7ff fb76 	bl	800e00a <_ZNK8touchgfx8Drawable8getWidthEv>
 800e91e:	4603      	mov	r3, r0
 800e920:	3b01      	subs	r3, #1
 800e922:	e005      	b.n	800e930 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x42>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4618      	mov	r0, r3
 800e928:	f7ff fb7c 	bl	800e024 <_ZNK8touchgfx8Drawable9getHeightEv>
 800e92c:	4603      	mov	r3, r0
 800e92e:	3b01      	subs	r3, #1
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	; 0x34
 800e936:	3a01      	subs	r2, #1
 800e938:	4413      	add	r3, r2
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	; 0x34
 800e940:	fb93 f3f2 	sdiv	r3, r3, r2
 800e944:	b29b      	uxth	r3, r3
 800e946:	3301      	adds	r3, #1
 800e948:	b29b      	uxth	r3, r3
 800e94a:	b21b      	sxth	r3, r3
 800e94c:	81fb      	strh	r3, [r7, #14]
    if (!isCircular)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e954:	f083 0301 	eor.w	r3, r3, #1
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d00a      	beq.n	800e974 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x86>
    {
        // We never require more drawables than the number of elements on non-circular list.
        if (requiredDrawables > numItems)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 800e964:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e968:	429a      	cmp	r2, r3
 800e96a:	da03      	bge.n	800e974 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x86>
        {
            requiredDrawables = numItems;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800e972:	81fb      	strh	r3, [r7, #14]
        }
    }

    return MIN((drawableItems->getNumberOfDrawables() - firstDrawableIndex), requiredDrawables);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	330c      	adds	r3, #12
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	4610      	mov	r0, r2
 800e984:	4798      	blx	r3
 800e986:	4603      	mov	r3, r0
 800e988:	461a      	mov	r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e996:	4293      	cmp	r3, r2
 800e998:	da12      	bge.n	800e9c0 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0xd2>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	330c      	adds	r3, #12
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4610      	mov	r0, r2
 800e9aa:	4798      	blx	r3
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	b21b      	sxth	r3, r3
 800e9be:	e001      	b.n	800e9c4 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0xd6>
 800e9c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <_ZN8touchgfx12DrawableList9setOffsetEl>:

void DrawableList::setOffset(int32_t ofs)
{
 800e9cc:	b590      	push	{r4, r7, lr}
 800e9ce:	b08f      	sub	sp, #60	; 0x3c
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
    offset = ofs;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	683a      	ldr	r2, [r7, #0]
 800e9da:	631a      	str	r2, [r3, #48]	; 0x30

    if (numDrawables == 0 || numItems == 0)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f000 8203 	beq.w	800edee <_ZN8touchgfx12DrawableList9setOffsetEl+0x422>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f000 81fd 	beq.w	800edee <_ZN8touchgfx12DrawableList9setOffsetEl+0x422>
    {
        return;
    }
    if (!updateDrawable || !updateDrawable->isValid())
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00e      	beq.n	800ea1a <_ZN8touchgfx12DrawableList9setOffsetEl+0x4e>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	330c      	adds	r3, #12
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4610      	mov	r0, r2
 800ea0c:	4798      	blx	r3
 800ea0e:	4603      	mov	r3, r0
 800ea10:	f083 0301 	eor.w	r3, r3, #1
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d001      	beq.n	800ea1e <_ZN8touchgfx12DrawableList9setOffsetEl+0x52>
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e000      	b.n	800ea20 <_ZN8touchgfx12DrawableList9setOffsetEl+0x54>
 800ea1e:	2300      	movs	r3, #0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f040 81e6 	bne.w	800edf2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x426>
        return;
    }

    // ofs is the offset of item[0]
    // 0 => item[0] is perfectly selected, -itemSize => item[1] is perfectly selected, itemSize => item[N-1] is perfectly selected etc.
    int16_t newFirstItem = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	86fb      	strh	r3, [r7, #54]	; 0x36
    if (ofs > 0)
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	dd18      	ble.n	800ea62 <_ZN8touchgfx12DrawableList9setOffsetEl+0x96>
    {
        int numItems = ofs / itemSize + 1;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800ea36:	461a      	mov	r2, r3
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea3e:	3301      	adds	r3, #1
 800ea40:	61bb      	str	r3, [r7, #24]
        newFirstItem -= numItems;
 800ea42:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	1ad3      	subs	r3, r2, r3
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	86fb      	strh	r3, [r7, #54]	; 0x36
        ofs -= numItems * itemSize;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800ea54:	461a      	mov	r2, r3
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	fb03 f302 	mul.w	r3, r3, r2
 800ea5c:	683a      	ldr	r2, [r7, #0]
 800ea5e:	1ad3      	subs	r3, r2, r3
 800ea60:	603b      	str	r3, [r7, #0]
    }
    if (ofs <= -itemSize)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800ea68:	425b      	negs	r3, r3
 800ea6a:	683a      	ldr	r2, [r7, #0]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	dc17      	bgt.n	800eaa0 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd4>
    {
        int numItems = ofs / itemSize;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800ea76:	461a      	mov	r2, r3
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea7e:	617b      	str	r3, [r7, #20]
        newFirstItem -= numItems;
 800ea80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        ofs -= numItems * itemSize;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800ea92:	461a      	mov	r2, r3
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	fb03 f302 	mul.w	r3, r3, r2
 800ea9a:	683a      	ldr	r2, [r7, #0]
 800ea9c:	1ad3      	subs	r3, r2, r3
 800ea9e:	603b      	str	r3, [r7, #0]
    }
    if (isCircular)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d01a      	beq.n	800eae0 <_ZN8touchgfx12DrawableList9setOffsetEl+0x114>
    {
        // Make sure that firstIndex is "in range"
        newFirstItem %= numItems;
 800eaaa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800eaae:	687a      	ldr	r2, [r7, #4]
 800eab0:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	; 0x38
 800eab4:	fb93 f1f2 	sdiv	r1, r3, r2
 800eab8:	fb02 f201 	mul.w	r2, r2, r1
 800eabc:	1a9b      	subs	r3, r3, r2
 800eabe:	86fb      	strh	r3, [r7, #54]	; 0x36
        newFirstItem = (newFirstItem + numItems) % numItems;
 800eac0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	; 0x38
 800eaca:	4413      	add	r3, r2
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	; 0x38
 800ead2:	fb93 f1f2 	sdiv	r1, r3, r2
 800ead6:	fb02 f201 	mul.w	r2, r2, r1
 800eada:	1a9b      	subs	r3, r3, r2
 800eadc:	86fb      	strh	r3, [r7, #54]	; 0x36
 800eade:	e037      	b.n	800eb50 <_ZN8touchgfx12DrawableList9setOffsetEl+0x184>
    }
    else
    {
        if (newFirstItem < 0)
 800eae0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	da0c      	bge.n	800eb02 <_ZN8touchgfx12DrawableList9setOffsetEl+0x136>
        {
            ofs -= newFirstItem * itemSize;
 800eae8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	; 0x34
 800eaf2:	fb02 f303 	mul.w	r3, r2, r3
 800eaf6:	683a      	ldr	r2, [r7, #0]
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	603b      	str	r3, [r7, #0]
            newFirstItem = 0;
 800eafc:	2300      	movs	r3, #0
 800eafe:	86fb      	strh	r3, [r7, #54]	; 0x36
 800eb00:	e026      	b.n	800eb50 <_ZN8touchgfx12DrawableList9setOffsetEl+0x184>
        }
        else if (newFirstItem + numDrawables > numItems)
 800eb02:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 800eb0c:	4413      	add	r3, r2
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	; 0x38
 800eb14:	4293      	cmp	r3, r2
 800eb16:	dd1b      	ble.n	800eb50 <_ZN8touchgfx12DrawableList9setOffsetEl+0x184>
        {
            int x = numItems - (newFirstItem + numDrawables);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800eb1e:	4619      	mov	r1, r3
 800eb20:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 800eb2a:	4413      	add	r3, r2
 800eb2c:	1acb      	subs	r3, r1, r3
 800eb2e:	613b      	str	r3, [r7, #16]
            ofs += x * itemSize;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800eb36:	461a      	mov	r2, r3
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	fb03 f302 	mul.w	r3, r3, r2
 800eb3e:	683a      	ldr	r2, [r7, #0]
 800eb40:	4413      	add	r3, r2
 800eb42:	603b      	str	r3, [r7, #0]
            newFirstItem += x;
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb4a:	4413      	add	r3, r2
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        }
    }

    int drawableDelta = 0;
 800eb50:	2300      	movs	r3, #0
 800eb52:	633b      	str	r3, [r7, #48]	; 0x30
    if (drawablesInitialized && firstItem != newFirstItem)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d051      	beq.n	800ec02 <_ZN8touchgfx12DrawableList9setOffsetEl+0x236>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eb64:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d04a      	beq.n	800ec02 <_ZN8touchgfx12DrawableList9setOffsetEl+0x236>
    {
        drawableDelta = numDrawables;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800eb72:	633b      	str	r3, [r7, #48]	; 0x30
        for (int i = 1; i < numDrawables; i++)
 800eb74:	2301      	movs	r3, #1
 800eb76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800eb7e:	461a      	mov	r2, r3
 800eb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb82:	4293      	cmp	r3, r2
 800eb84:	da3d      	bge.n	800ec02 <_ZN8touchgfx12DrawableList9setOffsetEl+0x236>
        {
            int fi = (firstItem + i);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb90:	4413      	add	r3, r2
 800eb92:	62bb      	str	r3, [r7, #40]	; 0x28
            int nfi = (newFirstItem + i);
 800eb94:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800eb98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb9a:	4413      	add	r3, r2
 800eb9c:	627b      	str	r3, [r7, #36]	; 0x24
            if (isCircular)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d015      	beq.n	800ebd4 <_ZN8touchgfx12DrawableList9setOffsetEl+0x208>
            {
                fi %= numItems;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800ebae:	461a      	mov	r2, r3
 800ebb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb2:	fb93 f1f2 	sdiv	r1, r3, r2
 800ebb6:	fb02 f201 	mul.w	r2, r2, r1
 800ebba:	1a9b      	subs	r3, r3, r2
 800ebbc:	62bb      	str	r3, [r7, #40]	; 0x28
                nfi %= numItems;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc8:	fb93 f1f2 	sdiv	r1, r3, r2
 800ebcc:	fb02 f201 	mul.w	r2, r2, r1
 800ebd0:	1a9b      	subs	r3, r3, r2
 800ebd2:	627b      	str	r3, [r7, #36]	; 0x24
            }
            if (fi == newFirstItem)
 800ebd4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ebd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d103      	bne.n	800ebe6 <_ZN8touchgfx12DrawableList9setOffsetEl+0x21a>
            {
                drawableDelta = -i;
 800ebde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe0:	425b      	negs	r3, r3
 800ebe2:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800ebe4:	e00d      	b.n	800ec02 <_ZN8touchgfx12DrawableList9setOffsetEl+0x236>
            }
            if (nfi == firstItem)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ebec:	461a      	mov	r2, r3
 800ebee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d102      	bne.n	800ebfa <_ZN8touchgfx12DrawableList9setOffsetEl+0x22e>
            {
                drawableDelta = i;
 800ebf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf6:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 800ebf8:	e003      	b.n	800ec02 <_ZN8touchgfx12DrawableList9setOffsetEl+0x236>
        for (int i = 1; i < numDrawables; i++)
 800ebfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec00:	e7ba      	b.n	800eb78 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ac>
            }
        }
    }
    firstDrawable = ((firstDrawable - drawableDelta) + numDrawables) % numDrawables;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec08:	461a      	mov	r2, r3
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	1ad3      	subs	r3, r2, r3
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 800ec14:	4413      	add	r3, r2
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 800ec1c:	fb93 f1f2 	sdiv	r1, r3, r2
 800ec20:	fb02 f201 	mul.w	r2, r2, r1
 800ec24:	1a9b      	subs	r3, r3, r2
 800ec26:	b21a      	sxth	r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    firstItem = newFirstItem;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ec30:	879a      	strh	r2, [r3, #60]	; 0x3c

    for (int i = 0; i < numDrawables; i++)
 800ec32:	2300      	movs	r3, #0
 800ec34:	623b      	str	r3, [r7, #32]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	6a3b      	ldr	r3, [r7, #32]
 800ec40:	4293      	cmp	r3, r2
 800ec42:	f280 80cf 	bge.w	800ede4 <_ZN8touchgfx12DrawableList9setOffsetEl+0x418>
    {
        int drawableIndex = (firstDrawable + i) % numDrawables;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	6a3b      	ldr	r3, [r7, #32]
 800ec50:	4413      	add	r3, r2
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 800ec58:	fb93 f1f2 	sdiv	r1, r3, r2
 800ec5c:	fb02 f201 	mul.w	r2, r2, r1
 800ec60:	1a9b      	subs	r3, r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]
        Drawable* drawable = drawableItems->getDrawable(drawableIndex + firstDrawableIndex);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	3308      	adds	r3, #8
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 800ec78:	b291      	uxth	r1, r2
 800ec7a:	68fa      	ldr	r2, [r7, #12]
 800ec7c:	b292      	uxth	r2, r2
 800ec7e:	440a      	add	r2, r1
 800ec80:	b292      	uxth	r2, r2
 800ec82:	b212      	sxth	r2, r2
 800ec84:	4611      	mov	r1, r2
 800ec86:	4798      	blx	r3
 800ec88:	60b8      	str	r0, [r7, #8]
        if (isHorizontal)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d01b      	beq.n	800eccc <_ZN8touchgfx12DrawableList9setOffsetEl+0x300>
        {
            drawable->moveTo(ofs + i * itemSize + itemMargin, 0);
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	3358      	adds	r3, #88	; 0x58
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	; 0x34
 800eca2:	b291      	uxth	r1, r2
 800eca4:	6a3a      	ldr	r2, [r7, #32]
 800eca6:	b292      	uxth	r2, r2
 800eca8:	fb11 f202 	smulbb	r2, r1, r2
 800ecac:	b291      	uxth	r1, r2
 800ecae:	683a      	ldr	r2, [r7, #0]
 800ecb0:	b292      	uxth	r2, r2
 800ecb2:	440a      	add	r2, r1
 800ecb4:	b291      	uxth	r1, r2
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	f9b2 2036 	ldrsh.w	r2, [r2, #54]	; 0x36
 800ecbc:	b292      	uxth	r2, r2
 800ecbe:	440a      	add	r2, r1
 800ecc0:	b292      	uxth	r2, r2
 800ecc2:	b211      	sxth	r1, r2
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	68b8      	ldr	r0, [r7, #8]
 800ecc8:	4798      	blx	r3
 800ecca:	e01a      	b.n	800ed02 <_ZN8touchgfx12DrawableList9setOffsetEl+0x336>
        }
        else
        {
            drawable->moveTo(0, ofs + i * itemSize + itemMargin);
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	3358      	adds	r3, #88	; 0x58
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	; 0x34
 800ecda:	b291      	uxth	r1, r2
 800ecdc:	6a3a      	ldr	r2, [r7, #32]
 800ecde:	b292      	uxth	r2, r2
 800ece0:	fb11 f202 	smulbb	r2, r1, r2
 800ece4:	b291      	uxth	r1, r2
 800ece6:	683a      	ldr	r2, [r7, #0]
 800ece8:	b292      	uxth	r2, r2
 800ecea:	440a      	add	r2, r1
 800ecec:	b291      	uxth	r1, r2
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	f9b2 2036 	ldrsh.w	r2, [r2, #54]	; 0x36
 800ecf4:	b292      	uxth	r2, r2
 800ecf6:	440a      	add	r2, r1
 800ecf8:	b292      	uxth	r2, r2
 800ecfa:	b212      	sxth	r2, r2
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	68b8      	ldr	r0, [r7, #8]
 800ed00:	4798      	blx	r3
        }

        int itemIndex = i + firstItem;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ed08:	461a      	mov	r2, r3
 800ed0a:	6a3b      	ldr	r3, [r7, #32]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	61fb      	str	r3, [r7, #28]
        if (isCircular)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d00b      	beq.n	800ed32 <_ZN8touchgfx12DrawableList9setOffsetEl+0x366>
        {
            itemIndex %= numItems;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800ed20:	461a      	mov	r2, r3
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	fb93 f1f2 	sdiv	r1, r3, r2
 800ed28:	fb02 f201 	mul.w	r2, r2, r1
 800ed2c:	1a9b      	subs	r3, r3, r2
 800ed2e:	61fb      	str	r3, [r7, #28]
 800ed30:	e00c      	b.n	800ed4c <_ZN8touchgfx12DrawableList9setOffsetEl+0x380>
        }
        else
        {
            if (itemIndex < 0 || itemIndex >= numItems)
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	db06      	blt.n	800ed46 <_ZN8touchgfx12DrawableList9setOffsetEl+0x37a>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800ed3e:	461a      	mov	r2, r3
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	4293      	cmp	r3, r2
 800ed44:	db02      	blt.n	800ed4c <_ZN8touchgfx12DrawableList9setOffsetEl+0x380>
            {
                itemIndex = -1;
 800ed46:	f04f 33ff 	mov.w	r3, #4294967295
 800ed4a:	61fb      	str	r3, [r7, #28]
            }
        }
        if (itemIndex < 0)
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	da04      	bge.n	800ed5c <_ZN8touchgfx12DrawableList9setOffsetEl+0x390>
        {
            drawable->setVisible(false);
 800ed52:	2100      	movs	r1, #0
 800ed54:	68b8      	ldr	r0, [r7, #8]
 800ed56:	f7ff f9f9 	bl	800e14c <_ZN8touchgfx8Drawable10setVisibleEb>
 800ed5a:	e03f      	b.n	800eddc <_ZN8touchgfx12DrawableList9setOffsetEl+0x410>
        }
        else
        {
            drawable->setVisible(true);
 800ed5c:	2101      	movs	r1, #1
 800ed5e:	68b8      	ldr	r0, [r7, #8]
 800ed60:	f7ff f9f4 	bl	800e14c <_ZN8touchgfx8Drawable10setVisibleEb>
            // Only fill if first time or outside old range
            if (!drawablesInitialized || (i < drawableDelta || i >= numDrawables + drawableDelta))
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed6a:	f083 0301 	eor.w	r3, r3, #1
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d10c      	bne.n	800ed8e <_ZN8touchgfx12DrawableList9setOffsetEl+0x3c2>
 800ed74:	6a3a      	ldr	r2, [r7, #32]
 800ed76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	db08      	blt.n	800ed8e <_ZN8touchgfx12DrawableList9setOffsetEl+0x3c2>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800ed82:	461a      	mov	r2, r3
 800ed84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed86:	4413      	add	r3, r2
 800ed88:	6a3a      	ldr	r2, [r7, #32]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	db26      	blt.n	800eddc <_ZN8touchgfx12DrawableList9setOffsetEl+0x410>
            {
                if (updateDrawable->isValid())
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	330c      	adds	r3, #12
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4610      	mov	r0, r2
 800ed9e:	4798      	blx	r3
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d01a      	beq.n	800eddc <_ZN8touchgfx12DrawableList9setOffsetEl+0x410>
                {
                    updateDrawable->execute(drawableItems, drawableIndex + firstDrawableIndex, itemIndex);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	3308      	adds	r3, #8
 800edb2:	681c      	ldr	r4, [r3, #0]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	4413      	add	r3, r2
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	b21a      	sxth	r2, r3
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	b21b      	sxth	r3, r3
 800edce:	47a0      	blx	r4
                    drawable->invalidate();
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	3314      	adds	r3, #20
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	68b8      	ldr	r0, [r7, #8]
 800edda:	4798      	blx	r3
    for (int i = 0; i < numDrawables; i++)
 800eddc:	6a3b      	ldr	r3, [r7, #32]
 800edde:	3301      	adds	r3, #1
 800ede0:	623b      	str	r3, [r7, #32]
 800ede2:	e728      	b.n	800ec36 <_ZN8touchgfx12DrawableList9setOffsetEl+0x26a>
                }
            }
        }
    }
    drawablesInitialized = true;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2201      	movs	r2, #1
 800ede8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800edec:	e002      	b.n	800edf4 <_ZN8touchgfx12DrawableList9setOffsetEl+0x428>
        return;
 800edee:	bf00      	nop
 800edf0:	e000      	b.n	800edf4 <_ZN8touchgfx12DrawableList9setOffsetEl+0x428>
        return;
 800edf2:	bf00      	nop
}
 800edf4:	373c      	adds	r7, #60	; 0x3c
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd90      	pop	{r4, r7, pc}

0800edfa <_ZNK8touchgfx12DrawableList9getOffsetEv>:

int32_t DrawableList::getOffset() const
{
 800edfa:	b480      	push	{r7}
 800edfc:	b083      	sub	sp, #12
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
    return offset;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	370c      	adds	r7, #12
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr

0800ee12 <_ZN8touchgfx12DrawableList16getDrawableIndexEss>:
    }
    return numFound;
}

int16_t DrawableList::getDrawableIndex(int16_t itemIndex, int16_t prevDrawableIndex /*= -1*/)
{
 800ee12:	b480      	push	{r7}
 800ee14:	b085      	sub	sp, #20
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	807b      	strh	r3, [r7, #2]
 800ee1e:	4613      	mov	r3, r2
 800ee20:	803b      	strh	r3, [r7, #0]
    if (prevDrawableIndex >= -1 || prevDrawableIndex < numDrawables)
 800ee22:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ee26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee2a:	da06      	bge.n	800ee3a <_ZN8touchgfx12DrawableList16getDrawableIndexEss+0x28>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800ee32:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	da59      	bge.n	800eeee <_ZN8touchgfx12DrawableList16getDrawableIndexEss+0xdc>
    {
        if (prevDrawableIndex >= 0)
 800ee3a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	db12      	blt.n	800ee68 <_ZN8touchgfx12DrawableList16getDrawableIndexEss+0x56>
        {
            prevDrawableIndex = (prevDrawableIndex - firstDrawable + numDrawables) % numDrawables;
 800ee42:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	f9b2 203e 	ldrsh.w	r2, [r2, #62]	; 0x3e
 800ee4c:	1a9b      	subs	r3, r3, r2
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 800ee54:	4413      	add	r3, r2
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 800ee5c:	fb93 f1f2 	sdiv	r1, r3, r2
 800ee60:	fb02 f201 	mul.w	r2, r2, r1
 800ee64:	1a9b      	subs	r3, r3, r2
 800ee66:	803b      	strh	r3, [r7, #0]
        }
        for (int16_t i = prevDrawableIndex + 1; i < numDrawables; i++)
 800ee68:	883b      	ldrh	r3, [r7, #0]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	81fb      	strh	r3, [r7, #14]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800ee76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	da37      	bge.n	800eeee <_ZN8touchgfx12DrawableList16getDrawableIndexEss+0xdc>
        {
            int16_t currentItemIndex = firstItem + i;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	89fb      	ldrh	r3, [r7, #14]
 800ee88:	4413      	add	r3, r2
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	81bb      	strh	r3, [r7, #12]
            if (isCircular)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00a      	beq.n	800eeae <_ZN8touchgfx12DrawableList16getDrawableIndexEss+0x9c>
            {
                currentItemIndex %= numItems;
 800ee98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	; 0x38
 800eea2:	fb93 f1f2 	sdiv	r1, r3, r2
 800eea6:	fb02 f201 	mul.w	r2, r2, r1
 800eeaa:	1a9b      	subs	r3, r3, r2
 800eeac:	81bb      	strh	r3, [r7, #12]
            }
            if (itemIndex == currentItemIndex)
 800eeae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800eeb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d112      	bne.n	800eee0 <_ZN8touchgfx12DrawableList16getDrawableIndexEss+0xce>
            {
                int16_t drawableIndex = (firstDrawable + i) % numDrawables;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eec0:	461a      	mov	r2, r3
 800eec2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eec6:	4413      	add	r3, r2
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 800eece:	fb93 f1f2 	sdiv	r1, r3, r2
 800eed2:	fb02 f201 	mul.w	r2, r2, r1
 800eed6:	1a9b      	subs	r3, r3, r2
 800eed8:	817b      	strh	r3, [r7, #10]
                return drawableIndex;
 800eeda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800eede:	e008      	b.n	800eef2 <_ZN8touchgfx12DrawableList16getDrawableIndexEss+0xe0>
        for (int16_t i = prevDrawableIndex + 1; i < numDrawables; i++)
 800eee0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	3301      	adds	r3, #1
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	81fb      	strh	r3, [r7, #14]
 800eeec:	e7c0      	b.n	800ee70 <_ZN8touchgfx12DrawableList16getDrawableIndexEss+0x5e>
            }
        }
    }
    return -1;
 800eeee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3714      	adds	r7, #20
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr

0800eefe <_ZN8touchgfx12DrawableList16refreshDrawablesEv>:

void DrawableList::refreshDrawables()
{
 800eefe:	b5b0      	push	{r4, r5, r7, lr}
 800ef00:	b086      	sub	sp, #24
 800ef02:	af02      	add	r7, sp, #8
 800ef04:	6078      	str	r0, [r7, #4]
    numDrawables = 0;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	875a      	strh	r2, [r3, #58]	; 0x3a
    if (drawableItems == 0)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d07f      	beq.n	800f014 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x116>
    {
        return;
    }
    numDrawables = getRequiredNumberOfDrawables();
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f7ff fcea 	bl	800e8ee <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	875a      	strh	r2, [r3, #58]	; 0x3a
    // Remove everything
    Container::removeAll();
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7fe fe78 	bl	800dc1a <_ZN8touchgfx9Container9removeAllEv>
    // Add the itemDrawables
    for (int drawableIndex = 0; drawableIndex < numDrawables; drawableIndex++)
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	60fb      	str	r3, [r7, #12]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800ef34:	461a      	mov	r2, r3
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	da5a      	bge.n	800eff2 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0xf4>
    {
        Drawable* drawable = drawableItems->getDrawable(drawableIndex + firstDrawableIndex);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	3308      	adds	r3, #8
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 800ef50:	b291      	uxth	r1, r2
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	b292      	uxth	r2, r2
 800ef56:	440a      	add	r2, r1
 800ef58:	b292      	uxth	r2, r2
 800ef5a:	b212      	sxth	r2, r2
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	4798      	blx	r3
 800ef60:	60b8      	str	r0, [r7, #8]
        // Resize the drawables, X/Y ignored for now.
        if (isHorizontal)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d01c      	beq.n	800efa6 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0xa8>
        {
            drawable->setPosition(0, 0, itemSize - 2 * itemMargin, getHeight());
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	3328      	adds	r3, #40	; 0x28
 800ef72:	681c      	ldr	r4, [r3, #0]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800ef7a:	b29a      	uxth	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	005b      	lsls	r3, r3, #1
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	b21d      	sxth	r5, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7ff f847 	bl	800e024 <_ZNK8touchgfx8Drawable9getHeightEv>
 800ef96:	4603      	mov	r3, r0
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	462b      	mov	r3, r5
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	2100      	movs	r1, #0
 800efa0:	68b8      	ldr	r0, [r7, #8]
 800efa2:	47a0      	blx	r4
 800efa4:	e01c      	b.n	800efe0 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0xe2>
        }
        else
        {
            drawable->setPosition(0, 0, getWidth(), itemSize - 2 * itemMargin);
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	3328      	adds	r3, #40	; 0x28
 800efac:	681c      	ldr	r4, [r3, #0]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7ff f82a 	bl	800e00a <_ZNK8touchgfx8Drawable8getWidthEv>
 800efb6:	4603      	mov	r3, r0
 800efb8:	4619      	mov	r1, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800efc0:	b29a      	uxth	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800efc8:	b29b      	uxth	r3, r3
 800efca:	005b      	lsls	r3, r3, #1
 800efcc:	b29b      	uxth	r3, r3
 800efce:	1ad3      	subs	r3, r2, r3
 800efd0:	b29b      	uxth	r3, r3
 800efd2:	b21b      	sxth	r3, r3
 800efd4:	9300      	str	r3, [sp, #0]
 800efd6:	460b      	mov	r3, r1
 800efd8:	2200      	movs	r2, #0
 800efda:	2100      	movs	r1, #0
 800efdc:	68b8      	ldr	r0, [r7, #8]
 800efde:	47a0      	blx	r4
        }
        // Add each drawable for later positioning
        Container::add(*drawable);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	68b9      	ldr	r1, [r7, #8]
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7fe fd7f 	bl	800dae8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for (int drawableIndex = 0; drawableIndex < numDrawables; drawableIndex++)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	3301      	adds	r3, #1
 800efee:	60fb      	str	r3, [r7, #12]
 800eff0:	e79d      	b.n	800ef2e <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x30>
    }

    drawablesInitialized = false;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    firstItem = 0;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2200      	movs	r2, #0
 800effe:	879a      	strh	r2, [r3, #60]	; 0x3c
    firstDrawable = 0;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	87da      	strh	r2, [r3, #62]	; 0x3e
    setOffset(offset);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f00a:	4619      	mov	r1, r3
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7ff fcdd 	bl	800e9cc <_ZN8touchgfx12DrawableList9setOffsetEl>
 800f012:	e000      	b.n	800f016 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x118>
        return;
 800f014:	bf00      	nop
}
 800f016:	3710      	adds	r7, #16
 800f018:	46bd      	mov	sp, r7
 800f01a:	bdb0      	pop	{r4, r5, r7, pc}

0800f01c <_ZN8touchgfx12DrawableList11itemChangedEs>:

void DrawableList::itemChanged(int16_t itemIndex)
{
 800f01c:	b590      	push	{r4, r7, lr}
 800f01e:	b085      	sub	sp, #20
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	460b      	mov	r3, r1
 800f026:	807b      	strh	r3, [r7, #2]
    if (updateDrawable && updateDrawable->isValid())
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d00d      	beq.n	800f04c <_ZN8touchgfx12DrawableList11itemChangedEs+0x30>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	330c      	adds	r3, #12
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4610      	mov	r0, r2
 800f040:	4798      	blx	r3
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d001      	beq.n	800f04c <_ZN8touchgfx12DrawableList11itemChangedEs+0x30>
 800f048:	2301      	movs	r3, #1
 800f04a:	e000      	b.n	800f04e <_ZN8touchgfx12DrawableList11itemChangedEs+0x32>
 800f04c:	2300      	movs	r3, #0
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d02b      	beq.n	800f0aa <_ZN8touchgfx12DrawableList11itemChangedEs+0x8e>
    {
        int16_t drawableIndex = -1;
 800f052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f056:	81fb      	strh	r3, [r7, #14]
        while ((drawableIndex = getDrawableIndex(itemIndex, drawableIndex)) != -1)
 800f058:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f05c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f060:	4619      	mov	r1, r3
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7ff fed5 	bl	800ee12 <_ZN8touchgfx12DrawableList16getDrawableIndexEss>
 800f068:	4603      	mov	r3, r0
 800f06a:	81fb      	strh	r3, [r7, #14]
 800f06c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f074:	bf14      	ite	ne
 800f076:	2301      	movne	r3, #1
 800f078:	2300      	moveq	r3, #0
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d014      	beq.n	800f0aa <_ZN8touchgfx12DrawableList11itemChangedEs+0x8e>
        {
            updateDrawable->execute(drawableItems, drawableIndex + firstDrawableIndex, itemIndex);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	3308      	adds	r3, #8
 800f08c:	681c      	ldr	r4, [r3, #0]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800f098:	b29a      	uxth	r2, r3
 800f09a:	89fb      	ldrh	r3, [r7, #14]
 800f09c:	4413      	add	r3, r2
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	b21a      	sxth	r2, r3
 800f0a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f0a6:	47a0      	blx	r4
        while ((drawableIndex = getDrawableIndex(itemIndex, drawableIndex)) != -1)
 800f0a8:	e7d6      	b.n	800f058 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
        }
    }
}
 800f0aa:	bf00      	nop
 800f0ac:	3714      	adds	r7, #20
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd90      	pop	{r4, r7, pc}

0800f0b2 <_ZN8touchgfx10ScrollBase10initializeEv>:
     *
     * @brief Initializes the contents of all drawables.
     *
     *        Initializes the contents of all drawables.
     */
    virtual void initialize()
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b082      	sub	sp, #8
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
    {
        list.refreshDrawables();
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	332c      	adds	r3, #44	; 0x2c
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7ff ff1d 	bl	800eefe <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
    }
 800f0c4:	bf00      	nop
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <_ZN8touchgfx10ScrollBaseC1Ev>:

#include <touchgfx/containers/scrollers/ScrollBase.hpp>

namespace touchgfx
{
ScrollBase::ScrollBase()
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
      gestureEnd(0),
      xClick(0),
      yClick(0),
      initialSwipeOffset(0),
      draggableX(false),
      draggableY(false)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7ff f882 	bl	800e1e0 <_ZN8touchgfx9ContainerC1Ev>
 800f0dc:	4a41      	ldr	r2, [pc, #260]	; (800f1e4 <_ZN8touchgfx10ScrollBaseC1Ev+0x118>)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	601a      	str	r2, [r3, #0]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	332c      	adds	r3, #44	; 0x2c
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7ff fad2 	bl	800e690 <_ZN8touchgfx12DrawableListC1Ev>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2200      	movs	r2, #0
 800f100:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	220a      	movs	r2, #10
 800f108:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	220a      	movs	r2, #10
 800f110:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	4a32      	ldr	r2, [pc, #200]	; (800f1e8 <_ZN8touchgfx10ScrollBaseC1Ev+0x11c>)
 800f120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	221e      	movs	r2, #30
 800f128:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2200      	movs	r2, #0
 800f150:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2200      	movs	r2, #0
 800f158:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2200      	movs	r2, #0
 800f160:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2200      	movs	r2, #0
 800f168:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2200      	movs	r2, #0
 800f170:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2200      	movs	r2, #0
 800f178:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
{
    add(list);
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	332c      	adds	r3, #44	; 0x2c
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	4610      	mov	r0, r2
 800f1a6:	f7fe fc9f 	bl	800dae8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    list.setXY(0, 0);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	332c      	adds	r3, #44	; 0x2c
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7fe fb99 	bl	800d8ea <_ZN8touchgfx8Drawable5setXYEss>
    list.setHorizontal(false);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	332c      	adds	r3, #44	; 0x2c
 800f1bc:	2100      	movs	r1, #0
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff facc 	bl	800e75c <_ZN8touchgfx12DrawableList13setHorizontalEb>
    list.setCircular(false);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	332c      	adds	r3, #44	; 0x2c
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7ff faea 	bl	800e7a4 <_ZN8touchgfx12DrawableList11setCircularEb>
    setTouchable(true);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2101      	movs	r1, #1
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7fe ffc9 	bl	800e16c <_ZN8touchgfx8Drawable12setTouchableEb>
}
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3708      	adds	r7, #8
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	080215e0 	.word	0x080215e0
 800f1e8:	0801d859 	.word	0x0801d859

0800f1ec <_ZN8touchgfx10ScrollBase8setWidthEs>:

void ScrollBase::setWidth(int16_t width)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	807b      	strh	r3, [r7, #2]
    Container::setWidth(width);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f1fe:	4611      	mov	r1, r2
 800f200:	4618      	mov	r0, r3
 800f202:	f7fe fb90 	bl	800d926 <_ZN8touchgfx8Drawable8setWidthEs>
    list.setWidth(width);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	332c      	adds	r3, #44	; 0x2c
 800f20a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f20e:	4611      	mov	r1, r2
 800f210:	4618      	mov	r0, r3
 800f212:	f7ff fa7b 	bl	800e70c <_ZN8touchgfx12DrawableList8setWidthEs>
}
 800f216:	bf00      	nop
 800f218:	3708      	adds	r7, #8
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <_ZN8touchgfx10ScrollBase9setHeightEs>:

void ScrollBase::setHeight(int16_t height)
{
 800f21e:	b580      	push	{r7, lr}
 800f220:	b082      	sub	sp, #8
 800f222:	af00      	add	r7, sp, #0
 800f224:	6078      	str	r0, [r7, #4]
 800f226:	460b      	mov	r3, r1
 800f228:	807b      	strh	r3, [r7, #2]
    Container::setHeight(height);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f230:	4611      	mov	r1, r2
 800f232:	4618      	mov	r0, r3
 800f234:	f7fe fb86 	bl	800d944 <_ZN8touchgfx8Drawable9setHeightEs>
    list.setHeight(height);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	332c      	adds	r3, #44	; 0x2c
 800f23c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f240:	4611      	mov	r1, r2
 800f242:	4618      	mov	r0, r3
 800f244:	f7ff fa76 	bl	800e734 <_ZN8touchgfx12DrawableList9setHeightEs>
}
 800f248:	bf00      	nop
 800f24a:	3708      	adds	r7, #8
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <_ZN8touchgfx10ScrollBase13setHorizontalEb>:

void ScrollBase::setHorizontal(bool horizontal)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	460b      	mov	r3, r1
 800f25a:	70fb      	strb	r3, [r7, #3]
    allowVerticalDrag(horizontal);
 800f25c:	78fb      	ldrb	r3, [r7, #3]
 800f25e:	4619      	mov	r1, r3
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f000 f910 	bl	800f486 <_ZN8touchgfx10ScrollBase17allowVerticalDragEb>
    allowHorizontalDrag(!horizontal);
 800f266:	78fb      	ldrb	r3, [r7, #3]
 800f268:	f083 0301 	eor.w	r3, r3, #1
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	4619      	mov	r1, r3
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 f8f8 	bl	800f466 <_ZN8touchgfx10ScrollBase19allowHorizontalDragEb>
    list.setHorizontal(horizontal);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	332c      	adds	r3, #44	; 0x2c
 800f27a:	78fa      	ldrb	r2, [r7, #3]
 800f27c:	4611      	mov	r1, r2
 800f27e:	4618      	mov	r0, r3
 800f280:	f7ff fa6c 	bl	800e75c <_ZN8touchgfx12DrawableList13setHorizontalEb>
}
 800f284:	bf00      	nop
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <_ZNK8touchgfx10ScrollBase13getHorizontalEv>:

bool ScrollBase::getHorizontal() const
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
    return list.getHorizontal();
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	332c      	adds	r3, #44	; 0x2c
 800f298:	4618      	mov	r0, r3
 800f29a:	f7ff fa76 	bl	800e78a <_ZNK8touchgfx12DrawableList13getHorizontalEv>
 800f29e:	4603      	mov	r3, r0
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <_ZN8touchgfx10ScrollBase11setCircularEb>:

void ScrollBase::setCircular(bool circular)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	70fb      	strb	r3, [r7, #3]
    list.setCircular(circular);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	332c      	adds	r3, #44	; 0x2c
 800f2b8:	78fa      	ldrb	r2, [r7, #3]
 800f2ba:	4611      	mov	r1, r2
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7ff fa71 	bl	800e7a4 <_ZN8touchgfx12DrawableList11setCircularEb>
}
 800f2c2:	bf00      	nop
 800f2c4:	3708      	adds	r7, #8
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <_ZNK8touchgfx10ScrollBase11getCircularEv>:

bool ScrollBase::getCircular() const
{
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b082      	sub	sp, #8
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
    return list.getCircular();
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	332c      	adds	r3, #44	; 0x2c
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7ff fa7b 	bl	800e7d2 <_ZNK8touchgfx12DrawableList11getCircularEv>
 800f2dc:	4603      	mov	r3, r0
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>:

void ScrollBase::setDrawableSize(int16_t drawableSize, int16_t drawableMargin)
{
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b082      	sub	sp, #8
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	807b      	strh	r3, [r7, #2]
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	803b      	strh	r3, [r7, #0]
    itemSize = drawableSize + drawableMargin * 2;
 800f2f6:	883b      	ldrh	r3, [r7, #0]
 800f2f8:	005b      	lsls	r3, r3, #1
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	887b      	ldrh	r3, [r7, #2]
 800f2fe:	4413      	add	r3, r2
 800f300:	b29b      	uxth	r3, r3
 800f302:	b21a      	sxth	r2, r3
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    list.setDrawableSize(drawableSize, drawableMargin);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	332c      	adds	r3, #44	; 0x2c
 800f30e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f312:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff fa68 	bl	800e7ec <_ZN8touchgfx12DrawableList15setDrawableSizeEss>
}
 800f31c:	bf00      	nop
 800f31e:	3708      	adds	r7, #8
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <_ZNK8touchgfx10ScrollBase15getDrawableSizeEv>:

int16_t ScrollBase::getDrawableSize() const
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
    return list.getDrawableSize();
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	332c      	adds	r3, #44	; 0x2c
 800f330:	4618      	mov	r0, r3
 800f332:	f7ff fa9b 	bl	800e86c <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>
 800f336:	4603      	mov	r3, r0
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <_ZNK8touchgfx10ScrollBase17getDrawableMarginEv>:

int16_t ScrollBase::getDrawableMargin() const
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b082      	sub	sp, #8
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
    return list.getDrawableMargin();
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	332c      	adds	r3, #44	; 0x2c
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7ff faa4 	bl	800e89a <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>
 800f352:	4603      	mov	r3, r0
}
 800f354:	4618      	mov	r0, r3
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>:

void ScrollBase::setNumberOfItems(int16_t numberOfItems)
{
 800f35c:	b5b0      	push	{r4, r5, r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	460b      	mov	r3, r1
 800f366:	807b      	strh	r3, [r7, #2]
    if (numberOfItems != getNumberOfItems())
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	33a4      	adds	r3, #164	; 0xa4
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	4798      	blx	r3
 800f374:	4603      	mov	r3, r0
 800f376:	461a      	mov	r2, r3
 800f378:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f37c:	4293      	cmp	r3, r2
 800f37e:	bf14      	ite	ne
 800f380:	2301      	movne	r3, #1
 800f382:	2300      	moveq	r3, #0
 800f384:	b2db      	uxtb	r3, r3
 800f386:	2b00      	cmp	r3, #0
 800f388:	d02c      	beq.n	800f3e4 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x88>
    {
        list.setNumberOfItems(numberOfItems);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	332c      	adds	r3, #44	; 0x2c
 800f38e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f392:	4611      	mov	r1, r2
 800f394:	4618      	mov	r0, r3
 800f396:	f7ff fa8d 	bl	800e8b4 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>
        if (!getCircular())
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	3394      	adds	r3, #148	; 0x94
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	4798      	blx	r3
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	f083 0301 	eor.w	r3, r3, #1
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d018      	beq.n	800f3e4 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x88>
        {
            animateToPosition(keepOffsetInsideLimits(getOffset(), 0));
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	33c8      	adds	r3, #200	; 0xc8
 800f3b8:	681c      	ldr	r4, [r3, #0]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	33c0      	adds	r3, #192	; 0xc0
 800f3c0:	681d      	ldr	r5, [r3, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	33b8      	adds	r3, #184	; 0xb8
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	4798      	blx	r3
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	47a8      	blx	r5
 800f3d8:	4603      	mov	r3, r0
 800f3da:	f04f 32ff 	mov.w	r2, #4294967295
 800f3de:	4619      	mov	r1, r3
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	47a0      	blx	r4
        }
    }
}
 800f3e4:	bf00      	nop
 800f3e6:	3708      	adds	r7, #8
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bdb0      	pop	{r4, r5, r7, pc}

0800f3ec <_ZNK8touchgfx10ScrollBase16getNumberOfItemsEv>:

int16_t ScrollBase::getNumberOfItems() const
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
    return list.getNumberOfItems();
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	332c      	adds	r3, #44	; 0x2c
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7ff fa6b 	bl	800e8d4 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>
 800f3fe:	4603      	mov	r3, r0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>:

void ScrollBase::setEasingEquation(EasingEquation equation)
{
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
    easingEquation = equation;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	683a      	ldr	r2, [r7, #0]
 800f416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f41a:	bf00      	nop
 800f41c:	370c      	adds	r7, #12
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr

0800f426 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>:
{
    return defaultAnimationSteps;
}

void ScrollBase::setSwipeAcceleration(uint16_t acceleration)
{
 800f426:	b480      	push	{r7}
 800f428:	b083      	sub	sp, #12
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
 800f42e:	460b      	mov	r3, r1
 800f430:	807b      	strh	r3, [r7, #2]
    swipeAcceleration = acceleration;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	887a      	ldrh	r2, [r7, #2]
 800f436:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
}
 800f43a:	bf00      	nop
 800f43c:	370c      	adds	r7, #12
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr

0800f446 <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>:
{
    return maxSwipeItems;
}

void ScrollBase::setDragAcceleration(uint16_t acceleration)
{
 800f446:	b480      	push	{r7}
 800f448:	b083      	sub	sp, #12
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
 800f44e:	460b      	mov	r3, r1
 800f450:	807b      	strh	r3, [r7, #2]
    dragAcceleration = acceleration;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	887a      	ldrh	r2, [r7, #2]
 800f456:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 800f45a:	bf00      	nop
 800f45c:	370c      	adds	r7, #12
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr

0800f466 <_ZN8touchgfx10ScrollBase19allowHorizontalDragEb>:
{
    return dragAcceleration;
}

void ScrollBase::allowHorizontalDrag(bool enable)
{
 800f466:	b480      	push	{r7}
 800f468:	b083      	sub	sp, #12
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
 800f46e:	460b      	mov	r3, r1
 800f470:	70fb      	strb	r3, [r7, #3]
    draggableX = enable;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	78fa      	ldrb	r2, [r7, #3]
 800f476:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 800f47a:	bf00      	nop
 800f47c:	370c      	adds	r7, #12
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr

0800f486 <_ZN8touchgfx10ScrollBase17allowVerticalDragEb>:

void ScrollBase::allowVerticalDrag(bool enable)
{
 800f486:	b480      	push	{r7}
 800f488:	b083      	sub	sp, #12
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	6078      	str	r0, [r7, #4]
 800f48e:	460b      	mov	r3, r1
 800f490:	70fb      	strb	r3, [r7, #3]
    draggableY = enable;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	78fa      	ldrb	r2, [r7, #3]
 800f496:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
}
 800f49a:	bf00      	nop
 800f49c:	370c      	adds	r7, #12
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr

0800f4a6 <_ZN8touchgfx10ScrollBase13animateToItemEss>:

void ScrollBase::animateToItem(int16_t itemIndex, int16_t animationSteps /*= -1*/)
{
 800f4a6:	b590      	push	{r4, r7, lr}
 800f4a8:	b085      	sub	sp, #20
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	807b      	strh	r3, [r7, #2]
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	803b      	strh	r3, [r7, #0]
    int32_t position = getPositionForItem(itemIndex);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	33bc      	adds	r3, #188	; 0xbc
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f4c2:	4611      	mov	r1, r2
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	4798      	blx	r3
 800f4c8:	60f8      	str	r0, [r7, #12]
    animateToPosition(position, animationSteps < 0 ? defaultAnimationSteps : animationSteps);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	33c8      	adds	r3, #200	; 0xc8
 800f4d0:	681c      	ldr	r4, [r3, #0]
 800f4d2:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	da04      	bge.n	800f4e4 <_ZN8touchgfx10ScrollBase13animateToItemEss+0x3e>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800f4e0:	b21b      	sxth	r3, r3
 800f4e2:	e001      	b.n	800f4e8 <_ZN8touchgfx10ScrollBase13animateToItemEss+0x42>
 800f4e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	68f9      	ldr	r1, [r7, #12]
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	47a0      	blx	r4
}
 800f4f0:	bf00      	nop
 800f4f2:	3714      	adds	r7, #20
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd90      	pop	{r4, r7, pc}

0800f4f8 <_ZN8touchgfx10ScrollBase13stopAnimationEv>:
{
    return currentAnimationState != NO_ANIMATION;
}

void ScrollBase::stopAnimation()
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
    if (currentAnimationState == ANIMATING_GESTURE)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800f506:	2b01      	cmp	r3, #1
 800f508:	d111      	bne.n	800f52e <_ZN8touchgfx10ScrollBase13stopAnimationEv+0x36>
    {
        Application::getInstance()->unregisterTimerWidget(this);
 800f50a:	f00d f93b 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 800f50e:	4602      	mov	r2, r0
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4619      	mov	r1, r3
 800f514:	4610      	mov	r0, r2
 800f516:	f00d f96b 	bl	801c7f0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
        setOffset(gestureEnd);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	33b4      	adds	r3, #180	; 0xb4
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800f528:	4611      	mov	r1, r2
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	4798      	blx	r3
    }
    currentAnimationState = NO_ANIMATION;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2200      	movs	r2, #0
 800f532:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 800f536:	bf00      	nop
 800f538:	3708      	adds	r7, #8
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
	...

0800f540 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE>:

void ScrollBase::handleDragEvent(const DragEvent& evt)
{
 800f540:	b590      	push	{r4, r7, lr}
 800f542:	b085      	sub	sp, #20
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	6039      	str	r1, [r7, #0]
    stopAnimation();
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7ff ffd4 	bl	800f4f8 <_ZN8touchgfx10ScrollBase13stopAnimationEv>
    currentAnimationState = ANIMATING_DRAG;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2202      	movs	r2, #2
 800f554:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    int32_t newOffset = getOffset() + (getHorizontal() ? evt.getDeltaX() : evt.getDeltaY()) * dragAcceleration / 10;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	33b8      	adds	r3, #184	; 0xb8
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	4798      	blx	r3
 800f564:	4604      	mov	r4, r0
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	338c      	adds	r3, #140	; 0x8c
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	4798      	blx	r3
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d005      	beq.n	800f584 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x44>
 800f578:	6838      	ldr	r0, [r7, #0]
 800f57a:	f7fe ff83 	bl	800e484 <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 800f57e:	4603      	mov	r3, r0
 800f580:	461a      	mov	r2, r3
 800f582:	e004      	b.n	800f58e <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x4e>
 800f584:	6838      	ldr	r0, [r7, #0]
 800f586:	f7fe ff92 	bl	800e4ae <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 800f58a:	4603      	mov	r3, r0
 800f58c:	461a      	mov	r2, r3
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800f594:	fb03 f302 	mul.w	r3, r3, r2
 800f598:	4a13      	ldr	r2, [pc, #76]	; (800f5e8 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0xa8>)
 800f59a:	fb82 1203 	smull	r1, r2, r2, r3
 800f59e:	1092      	asrs	r2, r2, #2
 800f5a0:	17db      	asrs	r3, r3, #31
 800f5a2:	1ad3      	subs	r3, r2, r3
 800f5a4:	4423      	add	r3, r4
 800f5a6:	60fb      	str	r3, [r7, #12]
    newOffset = keepOffsetInsideLimits(newOffset, itemSize * 3 / 4);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	33c0      	adds	r3, #192	; 0xc0
 800f5ae:	681c      	ldr	r4, [r3, #0]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	005b      	lsls	r3, r3, #1
 800f5bc:	4413      	add	r3, r2
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	da00      	bge.n	800f5c4 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x84>
 800f5c2:	3303      	adds	r3, #3
 800f5c4:	109b      	asrs	r3, r3, #2
 800f5c6:	b21b      	sxth	r3, r3
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	68f9      	ldr	r1, [r7, #12]
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	47a0      	blx	r4
 800f5d0:	60f8      	str	r0, [r7, #12]
    setOffset(newOffset);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	33b4      	adds	r3, #180	; 0xb4
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	68f9      	ldr	r1, [r7, #12]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	4798      	blx	r3
}
 800f5e0:	bf00      	nop
 800f5e2:	3714      	adds	r7, #20
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd90      	pop	{r4, r7, pc}
 800f5e8:	66666667 	.word	0x66666667

0800f5ec <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE>:

void ScrollBase::handleGestureEvent(const GestureEvent& evt)
{
 800f5ec:	b590      	push	{r4, r7, lr}
 800f5ee:	b087      	sub	sp, #28
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
    if (evt.getType() == (getHorizontal() ? GestureEvent::SWIPE_HORIZONTAL : GestureEvent::SWIPE_VERTICAL))
 800f5f6:	6838      	ldr	r0, [r7, #0]
 800f5f8:	f7fe ff86 	bl	800e508 <_ZNK8touchgfx12GestureEvent7getTypeEv>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	461c      	mov	r4, r3
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	338c      	adds	r3, #140	; 0x8c
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	4798      	blx	r3
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d001      	beq.n	800f616 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x2a>
 800f612:	2300      	movs	r3, #0
 800f614:	e000      	b.n	800f618 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x2c>
 800f616:	2301      	movs	r3, #1
 800f618:	42a3      	cmp	r3, r4
 800f61a:	bf0c      	ite	eq
 800f61c:	2301      	moveq	r3, #1
 800f61e:	2300      	movne	r3, #0
 800f620:	b2db      	uxtb	r3, r3
 800f622:	2b00      	cmp	r3, #0
 800f624:	f000 8082 	beq.w	800f72c <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x140>
    {
        int16_t velocity = abs(evt.getVelocity());
 800f628:	6838      	ldr	r0, [r7, #0]
 800f62a:	f7fe ff60 	bl	800e4ee <_ZNK8touchgfx12GestureEvent11getVelocityEv>
 800f62e:	4603      	mov	r3, r0
 800f630:	4618      	mov	r0, r3
 800f632:	f7fe ff81 	bl	800e538 <_ZN8touchgfx3absIsEET_S1_>
 800f636:	4603      	mov	r3, r0
 800f638:	82fb      	strh	r3, [r7, #22]
        int16_t direction = evt.getVelocity() < 0 ? -1 : 1;
 800f63a:	6838      	ldr	r0, [r7, #0]
 800f63c:	f7fe ff57 	bl	800e4ee <_ZNK8touchgfx12GestureEvent11getVelocityEv>
 800f640:	4603      	mov	r3, r0
 800f642:	2b00      	cmp	r3, #0
 800f644:	da02      	bge.n	800f64c <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x60>
 800f646:	f04f 33ff 	mov.w	r3, #4294967295
 800f64a:	e000      	b.n	800f64e <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x62>
 800f64c:	2301      	movs	r3, #1
 800f64e:	82bb      	strh	r3, [r7, #20]
        int16_t steps = MAX(1, velocity - 4) * 7;
 800f650:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f654:	3b04      	subs	r3, #4
 800f656:	2b01      	cmp	r3, #1
 800f658:	bfb8      	it	lt
 800f65a:	2301      	movlt	r3, #1
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	461a      	mov	r2, r3
 800f660:	00d2      	lsls	r2, r2, #3
 800f662:	1ad3      	subs	r3, r2, r3
 800f664:	b29b      	uxth	r3, r3
 800f666:	b21b      	sxth	r3, r3
 800f668:	827b      	strh	r3, [r7, #18]
        int32_t newOffset = getOffset() + direction * steps * swipeAcceleration / 10;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	33b8      	adds	r3, #184	; 0xb8
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	4798      	blx	r3
 800f676:	4601      	mov	r1, r0
 800f678:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f67c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f680:	fb02 f303 	mul.w	r3, r2, r3
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	f8b2 207e 	ldrh.w	r2, [r2, #126]	; 0x7e
 800f68a:	fb02 f303 	mul.w	r3, r2, r3
 800f68e:	4a29      	ldr	r2, [pc, #164]	; (800f734 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x148>)
 800f690:	fb82 0203 	smull	r0, r2, r2, r3
 800f694:	1092      	asrs	r2, r2, #2
 800f696:	17db      	asrs	r3, r3, #31
 800f698:	1ad3      	subs	r3, r2, r3
 800f69a:	440b      	add	r3, r1
 800f69c:	60fb      	str	r3, [r7, #12]
        if (maxSwipeItems > 0)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d023      	beq.n	800f6f0 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x104>
        {
            newOffset = MIN(newOffset, initialSwipeOffset + maxSwipeItems * itemSize);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800f6bc:	fb03 f301 	mul.w	r3, r3, r1
 800f6c0:	441a      	add	r2, r3
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	bfa8      	it	ge
 800f6c8:	4613      	movge	r3, r2
 800f6ca:	60fb      	str	r3, [r7, #12]
            newOffset = MAX(newOffset, initialSwipeOffset - maxSwipeItems * itemSize);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f6d8:	4619      	mov	r1, r3
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800f6e0:	fb03 f301 	mul.w	r3, r3, r1
 800f6e4:	1ad2      	subs	r2, r2, r3
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	bfb8      	it	lt
 800f6ec:	4613      	movlt	r3, r2
 800f6ee:	60fb      	str	r3, [r7, #12]
        }
        newOffset = keepOffsetInsideLimits(newOffset, 0);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	33c0      	adds	r3, #192	; 0xc0
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	68f9      	ldr	r1, [r7, #12]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	4798      	blx	r3
 800f700:	4603      	mov	r3, r0
 800f702:	60fb      	str	r3, [r7, #12]
        steps = MIN(steps, defaultAnimationSteps);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800f70a:	461a      	mov	r2, r3
 800f70c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f710:	4293      	cmp	r3, r2
 800f712:	bfa8      	it	ge
 800f714:	4613      	movge	r3, r2
 800f716:	b21b      	sxth	r3, r3
 800f718:	827b      	strh	r3, [r7, #18]
        animateToPosition(newOffset, steps);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	33c8      	adds	r3, #200	; 0xc8
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	68f9      	ldr	r1, [r7, #12]
 800f724:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	4798      	blx	r3
    }
}
 800f72c:	bf00      	nop
 800f72e:	371c      	adds	r7, #28
 800f730:	46bd      	mov	sp, r7
 800f732:	bd90      	pop	{r4, r7, pc}
 800f734:	66666667 	.word	0x66666667

0800f738 <_ZN8touchgfx10ScrollBase15handleTickEventEv>:

void ScrollBase::handleTickEvent()
{
 800f738:	b5b0      	push	{r4, r5, r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
    if (currentAnimationState == ANIMATING_GESTURE)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800f746:	2b01      	cmp	r3, #1
 800f748:	d179      	bne.n	800f83e <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x106>
    {
        gestureStep++;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f750:	1c5a      	adds	r2, r3, #1
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        int newPosition = gestureStart + easingEquation(gestureStep, 0, gestureEnd - gestureStart, gestureStepsTotal);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f76a:	b298      	uxth	r0, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f772:	b29a      	uxth	r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	1ad3      	subs	r3, r2, r3
 800f77e:	b29b      	uxth	r3, r3
 800f780:	b21a      	sxth	r2, r3
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f788:	b29b      	uxth	r3, r3
 800f78a:	2100      	movs	r1, #0
 800f78c:	47a8      	blx	r5
 800f78e:	4603      	mov	r3, r0
 800f790:	4423      	add	r3, r4
 800f792:	60fb      	str	r3, [r7, #12]
        setOffset(newPosition);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	33b4      	adds	r3, #180	; 0xb4
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	68f9      	ldr	r1, [r7, #12]
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	4798      	blx	r3
        if (gestureStep > gestureStepsTotal)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	dd45      	ble.n	800f83e <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x106>
        {
            currentAnimationState = NO_ANIMATION;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            gestureStep = 0;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
            Application::getInstance()->unregisterTimerWidget(this);
 800f7c2:	f00c ffdf 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	4610      	mov	r0, r2
 800f7ce:	f00d f80f 	bl	801c7f0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
            setOffset(getNormalizedOffset(getOffset()));
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	33b4      	adds	r3, #180	; 0xb4
 800f7d8:	681c      	ldr	r4, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	33b8      	adds	r3, #184	; 0xb8
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	4798      	blx	r3
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 f864 	bl	800f8b8 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	47a0      	blx	r4

            //Item has settled, call back
            if (animationEndedCallback && animationEndedCallback->isValid())
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d00f      	beq.n	800f822 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0xea>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	330c      	adds	r3, #12
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4610      	mov	r0, r2
 800f816:	4798      	blx	r3
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d001      	beq.n	800f822 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0xea>
 800f81e:	2301      	movs	r3, #1
 800f820:	e000      	b.n	800f824 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0xec>
 800f822:	2300      	movs	r3, #0
 800f824:	2b00      	cmp	r3, #0
 800f826:	d00a      	beq.n	800f83e <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x106>
            {
                animationEndedCallback->execute();
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	3308      	adds	r3, #8
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4610      	mov	r0, r2
 800f83c:	4798      	blx	r3
            }
        }
    }
}
 800f83e:	bf00      	nop
 800f840:	3710      	adds	r7, #16
 800f842:	46bd      	mov	sp, r7
 800f844:	bdb0      	pop	{r4, r5, r7, pc}

0800f846 <_ZN8touchgfx10ScrollBase11itemChangedEi>:

void ScrollBase::itemChanged(int itemIndex)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b082      	sub	sp, #8
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]
 800f84e:	6039      	str	r1, [r7, #0]
    list.itemChanged(itemIndex);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	332c      	adds	r3, #44	; 0x2c
 800f854:	683a      	ldr	r2, [r7, #0]
 800f856:	b212      	sxth	r2, r2
 800f858:	4611      	mov	r1, r2
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7ff fbde 	bl	800f01c <_ZN8touchgfx12DrawableList11itemChangedEs>
}
 800f860:	bf00      	nop
 800f862:	3708      	adds	r7, #8
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <_ZN8touchgfx10ScrollBase9setOffsetEl>:

void ScrollBase::setOffset(int32_t offset)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
    list.setOffset(offset + distanceBeforeAlignedItem);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 800f87e:	4619      	mov	r1, r3
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	440b      	add	r3, r1
 800f884:	4619      	mov	r1, r3
 800f886:	4610      	mov	r0, r2
 800f888:	f7ff f8a0 	bl	800e9cc <_ZN8touchgfx12DrawableList9setOffsetEl>
}
 800f88c:	bf00      	nop
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <_ZNK8touchgfx10ScrollBase9getOffsetEv>:

int32_t ScrollBase::getOffset() const
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
    return list.getOffset() - distanceBeforeAlignedItem;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	332c      	adds	r3, #44	; 0x2c
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7ff faaa 	bl	800edfa <_ZNK8touchgfx12DrawableList9getOffsetEv>
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 800f8ae:	1ad3      	subs	r3, r2, r3
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>:

int ScrollBase::getNormalizedOffset(int offset) const
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
    int16_t numItems = getNumberOfItems();
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	33a4      	adds	r3, #164	; 0xa4
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	4798      	blx	r3
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	81fb      	strh	r3, [r7, #14]
    if (numItems == 0 || itemSize == 0)
 800f8d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d004      	beq.n	800f8e4 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x2c>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d101      	bne.n	800f8e8 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x30>
    {
        return offset;
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	e018      	b.n	800f91a <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x62>
    }
    int32_t listSize = numItems * itemSize;
 800f8e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800f8f2:	fb02 f303 	mul.w	r3, r2, r3
 800f8f6:	60bb      	str	r3, [r7, #8]
    offset %= listSize;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	68ba      	ldr	r2, [r7, #8]
 800f8fc:	fb93 f2f2 	sdiv	r2, r3, r2
 800f900:	68b9      	ldr	r1, [r7, #8]
 800f902:	fb01 f202 	mul.w	r2, r1, r2
 800f906:	1a9b      	subs	r3, r3, r2
 800f908:	603b      	str	r3, [r7, #0]
    if (offset > 0)
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	dd03      	ble.n	800f918 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x60>
    {
        offset -= listSize;
 800f910:	683a      	ldr	r2, [r7, #0]
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	1ad3      	subs	r3, r2, r3
 800f916:	603b      	str	r3, [r7, #0]
    }
    return offset;
 800f918:	683b      	ldr	r3, [r7, #0]
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3710      	adds	r7, #16
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}

0800f922 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl>:

int32_t ScrollBase::getNearestAlignedOffset(int32_t offset) const
{
 800f922:	b580      	push	{r7, lr}
 800f924:	b082      	sub	sp, #8
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
 800f92a:	6039      	str	r1, [r7, #0]
    if (itemSize == 0)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800f932:	2b00      	cmp	r3, #0
 800f934:	d101      	bne.n	800f93a <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x18>
    {
        return offset;
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	e055      	b.n	800f9e6 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0xc4>
    }
    if (getCircular())
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	3394      	adds	r3, #148	; 0x94
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	4798      	blx	r3
 800f946:	4603      	mov	r3, r0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d02e      	beq.n	800f9aa <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x88>
    {
        if (offset < 0)
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	da15      	bge.n	800f97e <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x5c>
        {
            return (((offset - (itemSize / 2)) / itemSize) * itemSize);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800f958:	2b00      	cmp	r3, #0
 800f95a:	da00      	bge.n	800f95e <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x3c>
 800f95c:	3301      	adds	r3, #1
 800f95e:	105b      	asrs	r3, r3, #1
 800f960:	b21b      	sxth	r3, r3
 800f962:	461a      	mov	r2, r3
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	1a9b      	subs	r3, r3, r2
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800f96e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800f978:	fb02 f303 	mul.w	r3, r2, r3
 800f97c:	e033      	b.n	800f9e6 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0xc4>
        }
        return ((offset + (itemSize / 2)) / itemSize) * itemSize;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800f984:	2b00      	cmp	r3, #0
 800f986:	da00      	bge.n	800f98a <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x68>
 800f988:	3301      	adds	r3, #1
 800f98a:	105b      	asrs	r3, r3, #1
 800f98c:	b21b      	sxth	r3, r3
 800f98e:	461a      	mov	r2, r3
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	4413      	add	r3, r2
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800f99a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800f9a4:	fb02 f303 	mul.w	r3, r2, r3
 800f9a8:	e01d      	b.n	800f9e6 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0xc4>
    }
    offset = keepOffsetInsideLimits(offset, 0);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	33c0      	adds	r3, #192	; 0xc0
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	6839      	ldr	r1, [r7, #0]
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	4798      	blx	r3
 800f9ba:	6038      	str	r0, [r7, #0]
    return ((offset - (itemSize / 2)) / itemSize) * itemSize;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	da00      	bge.n	800f9c8 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0xa6>
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	105b      	asrs	r3, r3, #1
 800f9ca:	b21b      	sxth	r3, r3
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	1a9b      	subs	r3, r3, r2
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800f9d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9dc:	687a      	ldr	r2, [r7, #4]
 800f9de:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800f9e2:	fb02 f303 	mul.w	r3, r2, r3
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3708      	adds	r7, #8
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}

0800f9ee <_ZN8touchgfx10ScrollBase17animateToPositionEls>:

void ScrollBase::animateToPosition(int32_t position, int16_t steps)
{
 800f9ee:	b580      	push	{r7, lr}
 800f9f0:	b084      	sub	sp, #16
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	60f8      	str	r0, [r7, #12]
 800f9f6:	60b9      	str	r1, [r7, #8]
 800f9f8:	4613      	mov	r3, r2
 800f9fa:	80fb      	strh	r3, [r7, #6]
    position = getNearestAlignedOffset(position);
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	33c4      	adds	r3, #196	; 0xc4
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	68b9      	ldr	r1, [r7, #8]
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	4798      	blx	r3
 800fa0a:	60b8      	str	r0, [r7, #8]
    if (steps < 0)
 800fa0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	da03      	bge.n	800fa1c <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x2e>
    {
        steps = defaultAnimationSteps;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800fa1a:	80fb      	strh	r3, [r7, #6]
    }
    if (steps < 1)
 800fa1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	dc07      	bgt.n	800fa34 <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x46>
    {
        setOffset(position);
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	33b4      	adds	r3, #180	; 0xb4
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	68b9      	ldr	r1, [r7, #8]
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	4798      	blx	r3
        {
            Application::getInstance()->registerTimerWidget(this);
            currentAnimationState = ANIMATING_GESTURE;
        }
    }
}
 800fa32:	e027      	b.n	800fa84 <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x96>
        gestureStart = getOffset();
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	33b8      	adds	r3, #184	; 0xb8
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	4798      	blx	r3
 800fa40:	4602      	mov	r2, r0
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        gestureEnd = position;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	68ba      	ldr	r2, [r7, #8]
 800fa4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        gestureStep = 0;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2200      	movs	r2, #0
 800fa54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        gestureStepsTotal = steps;
 800fa58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        if (currentAnimationState != ANIMATING_GESTURE)
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800fa68:	2b01      	cmp	r3, #1
 800fa6a:	d00b      	beq.n	800fa84 <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x96>
            Application::getInstance()->registerTimerWidget(this);
 800fa6c:	f00c fe8a 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 800fa70:	4602      	mov	r2, r0
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	4619      	mov	r1, r3
 800fa76:	4610      	mov	r0, r2
 800fa78:	f00c fe8a 	bl	801c790 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
            currentAnimationState = ANIMATING_GESTURE;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 800fa84:	bf00      	nop
 800fa86:	3710      	adds	r7, #16
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <_ZN8touchgfx10ScrollBaseD1Ev>:
    virtual ~ScrollBase()
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b082      	sub	sp, #8
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
    {
 800fa94:	4a08      	ldr	r2, [pc, #32]	; (800fab8 <_ZN8touchgfx10ScrollBaseD1Ev+0x2c>)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	601a      	str	r2, [r3, #0]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	332c      	adds	r3, #44	; 0x2c
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fe fdd4 	bl	800e64c <_ZN8touchgfx12DrawableListD1Ev>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fd ffce 	bl	800da48 <_ZN8touchgfx9ContainerD1Ev>
    }
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4618      	mov	r0, r3
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	080215e0 	.word	0x080215e0

0800fabc <_ZN8touchgfx10ScrollBaseD0Ev>:
    virtual ~ScrollBase()
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
    }
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f7ff ffe1 	bl	800fa8c <_ZN8touchgfx10ScrollBaseD1Ev>
 800faca:	21bc      	movs	r1, #188	; 0xbc
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f010 f992 	bl	801fdf6 <_ZdlPvj>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4618      	mov	r0, r3
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}

0800fadc <_ZN8touchgfx10ScrollListD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ScrollList()
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
    {
 800fae4:	4a05      	ldr	r2, [pc, #20]	; (800fafc <_ZN8touchgfx10ScrollListD1Ev+0x20>)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	601a      	str	r2, [r3, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4618      	mov	r0, r3
 800faee:	f7ff ffcd 	bl	800fa8c <_ZN8touchgfx10ScrollBaseD1Ev>
    }
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4618      	mov	r0, r3
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	080216b4 	.word	0x080216b4

0800fb00 <_ZN8touchgfx10ScrollListD0Ev>:
    virtual ~ScrollList()
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
    }
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7ff ffe7 	bl	800fadc <_ZN8touchgfx10ScrollListD1Ev>
 800fb0e:	21c4      	movs	r1, #196	; 0xc4
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f010 f970 	bl	801fdf6 <_ZdlPvj>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <_ZN8touchgfx10ScrollListC1Ev>:

#include <touchgfx/containers/scrollers/ScrollList.hpp>

namespace touchgfx
{
ScrollList::ScrollList()
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
    : ScrollBase(),
      paddingAfterLastItem(0),
      snapping(false),
      windowSize(1)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7ff face 	bl	800f0cc <_ZN8touchgfx10ScrollBaseC1Ev>
 800fb30:	4a09      	ldr	r2, [pc, #36]	; (800fb58 <_ZN8touchgfx10ScrollListC1Ev+0x38>)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	601a      	str	r2, [r3, #0]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2200      	movs	r2, #0
 800fb42:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2201      	movs	r2, #1
 800fb4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
}
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	4618      	mov	r0, r3
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	080216b4 	.word	0x080216b4

0800fb5c <_ZN8touchgfx10ScrollList12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>:

void ScrollList::setDrawables(DrawableListItemsInterface& drawableListItems, GenericCallback<DrawableListItemsInterface*, int16_t, int16_t>& updateDrawableCallback)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	60f8      	str	r0, [r7, #12]
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	607a      	str	r2, [r7, #4]
    stopAnimation();
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7ff fcc4 	bl	800f4f8 <_ZN8touchgfx10ScrollBase13stopAnimationEv>
    numberOfDrawables = drawableListItems.getNumberOfDrawables();
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	330c      	adds	r3, #12
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	68b8      	ldr	r0, [r7, #8]
 800fb7a:	4798      	blx	r3
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	461a      	mov	r2, r3
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
    list.setDrawables(drawableListItems, 0, updateDrawableCallback);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	68b9      	ldr	r1, [r7, #8]
 800fb92:	f7fe fe45 	bl	800e820 <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>
    setOffset(0);
 800fb96:	68fa      	ldr	r2, [r7, #12]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	33b4      	adds	r3, #180	; 0xb4
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	2100      	movs	r1, #0
 800fba2:	4610      	mov	r0, r2
 800fba4:	4798      	blx	r3
}
 800fba6:	bf00      	nop
 800fba8:	3710      	adds	r7, #16
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <_ZN8touchgfx10ScrollList10setPaddingEss>:
    windowSize = MAX(1, items);
    animateToPosition(keepOffsetInsideLimits(getOffset(), 0));
}

void ScrollList::setPadding(int16_t paddingBefore, int16_t paddingAfter)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b084      	sub	sp, #16
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	807b      	strh	r3, [r7, #2]
 800fbba:	4613      	mov	r3, r2
 800fbbc:	803b      	strh	r3, [r7, #0]
    int16_t currentOffset = getOffset();
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	33b8      	adds	r3, #184	; 0xb8
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4610      	mov	r0, r2
 800fbca:	4798      	blx	r3
 800fbcc:	4603      	mov	r3, r0
 800fbce:	81fb      	strh	r3, [r7, #14]
    distanceBeforeAlignedItem = paddingBefore;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	887a      	ldrh	r2, [r7, #2]
 800fbd4:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    paddingAfterLastItem = paddingAfter;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	883a      	ldrh	r2, [r7, #0]
 800fbdc:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
    setOffset(currentOffset);
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	33b4      	adds	r3, #180	; 0xb4
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800fbee:	4610      	mov	r0, r2
 800fbf0:	4798      	blx	r3
    list.refreshDrawables();
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	332c      	adds	r3, #44	; 0x2c
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7ff f981 	bl	800eefe <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
}
 800fbfc:	bf00      	nop
 800fbfe:	3710      	adds	r7, #16
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <_ZN8touchgfx10ScrollList11setSnappingEb>:
{
    return paddingAfterLastItem;
}

void ScrollList::setSnapping(bool snap)
{
 800fc04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	70fb      	strb	r3, [r7, #3]
    snapping = snap;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	78fa      	ldrb	r2, [r7, #3]
 800fc14:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    if (snapping)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d017      	beq.n	800fc52 <_ZN8touchgfx10ScrollList11setSnappingEb+0x4e>
    {
        setOffset(getNearestAlignedOffset(getOffset()));
 800fc22:	687e      	ldr	r6, [r7, #4]
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	33b4      	adds	r3, #180	; 0xb4
 800fc2a:	681c      	ldr	r4, [r3, #0]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	33c4      	adds	r3, #196	; 0xc4
 800fc32:	681d      	ldr	r5, [r3, #0]
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	33b8      	adds	r3, #184	; 0xb8
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	4610      	mov	r0, r2
 800fc40:	4798      	blx	r3
 800fc42:	4603      	mov	r3, r0
 800fc44:	4619      	mov	r1, r3
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	47a8      	blx	r5
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	4630      	mov	r0, r6
 800fc50:	47a0      	blx	r4
    }
}
 800fc52:	bf00      	nop
 800fc54:	370c      	adds	r7, #12
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc5a <_ZN8touchgfx10ScrollList18getPositionForItemEs>:
{
    return snapping;
}

int32_t ScrollList::getPositionForItem(int16_t itemIndex)
{
 800fc5a:	b590      	push	{r4, r7, lr}
 800fc5c:	b08f      	sub	sp, #60	; 0x3c
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
 800fc62:	460b      	mov	r3, r1
 800fc64:	807b      	strh	r3, [r7, #2]
    int32_t currentOffset = getNormalizedOffset(getOffset());
 800fc66:	687c      	ldr	r4, [r7, #4]
 800fc68:	687a      	ldr	r2, [r7, #4]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	33b8      	adds	r3, #184	; 0xb8
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4610      	mov	r0, r2
 800fc74:	4798      	blx	r3
 800fc76:	4603      	mov	r3, r0
 800fc78:	4619      	mov	r1, r3
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	f7ff fe1c 	bl	800f8b8 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 800fc80:	6278      	str	r0, [r7, #36]	; 0x24
    if (itemIndex < 0 || itemIndex >= list.getNumberOfItems())
 800fc82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	db0a      	blt.n	800fca0 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x46>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	332c      	adds	r3, #44	; 0x2c
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fe fe20 	bl	800e8d4 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>
 800fc94:	4603      	mov	r3, r0
 800fc96:	461a      	mov	r2, r3
 800fc98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	db01      	blt.n	800fca4 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x4a>
 800fca0:	2301      	movs	r3, #1
 800fca2:	e000      	b.n	800fca6 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x4c>
 800fca4:	2300      	movs	r3, #0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d001      	beq.n	800fcae <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x54>
    {
        return currentOffset;
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcac:	e0fb      	b.n	800fea6 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x24c>
    }
    int32_t itemOffset = -itemIndex * itemSize;
 800fcae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fcb2:	425b      	negs	r3, r3
 800fcb4:	687a      	ldr	r2, [r7, #4]
 800fcb6:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800fcba:	fb02 f303 	mul.w	r3, r2, r3
 800fcbe:	623b      	str	r3, [r7, #32]
    // Get the visible size
    int16_t widgetSize = getHorizontal() ? getWidth() : getHeight();
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	338c      	adds	r3, #140	; 0x8c
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4610      	mov	r0, r2
 800fccc:	4798      	blx	r3
 800fcce:	4603      	mov	r3, r0
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d005      	beq.n	800fce0 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x86>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7fe f997 	bl	800e00a <_ZNK8touchgfx8Drawable8getWidthEv>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	e004      	b.n	800fcea <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x90>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7fe f99e 	bl	800e024 <_ZNK8touchgfx8Drawable9getHeightEv>
 800fce8:	4603      	mov	r3, r0
 800fcea:	83fb      	strh	r3, [r7, #30]
    int16_t activeWidgetSize = widgetSize - (distanceBeforeAlignedItem + paddingAfterLastItem);
 800fcec:	8bfa      	ldrh	r2, [r7, #30]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 800fcf4:	b299      	uxth	r1, r3
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	440b      	add	r3, r1
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	1ad3      	subs	r3, r2, r3
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	83bb      	strh	r3, [r7, #28]
    if (list.getCircular())
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	332c      	adds	r3, #44	; 0x2c
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7fe fd60 	bl	800e7d2 <_ZNK8touchgfx12DrawableList11getCircularEv>
 800fd12:	4603      	mov	r3, r0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	f000 8091 	beq.w	800fe3c <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x1e2>
    {
        int32_t offset = currentOffset;
 800fd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1c:	637b      	str	r3, [r7, #52]	; 0x34
        // Important this is a do-while of visibleSize < itemSize in which case we need to check at least one time
        do
        {
            int16_t i = (-getNormalizedOffset(offset)) / itemSize; // Item index of first
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7ff fdc8 	bl	800f8b8 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	425b      	negs	r3, r3
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800fd32:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd36:	833b      	strh	r3, [r7, #24]
            if (itemIndex == i)
 800fd38:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fd3c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d101      	bne.n	800fd48 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xee>
            {
                return currentOffset;
 800fd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd46:	e0ae      	b.n	800fea6 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x24c>
            }
            offset -= itemSize;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800fd4e:	461a      	mov	r2, r3
 800fd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd52:	1a9b      	subs	r3, r3, r2
 800fd54:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while (offset >= currentOffset - (activeWidgetSize - itemSize));
 800fd56:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800fd60:	1a9b      	subs	r3, r3, r2
 800fd62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd64:	1ad3      	subs	r3, r2, r3
 800fd66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	db00      	blt.n	800fd6e <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x114>
        do
 800fd6c:	e7d7      	b.n	800fd1e <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xc4>
        int32_t allItemsSize = list.getNumberOfItems() * itemSize;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	332c      	adds	r3, #44	; 0x2c
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fe fdae 	bl	800e8d4 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800fd82:	fb03 f302 	mul.w	r3, r3, r2
 800fd86:	617b      	str	r3, [r7, #20]
        // Either scroll left from the first item or right from the last item. Find out which is closest
        int32_t leftScrollDistance = itemOffset - currentOffset;
 800fd88:	6a3a      	ldr	r2, [r7, #32]
 800fd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8c:	1ad3      	subs	r3, r2, r3
 800fd8e:	633b      	str	r3, [r7, #48]	; 0x30
        int32_t leftScrollDistance2 = (itemOffset + allItemsSize) - currentOffset;
 800fd90:	6a3a      	ldr	r2, [r7, #32]
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	441a      	add	r2, r3
 800fd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	613b      	str	r3, [r7, #16]
        int32_t rightItemOffset = getNormalizedOffset(currentOffset - (activeWidgetSize - itemSize));
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800fda8:	1a9b      	subs	r3, r3, r2
 800fdaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdac:	1ad3      	subs	r3, r2, r3
 800fdae:	4619      	mov	r1, r3
 800fdb0:	f7ff fd82 	bl	800f8b8 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 800fdb4:	60f8      	str	r0, [r7, #12]
        int32_t rightScrollDistance = rightItemOffset - itemOffset;
 800fdb6:	68fa      	ldr	r2, [r7, #12]
 800fdb8:	6a3b      	ldr	r3, [r7, #32]
 800fdba:	1ad3      	subs	r3, r2, r3
 800fdbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t rightScrollDistance2 = rightItemOffset - (itemOffset - allItemsSize);
 800fdbe:	6a3a      	ldr	r2, [r7, #32]
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	1ad3      	subs	r3, r2, r3
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	1ad3      	subs	r3, r2, r3
 800fdc8:	60bb      	str	r3, [r7, #8]
        if (abs(leftScrollDistance2) < abs(leftScrollDistance))
 800fdca:	6938      	ldr	r0, [r7, #16]
 800fdcc:	f000 fa91 	bl	80102f2 <_ZN8touchgfx3absIlEET_S1_>
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdd4:	f000 fa8d 	bl	80102f2 <_ZN8touchgfx3absIlEET_S1_>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	429c      	cmp	r4, r3
 800fddc:	bfb4      	ite	lt
 800fdde:	2301      	movlt	r3, #1
 800fde0:	2300      	movge	r3, #0
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d001      	beq.n	800fdec <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x192>
        {
            leftScrollDistance = leftScrollDistance2;
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	633b      	str	r3, [r7, #48]	; 0x30
        }
        if (abs(rightScrollDistance2) < abs(rightScrollDistance))
 800fdec:	68b8      	ldr	r0, [r7, #8]
 800fdee:	f000 fa80 	bl	80102f2 <_ZN8touchgfx3absIlEET_S1_>
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdf6:	f000 fa7c 	bl	80102f2 <_ZN8touchgfx3absIlEET_S1_>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	429c      	cmp	r4, r3
 800fdfe:	bfb4      	ite	lt
 800fe00:	2301      	movlt	r3, #1
 800fe02:	2300      	movge	r3, #0
 800fe04:	b2db      	uxtb	r3, r3
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d001      	beq.n	800fe0e <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x1b4>
        {
            rightScrollDistance = rightScrollDistance2;
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        if (abs(rightScrollDistance) < abs(leftScrollDistance))
 800fe0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe10:	f000 fa6f 	bl	80102f2 <_ZN8touchgfx3absIlEET_S1_>
 800fe14:	4604      	mov	r4, r0
 800fe16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe18:	f000 fa6b 	bl	80102f2 <_ZN8touchgfx3absIlEET_S1_>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	429c      	cmp	r4, r3
 800fe20:	bfb4      	ite	lt
 800fe22:	2301      	movlt	r3, #1
 800fe24:	2300      	movge	r3, #0
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d003      	beq.n	800fe34 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x1da>
        {
            return currentOffset - rightScrollDistance;
 800fe2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe30:	1ad3      	subs	r3, r2, r3
 800fe32:	e038      	b.n	800fea6 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x24c>
        }
        return currentOffset + leftScrollDistance;
 800fe34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe38:	4413      	add	r3, r2
 800fe3a:	e034      	b.n	800fea6 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x24c>
    }
    else
    {
        if (itemOffset > currentOffset)                      // First item on screen is higher than the itemIndex. Scroll itemIndex to top position
 800fe3c:	6a3a      	ldr	r2, [r7, #32]
 800fe3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe40:	429a      	cmp	r2, r3
 800fe42:	dd01      	ble.n	800fe48 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x1ee>
        {
            return itemOffset;
 800fe44:	6a3b      	ldr	r3, [r7, #32]
 800fe46:	e02e      	b.n	800fea6 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x24c>
        }
        int16_t numberOfVisibleItems = activeWidgetSize / itemSize;
 800fe48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800fe52:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe56:	837b      	strh	r3, [r7, #26]
        int32_t itemOffsetAtEnd = itemOffset;
 800fe58:	6a3b      	ldr	r3, [r7, #32]
 800fe5a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (numberOfVisibleItems > 0)
 800fe5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	dd19      	ble.n	800fe98 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x23e>
        {
            if (snapping)
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d00b      	beq.n	800fe86 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x22c>
            {
                itemOffsetAtEnd = itemOffset + (numberOfVisibleItems - 1) * itemSize;
 800fe6e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fe72:	3b01      	subs	r3, #1
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800fe7a:	fb02 f303 	mul.w	r3, r2, r3
 800fe7e:	6a3a      	ldr	r2, [r7, #32]
 800fe80:	4413      	add	r3, r2
 800fe82:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe84:	e008      	b.n	800fe98 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x23e>
            }
            else
            {
                itemOffsetAtEnd = itemOffset + activeWidgetSize - itemSize;
 800fe86:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800fe8a:	6a3b      	ldr	r3, [r7, #32]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800fe94:	1a9b      	subs	r3, r3, r2
 800fe96:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
        if (itemOffsetAtEnd < currentOffset)
 800fe98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	da01      	bge.n	800fea4 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x24a>
        {
            return itemOffsetAtEnd;
 800fea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea2:	e000      	b.n	800fea6 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x24c>
        }
    }
    return currentOffset;
 800fea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	373c      	adds	r7, #60	; 0x3c
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd90      	pop	{r4, r7, pc}

0800feae <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE>:

void ScrollList::handleClickEvent(const ClickEvent& evt)
{
 800feae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feb0:	b087      	sub	sp, #28
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
 800feb6:	6039      	str	r1, [r7, #0]
    ScrollBase::handleClickEvent(evt);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6839      	ldr	r1, [r7, #0]
 800febc:	4618      	mov	r0, r3
 800febe:	f7fd fd5a 	bl	800d976 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>
    if (evt.getType() == ClickEvent::PRESSED)
 800fec2:	6838      	ldr	r0, [r7, #0]
 800fec4:	f7fe faa4 	bl	800e410 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800fec8:	4603      	mov	r3, r0
 800feca:	2b00      	cmp	r3, #0
 800fecc:	bf0c      	ite	eq
 800fece:	2301      	moveq	r3, #1
 800fed0:	2300      	movne	r3, #0
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f000 80bc 	beq.w	8010052 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a4>
    {
        xClick = evt.getX();
 800feda:	6838      	ldr	r0, [r7, #0]
 800fedc:	f7fe fa7e 	bl	800e3dc <_ZNK8touchgfx10ClickEvent4getXEv>
 800fee0:	4603      	mov	r3, r0
 800fee2:	461a      	mov	r2, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
        yClick = evt.getY();
 800feea:	6838      	ldr	r0, [r7, #0]
 800feec:	f7fe fa83 	bl	800e3f6 <_ZNK8touchgfx10ClickEvent4getYEv>
 800fef0:	4603      	mov	r3, r0
 800fef2:	461a      	mov	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
        initialSwipeOffset = getOffset();
 800fefa:	687a      	ldr	r2, [r7, #4]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	33b8      	adds	r3, #184	; 0xb8
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	4610      	mov	r0, r2
 800ff06:	4798      	blx	r3
 800ff08:	4602      	mov	r2, r0
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        setOffset(getNearestAlignedOffset(initialSwipeOffset));
 800ff10:	687d      	ldr	r5, [r7, #4]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	33b4      	adds	r3, #180	; 0xb4
 800ff18:	681c      	ldr	r4, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	33c4      	adds	r3, #196	; 0xc4
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 800ff28:	4611      	mov	r1, r2
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	4798      	blx	r3
 800ff2e:	4603      	mov	r3, r0
 800ff30:	4619      	mov	r1, r3
 800ff32:	4628      	mov	r0, r5
 800ff34:	47a0      	blx	r4
        int16_t click = (getHorizontal() ? xClick : yClick);
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	338c      	adds	r3, #140	; 0x8c
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4610      	mov	r0, r2
 800ff42:	4798      	blx	r3
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d003      	beq.n	800ff52 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0xa4>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 800ff50:	e002      	b.n	800ff58 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0xaa>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 800ff58:	81bb      	strh	r3, [r7, #12]
        int16_t offset = -getNearestAlignedOffset(getOffset() - click);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	33c4      	adds	r3, #196	; 0xc4
 800ff60:	681c      	ldr	r4, [r3, #0]
 800ff62:	687a      	ldr	r2, [r7, #4]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	33b8      	adds	r3, #184	; 0xb8
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4610      	mov	r0, r2
 800ff6e:	4798      	blx	r3
 800ff70:	4602      	mov	r2, r0
 800ff72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ff76:	1ad3      	subs	r3, r2, r3
 800ff78:	4619      	mov	r1, r3
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	47a0      	blx	r4
 800ff7e:	4603      	mov	r3, r0
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	425b      	negs	r3, r3
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	82fb      	strh	r3, [r7, #22]
        int16_t listSize = getNumberOfItems() * itemSize;
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	33a4      	adds	r3, #164	; 0xa4
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4610      	mov	r0, r2
 800ff94:	4798      	blx	r3
 800ff96:	4603      	mov	r3, r0
 800ff98:	b29a      	uxth	r2, r3
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	fb12 f303 	smulbb	r3, r2, r3
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	817b      	strh	r3, [r7, #10]
        if (getCircular())
 800ffaa:	687a      	ldr	r2, [r7, #4]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	3394      	adds	r3, #148	; 0x94
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4610      	mov	r0, r2
 800ffb6:	4798      	blx	r3
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d00e      	beq.n	800ffdc <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x12e>
        {
            offset += listSize;
 800ffbe:	8afa      	ldrh	r2, [r7, #22]
 800ffc0:	897b      	ldrh	r3, [r7, #10]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	82fb      	strh	r3, [r7, #22]
            offset %= listSize;
 800ffc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ffcc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ffd0:	fb93 f1f2 	sdiv	r1, r3, r2
 800ffd4:	fb02 f201 	mul.w	r2, r2, r1
 800ffd8:	1a9b      	subs	r3, r3, r2
 800ffda:	82fb      	strh	r3, [r7, #22]
        }
        if (offset >= 0 && offset < listSize)
 800ffdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f2c0 810a 	blt.w	80101fa <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x34c>
 800ffe6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ffea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	f280 8103 	bge.w	80101fa <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x34c>
        {
            int16_t item = offset / itemSize;
 800fff4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 800fffe:	fb93 f3f2 	sdiv	r3, r3, r2
 8010002:	813b      	strh	r3, [r7, #8]
            if (itemPressedCallback && itemPressedCallback->isValid())
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801000a:	2b00      	cmp	r3, #0
 801000c:	d00f      	beq.n	801002e <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x180>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	330c      	adds	r3, #12
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4610      	mov	r0, r2
 8010022:	4798      	blx	r3
 8010024:	4603      	mov	r3, r0
 8010026:	2b00      	cmp	r3, #0
 8010028:	d001      	beq.n	801002e <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x180>
 801002a:	2301      	movs	r3, #1
 801002c:	e000      	b.n	8010030 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x182>
 801002e:	2300      	movs	r3, #0
 8010030:	2b00      	cmp	r3, #0
 8010032:	f000 80e2 	beq.w	80101fa <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x34c>
            {
                itemPressedCallback->execute(item);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	3308      	adds	r3, #8
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 801004c:	4610      	mov	r0, r2
 801004e:	4798      	blx	r3
        {
            // click + drag + release. Find best Y to scroll to
            animateToPosition(getNearestAlignedOffset(getOffset()));
        }
    }
}
 8010050:	e0d3      	b.n	80101fa <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x34c>
    else if (evt.getType() == ClickEvent::RELEASED)
 8010052:	6838      	ldr	r0, [r7, #0]
 8010054:	f7fe f9dc 	bl	800e410 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8010058:	4603      	mov	r3, r0
 801005a:	2b01      	cmp	r3, #1
 801005c:	bf0c      	ite	eq
 801005e:	2301      	moveq	r3, #1
 8010060:	2300      	movne	r3, #0
 8010062:	b2db      	uxtb	r3, r3
 8010064:	2b00      	cmp	r3, #0
 8010066:	f000 80c8 	beq.w	80101fa <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x34c>
        if (currentAnimationState == NO_ANIMATION)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8010070:	2b00      	cmp	r3, #0
 8010072:	f040 80a3 	bne.w	80101bc <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x30e>
            setOffset(getNearestAlignedOffset(getOffset()));
 8010076:	687e      	ldr	r6, [r7, #4]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	33b4      	adds	r3, #180	; 0xb4
 801007e:	681c      	ldr	r4, [r3, #0]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	33c4      	adds	r3, #196	; 0xc4
 8010086:	681d      	ldr	r5, [r3, #0]
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	33b8      	adds	r3, #184	; 0xb8
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	4610      	mov	r0, r2
 8010094:	4798      	blx	r3
 8010096:	4603      	mov	r3, r0
 8010098:	4619      	mov	r1, r3
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	47a8      	blx	r5
 801009e:	4603      	mov	r3, r0
 80100a0:	4619      	mov	r1, r3
 80100a2:	4630      	mov	r0, r6
 80100a4:	47a0      	blx	r4
            int16_t click = (getHorizontal() ? xClick : yClick);
 80100a6:	687a      	ldr	r2, [r7, #4]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	338c      	adds	r3, #140	; 0x8c
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4610      	mov	r0, r2
 80100b2:	4798      	blx	r3
 80100b4:	4603      	mov	r3, r0
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d003      	beq.n	80100c2 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x214>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 80100c0:	e002      	b.n	80100c8 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x21a>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80100c8:	827b      	strh	r3, [r7, #18]
            int16_t offset = -getNearestAlignedOffset(getOffset() - click);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	33c4      	adds	r3, #196	; 0xc4
 80100d0:	681c      	ldr	r4, [r3, #0]
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	33b8      	adds	r3, #184	; 0xb8
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4610      	mov	r0, r2
 80100de:	4798      	blx	r3
 80100e0:	4602      	mov	r2, r0
 80100e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	4619      	mov	r1, r3
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	47a0      	blx	r4
 80100ee:	4603      	mov	r3, r0
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	425b      	negs	r3, r3
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	82bb      	strh	r3, [r7, #20]
            int16_t listSize = getNumberOfItems() * itemSize;
 80100f8:	687a      	ldr	r2, [r7, #4]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	33a4      	adds	r3, #164	; 0xa4
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	4610      	mov	r0, r2
 8010104:	4798      	blx	r3
 8010106:	4603      	mov	r3, r0
 8010108:	b29a      	uxth	r2, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8010110:	b29b      	uxth	r3, r3
 8010112:	fb12 f303 	smulbb	r3, r2, r3
 8010116:	b29b      	uxth	r3, r3
 8010118:	823b      	strh	r3, [r7, #16]
            if (getCircular())
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	3394      	adds	r3, #148	; 0x94
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	4610      	mov	r0, r2
 8010126:	4798      	blx	r3
 8010128:	4603      	mov	r3, r0
 801012a:	2b00      	cmp	r3, #0
 801012c:	d00e      	beq.n	801014c <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x29e>
                offset += listSize;
 801012e:	8aba      	ldrh	r2, [r7, #20]
 8010130:	8a3b      	ldrh	r3, [r7, #16]
 8010132:	4413      	add	r3, r2
 8010134:	b29b      	uxth	r3, r3
 8010136:	82bb      	strh	r3, [r7, #20]
                offset %= listSize;
 8010138:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801013c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8010140:	fb93 f1f2 	sdiv	r1, r3, r2
 8010144:	fb02 f201 	mul.w	r2, r2, r1
 8010148:	1a9b      	subs	r3, r3, r2
 801014a:	82bb      	strh	r3, [r7, #20]
            if (offset >= 0 && offset < listSize)
 801014c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010150:	2b00      	cmp	r3, #0
 8010152:	db52      	blt.n	80101fa <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x34c>
 8010154:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8010158:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801015c:	429a      	cmp	r2, r3
 801015e:	da4c      	bge.n	80101fa <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x34c>
                int16_t item = offset / itemSize;
 8010160:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	f9b2 207c 	ldrsh.w	r2, [r2, #124]	; 0x7c
 801016a:	fb93 f3f2 	sdiv	r3, r3, r2
 801016e:	81fb      	strh	r3, [r7, #14]
                if (itemSelectedCallback && itemSelectedCallback->isValid())
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010176:	2b00      	cmp	r3, #0
 8010178:	d00f      	beq.n	801019a <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x2ec>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	330c      	adds	r3, #12
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4610      	mov	r0, r2
 801018e:	4798      	blx	r3
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d001      	beq.n	801019a <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x2ec>
 8010196:	2301      	movs	r3, #1
 8010198:	e000      	b.n	801019c <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x2ee>
 801019a:	2300      	movs	r3, #0
 801019c:	2b00      	cmp	r3, #0
 801019e:	d02c      	beq.n	80101fa <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x34c>
                    itemSelectedCallback->execute(item);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	3308      	adds	r3, #8
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80101b6:	4610      	mov	r0, r2
 80101b8:	4798      	blx	r3
}
 80101ba:	e01e      	b.n	80101fa <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x34c>
        else if (currentAnimationState == ANIMATING_DRAG)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80101c2:	2b02      	cmp	r3, #2
 80101c4:	d119      	bne.n	80101fa <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x34c>
            animateToPosition(getNearestAlignedOffset(getOffset()));
 80101c6:	687e      	ldr	r6, [r7, #4]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	33c8      	adds	r3, #200	; 0xc8
 80101ce:	681c      	ldr	r4, [r3, #0]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	33c4      	adds	r3, #196	; 0xc4
 80101d6:	681d      	ldr	r5, [r3, #0]
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	33b8      	adds	r3, #184	; 0xb8
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	4610      	mov	r0, r2
 80101e4:	4798      	blx	r3
 80101e6:	4603      	mov	r3, r0
 80101e8:	4619      	mov	r1, r3
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	47a8      	blx	r5
 80101ee:	4603      	mov	r3, r0
 80101f0:	f04f 32ff 	mov.w	r2, #4294967295
 80101f4:	4619      	mov	r1, r3
 80101f6:	4630      	mov	r0, r6
 80101f8:	47a0      	blx	r4
}
 80101fa:	bf00      	nop
 80101fc:	371c      	adds	r7, #28
 80101fe:	46bd      	mov	sp, r7
 8010200:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010202 <_ZNK8touchgfx10ScrollList23getNearestAlignedOffsetEl>:

int32_t ScrollList::getNearestAlignedOffset(int32_t offset) const
{
 8010202:	b580      	push	{r7, lr}
 8010204:	b082      	sub	sp, #8
 8010206:	af00      	add	r7, sp, #0
 8010208:	6078      	str	r0, [r7, #4]
 801020a:	6039      	str	r1, [r7, #0]
    if (snapping)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010212:	2b00      	cmp	r3, #0
 8010214:	d006      	beq.n	8010224 <_ZNK8touchgfx10ScrollList23getNearestAlignedOffsetEl+0x22>
    {
        // ScrollBase implementation will snap
        return ScrollBase::getNearestAlignedOffset(offset);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6839      	ldr	r1, [r7, #0]
 801021a:	4618      	mov	r0, r3
 801021c:	f7ff fb81 	bl	800f922 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl>
 8010220:	4603      	mov	r3, r0
 8010222:	e014      	b.n	801024e <_ZNK8touchgfx10ScrollList23getNearestAlignedOffsetEl+0x4c>
    }

    if (getCircular())
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	3394      	adds	r3, #148	; 0x94
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	4610      	mov	r0, r2
 8010230:	4798      	blx	r3
 8010232:	4603      	mov	r3, r0
 8010234:	2b00      	cmp	r3, #0
 8010236:	d001      	beq.n	801023c <_ZNK8touchgfx10ScrollList23getNearestAlignedOffsetEl+0x3a>
    {
        return offset;
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	e008      	b.n	801024e <_ZNK8touchgfx10ScrollList23getNearestAlignedOffsetEl+0x4c>
    }
    // non-circular
    // Only allow negative and 0 values
    return keepOffsetInsideLimits(offset, 0);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	33c0      	adds	r3, #192	; 0xc0
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	2200      	movs	r2, #0
 8010246:	6839      	ldr	r1, [r7, #0]
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	4798      	blx	r3
 801024c:	4603      	mov	r3, r0
}
 801024e:	4618      	mov	r0, r3
 8010250:	3708      	adds	r7, #8
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <_ZNK8touchgfx10ScrollList22keepOffsetInsideLimitsEls>:

int32_t ScrollList::keepOffsetInsideLimits(int32_t offset, int16_t overShoot) const
{
 8010256:	b590      	push	{r4, r7, lr}
 8010258:	b087      	sub	sp, #28
 801025a:	af00      	add	r7, sp, #0
 801025c:	60f8      	str	r0, [r7, #12]
 801025e:	60b9      	str	r1, [r7, #8]
 8010260:	4613      	mov	r3, r2
 8010262:	80fb      	strh	r3, [r7, #6]
    if (!getCircular())
 8010264:	68fa      	ldr	r2, [r7, #12]
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	3394      	adds	r3, #148	; 0x94
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	4610      	mov	r0, r2
 8010270:	4798      	blx	r3
 8010272:	4603      	mov	r3, r0
 8010274:	f083 0301 	eor.w	r3, r3, #1
 8010278:	b2db      	uxtb	r3, r3
 801027a:	2b00      	cmp	r3, #0
 801027c:	d034      	beq.n	80102e8 <_ZNK8touchgfx10ScrollList22keepOffsetInsideLimitsEls+0x92>
    {
        offset = MIN(offset, overShoot);
 801027e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010282:	461a      	mov	r2, r3
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	4293      	cmp	r3, r2
 8010288:	bfa8      	it	ge
 801028a:	4613      	movge	r3, r2
 801028c:	60bb      	str	r3, [r7, #8]
        int maxOffToTheStart = windowSize < getNumberOfItems() ? getNumberOfItems() - windowSize : 0;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8010294:	68fa      	ldr	r2, [r7, #12]
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	33a4      	adds	r3, #164	; 0xa4
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	4610      	mov	r0, r2
 80102a0:	4798      	blx	r3
 80102a2:	4603      	mov	r3, r0
 80102a4:	429c      	cmp	r4, r3
 80102a6:	da0d      	bge.n	80102c4 <_ZNK8touchgfx10ScrollList22keepOffsetInsideLimitsEls+0x6e>
 80102a8:	68fa      	ldr	r2, [r7, #12]
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	33a4      	adds	r3, #164	; 0xa4
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	4610      	mov	r0, r2
 80102b4:	4798      	blx	r3
 80102b6:	4603      	mov	r3, r0
 80102b8:	461a      	mov	r2, r3
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	e000      	b.n	80102c6 <_ZNK8touchgfx10ScrollList22keepOffsetInsideLimitsEls+0x70>
 80102c4:	2300      	movs	r3, #0
 80102c6:	617b      	str	r3, [r7, #20]
        offset = MAX(offset, -(itemSize * maxOffToTheStart) - overShoot);
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 80102ce:	461a      	mov	r2, r3
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	fb03 f302 	mul.w	r3, r3, r2
 80102d6:	425b      	negs	r3, r3
 80102d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80102dc:	1a9a      	subs	r2, r3, r2
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	4293      	cmp	r3, r2
 80102e2:	bfb8      	it	lt
 80102e4:	4613      	movlt	r3, r2
 80102e6:	60bb      	str	r3, [r7, #8]
    }
    return offset;
 80102e8:	68bb      	ldr	r3, [r7, #8]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	371c      	adds	r7, #28
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd90      	pop	{r4, r7, pc}

080102f2 <_ZN8touchgfx3absIlEET_S1_>:
T abs(T d)
 80102f2:	b480      	push	{r7}
 80102f4:	b083      	sub	sp, #12
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
    if (d < 0)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	da02      	bge.n	8010306 <_ZN8touchgfx3absIlEET_S1_+0x14>
        return -d;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	425b      	negs	r3, r3
 8010304:	e000      	b.n	8010308 <_ZN8touchgfx3absIlEET_S1_+0x16>
    return d;
 8010306:	687b      	ldr	r3, [r7, #4]
}
 8010308:	4618      	mov	r0, r3
 801030a:	370c      	adds	r7, #12
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <_ZNK8touchgfx6Bitmap7getRectEv>:
     *
     *        Gets the rectangle describing the dimensions of the Bitmap.
     *
     * @return a Rect describing the dimensions of this bitmap.
     */
    Rect getRect() const
 8010314:	b590      	push	{r4, r7, lr}
 8010316:	b085      	sub	sp, #20
 8010318:	af02      	add	r7, sp, #8
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 801031e:	6838      	ldr	r0, [r7, #0]
 8010320:	f00d fc9a 	bl	801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010324:	4603      	mov	r3, r0
 8010326:	b21c      	sxth	r4, r3
 8010328:	6838      	ldr	r0, [r7, #0]
 801032a:	f00d fccd 	bl	801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801032e:	4603      	mov	r3, r0
 8010330:	b21b      	sxth	r3, r3
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	4623      	mov	r3, r4
 8010336:	2200      	movs	r2, #0
 8010338:	2100      	movs	r1, #0
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7fd f864 	bl	800d408 <_ZN8touchgfx4RectC1Essss>
    }
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	370c      	adds	r7, #12
 8010344:	46bd      	mov	sp, r7
 8010346:	bd90      	pop	{r4, r7, pc}

08010348 <_ZNK8touchgfx5Image7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_IMAGE;
 8010350:	2308      	movs	r3, #8
    }
 8010352:	4618      	mov	r0, r3
 8010354:	370c      	adds	r7, #12
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr

0801035e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
#include <touchgfx/widgets/Image.hpp>

namespace touchgfx
{
void Image::setBitmap(const Bitmap& bmp)
{
 801035e:	b5b0      	push	{r4, r5, r7, lr}
 8010360:	b082      	sub	sp, #8
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
 8010366:	6039      	str	r1, [r7, #0]
    bitmap = bmp;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	683a      	ldr	r2, [r7, #0]
 801036c:	8812      	ldrh	r2, [r2, #0]
 801036e:	84da      	strh	r2, [r3, #38]	; 0x26
    // When setting bitmap, adjust size of this widget to match.
    setWidth(bitmap.getWidth());
 8010370:	687d      	ldr	r5, [r7, #4]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	3338      	adds	r3, #56	; 0x38
 8010378:	681c      	ldr	r4, [r3, #0]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	3326      	adds	r3, #38	; 0x26
 801037e:	4618      	mov	r0, r3
 8010380:	f00d fc6a 	bl	801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010384:	4603      	mov	r3, r0
 8010386:	b21b      	sxth	r3, r3
 8010388:	4619      	mov	r1, r3
 801038a:	4628      	mov	r0, r5
 801038c:	47a0      	blx	r4
    setHeight(bitmap.getHeight());
 801038e:	687d      	ldr	r5, [r7, #4]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	333c      	adds	r3, #60	; 0x3c
 8010396:	681c      	ldr	r4, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	3326      	adds	r3, #38	; 0x26
 801039c:	4618      	mov	r0, r3
 801039e:	f00d fc93 	bl	801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80103a2:	4603      	mov	r3, r0
 80103a4:	b21b      	sxth	r3, r3
 80103a6:	4619      	mov	r1, r3
 80103a8:	4628      	mov	r0, r5
 80103aa:	47a0      	blx	r4

    // This bool is no longer used, but maintained for backwards compat.
    hasTransparentPixels = bitmap.hasTransparentPixels();
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	3326      	adds	r3, #38	; 0x26
 80103b0:	4618      	mov	r0, r3
 80103b2:	f00d fd19 	bl	801dde8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80103b6:	4603      	mov	r3, r0
 80103b8:	461a      	mov	r2, r3
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80103c0:	bf00      	nop
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bdb0      	pop	{r4, r5, r7, pc}

080103c8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:

void Image::draw(const Rect& invalidatedArea) const
{
 80103c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103ca:	b08d      	sub	sp, #52	; 0x34
 80103cc:	af04      	add	r7, sp, #16
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
    Rect meAbs;
 80103d2:	f107 0310 	add.w	r3, r7, #16
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fd fe62 	bl	800e0a0 <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(meAbs); //To find our x and y coords in absolute.
 80103dc:	687a      	ldr	r2, [r7, #4]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	3324      	adds	r3, #36	; 0x24
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	f107 0110 	add.w	r1, r7, #16
 80103ea:	4610      	mov	r0, r2
 80103ec:	4798      	blx	r3

    // Calculate intersection between bitmap rect and invalidated area.
    Rect dirtyBitmapArea = bitmap.getRect() & invalidatedArea;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80103f4:	f107 0318 	add.w	r3, r7, #24
 80103f8:	4611      	mov	r1, r2
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7ff ff8a 	bl	8010314 <_ZNK8touchgfx6Bitmap7getRectEv>
 8010400:	f107 0308 	add.w	r3, r7, #8
 8010404:	f107 0118 	add.w	r1, r7, #24
 8010408:	683a      	ldr	r2, [r7, #0]
 801040a:	4618      	mov	r0, r3
 801040c:	f7fd f8a7 	bl	800d55e <_ZNK8touchgfx4RectanERKS0_>

    if (!dirtyBitmapArea.isEmpty())
 8010410:	f107 0308 	add.w	r3, r7, #8
 8010414:	4618      	mov	r0, r3
 8010416:	f7fd f9bf 	bl	800d798 <_ZNK8touchgfx4Rect7isEmptyEv>
 801041a:	4603      	mov	r3, r0
 801041c:	f083 0301 	eor.w	r3, r3, #1
 8010420:	b2db      	uxtb	r3, r3
 8010422:	2b00      	cmp	r3, #0
 8010424:	d017      	beq.n	8010456 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x8e>
    {
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
 8010426:	f7fe f905 	bl	800e634 <_ZN8touchgfx3HAL3lcdEv>
 801042a:	6803      	ldr	r3, [r0, #0]
 801042c:	330c      	adds	r3, #12
 801042e:	681c      	ldr	r4, [r3, #0]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010436:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 801043a:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010444:	2201      	movs	r2, #1
 8010446:	9202      	str	r2, [sp, #8]
 8010448:	9301      	str	r3, [sp, #4]
 801044a:	f107 0308 	add.w	r3, r7, #8
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	4633      	mov	r3, r6
 8010452:	462a      	mov	r2, r5
 8010454:	47a0      	blx	r4
    }
}
 8010456:	bf00      	nop
 8010458:	3724      	adds	r7, #36	; 0x24
 801045a:	46bd      	mov	sp, r7
 801045c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801045e <_ZNK8touchgfx5Image12getSolidRectEv>:

Rect Image::getSolidRect() const
{
 801045e:	b580      	push	{r7, lr}
 8010460:	b084      	sub	sp, #16
 8010462:	af02      	add	r7, sp, #8
 8010464:	6078      	str	r0, [r7, #4]
 8010466:	6039      	str	r1, [r7, #0]
    // If alpha is less than solid, we have an empty solid rect.
    if (alpha < 255)
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801046e:	2bff      	cmp	r3, #255	; 0xff
 8010470:	d008      	beq.n	8010484 <_ZNK8touchgfx5Image12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8010472:	2300      	movs	r3, #0
 8010474:	9300      	str	r3, [sp, #0]
 8010476:	2300      	movs	r3, #0
 8010478:	2200      	movs	r2, #0
 801047a:	2100      	movs	r1, #0
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7fc ffc3 	bl	800d408 <_ZN8touchgfx4RectC1Essss>
 8010482:	e007      	b.n	8010494 <_ZNK8touchgfx5Image12getSolidRectEv+0x36>
    }
    // Return solid rect from bitmap (precalculated).
    return bitmap.getSolidRect();
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4611      	mov	r1, r2
 801048e:	4618      	mov	r0, r3
 8010490:	f00d fc52 	bl	801dd38 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	3708      	adds	r7, #8
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}

0801049c <_ZNK8touchgfx10TiledImage7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TILEDIMAGE;
 80104a4:	2309      	movs	r3, #9
    }
 80104a6:	4618      	mov	r0, r3
 80104a8:	370c      	adds	r7, #12
 80104aa:	46bd      	mov	sp, r7
 80104ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b0:	4770      	bx	lr

080104b2 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
#include <touchgfx/widgets/TiledImage.hpp>

namespace touchgfx
{
void TiledImage::setBitmap(const Bitmap& bmp)
{
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b082      	sub	sp, #8
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
 80104ba:	6039      	str	r1, [r7, #0]
    Image::setBitmap(bmp);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6839      	ldr	r1, [r7, #0]
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7ff ff4c 	bl	801035e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    // Make sure the xOffset and yOffset are correct
    setOffset(xOffset, yOffset);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	3368      	adds	r3, #104	; 0x68
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	687a      	ldr	r2, [r7, #4]
 80104d0:	f9b2 102a 	ldrsh.w	r1, [r2, #42]	; 0x2a
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	f9b2 202c 	ldrsh.w	r2, [r2, #44]	; 0x2c
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	4798      	blx	r3
}
 80104de:	bf00      	nop
 80104e0:	3708      	adds	r7, #8
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <_ZN8touchgfx10TiledImage9setOffsetEss>:

void TiledImage::setOffset(int16_t x, int16_t y)
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b082      	sub	sp, #8
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
 80104ee:	460b      	mov	r3, r1
 80104f0:	807b      	strh	r3, [r7, #2]
 80104f2:	4613      	mov	r3, r2
 80104f4:	803b      	strh	r3, [r7, #0]
    setXOffset(x);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	336c      	adds	r3, #108	; 0x6c
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010502:	4611      	mov	r1, r2
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	4798      	blx	r3
    setYOffset(y);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	3370      	adds	r3, #112	; 0x70
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010514:	4611      	mov	r1, r2
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	4798      	blx	r3
}
 801051a:	bf00      	nop
 801051c:	3708      	adds	r7, #8
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <_ZN8touchgfx10TiledImage10setXOffsetEs>:

void TiledImage::setXOffset(int16_t x)
{
 8010522:	b590      	push	{r4, r7, lr}
 8010524:	b083      	sub	sp, #12
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
 801052a:	460b      	mov	r3, r1
 801052c:	807b      	strh	r3, [r7, #2]
    xOffset = x;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	887a      	ldrh	r2, [r7, #2]
 8010532:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (bitmap.getWidth() != 0)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	3326      	adds	r3, #38	; 0x26
 8010538:	4618      	mov	r0, r3
 801053a:	f00d fb8d 	bl	801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	bf14      	ite	ne
 8010544:	2301      	movne	r3, #1
 8010546:	2300      	moveq	r3, #0
 8010548:	b2db      	uxtb	r3, r3
 801054a:	2b00      	cmp	r3, #0
 801054c:	d023      	beq.n	8010596 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x74>
    {
        xOffset = ((xOffset % bitmap.getWidth()) + bitmap.getWidth()) % bitmap.getWidth();
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8010554:	461c      	mov	r4, r3
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	3326      	adds	r3, #38	; 0x26
 801055a:	4618      	mov	r0, r3
 801055c:	f00d fb7c 	bl	801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010560:	4603      	mov	r3, r0
 8010562:	fb94 f2f3 	sdiv	r2, r4, r3
 8010566:	fb03 f302 	mul.w	r3, r3, r2
 801056a:	1ae4      	subs	r4, r4, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	3326      	adds	r3, #38	; 0x26
 8010570:	4618      	mov	r0, r3
 8010572:	f00d fb71 	bl	801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010576:	4603      	mov	r3, r0
 8010578:	441c      	add	r4, r3
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	3326      	adds	r3, #38	; 0x26
 801057e:	4618      	mov	r0, r3
 8010580:	f00d fb6a 	bl	801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010584:	4603      	mov	r3, r0
 8010586:	fb94 f2f3 	sdiv	r2, r4, r3
 801058a:	fb03 f302 	mul.w	r3, r3, r2
 801058e:	1ae3      	subs	r3, r4, r3
 8010590:	b21a      	sxth	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
}
 8010596:	bf00      	nop
 8010598:	370c      	adds	r7, #12
 801059a:	46bd      	mov	sp, r7
 801059c:	bd90      	pop	{r4, r7, pc}

0801059e <_ZN8touchgfx10TiledImage10setYOffsetEs>:

void TiledImage::setYOffset(int16_t y)
{
 801059e:	b590      	push	{r4, r7, lr}
 80105a0:	b083      	sub	sp, #12
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
 80105a6:	460b      	mov	r3, r1
 80105a8:	807b      	strh	r3, [r7, #2]
    yOffset = y;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	887a      	ldrh	r2, [r7, #2]
 80105ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    if (bitmap.getHeight() != 0)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	3326      	adds	r3, #38	; 0x26
 80105b4:	4618      	mov	r0, r3
 80105b6:	f00d fb87 	bl	801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b00      	cmp	r3, #0
 80105be:	bf14      	ite	ne
 80105c0:	2301      	movne	r3, #1
 80105c2:	2300      	moveq	r3, #0
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d023      	beq.n	8010612 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x74>
    {
        yOffset = ((yOffset % bitmap.getHeight()) + bitmap.getHeight()) % bitmap.getHeight();
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80105d0:	461c      	mov	r4, r3
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	3326      	adds	r3, #38	; 0x26
 80105d6:	4618      	mov	r0, r3
 80105d8:	f00d fb76 	bl	801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80105dc:	4603      	mov	r3, r0
 80105de:	fb94 f2f3 	sdiv	r2, r4, r3
 80105e2:	fb03 f302 	mul.w	r3, r3, r2
 80105e6:	1ae4      	subs	r4, r4, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	3326      	adds	r3, #38	; 0x26
 80105ec:	4618      	mov	r0, r3
 80105ee:	f00d fb6b 	bl	801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80105f2:	4603      	mov	r3, r0
 80105f4:	441c      	add	r4, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	3326      	adds	r3, #38	; 0x26
 80105fa:	4618      	mov	r0, r3
 80105fc:	f00d fb64 	bl	801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010600:	4603      	mov	r3, r0
 8010602:	fb94 f2f3 	sdiv	r2, r4, r3
 8010606:	fb03 f302 	mul.w	r3, r3, r2
 801060a:	1ae3      	subs	r3, r4, r3
 801060c:	b21a      	sxth	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
}
 8010612:	bf00      	nop
 8010614:	370c      	adds	r7, #12
 8010616:	46bd      	mov	sp, r7
 8010618:	bd90      	pop	{r4, r7, pc}

0801061a <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:

void TiledImage::getOffset(int16_t& x, int16_t& y)
{
 801061a:	b580      	push	{r7, lr}
 801061c:	b084      	sub	sp, #16
 801061e:	af00      	add	r7, sp, #0
 8010620:	60f8      	str	r0, [r7, #12]
 8010622:	60b9      	str	r1, [r7, #8]
 8010624:	607a      	str	r2, [r7, #4]
    x = getXOffset();
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	3378      	adds	r3, #120	; 0x78
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	68f8      	ldr	r0, [r7, #12]
 8010630:	4798      	blx	r3
 8010632:	4603      	mov	r3, r0
 8010634:	461a      	mov	r2, r3
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	801a      	strh	r2, [r3, #0]
    y = getYOffset();
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	337c      	adds	r3, #124	; 0x7c
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	68f8      	ldr	r0, [r7, #12]
 8010644:	4798      	blx	r3
 8010646:	4603      	mov	r3, r0
 8010648:	461a      	mov	r2, r3
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	801a      	strh	r2, [r3, #0]
}
 801064e:	bf00      	nop
 8010650:	3710      	adds	r7, #16
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <_ZN8touchgfx10TiledImage10getXOffsetEv>:

int16_t TiledImage::getXOffset()
{
 8010656:	b480      	push	{r7}
 8010658:	b083      	sub	sp, #12
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
    return xOffset;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
}
 8010664:	4618      	mov	r0, r3
 8010666:	370c      	adds	r7, #12
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr

08010670 <_ZN8touchgfx10TiledImage10getYOffsetEv>:

int16_t TiledImage::getYOffset()
{
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
    return yOffset;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
}
 801067e:	4618      	mov	r0, r3
 8010680:	370c      	adds	r7, #12
 8010682:	46bd      	mov	sp, r7
 8010684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010688:	4770      	bx	lr

0801068a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:

void TiledImage::draw(const Rect& invalidatedArea) const
{
 801068a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801068c:	b091      	sub	sp, #68	; 0x44
 801068e:	af04      	add	r7, sp, #16
 8010690:	6078      	str	r0, [r7, #4]
 8010692:	6039      	str	r1, [r7, #0]
    uint16_t bitmapWidth = bitmap.getWidth();
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	3326      	adds	r3, #38	; 0x26
 8010698:	4618      	mov	r0, r3
 801069a:	f00d fadd 	bl	801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801069e:	4603      	mov	r3, r0
 80106a0:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t bitmapHeight = bitmap.getHeight();
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	3326      	adds	r3, #38	; 0x26
 80106a6:	4618      	mov	r0, r3
 80106a8:	f00d fb0e 	bl	801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80106ac:	4603      	mov	r3, r0
 80106ae:	853b      	strh	r3, [r7, #40]	; 0x28

    if (bitmapWidth == 0 || bitmapHeight == 0)
 80106b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	f000 80ca 	beq.w	801084c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1c2>
 80106b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	f000 80c6 	beq.w	801084c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1c2>
    {
        return;
    }

    Rect meAbs;
 80106c0:	f107 0310 	add.w	r3, r7, #16
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7fd fceb 	bl	800e0a0 <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(meAbs);
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	3324      	adds	r3, #36	; 0x24
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f107 0110 	add.w	r1, r7, #16
 80106d8:	4610      	mov	r0, r2
 80106da:	4798      	blx	r3

    const int16_t minX = ((invalidatedArea.x + xOffset) / bitmapWidth) * bitmapWidth - xOffset;
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106e2:	461a      	mov	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80106ea:	441a      	add	r2, r3
 80106ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80106f6:	fb12 f303 	smulbb	r3, r2, r3
 80106fa:	b29a      	uxth	r2, r3
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8010702:	b29b      	uxth	r3, r3
 8010704:	1ad3      	subs	r3, r2, r3
 8010706:	b29b      	uxth	r3, r3
 8010708:	84fb      	strh	r3, [r7, #38]	; 0x26
    const int16_t maxX = (((invalidatedArea.right() + xOffset) - 1) / bitmapWidth) * bitmapWidth;
 801070a:	6838      	ldr	r0, [r7, #0]
 801070c:	f7fc fe9c 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 8010710:	4603      	mov	r3, r0
 8010712:	461a      	mov	r2, r3
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801071a:	4413      	add	r3, r2
 801071c:	1e5a      	subs	r2, r3, #1
 801071e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010720:	fb92 f3f3 	sdiv	r3, r2, r3
 8010724:	b29b      	uxth	r3, r3
 8010726:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010728:	fb12 f303 	smulbb	r3, r2, r3
 801072c:	b29b      	uxth	r3, r3
 801072e:	84bb      	strh	r3, [r7, #36]	; 0x24
    const int16_t minY = ((invalidatedArea.y + yOffset) / bitmapHeight) * bitmapHeight - yOffset;
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010736:	461a      	mov	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801073e:	441a      	add	r2, r3
 8010740:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010742:	fb92 f3f3 	sdiv	r3, r2, r3
 8010746:	b29b      	uxth	r3, r3
 8010748:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801074a:	fb12 f303 	smulbb	r3, r2, r3
 801074e:	b29a      	uxth	r2, r3
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010756:	b29b      	uxth	r3, r3
 8010758:	1ad3      	subs	r3, r2, r3
 801075a:	b29b      	uxth	r3, r3
 801075c:	847b      	strh	r3, [r7, #34]	; 0x22
    const int16_t maxY = (((invalidatedArea.bottom() + yOffset) - 1) / bitmapHeight) * bitmapHeight;
 801075e:	6838      	ldr	r0, [r7, #0]
 8010760:	f7fc fe87 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 8010764:	4603      	mov	r3, r0
 8010766:	461a      	mov	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801076e:	4413      	add	r3, r2
 8010770:	1e5a      	subs	r2, r3, #1
 8010772:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010774:	fb92 f3f3 	sdiv	r3, r2, r3
 8010778:	b29b      	uxth	r3, r3
 801077a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801077c:	fb12 f303 	smulbb	r3, r2, r3
 8010780:	b29b      	uxth	r3, r3
 8010782:	843b      	strh	r3, [r7, #32]
    for (int16_t x = minX; x <= maxX; x += bitmapWidth)
 8010784:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010786:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010788:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 801078c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010790:	429a      	cmp	r2, r3
 8010792:	dc5c      	bgt.n	801084e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1c4>
    {
        for (int16_t y = minY; y <= maxY; y += bitmapHeight)
 8010794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010796:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010798:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 801079c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	dc4d      	bgt.n	8010840 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b6>
        {
            Rect dirty = Rect(x, y, bitmapWidth, bitmapHeight) & invalidatedArea;
 80107a4:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 80107a8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80107ac:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80107b0:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 80107b4:	f107 0018 	add.w	r0, r7, #24
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	4623      	mov	r3, r4
 80107bc:	f7fc fe24 	bl	800d408 <_ZN8touchgfx4RectC1Essss>
 80107c0:	f107 0308 	add.w	r3, r7, #8
 80107c4:	f107 0118 	add.w	r1, r7, #24
 80107c8:	683a      	ldr	r2, [r7, #0]
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7fc fec7 	bl	800d55e <_ZNK8touchgfx4RectanERKS0_>
            dirty.x -= x;
 80107d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80107d8:	1ad3      	subs	r3, r2, r3
 80107da:	b29b      	uxth	r3, r3
 80107dc:	b21b      	sxth	r3, r3
 80107de:	813b      	strh	r3, [r7, #8]
            dirty.y -= y;
 80107e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80107e4:	b29a      	uxth	r2, r3
 80107e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	b21b      	sxth	r3, r3
 80107ee:	817b      	strh	r3, [r7, #10]
            HAL::lcd().drawPartialBitmap(bitmap, meAbs.x + x, meAbs.y + y, dirty, alpha);
 80107f0:	f7fd ff20 	bl	800e634 <_ZN8touchgfx3HAL3lcdEv>
 80107f4:	6803      	ldr	r3, [r0, #0]
 80107f6:	330c      	adds	r3, #12
 80107f8:	681c      	ldr	r4, [r3, #0]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010800:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010804:	b29a      	uxth	r2, r3
 8010806:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010808:	4413      	add	r3, r2
 801080a:	b29b      	uxth	r3, r3
 801080c:	b21d      	sxth	r5, r3
 801080e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010812:	b29a      	uxth	r2, r3
 8010814:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010816:	4413      	add	r3, r2
 8010818:	b29b      	uxth	r3, r3
 801081a:	b21e      	sxth	r6, r3
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010822:	2201      	movs	r2, #1
 8010824:	9202      	str	r2, [sp, #8]
 8010826:	9301      	str	r3, [sp, #4]
 8010828:	f107 0308 	add.w	r3, r7, #8
 801082c:	9300      	str	r3, [sp, #0]
 801082e:	4633      	mov	r3, r6
 8010830:	462a      	mov	r2, r5
 8010832:	47a0      	blx	r4
        for (int16_t y = minY; y <= maxY; y += bitmapHeight)
 8010834:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8010836:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010838:	4413      	add	r3, r2
 801083a:	b29b      	uxth	r3, r3
 801083c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801083e:	e7ab      	b.n	8010798 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x10e>
    for (int16_t x = minX; x <= maxX; x += bitmapWidth)
 8010840:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010842:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010844:	4413      	add	r3, r2
 8010846:	b29b      	uxth	r3, r3
 8010848:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801084a:	e79d      	b.n	8010788 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xfe>
        return;
 801084c:	bf00      	nop
        }
    }
}
 801084e:	3734      	adds	r7, #52	; 0x34
 8010850:	46bd      	mov	sp, r7
 8010852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010854 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:

Rect TiledImage::getSolidRect() const
{
 8010854:	b590      	push	{r4, r7, lr}
 8010856:	b08b      	sub	sp, #44	; 0x2c
 8010858:	af02      	add	r7, sp, #8
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010864:	2bff      	cmp	r3, #255	; 0xff
 8010866:	d008      	beq.n	801087a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8010868:	2300      	movs	r3, #0
 801086a:	9300      	str	r3, [sp, #0]
 801086c:	2300      	movs	r3, #0
 801086e:	2200      	movs	r2, #0
 8010870:	2100      	movs	r1, #0
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f7fc fdc8 	bl	800d408 <_ZN8touchgfx4RectC1Essss>
 8010878:	e111      	b.n	8010a9e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x24a>
    }

    Rect solidRect = bitmap.getSolidRect();
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010880:	f107 0318 	add.w	r3, r7, #24
 8010884:	4611      	mov	r1, r2
 8010886:	4618      	mov	r0, r3
 8010888:	f00d fa56 	bl	801dd38 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
    if (solidRect.width == bitmap.getWidth())
 801088c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010890:	461c      	mov	r4, r3
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	3326      	adds	r3, #38	; 0x26
 8010896:	4618      	mov	r0, r3
 8010898:	f00d f9de 	bl	801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801089c:	4603      	mov	r3, r0
 801089e:	429c      	cmp	r4, r3
 80108a0:	bf0c      	ite	eq
 80108a2:	2301      	moveq	r3, #1
 80108a4:	2300      	movne	r3, #0
 80108a6:	b2db      	uxtb	r3, r3
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d006      	beq.n	80108ba <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x66>
    {
        solidRect.width = getWidth();
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fd fbab 	bl	800e00a <_ZNK8touchgfx8Drawable8getWidthEv>
 80108b4:	4603      	mov	r3, r0
 80108b6:	83bb      	strh	r3, [r7, #28]
 80108b8:	e069      	b.n	801098e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x13a>
    }
    else
    {
        solidRect.x -= xOffset;
 80108ba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80108be:	b29a      	uxth	r2, r3
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	1ad3      	subs	r3, r2, r3
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	b21b      	sxth	r3, r3
 80108ce:	833b      	strh	r3, [r7, #24]
        Rect solidRect2 = solidRect;
 80108d0:	f107 0310 	add.w	r3, r7, #16
 80108d4:	f107 0218 	add.w	r2, r7, #24
 80108d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108dc:	e883 0003 	stmia.w	r3, {r0, r1}
        solidRect2.x += bitmap.getWidth();
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	3326      	adds	r3, #38	; 0x26
 80108e4:	4618      	mov	r0, r3
 80108e6:	f00d f9b7 	bl	801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80108ea:	4603      	mov	r3, r0
 80108ec:	461a      	mov	r2, r3
 80108ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	4413      	add	r3, r2
 80108f6:	b29b      	uxth	r3, r3
 80108f8:	b21b      	sxth	r3, r3
 80108fa:	823b      	strh	r3, [r7, #16]
        if (solidRect.x < 0)
 80108fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010900:	2b00      	cmp	r3, #0
 8010902:	da12      	bge.n	801092a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xd6>
        {
            solidRect.width = MAX(solidRect.right(), 0);
 8010904:	f107 0318 	add.w	r3, r7, #24
 8010908:	4618      	mov	r0, r3
 801090a:	f7fc fd9d 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	dd06      	ble.n	8010922 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xce>
 8010914:	f107 0318 	add.w	r3, r7, #24
 8010918:	4618      	mov	r0, r3
 801091a:	f7fc fd95 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 801091e:	4603      	mov	r3, r0
 8010920:	e000      	b.n	8010924 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xd0>
 8010922:	2300      	movs	r3, #0
 8010924:	83bb      	strh	r3, [r7, #28]
            solidRect.x = 0;
 8010926:	2300      	movs	r3, #0
 8010928:	833b      	strh	r3, [r7, #24]
        }
        if (solidRect2.right() > getWidth())
 801092a:	f107 0310 	add.w	r3, r7, #16
 801092e:	4618      	mov	r0, r3
 8010930:	f7fc fd8a 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 8010934:	4603      	mov	r3, r0
 8010936:	461c      	mov	r4, r3
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	4618      	mov	r0, r3
 801093c:	f7fd fb65 	bl	800e00a <_ZNK8touchgfx8Drawable8getWidthEv>
 8010940:	4603      	mov	r3, r0
 8010942:	429c      	cmp	r4, r3
 8010944:	bfcc      	ite	gt
 8010946:	2301      	movgt	r3, #1
 8010948:	2300      	movle	r3, #0
 801094a:	b2db      	uxtb	r3, r3
 801094c:	2b00      	cmp	r3, #0
 801094e:	d010      	beq.n	8010972 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x11e>
        {
            solidRect2.width = solidRect2.right() - getWidth();
 8010950:	f107 0310 	add.w	r3, r7, #16
 8010954:	4618      	mov	r0, r3
 8010956:	f7fc fd77 	bl	800d448 <_ZNK8touchgfx4Rect5rightEv>
 801095a:	4603      	mov	r3, r0
 801095c:	b29c      	uxth	r4, r3
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	4618      	mov	r0, r3
 8010962:	f7fd fb52 	bl	800e00a <_ZNK8touchgfx8Drawable8getWidthEv>
 8010966:	4603      	mov	r3, r0
 8010968:	b29b      	uxth	r3, r3
 801096a:	1ae3      	subs	r3, r4, r3
 801096c:	b29b      	uxth	r3, r3
 801096e:	b21b      	sxth	r3, r3
 8010970:	82bb      	strh	r3, [r7, #20]
        }
        if (solidRect2.width > solidRect.width)
 8010972:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8010976:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801097a:	429a      	cmp	r2, r3
 801097c:	dd07      	ble.n	801098e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x13a>
        {
            solidRect = solidRect2;
 801097e:	f107 0318 	add.w	r3, r7, #24
 8010982:	f107 0210 	add.w	r2, r7, #16
 8010986:	e892 0003 	ldmia.w	r2, {r0, r1}
 801098a:	e883 0003 	stmia.w	r3, {r0, r1}
        }
    }
    if (solidRect.height == bitmap.getHeight())
 801098e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010992:	461c      	mov	r4, r3
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	3326      	adds	r3, #38	; 0x26
 8010998:	4618      	mov	r0, r3
 801099a:	f00d f995 	bl	801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801099e:	4603      	mov	r3, r0
 80109a0:	429c      	cmp	r4, r3
 80109a2:	bf0c      	ite	eq
 80109a4:	2301      	moveq	r3, #1
 80109a6:	2300      	movne	r3, #0
 80109a8:	b2db      	uxtb	r3, r3
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d006      	beq.n	80109bc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x168>
    {
        solidRect.height = getHeight();
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	4618      	mov	r0, r3
 80109b2:	f7fd fb37 	bl	800e024 <_ZNK8touchgfx8Drawable9getHeightEv>
 80109b6:	4603      	mov	r3, r0
 80109b8:	83fb      	strh	r3, [r7, #30]
 80109ba:	e069      	b.n	8010a90 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x23c>
    }
    else
    {
        solidRect.y -= yOffset;
 80109bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80109c0:	b29a      	uxth	r2, r3
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	1ad3      	subs	r3, r2, r3
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	b21b      	sxth	r3, r3
 80109d0:	837b      	strh	r3, [r7, #26]
        Rect solidRect2 = solidRect;
 80109d2:	f107 0308 	add.w	r3, r7, #8
 80109d6:	f107 0218 	add.w	r2, r7, #24
 80109da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109de:	e883 0003 	stmia.w	r3, {r0, r1}
        solidRect2.y += bitmap.getHeight();
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	3326      	adds	r3, #38	; 0x26
 80109e6:	4618      	mov	r0, r3
 80109e8:	f00d f96e 	bl	801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80109ec:	4603      	mov	r3, r0
 80109ee:	461a      	mov	r2, r3
 80109f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80109f4:	b29b      	uxth	r3, r3
 80109f6:	4413      	add	r3, r2
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	b21b      	sxth	r3, r3
 80109fc:	817b      	strh	r3, [r7, #10]
        if (solidRect.y < 0)
 80109fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	da12      	bge.n	8010a2c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x1d8>
        {
            solidRect.height = MAX(solidRect.bottom(), 0);
 8010a06:	f107 0318 	add.w	r3, r7, #24
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7fc fd31 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 8010a10:	4603      	mov	r3, r0
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	dd06      	ble.n	8010a24 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x1d0>
 8010a16:	f107 0318 	add.w	r3, r7, #24
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7fc fd29 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 8010a20:	4603      	mov	r3, r0
 8010a22:	e000      	b.n	8010a26 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x1d2>
 8010a24:	2300      	movs	r3, #0
 8010a26:	83fb      	strh	r3, [r7, #30]
            solidRect.y = 0;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	837b      	strh	r3, [r7, #26]
        }
        if (solidRect2.bottom() > getHeight())
 8010a2c:	f107 0308 	add.w	r3, r7, #8
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7fc fd1e 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 8010a36:	4603      	mov	r3, r0
 8010a38:	461c      	mov	r4, r3
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7fd faf1 	bl	800e024 <_ZNK8touchgfx8Drawable9getHeightEv>
 8010a42:	4603      	mov	r3, r0
 8010a44:	429c      	cmp	r4, r3
 8010a46:	bfcc      	ite	gt
 8010a48:	2301      	movgt	r3, #1
 8010a4a:	2300      	movle	r3, #0
 8010a4c:	b2db      	uxtb	r3, r3
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d010      	beq.n	8010a74 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x220>
        {
            solidRect2.height = solidRect2.bottom() - getHeight();
 8010a52:	f107 0308 	add.w	r3, r7, #8
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7fc fd0b 	bl	800d472 <_ZNK8touchgfx4Rect6bottomEv>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	b29c      	uxth	r4, r3
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fd fade 	bl	800e024 <_ZNK8touchgfx8Drawable9getHeightEv>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	b29b      	uxth	r3, r3
 8010a6c:	1ae3      	subs	r3, r4, r3
 8010a6e:	b29b      	uxth	r3, r3
 8010a70:	b21b      	sxth	r3, r3
 8010a72:	81fb      	strh	r3, [r7, #14]
        }
        if (solidRect2.height > solidRect.height)
 8010a74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	dd07      	ble.n	8010a90 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x23c>
        {
            solidRect = solidRect2;
 8010a80:	f107 0318 	add.w	r3, r7, #24
 8010a84:	f107 0208 	add.w	r2, r7, #8
 8010a88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a8c:	e883 0003 	stmia.w	r3, {r0, r1}
        }
    }
    return solidRect;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	461a      	mov	r2, r3
 8010a94:	f107 0318 	add.w	r3, r7, #24
 8010a98:	cb03      	ldmia	r3!, {r0, r1}
 8010a9a:	6010      	str	r0, [r2, #0]
 8010a9c:	6051      	str	r1, [r2, #4]
}
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	3724      	adds	r7, #36	; 0x24
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd90      	pop	{r4, r7, pc}

08010aa6 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8010aa6:	b480      	push	{r7}
 8010aa8:	b083      	sub	sp, #12
 8010aaa:	af00      	add	r7, sp, #0
 8010aac:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	b29b      	uxth	r3, r3
    }
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	370c      	adds	r7, #12
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr

08010ac0 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8010ac0:	b480      	push	{r7}
 8010ac2:	b083      	sub	sp, #12
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
        return color;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
    }
 8010acc:	4618      	mov	r0, r3
 8010ace:	370c      	adds	r7, #12
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad6:	4770      	bx	lr

08010ad8 <_ZN8touchgfx10OSWrappers10initializeEv>:

// Just a dummy value to insert in the VSYNC queue.
static uint32_t dummy = 0x5a;

void OSWrappers::initialize()
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b084      	sub	sp, #16
 8010adc:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    osSemaphoreDef(frame_buffer_sem);
 8010ade:	2300      	movs	r3, #0
 8010ae0:	60fb      	str	r3, [r7, #12]
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1); // Binary semaphore
 8010ae2:	f107 030c 	add.w	r3, r7, #12
 8010ae6:	2101      	movs	r1, #1
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f000 f9dc 	bl	8010ea6 <osSemaphoreCreate>
 8010aee:	4602      	mov	r2, r0
 8010af0:	4b0d      	ldr	r3, [pc, #52]	; (8010b28 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8010af2:	601a      	str	r2, [r3, #0]
    osSemaphoreWait(frame_buffer_sem, osWaitForever); // take the lock
 8010af4:	4b0c      	ldr	r3, [pc, #48]	; (8010b28 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f04f 31ff 	mov.w	r1, #4294967295
 8010afc:	4618      	mov	r0, r3
 8010afe:	f000 f9f7 	bl	8010ef0 <osSemaphoreWait>

    // Create a queue of length 1
    osMessageQDef(vsync_queue, 1, uint32_t);
 8010b02:	4a0a      	ldr	r2, [pc, #40]	; (8010b2c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8010b04:	1d3b      	adds	r3, r7, #4
 8010b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b0a:	e883 0003 	stmia.w	r3, {r0, r1}
    vsync_queue = osMessageCreate(osMessageQ(vsync_queue),NULL);
 8010b0e:	1d3b      	adds	r3, r7, #4
 8010b10:	2100      	movs	r1, #0
 8010b12:	4618      	mov	r0, r3
 8010b14:	f000 fa70 	bl	8010ff8 <osMessageCreate>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	4b05      	ldr	r3, [pc, #20]	; (8010b30 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8010b1c:	601a      	str	r2, [r3, #0]
}
 8010b1e:	bf00      	nop
 8010b20:	3710      	adds	r7, #16
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	200000d4 	.word	0x200000d4
 8010b2c:	08020f54 	.word	0x08020f54
 8010b30:	200000d8 	.word	0x200000d8

08010b34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

void OSWrappers::takeFrameBufferSemaphore()
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8010b38:	4b09      	ldr	r3, [pc, #36]	; (8010b60 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d105      	bne.n	8010b4c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 8010b40:	4b08      	ldr	r3, [pc, #32]	; (8010b64 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 8010b42:	4a09      	ldr	r2, [pc, #36]	; (8010b68 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 8010b44:	211f      	movs	r1, #31
 8010b46:	4809      	ldr	r0, [pc, #36]	; (8010b6c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 8010b48:	f00f f972 	bl	801fe30 <__assert_func>
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8010b4c:	4b04      	ldr	r3, [pc, #16]	; (8010b60 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f04f 31ff 	mov.w	r1, #4294967295
 8010b54:	4618      	mov	r0, r3
 8010b56:	f000 f9cb 	bl	8010ef0 <osSemaphoreWait>
}
 8010b5a:	bf00      	nop
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	200000d4 	.word	0x200000d4
 8010b64:	08020f5c 	.word	0x08020f5c
 8010b68:	0802187c 	.word	0x0802187c
 8010b6c:	08020f70 	.word	0x08020f70

08010b70 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

void OSWrappers::giveFrameBufferSemaphore()
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8010b74:	4b08      	ldr	r3, [pc, #32]	; (8010b98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d105      	bne.n	8010b88 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>
 8010b7c:	4b07      	ldr	r3, [pc, #28]	; (8010b9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2c>)
 8010b7e:	4a08      	ldr	r2, [pc, #32]	; (8010ba0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x30>)
 8010b80:	2125      	movs	r1, #37	; 0x25
 8010b82:	4808      	ldr	r0, [pc, #32]	; (8010ba4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8010b84:	f00f f954 	bl	801fe30 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 8010b88:	4b03      	ldr	r3, [pc, #12]	; (8010b98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f000 f9fd 	bl	8010f8c <osSemaphoreRelease>
}
 8010b92:	bf00      	nop
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	200000d4 	.word	0x200000d4
 8010b9c:	08020f5c 	.word	0x08020f5c
 8010ba0:	080218bc 	.word	0x080218bc
 8010ba4:	08020f70 	.word	0x08020f70

08010ba8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:

void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8010bac:	4b08      	ldr	r3, [pc, #32]	; (8010bd0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d105      	bne.n	8010bc0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x18>
 8010bb4:	4b07      	ldr	r3, [pc, #28]	; (8010bd4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x2c>)
 8010bb6:	4a08      	ldr	r2, [pc, #32]	; (8010bd8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x30>)
 8010bb8:	212b      	movs	r1, #43	; 0x2b
 8010bba:	4808      	ldr	r0, [pc, #32]	; (8010bdc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x34>)
 8010bbc:	f00f f938 	bl	801fe30 <__assert_func>
    osSemaphoreWait(frame_buffer_sem, 0);
 8010bc0:	4b03      	ldr	r3, [pc, #12]	; (8010bd0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	2100      	movs	r1, #0
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f000 f992 	bl	8010ef0 <osSemaphoreWait>
}
 8010bcc:	bf00      	nop
 8010bce:	bd80      	pop	{r7, pc}
 8010bd0:	200000d4 	.word	0x200000d4
 8010bd4:	08020f5c 	.word	0x08020f5c
 8010bd8:	080218fc 	.word	0x080218fc
 8010bdc:	08020f70 	.word	0x08020f70

08010be0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:

void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8010be4:	4b08      	ldr	r3, [pc, #32]	; (8010c08 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d105      	bne.n	8010bf8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x18>
 8010bec:	4b07      	ldr	r3, [pc, #28]	; (8010c0c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2c>)
 8010bee:	4a08      	ldr	r2, [pc, #32]	; (8010c10 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x30>)
 8010bf0:	2131      	movs	r1, #49	; 0x31
 8010bf2:	4808      	ldr	r0, [pc, #32]	; (8010c14 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x34>)
 8010bf4:	f00f f91c 	bl	801fe30 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 8010bf8:	4b03      	ldr	r3, [pc, #12]	; (8010c08 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f000 f9c5 	bl	8010f8c <osSemaphoreRelease>
}
 8010c02:	bf00      	nop
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	200000d4 	.word	0x200000d4
 8010c0c:	08020f5c 	.word	0x08020f5c
 8010c10:	0802193c 	.word	0x0802193c
 8010c14:	08020f70 	.word	0x08020f70

08010c18 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:

void OSWrappers::signalVSync()
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	af00      	add	r7, sp, #0
    if (vsync_queue)
 8010c1c:	4b06      	ldr	r3, [pc, #24]	; (8010c38 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d007      	beq.n	8010c34 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
    {
        osMessagePut(vsync_queue, dummy, 0);
 8010c24:	4b04      	ldr	r3, [pc, #16]	; (8010c38 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 8010c26:	6818      	ldr	r0, [r3, #0]
 8010c28:	4b04      	ldr	r3, [pc, #16]	; (8010c3c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	4619      	mov	r1, r3
 8010c30:	f000 f9f4 	bl	801101c <osMessagePut>
    }
}
 8010c34:	bf00      	nop
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	200000d8 	.word	0x200000d8
 8010c3c:	20000024 	.word	0x20000024

08010c40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:

void OSWrappers::waitForVSync()
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b086      	sub	sp, #24
 8010c44:	af00      	add	r7, sp, #0
    if (vsync_queue)
 8010c46:	4b0c      	ldr	r3, [pc, #48]	; (8010c78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d00f      	beq.n	8010c6e <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2e>
    {
        // First make sure the queue is empty, by trying to remove an element with 0 timeout.
        osMessageGet(vsync_queue, 0);
 8010c4e:	4b0a      	ldr	r3, [pc, #40]	; (8010c78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 8010c50:	6819      	ldr	r1, [r3, #0]
 8010c52:	463b      	mov	r3, r7
 8010c54:	2200      	movs	r2, #0
 8010c56:	4618      	mov	r0, r3
 8010c58:	f000 fa20 	bl	801109c <osMessageGet>

        // Then, wait for next VSYNC to occur.
        osMessageGet(vsync_queue, osWaitForever);
 8010c5c:	4b06      	ldr	r3, [pc, #24]	; (8010c78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 8010c5e:	6819      	ldr	r1, [r3, #0]
 8010c60:	f107 030c 	add.w	r3, r7, #12
 8010c64:	f04f 32ff 	mov.w	r2, #4294967295
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f000 fa17 	bl	801109c <osMessageGet>
    }
}
 8010c6e:	bf00      	nop
 8010c70:	3718      	adds	r7, #24
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
 8010c76:	bf00      	nop
 8010c78:	200000d8 	.word	0x200000d8

08010c7c <_ZL12IdleTaskHookPv>:
// to inform TouchGFX of when the idle task is switched in/out and call the
// setMCUActive function accordingly (see below).

//FreeRTOS hook function being called when idle task is switched in or out.
static portBASE_TYPE IdleTaskHook(void* p)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
    if ((int)p) //idle task sched out
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d007      	beq.n	8010c9a <_ZL12IdleTaskHookPv+0x1e>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 8010c8a:	f7fd fc49 	bl	800e520 <_ZN8touchgfx3HAL11getInstanceEv>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	2101      	movs	r1, #1
 8010c92:	4618      	mov	r0, r3
 8010c94:	f00b fa0c 	bl	801c0b0 <_ZN8touchgfx3HAL12setMCUActiveEb>
 8010c98:	e006      	b.n	8010ca8 <_ZL12IdleTaskHookPv+0x2c>
    }
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
 8010c9a:	f7fd fc41 	bl	800e520 <_ZN8touchgfx3HAL11getInstanceEv>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f00b fa04 	bl	801c0b0 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
    return pdTRUE;
 8010ca8:	2301      	movs	r3, #1
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3708      	adds	r7, #8
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}

08010cb2 <vApplicationStackOverflowHook>:

extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 8010cb2:	b480      	push	{r7}
 8010cb4:	b083      	sub	sp, #12
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	6078      	str	r0, [r7, #4]
 8010cba:	6039      	str	r1, [r7, #0]
        while (1);
 8010cbc:	e7fe      	b.n	8010cbc <vApplicationStackOverflowHook+0xa>

08010cbe <vApplicationMallocFailedHook>:
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 8010cbe:	b480      	push	{r7}
 8010cc0:	b083      	sub	sp, #12
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
 8010cc6:	6039      	str	r1, [r7, #0]
        while (1);
 8010cc8:	e7fe      	b.n	8010cc8 <vApplicationMallocFailedHook+0xa>
	...

08010ccc <vApplicationIdleHook>:
    }

    void vApplicationIdleHook(void)
    {
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	af00      	add	r7, sp, #0
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8010cd0:	4902      	ldr	r1, [pc, #8]	; (8010cdc <vApplicationIdleHook+0x10>)
 8010cd2:	2000      	movs	r0, #0
 8010cd4:	f001 fd14 	bl	8012700 <vTaskSetApplicationTaskTag>
    }
 8010cd8:	bf00      	nop
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	08010c7d 	.word	0x08010c7d

08010ce0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b087      	sub	sp, #28
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	60f8      	str	r0, [r7, #12]
 8010ce8:	60b9      	str	r1, [r7, #8]
 8010cea:	4613      	mov	r3, r2
 8010cec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010cee:	2301      	movs	r3, #1
 8010cf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010cf6:	4b1f      	ldr	r3, [pc, #124]	; (8010d74 <FATFS_LinkDriverEx+0x94>)
 8010cf8:	7a5b      	ldrb	r3, [r3, #9]
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d131      	bne.n	8010d64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010d00:	4b1c      	ldr	r3, [pc, #112]	; (8010d74 <FATFS_LinkDriverEx+0x94>)
 8010d02:	7a5b      	ldrb	r3, [r3, #9]
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	461a      	mov	r2, r3
 8010d08:	4b1a      	ldr	r3, [pc, #104]	; (8010d74 <FATFS_LinkDriverEx+0x94>)
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010d0e:	4b19      	ldr	r3, [pc, #100]	; (8010d74 <FATFS_LinkDriverEx+0x94>)
 8010d10:	7a5b      	ldrb	r3, [r3, #9]
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	4a17      	ldr	r2, [pc, #92]	; (8010d74 <FATFS_LinkDriverEx+0x94>)
 8010d16:	009b      	lsls	r3, r3, #2
 8010d18:	4413      	add	r3, r2
 8010d1a:	68fa      	ldr	r2, [r7, #12]
 8010d1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010d1e:	4b15      	ldr	r3, [pc, #84]	; (8010d74 <FATFS_LinkDriverEx+0x94>)
 8010d20:	7a5b      	ldrb	r3, [r3, #9]
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	461a      	mov	r2, r3
 8010d26:	4b13      	ldr	r3, [pc, #76]	; (8010d74 <FATFS_LinkDriverEx+0x94>)
 8010d28:	4413      	add	r3, r2
 8010d2a:	79fa      	ldrb	r2, [r7, #7]
 8010d2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010d2e:	4b11      	ldr	r3, [pc, #68]	; (8010d74 <FATFS_LinkDriverEx+0x94>)
 8010d30:	7a5b      	ldrb	r3, [r3, #9]
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	1c5a      	adds	r2, r3, #1
 8010d36:	b2d1      	uxtb	r1, r2
 8010d38:	4a0e      	ldr	r2, [pc, #56]	; (8010d74 <FATFS_LinkDriverEx+0x94>)
 8010d3a:	7251      	strb	r1, [r2, #9]
 8010d3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010d3e:	7dbb      	ldrb	r3, [r7, #22]
 8010d40:	3330      	adds	r3, #48	; 0x30
 8010d42:	b2da      	uxtb	r2, r3
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	223a      	movs	r2, #58	; 0x3a
 8010d4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	3302      	adds	r3, #2
 8010d54:	222f      	movs	r2, #47	; 0x2f
 8010d56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	3303      	adds	r3, #3
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010d60:	2300      	movs	r3, #0
 8010d62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	371c      	adds	r7, #28
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr
 8010d72:	bf00      	nop
 8010d74:	200000dc 	.word	0x200000dc

08010d78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b082      	sub	sp, #8
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010d82:	2200      	movs	r2, #0
 8010d84:	6839      	ldr	r1, [r7, #0]
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7ff ffaa 	bl	8010ce0 <FATFS_LinkDriverEx>
 8010d8c:	4603      	mov	r3, r0
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3708      	adds	r7, #8
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}

08010d96 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010d96:	b480      	push	{r7}
 8010d98:	b085      	sub	sp, #20
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010da0:	2300      	movs	r3, #0
 8010da2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010da8:	2b84      	cmp	r3, #132	; 0x84
 8010daa:	d005      	beq.n	8010db8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010dac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	4413      	add	r3, r2
 8010db4:	3303      	adds	r3, #3
 8010db6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010db8:	68fb      	ldr	r3, [r7, #12]
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3714      	adds	r7, #20
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr

08010dc6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010dc6:	b480      	push	{r7}
 8010dc8:	b083      	sub	sp, #12
 8010dca:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dcc:	f3ef 8305 	mrs	r3, IPSR
 8010dd0:	607b      	str	r3, [r7, #4]
  return(result);
 8010dd2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	bf14      	ite	ne
 8010dd8:	2301      	movne	r3, #1
 8010dda:	2300      	moveq	r3, #0
 8010ddc:	b2db      	uxtb	r3, r3
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	370c      	adds	r7, #12
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr

08010dea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010dea:	b580      	push	{r7, lr}
 8010dec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010dee:	f001 fab1 	bl	8012354 <vTaskStartScheduler>
  
  return osOK;
 8010df2:	2300      	movs	r3, #0
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010dfc:	f001 ff18 	bl	8012c30 <xTaskGetSchedulerState>
 8010e00:	4603      	mov	r3, r0
 8010e02:	2b01      	cmp	r3, #1
 8010e04:	d101      	bne.n	8010e0a <osKernelRunning+0x12>
    return 0;
 8010e06:	2300      	movs	r3, #0
 8010e08:	e000      	b.n	8010e0c <osKernelRunning+0x14>
  else
    return 1;
 8010e0a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010e14:	f7ff ffd7 	bl	8010dc6 <inHandlerMode>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d003      	beq.n	8010e26 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010e1e:	f001 fb9f 	bl	8012560 <xTaskGetTickCountFromISR>
 8010e22:	4603      	mov	r3, r0
 8010e24:	e002      	b.n	8010e2c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010e26:	f001 fb8b 	bl	8012540 <xTaskGetTickCount>
 8010e2a:	4603      	mov	r3, r0
  }
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e32:	b087      	sub	sp, #28
 8010e34:	af02      	add	r7, sp, #8
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	685c      	ldr	r4, [r3, #4]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010e46:	b29e      	uxth	r6, r3
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7ff ffa1 	bl	8010d96 <makeFreeRtosPriority>
 8010e54:	4602      	mov	r2, r0
 8010e56:	f107 030c 	add.w	r3, r7, #12
 8010e5a:	9301      	str	r3, [sp, #4]
 8010e5c:	9200      	str	r2, [sp, #0]
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	4632      	mov	r2, r6
 8010e62:	4629      	mov	r1, r5
 8010e64:	4620      	mov	r0, r4
 8010e66:	f001 f908 	bl	801207a <xTaskCreate>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	d001      	beq.n	8010e74 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8010e70:	2300      	movs	r3, #0
 8010e72:	e000      	b.n	8010e76 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8010e74:	68fb      	ldr	r3, [r7, #12]
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3714      	adds	r7, #20
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010e7e:	b580      	push	{r7, lr}
 8010e80:	b084      	sub	sp, #16
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d001      	beq.n	8010e94 <osDelay+0x16>
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	e000      	b.n	8010e96 <osDelay+0x18>
 8010e94:	2301      	movs	r3, #1
 8010e96:	4618      	mov	r0, r3
 8010e98:	f001 fa26 	bl	80122e8 <vTaskDelay>
  
  return osOK;
 8010e9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3710      	adds	r7, #16
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}

08010ea6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010ea6:	b580      	push	{r7, lr}
 8010ea8:	b084      	sub	sp, #16
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
 8010eae:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	2b01      	cmp	r3, #1
 8010eb4:	d110      	bne.n	8010ed8 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8010eb6:	2203      	movs	r2, #3
 8010eb8:	2100      	movs	r1, #0
 8010eba:	2001      	movs	r0, #1
 8010ebc:	f000 fa80 	bl	80113c0 <xQueueGenericCreate>
 8010ec0:	60f8      	str	r0, [r7, #12]
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d005      	beq.n	8010ed4 <osSemaphoreCreate+0x2e>
 8010ec8:	2300      	movs	r3, #0
 8010eca:	2200      	movs	r2, #0
 8010ecc:	2100      	movs	r1, #0
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	f000 fb06 	bl	80114e0 <xQueueGenericSend>
    return sema;
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	e006      	b.n	8010ee6 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	683a      	ldr	r2, [r7, #0]
 8010edc:	4611      	mov	r1, r2
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f000 fac8 	bl	8011474 <xQueueCreateCountingSemaphore>
 8010ee4:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3710      	adds	r7, #16
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
	...

08010ef0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b084      	sub	sp, #16
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8010efa:	2300      	movs	r3, #0
 8010efc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d101      	bne.n	8010f08 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010f04:	2380      	movs	r3, #128	; 0x80
 8010f06:	e03a      	b.n	8010f7e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f12:	d103      	bne.n	8010f1c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010f14:	f04f 33ff 	mov.w	r3, #4294967295
 8010f18:	60fb      	str	r3, [r7, #12]
 8010f1a:	e009      	b.n	8010f30 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d006      	beq.n	8010f30 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d101      	bne.n	8010f30 <osSemaphoreWait+0x40>
      ticks = 1;
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010f30:	f7ff ff49 	bl	8010dc6 <inHandlerMode>
 8010f34:	4603      	mov	r3, r0
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d017      	beq.n	8010f6a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010f3a:	f107 0308 	add.w	r3, r7, #8
 8010f3e:	461a      	mov	r2, r3
 8010f40:	2100      	movs	r1, #0
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f000 feee 	bl	8011d24 <xQueueReceiveFromISR>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2b01      	cmp	r3, #1
 8010f4c:	d001      	beq.n	8010f52 <osSemaphoreWait+0x62>
      return osErrorOS;
 8010f4e:	23ff      	movs	r3, #255	; 0xff
 8010f50:	e015      	b.n	8010f7e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d011      	beq.n	8010f7c <osSemaphoreWait+0x8c>
 8010f58:	4b0b      	ldr	r3, [pc, #44]	; (8010f88 <osSemaphoreWait+0x98>)
 8010f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f5e:	601a      	str	r2, [r3, #0]
 8010f60:	f3bf 8f4f 	dsb	sy
 8010f64:	f3bf 8f6f 	isb	sy
 8010f68:	e008      	b.n	8010f7c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8010f6a:	68f9      	ldr	r1, [r7, #12]
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f000 fdc9 	bl	8011b04 <xQueueSemaphoreTake>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	d001      	beq.n	8010f7c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8010f78:	23ff      	movs	r3, #255	; 0xff
 8010f7a:	e000      	b.n	8010f7e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010f7c:	2300      	movs	r3, #0
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3710      	adds	r7, #16
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	e000ed04 	.word	0xe000ed04

08010f8c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010f94:	2300      	movs	r3, #0
 8010f96:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010f9c:	f7ff ff13 	bl	8010dc6 <inHandlerMode>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d016      	beq.n	8010fd4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010fa6:	f107 0308 	add.w	r3, r7, #8
 8010faa:	4619      	mov	r1, r3
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f000 fc35 	bl	801181c <xQueueGiveFromISR>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d001      	beq.n	8010fbc <osSemaphoreRelease+0x30>
      return osErrorOS;
 8010fb8:	23ff      	movs	r3, #255	; 0xff
 8010fba:	e017      	b.n	8010fec <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d013      	beq.n	8010fea <osSemaphoreRelease+0x5e>
 8010fc2:	4b0c      	ldr	r3, [pc, #48]	; (8010ff4 <osSemaphoreRelease+0x68>)
 8010fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fc8:	601a      	str	r2, [r3, #0]
 8010fca:	f3bf 8f4f 	dsb	sy
 8010fce:	f3bf 8f6f 	isb	sy
 8010fd2:	e00a      	b.n	8010fea <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	2100      	movs	r1, #0
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f000 fa80 	bl	80114e0 <xQueueGenericSend>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d001      	beq.n	8010fea <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8010fe6:	23ff      	movs	r3, #255	; 0xff
 8010fe8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8010fea:	68fb      	ldr	r3, [r7, #12]
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3710      	adds	r7, #16
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	e000ed04 	.word	0xe000ed04

08010ff8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6818      	ldr	r0, [r3, #0]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	685b      	ldr	r3, [r3, #4]
 801100a:	2200      	movs	r2, #0
 801100c:	4619      	mov	r1, r3
 801100e:	f000 f9d7 	bl	80113c0 <xQueueGenericCreate>
 8011012:	4603      	mov	r3, r0
#endif
}
 8011014:	4618      	mov	r0, r3
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b086      	sub	sp, #24
 8011020:	af00      	add	r7, sp, #0
 8011022:	60f8      	str	r0, [r7, #12]
 8011024:	60b9      	str	r1, [r7, #8]
 8011026:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011028:	2300      	movs	r3, #0
 801102a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d101      	bne.n	801103a <osMessagePut+0x1e>
    ticks = 1;
 8011036:	2301      	movs	r3, #1
 8011038:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801103a:	f7ff fec4 	bl	8010dc6 <inHandlerMode>
 801103e:	4603      	mov	r3, r0
 8011040:	2b00      	cmp	r3, #0
 8011042:	d018      	beq.n	8011076 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011044:	f107 0210 	add.w	r2, r7, #16
 8011048:	f107 0108 	add.w	r1, r7, #8
 801104c:	2300      	movs	r3, #0
 801104e:	68f8      	ldr	r0, [r7, #12]
 8011050:	f000 fb48 	bl	80116e4 <xQueueGenericSendFromISR>
 8011054:	4603      	mov	r3, r0
 8011056:	2b01      	cmp	r3, #1
 8011058:	d001      	beq.n	801105e <osMessagePut+0x42>
      return osErrorOS;
 801105a:	23ff      	movs	r3, #255	; 0xff
 801105c:	e018      	b.n	8011090 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d014      	beq.n	801108e <osMessagePut+0x72>
 8011064:	4b0c      	ldr	r3, [pc, #48]	; (8011098 <osMessagePut+0x7c>)
 8011066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801106a:	601a      	str	r2, [r3, #0]
 801106c:	f3bf 8f4f 	dsb	sy
 8011070:	f3bf 8f6f 	isb	sy
 8011074:	e00b      	b.n	801108e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011076:	f107 0108 	add.w	r1, r7, #8
 801107a:	2300      	movs	r3, #0
 801107c:	697a      	ldr	r2, [r7, #20]
 801107e:	68f8      	ldr	r0, [r7, #12]
 8011080:	f000 fa2e 	bl	80114e0 <xQueueGenericSend>
 8011084:	4603      	mov	r3, r0
 8011086:	2b01      	cmp	r3, #1
 8011088:	d001      	beq.n	801108e <osMessagePut+0x72>
      return osErrorOS;
 801108a:	23ff      	movs	r3, #255	; 0xff
 801108c:	e000      	b.n	8011090 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801108e:	2300      	movs	r3, #0
}
 8011090:	4618      	mov	r0, r3
 8011092:	3718      	adds	r7, #24
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}
 8011098:	e000ed04 	.word	0xe000ed04

0801109c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801109c:	b590      	push	{r4, r7, lr}
 801109e:	b08b      	sub	sp, #44	; 0x2c
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80110ac:	2300      	movs	r3, #0
 80110ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d10a      	bne.n	80110cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80110b6:	2380      	movs	r3, #128	; 0x80
 80110b8:	617b      	str	r3, [r7, #20]
    return event;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	461c      	mov	r4, r3
 80110be:	f107 0314 	add.w	r3, r7, #20
 80110c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80110c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80110ca:	e054      	b.n	8011176 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80110cc:	2300      	movs	r3, #0
 80110ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80110d0:	2300      	movs	r3, #0
 80110d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110da:	d103      	bne.n	80110e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80110dc:	f04f 33ff 	mov.w	r3, #4294967295
 80110e0:	627b      	str	r3, [r7, #36]	; 0x24
 80110e2:	e009      	b.n	80110f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d006      	beq.n	80110f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80110ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d101      	bne.n	80110f8 <osMessageGet+0x5c>
      ticks = 1;
 80110f4:	2301      	movs	r3, #1
 80110f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80110f8:	f7ff fe65 	bl	8010dc6 <inHandlerMode>
 80110fc:	4603      	mov	r3, r0
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d01c      	beq.n	801113c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011102:	f107 0220 	add.w	r2, r7, #32
 8011106:	f107 0314 	add.w	r3, r7, #20
 801110a:	3304      	adds	r3, #4
 801110c:	4619      	mov	r1, r3
 801110e:	68b8      	ldr	r0, [r7, #8]
 8011110:	f000 fe08 	bl	8011d24 <xQueueReceiveFromISR>
 8011114:	4603      	mov	r3, r0
 8011116:	2b01      	cmp	r3, #1
 8011118:	d102      	bne.n	8011120 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801111a:	2310      	movs	r3, #16
 801111c:	617b      	str	r3, [r7, #20]
 801111e:	e001      	b.n	8011124 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011120:	2300      	movs	r3, #0
 8011122:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011124:	6a3b      	ldr	r3, [r7, #32]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d01d      	beq.n	8011166 <osMessageGet+0xca>
 801112a:	4b15      	ldr	r3, [pc, #84]	; (8011180 <osMessageGet+0xe4>)
 801112c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011130:	601a      	str	r2, [r3, #0]
 8011132:	f3bf 8f4f 	dsb	sy
 8011136:	f3bf 8f6f 	isb	sy
 801113a:	e014      	b.n	8011166 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801113c:	f107 0314 	add.w	r3, r7, #20
 8011140:	3304      	adds	r3, #4
 8011142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011144:	4619      	mov	r1, r3
 8011146:	68b8      	ldr	r0, [r7, #8]
 8011148:	f000 fbfa 	bl	8011940 <xQueueReceive>
 801114c:	4603      	mov	r3, r0
 801114e:	2b01      	cmp	r3, #1
 8011150:	d102      	bne.n	8011158 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011152:	2310      	movs	r3, #16
 8011154:	617b      	str	r3, [r7, #20]
 8011156:	e006      	b.n	8011166 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801115a:	2b00      	cmp	r3, #0
 801115c:	d101      	bne.n	8011162 <osMessageGet+0xc6>
 801115e:	2300      	movs	r3, #0
 8011160:	e000      	b.n	8011164 <osMessageGet+0xc8>
 8011162:	2340      	movs	r3, #64	; 0x40
 8011164:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	461c      	mov	r4, r3
 801116a:	f107 0314 	add.w	r3, r7, #20
 801116e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011176:	68f8      	ldr	r0, [r7, #12]
 8011178:	372c      	adds	r7, #44	; 0x2c
 801117a:	46bd      	mov	sp, r7
 801117c:	bd90      	pop	{r4, r7, pc}
 801117e:	bf00      	nop
 8011180:	e000ed04 	.word	0xe000ed04

08011184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011184:	b480      	push	{r7}
 8011186:	b083      	sub	sp, #12
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f103 0208 	add.w	r2, r3, #8
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f04f 32ff 	mov.w	r2, #4294967295
 801119c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f103 0208 	add.w	r2, r3, #8
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f103 0208 	add.w	r2, r3, #8
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2200      	movs	r2, #0
 80111b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80111b8:	bf00      	nop
 80111ba:	370c      	adds	r7, #12
 80111bc:	46bd      	mov	sp, r7
 80111be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c2:	4770      	bx	lr

080111c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80111c4:	b480      	push	{r7}
 80111c6:	b083      	sub	sp, #12
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2200      	movs	r2, #0
 80111d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80111d2:	bf00      	nop
 80111d4:	370c      	adds	r7, #12
 80111d6:	46bd      	mov	sp, r7
 80111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111dc:	4770      	bx	lr

080111de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80111de:	b480      	push	{r7}
 80111e0:	b085      	sub	sp, #20
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	6078      	str	r0, [r7, #4]
 80111e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	685b      	ldr	r3, [r3, #4]
 80111ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	68fa      	ldr	r2, [r7, #12]
 80111f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	689a      	ldr	r2, [r3, #8]
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	689b      	ldr	r3, [r3, #8]
 8011200:	683a      	ldr	r2, [r7, #0]
 8011202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	683a      	ldr	r2, [r7, #0]
 8011208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	1c5a      	adds	r2, r3, #1
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	601a      	str	r2, [r3, #0]
}
 801121a:	bf00      	nop
 801121c:	3714      	adds	r7, #20
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr

08011226 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011226:	b480      	push	{r7}
 8011228:	b085      	sub	sp, #20
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
 801122e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011236:	68bb      	ldr	r3, [r7, #8]
 8011238:	f1b3 3fff 	cmp.w	r3, #4294967295
 801123c:	d103      	bne.n	8011246 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	691b      	ldr	r3, [r3, #16]
 8011242:	60fb      	str	r3, [r7, #12]
 8011244:	e00c      	b.n	8011260 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	3308      	adds	r3, #8
 801124a:	60fb      	str	r3, [r7, #12]
 801124c:	e002      	b.n	8011254 <vListInsert+0x2e>
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	60fb      	str	r3, [r7, #12]
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	685b      	ldr	r3, [r3, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	68ba      	ldr	r2, [r7, #8]
 801125c:	429a      	cmp	r2, r3
 801125e:	d2f6      	bcs.n	801124e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	685a      	ldr	r2, [r3, #4]
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	685b      	ldr	r3, [r3, #4]
 801126c:	683a      	ldr	r2, [r7, #0]
 801126e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	68fa      	ldr	r2, [r7, #12]
 8011274:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	683a      	ldr	r2, [r7, #0]
 801127a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	687a      	ldr	r2, [r7, #4]
 8011280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	1c5a      	adds	r2, r3, #1
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	601a      	str	r2, [r3, #0]
}
 801128c:	bf00      	nop
 801128e:	3714      	adds	r7, #20
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr

08011298 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011298:	b480      	push	{r7}
 801129a:	b085      	sub	sp, #20
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	691b      	ldr	r3, [r3, #16]
 80112a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	687a      	ldr	r2, [r7, #4]
 80112ac:	6892      	ldr	r2, [r2, #8]
 80112ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	689b      	ldr	r3, [r3, #8]
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	6852      	ldr	r2, [r2, #4]
 80112b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d103      	bne.n	80112cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	689a      	ldr	r2, [r3, #8]
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2200      	movs	r2, #0
 80112d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	1e5a      	subs	r2, r3, #1
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	681b      	ldr	r3, [r3, #0]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3714      	adds	r7, #20
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d10b      	bne.n	8011318 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011304:	b672      	cpsid	i
 8011306:	f383 8811 	msr	BASEPRI, r3
 801130a:	f3bf 8f6f 	isb	sy
 801130e:	f3bf 8f4f 	dsb	sy
 8011312:	b662      	cpsie	i
 8011314:	60bb      	str	r3, [r7, #8]
 8011316:	e7fe      	b.n	8011316 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8011318:	f001 ffde 	bl	80132d8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	681a      	ldr	r2, [r3, #0]
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011324:	68f9      	ldr	r1, [r7, #12]
 8011326:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011328:	fb01 f303 	mul.w	r3, r1, r3
 801132c:	441a      	add	r2, r3
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2200      	movs	r2, #0
 8011336:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681a      	ldr	r2, [r3, #0]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011348:	3b01      	subs	r3, #1
 801134a:	68f9      	ldr	r1, [r7, #12]
 801134c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801134e:	fb01 f303 	mul.w	r3, r1, r3
 8011352:	441a      	add	r2, r3
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	22ff      	movs	r2, #255	; 0xff
 801135c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	22ff      	movs	r2, #255	; 0xff
 8011364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d114      	bne.n	8011398 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	691b      	ldr	r3, [r3, #16]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d01a      	beq.n	80113ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	3310      	adds	r3, #16
 801137a:	4618      	mov	r0, r3
 801137c:	f001 fab2 	bl	80128e4 <xTaskRemoveFromEventList>
 8011380:	4603      	mov	r3, r0
 8011382:	2b00      	cmp	r3, #0
 8011384:	d012      	beq.n	80113ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011386:	4b0d      	ldr	r3, [pc, #52]	; (80113bc <xQueueGenericReset+0xd0>)
 8011388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801138c:	601a      	str	r2, [r3, #0]
 801138e:	f3bf 8f4f 	dsb	sy
 8011392:	f3bf 8f6f 	isb	sy
 8011396:	e009      	b.n	80113ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	3310      	adds	r3, #16
 801139c:	4618      	mov	r0, r3
 801139e:	f7ff fef1 	bl	8011184 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	3324      	adds	r3, #36	; 0x24
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7ff feec 	bl	8011184 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80113ac:	f001 ffc6 	bl	801333c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80113b0:	2301      	movs	r3, #1
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	e000ed04 	.word	0xe000ed04

080113c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b08a      	sub	sp, #40	; 0x28
 80113c4:	af02      	add	r7, sp, #8
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	4613      	mov	r3, r2
 80113cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d10b      	bne.n	80113ec <xQueueGenericCreate+0x2c>
 80113d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d8:	b672      	cpsid	i
 80113da:	f383 8811 	msr	BASEPRI, r3
 80113de:	f3bf 8f6f 	isb	sy
 80113e2:	f3bf 8f4f 	dsb	sy
 80113e6:	b662      	cpsie	i
 80113e8:	613b      	str	r3, [r7, #16]
 80113ea:	e7fe      	b.n	80113ea <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d102      	bne.n	80113f8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80113f2:	2300      	movs	r3, #0
 80113f4:	61fb      	str	r3, [r7, #28]
 80113f6:	e004      	b.n	8011402 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	68ba      	ldr	r2, [r7, #8]
 80113fc:	fb02 f303 	mul.w	r3, r2, r3
 8011400:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	3348      	adds	r3, #72	; 0x48
 8011406:	4618      	mov	r0, r3
 8011408:	f002 f888 	bl	801351c <pvPortMalloc>
 801140c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801140e:	69bb      	ldr	r3, [r7, #24]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d00b      	beq.n	801142c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	3348      	adds	r3, #72	; 0x48
 8011418:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801141a:	79fa      	ldrb	r2, [r7, #7]
 801141c:	69bb      	ldr	r3, [r7, #24]
 801141e:	9300      	str	r3, [sp, #0]
 8011420:	4613      	mov	r3, r2
 8011422:	697a      	ldr	r2, [r7, #20]
 8011424:	68b9      	ldr	r1, [r7, #8]
 8011426:	68f8      	ldr	r0, [r7, #12]
 8011428:	f000 f805 	bl	8011436 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801142c:	69bb      	ldr	r3, [r7, #24]
	}
 801142e:	4618      	mov	r0, r3
 8011430:	3720      	adds	r7, #32
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}

08011436 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011436:	b580      	push	{r7, lr}
 8011438:	b084      	sub	sp, #16
 801143a:	af00      	add	r7, sp, #0
 801143c:	60f8      	str	r0, [r7, #12]
 801143e:	60b9      	str	r1, [r7, #8]
 8011440:	607a      	str	r2, [r7, #4]
 8011442:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d103      	bne.n	8011452 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801144a:	69bb      	ldr	r3, [r7, #24]
 801144c:	69ba      	ldr	r2, [r7, #24]
 801144e:	601a      	str	r2, [r3, #0]
 8011450:	e002      	b.n	8011458 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011452:	69bb      	ldr	r3, [r7, #24]
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011458:	69bb      	ldr	r3, [r7, #24]
 801145a:	68fa      	ldr	r2, [r7, #12]
 801145c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801145e:	69bb      	ldr	r3, [r7, #24]
 8011460:	68ba      	ldr	r2, [r7, #8]
 8011462:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011464:	2101      	movs	r1, #1
 8011466:	69b8      	ldr	r0, [r7, #24]
 8011468:	f7ff ff40 	bl	80112ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801146c:	bf00      	nop
 801146e:	3710      	adds	r7, #16
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}

08011474 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011474:	b580      	push	{r7, lr}
 8011476:	b086      	sub	sp, #24
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d10b      	bne.n	801149c <xQueueCreateCountingSemaphore+0x28>
 8011484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011488:	b672      	cpsid	i
 801148a:	f383 8811 	msr	BASEPRI, r3
 801148e:	f3bf 8f6f 	isb	sy
 8011492:	f3bf 8f4f 	dsb	sy
 8011496:	b662      	cpsie	i
 8011498:	613b      	str	r3, [r7, #16]
 801149a:	e7fe      	b.n	801149a <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801149c:	683a      	ldr	r2, [r7, #0]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d90b      	bls.n	80114bc <xQueueCreateCountingSemaphore+0x48>
 80114a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a8:	b672      	cpsid	i
 80114aa:	f383 8811 	msr	BASEPRI, r3
 80114ae:	f3bf 8f6f 	isb	sy
 80114b2:	f3bf 8f4f 	dsb	sy
 80114b6:	b662      	cpsie	i
 80114b8:	60fb      	str	r3, [r7, #12]
 80114ba:	e7fe      	b.n	80114ba <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80114bc:	2202      	movs	r2, #2
 80114be:	2100      	movs	r1, #0
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f7ff ff7d 	bl	80113c0 <xQueueGenericCreate>
 80114c6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d002      	beq.n	80114d4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	683a      	ldr	r2, [r7, #0]
 80114d2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80114d4:	697b      	ldr	r3, [r7, #20]
	}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3718      	adds	r7, #24
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
	...

080114e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b08e      	sub	sp, #56	; 0x38
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	607a      	str	r2, [r7, #4]
 80114ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80114ee:	2300      	movs	r3, #0
 80114f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80114f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d10b      	bne.n	8011514 <xQueueGenericSend+0x34>
 80114fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011500:	b672      	cpsid	i
 8011502:	f383 8811 	msr	BASEPRI, r3
 8011506:	f3bf 8f6f 	isb	sy
 801150a:	f3bf 8f4f 	dsb	sy
 801150e:	b662      	cpsie	i
 8011510:	62bb      	str	r3, [r7, #40]	; 0x28
 8011512:	e7fe      	b.n	8011512 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d103      	bne.n	8011522 <xQueueGenericSend+0x42>
 801151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801151e:	2b00      	cmp	r3, #0
 8011520:	d101      	bne.n	8011526 <xQueueGenericSend+0x46>
 8011522:	2301      	movs	r3, #1
 8011524:	e000      	b.n	8011528 <xQueueGenericSend+0x48>
 8011526:	2300      	movs	r3, #0
 8011528:	2b00      	cmp	r3, #0
 801152a:	d10b      	bne.n	8011544 <xQueueGenericSend+0x64>
 801152c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011530:	b672      	cpsid	i
 8011532:	f383 8811 	msr	BASEPRI, r3
 8011536:	f3bf 8f6f 	isb	sy
 801153a:	f3bf 8f4f 	dsb	sy
 801153e:	b662      	cpsie	i
 8011540:	627b      	str	r3, [r7, #36]	; 0x24
 8011542:	e7fe      	b.n	8011542 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	2b02      	cmp	r3, #2
 8011548:	d103      	bne.n	8011552 <xQueueGenericSend+0x72>
 801154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801154e:	2b01      	cmp	r3, #1
 8011550:	d101      	bne.n	8011556 <xQueueGenericSend+0x76>
 8011552:	2301      	movs	r3, #1
 8011554:	e000      	b.n	8011558 <xQueueGenericSend+0x78>
 8011556:	2300      	movs	r3, #0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d10b      	bne.n	8011574 <xQueueGenericSend+0x94>
 801155c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011560:	b672      	cpsid	i
 8011562:	f383 8811 	msr	BASEPRI, r3
 8011566:	f3bf 8f6f 	isb	sy
 801156a:	f3bf 8f4f 	dsb	sy
 801156e:	b662      	cpsie	i
 8011570:	623b      	str	r3, [r7, #32]
 8011572:	e7fe      	b.n	8011572 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011574:	f001 fb5c 	bl	8012c30 <xTaskGetSchedulerState>
 8011578:	4603      	mov	r3, r0
 801157a:	2b00      	cmp	r3, #0
 801157c:	d102      	bne.n	8011584 <xQueueGenericSend+0xa4>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d101      	bne.n	8011588 <xQueueGenericSend+0xa8>
 8011584:	2301      	movs	r3, #1
 8011586:	e000      	b.n	801158a <xQueueGenericSend+0xaa>
 8011588:	2300      	movs	r3, #0
 801158a:	2b00      	cmp	r3, #0
 801158c:	d10b      	bne.n	80115a6 <xQueueGenericSend+0xc6>
 801158e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011592:	b672      	cpsid	i
 8011594:	f383 8811 	msr	BASEPRI, r3
 8011598:	f3bf 8f6f 	isb	sy
 801159c:	f3bf 8f4f 	dsb	sy
 80115a0:	b662      	cpsie	i
 80115a2:	61fb      	str	r3, [r7, #28]
 80115a4:	e7fe      	b.n	80115a4 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80115a6:	f001 fe97 	bl	80132d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80115aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d302      	bcc.n	80115bc <xQueueGenericSend+0xdc>
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	2b02      	cmp	r3, #2
 80115ba:	d129      	bne.n	8011610 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80115bc:	683a      	ldr	r2, [r7, #0]
 80115be:	68b9      	ldr	r1, [r7, #8]
 80115c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115c2:	f000 fc4a 	bl	8011e5a <prvCopyDataToQueue>
 80115c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80115c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d010      	beq.n	80115f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80115d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d2:	3324      	adds	r3, #36	; 0x24
 80115d4:	4618      	mov	r0, r3
 80115d6:	f001 f985 	bl	80128e4 <xTaskRemoveFromEventList>
 80115da:	4603      	mov	r3, r0
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d013      	beq.n	8011608 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80115e0:	4b3f      	ldr	r3, [pc, #252]	; (80116e0 <xQueueGenericSend+0x200>)
 80115e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115e6:	601a      	str	r2, [r3, #0]
 80115e8:	f3bf 8f4f 	dsb	sy
 80115ec:	f3bf 8f6f 	isb	sy
 80115f0:	e00a      	b.n	8011608 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80115f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d007      	beq.n	8011608 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80115f8:	4b39      	ldr	r3, [pc, #228]	; (80116e0 <xQueueGenericSend+0x200>)
 80115fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115fe:	601a      	str	r2, [r3, #0]
 8011600:	f3bf 8f4f 	dsb	sy
 8011604:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011608:	f001 fe98 	bl	801333c <vPortExitCritical>
				return pdPASS;
 801160c:	2301      	movs	r3, #1
 801160e:	e063      	b.n	80116d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d103      	bne.n	801161e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011616:	f001 fe91 	bl	801333c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801161a:	2300      	movs	r3, #0
 801161c:	e05c      	b.n	80116d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801161e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011620:	2b00      	cmp	r3, #0
 8011622:	d106      	bne.n	8011632 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011624:	f107 0314 	add.w	r3, r7, #20
 8011628:	4618      	mov	r0, r3
 801162a:	f001 f9bf 	bl	80129ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801162e:	2301      	movs	r3, #1
 8011630:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011632:	f001 fe83 	bl	801333c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011636:	f000 fed7 	bl	80123e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801163a:	f001 fe4d 	bl	80132d8 <vPortEnterCritical>
 801163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011644:	b25b      	sxtb	r3, r3
 8011646:	f1b3 3fff 	cmp.w	r3, #4294967295
 801164a:	d103      	bne.n	8011654 <xQueueGenericSend+0x174>
 801164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801164e:	2200      	movs	r2, #0
 8011650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801165a:	b25b      	sxtb	r3, r3
 801165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011660:	d103      	bne.n	801166a <xQueueGenericSend+0x18a>
 8011662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011664:	2200      	movs	r2, #0
 8011666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801166a:	f001 fe67 	bl	801333c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801166e:	1d3a      	adds	r2, r7, #4
 8011670:	f107 0314 	add.w	r3, r7, #20
 8011674:	4611      	mov	r1, r2
 8011676:	4618      	mov	r0, r3
 8011678:	f001 f9ae 	bl	80129d8 <xTaskCheckForTimeOut>
 801167c:	4603      	mov	r3, r0
 801167e:	2b00      	cmp	r3, #0
 8011680:	d124      	bne.n	80116cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011682:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011684:	f000 fce1 	bl	801204a <prvIsQueueFull>
 8011688:	4603      	mov	r3, r0
 801168a:	2b00      	cmp	r3, #0
 801168c:	d018      	beq.n	80116c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011690:	3310      	adds	r3, #16
 8011692:	687a      	ldr	r2, [r7, #4]
 8011694:	4611      	mov	r1, r2
 8011696:	4618      	mov	r0, r3
 8011698:	f001 f8fe 	bl	8012898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801169c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801169e:	f000 fc6c 	bl	8011f7a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80116a2:	f000 feaf 	bl	8012404 <xTaskResumeAll>
 80116a6:	4603      	mov	r3, r0
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f47f af7c 	bne.w	80115a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80116ae:	4b0c      	ldr	r3, [pc, #48]	; (80116e0 <xQueueGenericSend+0x200>)
 80116b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116b4:	601a      	str	r2, [r3, #0]
 80116b6:	f3bf 8f4f 	dsb	sy
 80116ba:	f3bf 8f6f 	isb	sy
 80116be:	e772      	b.n	80115a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80116c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116c2:	f000 fc5a 	bl	8011f7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80116c6:	f000 fe9d 	bl	8012404 <xTaskResumeAll>
 80116ca:	e76c      	b.n	80115a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80116cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116ce:	f000 fc54 	bl	8011f7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80116d2:	f000 fe97 	bl	8012404 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80116d6:	2300      	movs	r3, #0
		}
	}
}
 80116d8:	4618      	mov	r0, r3
 80116da:	3738      	adds	r7, #56	; 0x38
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd80      	pop	{r7, pc}
 80116e0:	e000ed04 	.word	0xe000ed04

080116e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b08e      	sub	sp, #56	; 0x38
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	60f8      	str	r0, [r7, #12]
 80116ec:	60b9      	str	r1, [r7, #8]
 80116ee:	607a      	str	r2, [r7, #4]
 80116f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80116f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d10b      	bne.n	8011714 <xQueueGenericSendFromISR+0x30>
 80116fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011700:	b672      	cpsid	i
 8011702:	f383 8811 	msr	BASEPRI, r3
 8011706:	f3bf 8f6f 	isb	sy
 801170a:	f3bf 8f4f 	dsb	sy
 801170e:	b662      	cpsie	i
 8011710:	627b      	str	r3, [r7, #36]	; 0x24
 8011712:	e7fe      	b.n	8011712 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d103      	bne.n	8011722 <xQueueGenericSendFromISR+0x3e>
 801171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801171e:	2b00      	cmp	r3, #0
 8011720:	d101      	bne.n	8011726 <xQueueGenericSendFromISR+0x42>
 8011722:	2301      	movs	r3, #1
 8011724:	e000      	b.n	8011728 <xQueueGenericSendFromISR+0x44>
 8011726:	2300      	movs	r3, #0
 8011728:	2b00      	cmp	r3, #0
 801172a:	d10b      	bne.n	8011744 <xQueueGenericSendFromISR+0x60>
 801172c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011730:	b672      	cpsid	i
 8011732:	f383 8811 	msr	BASEPRI, r3
 8011736:	f3bf 8f6f 	isb	sy
 801173a:	f3bf 8f4f 	dsb	sy
 801173e:	b662      	cpsie	i
 8011740:	623b      	str	r3, [r7, #32]
 8011742:	e7fe      	b.n	8011742 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	2b02      	cmp	r3, #2
 8011748:	d103      	bne.n	8011752 <xQueueGenericSendFromISR+0x6e>
 801174a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801174e:	2b01      	cmp	r3, #1
 8011750:	d101      	bne.n	8011756 <xQueueGenericSendFromISR+0x72>
 8011752:	2301      	movs	r3, #1
 8011754:	e000      	b.n	8011758 <xQueueGenericSendFromISR+0x74>
 8011756:	2300      	movs	r3, #0
 8011758:	2b00      	cmp	r3, #0
 801175a:	d10b      	bne.n	8011774 <xQueueGenericSendFromISR+0x90>
 801175c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011760:	b672      	cpsid	i
 8011762:	f383 8811 	msr	BASEPRI, r3
 8011766:	f3bf 8f6f 	isb	sy
 801176a:	f3bf 8f4f 	dsb	sy
 801176e:	b662      	cpsie	i
 8011770:	61fb      	str	r3, [r7, #28]
 8011772:	e7fe      	b.n	8011772 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011774:	f001 fe90 	bl	8013498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011778:	f3ef 8211 	mrs	r2, BASEPRI
 801177c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011780:	b672      	cpsid	i
 8011782:	f383 8811 	msr	BASEPRI, r3
 8011786:	f3bf 8f6f 	isb	sy
 801178a:	f3bf 8f4f 	dsb	sy
 801178e:	b662      	cpsie	i
 8011790:	61ba      	str	r2, [r7, #24]
 8011792:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011794:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011796:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d302      	bcc.n	80117aa <xQueueGenericSendFromISR+0xc6>
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	2b02      	cmp	r3, #2
 80117a8:	d12c      	bne.n	8011804 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80117aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80117b4:	683a      	ldr	r2, [r7, #0]
 80117b6:	68b9      	ldr	r1, [r7, #8]
 80117b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117ba:	f000 fb4e 	bl	8011e5a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80117be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80117c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117c6:	d112      	bne.n	80117ee <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80117c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d016      	beq.n	80117fe <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80117d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d2:	3324      	adds	r3, #36	; 0x24
 80117d4:	4618      	mov	r0, r3
 80117d6:	f001 f885 	bl	80128e4 <xTaskRemoveFromEventList>
 80117da:	4603      	mov	r3, r0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d00e      	beq.n	80117fe <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d00b      	beq.n	80117fe <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2201      	movs	r2, #1
 80117ea:	601a      	str	r2, [r3, #0]
 80117ec:	e007      	b.n	80117fe <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80117ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80117f2:	3301      	adds	r3, #1
 80117f4:	b2db      	uxtb	r3, r3
 80117f6:	b25a      	sxtb	r2, r3
 80117f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80117fe:	2301      	movs	r3, #1
 8011800:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011802:	e001      	b.n	8011808 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011804:	2300      	movs	r3, #0
 8011806:	637b      	str	r3, [r7, #52]	; 0x34
 8011808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801180a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011814:	4618      	mov	r0, r3
 8011816:	3738      	adds	r7, #56	; 0x38
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b08e      	sub	sp, #56	; 0x38
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801182a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182c:	2b00      	cmp	r3, #0
 801182e:	d10b      	bne.n	8011848 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011834:	b672      	cpsid	i
 8011836:	f383 8811 	msr	BASEPRI, r3
 801183a:	f3bf 8f6f 	isb	sy
 801183e:	f3bf 8f4f 	dsb	sy
 8011842:	b662      	cpsie	i
 8011844:	623b      	str	r3, [r7, #32]
 8011846:	e7fe      	b.n	8011846 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801184c:	2b00      	cmp	r3, #0
 801184e:	d00b      	beq.n	8011868 <xQueueGiveFromISR+0x4c>
 8011850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011854:	b672      	cpsid	i
 8011856:	f383 8811 	msr	BASEPRI, r3
 801185a:	f3bf 8f6f 	isb	sy
 801185e:	f3bf 8f4f 	dsb	sy
 8011862:	b662      	cpsie	i
 8011864:	61fb      	str	r3, [r7, #28]
 8011866:	e7fe      	b.n	8011866 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8011868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d103      	bne.n	8011878 <xQueueGiveFromISR+0x5c>
 8011870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d101      	bne.n	801187c <xQueueGiveFromISR+0x60>
 8011878:	2301      	movs	r3, #1
 801187a:	e000      	b.n	801187e <xQueueGiveFromISR+0x62>
 801187c:	2300      	movs	r3, #0
 801187e:	2b00      	cmp	r3, #0
 8011880:	d10b      	bne.n	801189a <xQueueGiveFromISR+0x7e>
 8011882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011886:	b672      	cpsid	i
 8011888:	f383 8811 	msr	BASEPRI, r3
 801188c:	f3bf 8f6f 	isb	sy
 8011890:	f3bf 8f4f 	dsb	sy
 8011894:	b662      	cpsie	i
 8011896:	61bb      	str	r3, [r7, #24]
 8011898:	e7fe      	b.n	8011898 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801189a:	f001 fdfd 	bl	8013498 <vPortValidateInterruptPriority>
	__asm volatile
 801189e:	f3ef 8211 	mrs	r2, BASEPRI
 80118a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a6:	b672      	cpsid	i
 80118a8:	f383 8811 	msr	BASEPRI, r3
 80118ac:	f3bf 8f6f 	isb	sy
 80118b0:	f3bf 8f4f 	dsb	sy
 80118b4:	b662      	cpsie	i
 80118b6:	617a      	str	r2, [r7, #20]
 80118b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80118ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80118bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80118c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d22b      	bcs.n	8011926 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80118ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80118d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80118d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118da:	1c5a      	adds	r2, r3, #1
 80118dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118de:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80118e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80118e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118e8:	d112      	bne.n	8011910 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80118ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d016      	beq.n	8011920 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80118f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f4:	3324      	adds	r3, #36	; 0x24
 80118f6:	4618      	mov	r0, r3
 80118f8:	f000 fff4 	bl	80128e4 <xTaskRemoveFromEventList>
 80118fc:	4603      	mov	r3, r0
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d00e      	beq.n	8011920 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d00b      	beq.n	8011920 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	2201      	movs	r2, #1
 801190c:	601a      	str	r2, [r3, #0]
 801190e:	e007      	b.n	8011920 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011914:	3301      	adds	r3, #1
 8011916:	b2db      	uxtb	r3, r3
 8011918:	b25a      	sxtb	r2, r3
 801191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801191c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011920:	2301      	movs	r3, #1
 8011922:	637b      	str	r3, [r7, #52]	; 0x34
 8011924:	e001      	b.n	801192a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011926:	2300      	movs	r3, #0
 8011928:	637b      	str	r3, [r7, #52]	; 0x34
 801192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801192c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011936:	4618      	mov	r0, r3
 8011938:	3738      	adds	r7, #56	; 0x38
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
	...

08011940 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b08c      	sub	sp, #48	; 0x30
 8011944:	af00      	add	r7, sp, #0
 8011946:	60f8      	str	r0, [r7, #12]
 8011948:	60b9      	str	r1, [r7, #8]
 801194a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801194c:	2300      	movs	r3, #0
 801194e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011956:	2b00      	cmp	r3, #0
 8011958:	d10b      	bne.n	8011972 <xQueueReceive+0x32>
	__asm volatile
 801195a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801195e:	b672      	cpsid	i
 8011960:	f383 8811 	msr	BASEPRI, r3
 8011964:	f3bf 8f6f 	isb	sy
 8011968:	f3bf 8f4f 	dsb	sy
 801196c:	b662      	cpsie	i
 801196e:	623b      	str	r3, [r7, #32]
 8011970:	e7fe      	b.n	8011970 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d103      	bne.n	8011980 <xQueueReceive+0x40>
 8011978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801197c:	2b00      	cmp	r3, #0
 801197e:	d101      	bne.n	8011984 <xQueueReceive+0x44>
 8011980:	2301      	movs	r3, #1
 8011982:	e000      	b.n	8011986 <xQueueReceive+0x46>
 8011984:	2300      	movs	r3, #0
 8011986:	2b00      	cmp	r3, #0
 8011988:	d10b      	bne.n	80119a2 <xQueueReceive+0x62>
 801198a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801198e:	b672      	cpsid	i
 8011990:	f383 8811 	msr	BASEPRI, r3
 8011994:	f3bf 8f6f 	isb	sy
 8011998:	f3bf 8f4f 	dsb	sy
 801199c:	b662      	cpsie	i
 801199e:	61fb      	str	r3, [r7, #28]
 80119a0:	e7fe      	b.n	80119a0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80119a2:	f001 f945 	bl	8012c30 <xTaskGetSchedulerState>
 80119a6:	4603      	mov	r3, r0
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d102      	bne.n	80119b2 <xQueueReceive+0x72>
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d101      	bne.n	80119b6 <xQueueReceive+0x76>
 80119b2:	2301      	movs	r3, #1
 80119b4:	e000      	b.n	80119b8 <xQueueReceive+0x78>
 80119b6:	2300      	movs	r3, #0
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d10b      	bne.n	80119d4 <xQueueReceive+0x94>
 80119bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c0:	b672      	cpsid	i
 80119c2:	f383 8811 	msr	BASEPRI, r3
 80119c6:	f3bf 8f6f 	isb	sy
 80119ca:	f3bf 8f4f 	dsb	sy
 80119ce:	b662      	cpsie	i
 80119d0:	61bb      	str	r3, [r7, #24]
 80119d2:	e7fe      	b.n	80119d2 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80119d4:	f001 fc80 	bl	80132d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119dc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d01f      	beq.n	8011a24 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80119e4:	68b9      	ldr	r1, [r7, #8]
 80119e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119e8:	f000 faa1 	bl	8011f2e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80119ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ee:	1e5a      	subs	r2, r3, #1
 80119f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f6:	691b      	ldr	r3, [r3, #16]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d00f      	beq.n	8011a1c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119fe:	3310      	adds	r3, #16
 8011a00:	4618      	mov	r0, r3
 8011a02:	f000 ff6f 	bl	80128e4 <xTaskRemoveFromEventList>
 8011a06:	4603      	mov	r3, r0
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d007      	beq.n	8011a1c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011a0c:	4b3c      	ldr	r3, [pc, #240]	; (8011b00 <xQueueReceive+0x1c0>)
 8011a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a12:	601a      	str	r2, [r3, #0]
 8011a14:	f3bf 8f4f 	dsb	sy
 8011a18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011a1c:	f001 fc8e 	bl	801333c <vPortExitCritical>
				return pdPASS;
 8011a20:	2301      	movs	r3, #1
 8011a22:	e069      	b.n	8011af8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d103      	bne.n	8011a32 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011a2a:	f001 fc87 	bl	801333c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	e062      	b.n	8011af8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d106      	bne.n	8011a46 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a38:	f107 0310 	add.w	r3, r7, #16
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f000 ffb5 	bl	80129ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a42:	2301      	movs	r3, #1
 8011a44:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a46:	f001 fc79 	bl	801333c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a4a:	f000 fccd 	bl	80123e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a4e:	f001 fc43 	bl	80132d8 <vPortEnterCritical>
 8011a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a58:	b25b      	sxtb	r3, r3
 8011a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a5e:	d103      	bne.n	8011a68 <xQueueReceive+0x128>
 8011a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a62:	2200      	movs	r2, #0
 8011a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a6e:	b25b      	sxtb	r3, r3
 8011a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a74:	d103      	bne.n	8011a7e <xQueueReceive+0x13e>
 8011a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a7e:	f001 fc5d 	bl	801333c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a82:	1d3a      	adds	r2, r7, #4
 8011a84:	f107 0310 	add.w	r3, r7, #16
 8011a88:	4611      	mov	r1, r2
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f000 ffa4 	bl	80129d8 <xTaskCheckForTimeOut>
 8011a90:	4603      	mov	r3, r0
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d123      	bne.n	8011ade <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a98:	f000 fac1 	bl	801201e <prvIsQueueEmpty>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d017      	beq.n	8011ad2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa4:	3324      	adds	r3, #36	; 0x24
 8011aa6:	687a      	ldr	r2, [r7, #4]
 8011aa8:	4611      	mov	r1, r2
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f000 fef4 	bl	8012898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ab2:	f000 fa62 	bl	8011f7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011ab6:	f000 fca5 	bl	8012404 <xTaskResumeAll>
 8011aba:	4603      	mov	r3, r0
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d189      	bne.n	80119d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011ac0:	4b0f      	ldr	r3, [pc, #60]	; (8011b00 <xQueueReceive+0x1c0>)
 8011ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ac6:	601a      	str	r2, [r3, #0]
 8011ac8:	f3bf 8f4f 	dsb	sy
 8011acc:	f3bf 8f6f 	isb	sy
 8011ad0:	e780      	b.n	80119d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ad4:	f000 fa51 	bl	8011f7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ad8:	f000 fc94 	bl	8012404 <xTaskResumeAll>
 8011adc:	e77a      	b.n	80119d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ae0:	f000 fa4b 	bl	8011f7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ae4:	f000 fc8e 	bl	8012404 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011aea:	f000 fa98 	bl	801201e <prvIsQueueEmpty>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	f43f af6f 	beq.w	80119d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011af6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3730      	adds	r7, #48	; 0x30
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	e000ed04 	.word	0xe000ed04

08011b04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b08e      	sub	sp, #56	; 0x38
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011b16:	2300      	movs	r3, #0
 8011b18:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d10b      	bne.n	8011b38 <xQueueSemaphoreTake+0x34>
 8011b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b24:	b672      	cpsid	i
 8011b26:	f383 8811 	msr	BASEPRI, r3
 8011b2a:	f3bf 8f6f 	isb	sy
 8011b2e:	f3bf 8f4f 	dsb	sy
 8011b32:	b662      	cpsie	i
 8011b34:	623b      	str	r3, [r7, #32]
 8011b36:	e7fe      	b.n	8011b36 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d00b      	beq.n	8011b58 <xQueueSemaphoreTake+0x54>
 8011b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b44:	b672      	cpsid	i
 8011b46:	f383 8811 	msr	BASEPRI, r3
 8011b4a:	f3bf 8f6f 	isb	sy
 8011b4e:	f3bf 8f4f 	dsb	sy
 8011b52:	b662      	cpsie	i
 8011b54:	61fb      	str	r3, [r7, #28]
 8011b56:	e7fe      	b.n	8011b56 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b58:	f001 f86a 	bl	8012c30 <xTaskGetSchedulerState>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d102      	bne.n	8011b68 <xQueueSemaphoreTake+0x64>
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d101      	bne.n	8011b6c <xQueueSemaphoreTake+0x68>
 8011b68:	2301      	movs	r3, #1
 8011b6a:	e000      	b.n	8011b6e <xQueueSemaphoreTake+0x6a>
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d10b      	bne.n	8011b8a <xQueueSemaphoreTake+0x86>
 8011b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b76:	b672      	cpsid	i
 8011b78:	f383 8811 	msr	BASEPRI, r3
 8011b7c:	f3bf 8f6f 	isb	sy
 8011b80:	f3bf 8f4f 	dsb	sy
 8011b84:	b662      	cpsie	i
 8011b86:	61bb      	str	r3, [r7, #24]
 8011b88:	e7fe      	b.n	8011b88 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b8a:	f001 fba5 	bl	80132d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b92:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d024      	beq.n	8011be4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b9c:	1e5a      	subs	r2, r3, #1
 8011b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d104      	bne.n	8011bb4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011baa:	f001 fa0f 	bl	8012fcc <pvTaskIncrementMutexHeldCount>
 8011bae:	4602      	mov	r2, r0
 8011bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb6:	691b      	ldr	r3, [r3, #16]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d00f      	beq.n	8011bdc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bbe:	3310      	adds	r3, #16
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f000 fe8f 	bl	80128e4 <xTaskRemoveFromEventList>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d007      	beq.n	8011bdc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011bcc:	4b54      	ldr	r3, [pc, #336]	; (8011d20 <xQueueSemaphoreTake+0x21c>)
 8011bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bd2:	601a      	str	r2, [r3, #0]
 8011bd4:	f3bf 8f4f 	dsb	sy
 8011bd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011bdc:	f001 fbae 	bl	801333c <vPortExitCritical>
				return pdPASS;
 8011be0:	2301      	movs	r3, #1
 8011be2:	e098      	b.n	8011d16 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d112      	bne.n	8011c10 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d00b      	beq.n	8011c08 <xQueueSemaphoreTake+0x104>
 8011bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf4:	b672      	cpsid	i
 8011bf6:	f383 8811 	msr	BASEPRI, r3
 8011bfa:	f3bf 8f6f 	isb	sy
 8011bfe:	f3bf 8f4f 	dsb	sy
 8011c02:	b662      	cpsie	i
 8011c04:	617b      	str	r3, [r7, #20]
 8011c06:	e7fe      	b.n	8011c06 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011c08:	f001 fb98 	bl	801333c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	e082      	b.n	8011d16 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d106      	bne.n	8011c24 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c16:	f107 030c 	add.w	r3, r7, #12
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f000 fec6 	bl	80129ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c20:	2301      	movs	r3, #1
 8011c22:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c24:	f001 fb8a 	bl	801333c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c28:	f000 fbde 	bl	80123e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c2c:	f001 fb54 	bl	80132d8 <vPortEnterCritical>
 8011c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c36:	b25b      	sxtb	r3, r3
 8011c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c3c:	d103      	bne.n	8011c46 <xQueueSemaphoreTake+0x142>
 8011c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c40:	2200      	movs	r2, #0
 8011c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c4c:	b25b      	sxtb	r3, r3
 8011c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c52:	d103      	bne.n	8011c5c <xQueueSemaphoreTake+0x158>
 8011c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c56:	2200      	movs	r2, #0
 8011c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c5c:	f001 fb6e 	bl	801333c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c60:	463a      	mov	r2, r7
 8011c62:	f107 030c 	add.w	r3, r7, #12
 8011c66:	4611      	mov	r1, r2
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f000 feb5 	bl	80129d8 <xTaskCheckForTimeOut>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d132      	bne.n	8011cda <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c76:	f000 f9d2 	bl	801201e <prvIsQueueEmpty>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d026      	beq.n	8011cce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d109      	bne.n	8011c9c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011c88:	f001 fb26 	bl	80132d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	4618      	mov	r0, r3
 8011c92:	f000 ffeb 	bl	8012c6c <xTaskPriorityInherit>
 8011c96:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011c98:	f001 fb50 	bl	801333c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9e:	3324      	adds	r3, #36	; 0x24
 8011ca0:	683a      	ldr	r2, [r7, #0]
 8011ca2:	4611      	mov	r1, r2
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f000 fdf7 	bl	8012898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011caa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cac:	f000 f965 	bl	8011f7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011cb0:	f000 fba8 	bl	8012404 <xTaskResumeAll>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f47f af67 	bne.w	8011b8a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011cbc:	4b18      	ldr	r3, [pc, #96]	; (8011d20 <xQueueSemaphoreTake+0x21c>)
 8011cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cc2:	601a      	str	r2, [r3, #0]
 8011cc4:	f3bf 8f4f 	dsb	sy
 8011cc8:	f3bf 8f6f 	isb	sy
 8011ccc:	e75d      	b.n	8011b8a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011cce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cd0:	f000 f953 	bl	8011f7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011cd4:	f000 fb96 	bl	8012404 <xTaskResumeAll>
 8011cd8:	e757      	b.n	8011b8a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cdc:	f000 f94d 	bl	8011f7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ce0:	f000 fb90 	bl	8012404 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ce6:	f000 f99a 	bl	801201e <prvIsQueueEmpty>
 8011cea:	4603      	mov	r3, r0
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	f43f af4c 	beq.w	8011b8a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d00d      	beq.n	8011d14 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011cf8:	f001 faee 	bl	80132d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011cfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cfe:	f000 f894 	bl	8011e2a <prvGetDisinheritPriorityAfterTimeout>
 8011d02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8011d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f001 f8bc 	bl	8012e88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011d10:	f001 fb14 	bl	801333c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011d14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3738      	adds	r7, #56	; 0x38
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
 8011d1e:	bf00      	nop
 8011d20:	e000ed04 	.word	0xe000ed04

08011d24 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b08e      	sub	sp, #56	; 0x38
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	60f8      	str	r0, [r7, #12]
 8011d2c:	60b9      	str	r1, [r7, #8]
 8011d2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d10b      	bne.n	8011d52 <xQueueReceiveFromISR+0x2e>
 8011d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d3e:	b672      	cpsid	i
 8011d40:	f383 8811 	msr	BASEPRI, r3
 8011d44:	f3bf 8f6f 	isb	sy
 8011d48:	f3bf 8f4f 	dsb	sy
 8011d4c:	b662      	cpsie	i
 8011d4e:	623b      	str	r3, [r7, #32]
 8011d50:	e7fe      	b.n	8011d50 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d103      	bne.n	8011d60 <xQueueReceiveFromISR+0x3c>
 8011d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d101      	bne.n	8011d64 <xQueueReceiveFromISR+0x40>
 8011d60:	2301      	movs	r3, #1
 8011d62:	e000      	b.n	8011d66 <xQueueReceiveFromISR+0x42>
 8011d64:	2300      	movs	r3, #0
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d10b      	bne.n	8011d82 <xQueueReceiveFromISR+0x5e>
 8011d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6e:	b672      	cpsid	i
 8011d70:	f383 8811 	msr	BASEPRI, r3
 8011d74:	f3bf 8f6f 	isb	sy
 8011d78:	f3bf 8f4f 	dsb	sy
 8011d7c:	b662      	cpsie	i
 8011d7e:	61fb      	str	r3, [r7, #28]
 8011d80:	e7fe      	b.n	8011d80 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d82:	f001 fb89 	bl	8013498 <vPortValidateInterruptPriority>
	__asm volatile
 8011d86:	f3ef 8211 	mrs	r2, BASEPRI
 8011d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d8e:	b672      	cpsid	i
 8011d90:	f383 8811 	msr	BASEPRI, r3
 8011d94:	f3bf 8f6f 	isb	sy
 8011d98:	f3bf 8f4f 	dsb	sy
 8011d9c:	b662      	cpsie	i
 8011d9e:	61ba      	str	r2, [r7, #24]
 8011da0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011da2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011da4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011daa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d02f      	beq.n	8011e12 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011dbc:	68b9      	ldr	r1, [r7, #8]
 8011dbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dc0:	f000 f8b5 	bl	8011f2e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc6:	1e5a      	subs	r2, r3, #1
 8011dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011dcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dd4:	d112      	bne.n	8011dfc <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd8:	691b      	ldr	r3, [r3, #16]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d016      	beq.n	8011e0c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de0:	3310      	adds	r3, #16
 8011de2:	4618      	mov	r0, r3
 8011de4:	f000 fd7e 	bl	80128e4 <xTaskRemoveFromEventList>
 8011de8:	4603      	mov	r3, r0
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d00e      	beq.n	8011e0c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d00b      	beq.n	8011e0c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2201      	movs	r2, #1
 8011df8:	601a      	str	r2, [r3, #0]
 8011dfa:	e007      	b.n	8011e0c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e00:	3301      	adds	r3, #1
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	b25a      	sxtb	r2, r3
 8011e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8011e10:	e001      	b.n	8011e16 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8011e12:	2300      	movs	r3, #0
 8011e14:	637b      	str	r3, [r7, #52]	; 0x34
 8011e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	3738      	adds	r7, #56	; 0x38
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}

08011e2a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011e2a:	b480      	push	{r7}
 8011e2c:	b085      	sub	sp, #20
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d006      	beq.n	8011e48 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f1c3 0307 	rsb	r3, r3, #7
 8011e44:	60fb      	str	r3, [r7, #12]
 8011e46:	e001      	b.n	8011e4c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
	}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3714      	adds	r7, #20
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr

08011e5a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	b086      	sub	sp, #24
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	60f8      	str	r0, [r7, #12]
 8011e62:	60b9      	str	r1, [r7, #8]
 8011e64:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011e66:	2300      	movs	r3, #0
 8011e68:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e6e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d10d      	bne.n	8011e94 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d14d      	bne.n	8011f1c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	4618      	mov	r0, r3
 8011e86:	f000 ff77 	bl	8012d78 <xTaskPriorityDisinherit>
 8011e8a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	2200      	movs	r2, #0
 8011e90:	605a      	str	r2, [r3, #4]
 8011e92:	e043      	b.n	8011f1c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d119      	bne.n	8011ece <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	6898      	ldr	r0, [r3, #8]
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	68b9      	ldr	r1, [r7, #8]
 8011ea6:	f00e f833 	bl	801ff10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	689a      	ldr	r2, [r3, #8]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eb2:	441a      	add	r2, r3
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	689a      	ldr	r2, [r3, #8]
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d32b      	bcc.n	8011f1c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	609a      	str	r2, [r3, #8]
 8011ecc:	e026      	b.n	8011f1c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	68d8      	ldr	r0, [r3, #12]
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	68b9      	ldr	r1, [r7, #8]
 8011eda:	f00e f819 	bl	801ff10 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	68da      	ldr	r2, [r3, #12]
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ee6:	425b      	negs	r3, r3
 8011ee8:	441a      	add	r2, r3
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	68da      	ldr	r2, [r3, #12]
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d207      	bcs.n	8011f0a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	685a      	ldr	r2, [r3, #4]
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f02:	425b      	negs	r3, r3
 8011f04:	441a      	add	r2, r3
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	2b02      	cmp	r3, #2
 8011f0e:	d105      	bne.n	8011f1c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d002      	beq.n	8011f1c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	3b01      	subs	r3, #1
 8011f1a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	1c5a      	adds	r2, r3, #1
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011f24:	697b      	ldr	r3, [r7, #20]
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3718      	adds	r7, #24
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}

08011f2e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011f2e:	b580      	push	{r7, lr}
 8011f30:	b082      	sub	sp, #8
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
 8011f36:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d018      	beq.n	8011f72 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	68da      	ldr	r2, [r3, #12]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f48:	441a      	add	r2, r3
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	68da      	ldr	r2, [r3, #12]
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d303      	bcc.n	8011f62 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681a      	ldr	r2, [r3, #0]
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	68d9      	ldr	r1, [r3, #12]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	6838      	ldr	r0, [r7, #0]
 8011f6e:	f00d ffcf 	bl	801ff10 <memcpy>
	}
}
 8011f72:	bf00      	nop
 8011f74:	3708      	adds	r7, #8
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}

08011f7a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011f7a:	b580      	push	{r7, lr}
 8011f7c:	b084      	sub	sp, #16
 8011f7e:	af00      	add	r7, sp, #0
 8011f80:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011f82:	f001 f9a9 	bl	80132d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f8c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011f8e:	e011      	b.n	8011fb4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d012      	beq.n	8011fbe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	3324      	adds	r3, #36	; 0x24
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f000 fca1 	bl	80128e4 <xTaskRemoveFromEventList>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d001      	beq.n	8011fac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011fa8:	f000 fd7a 	bl	8012aa0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011fac:	7bfb      	ldrb	r3, [r7, #15]
 8011fae:	3b01      	subs	r3, #1
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	dce9      	bgt.n	8011f90 <prvUnlockQueue+0x16>
 8011fbc:	e000      	b.n	8011fc0 <prvUnlockQueue+0x46>
					break;
 8011fbe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	22ff      	movs	r2, #255	; 0xff
 8011fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011fc8:	f001 f9b8 	bl	801333c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011fcc:	f001 f984 	bl	80132d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011fd6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011fd8:	e011      	b.n	8011ffe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	691b      	ldr	r3, [r3, #16]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d012      	beq.n	8012008 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	3310      	adds	r3, #16
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f000 fc7c 	bl	80128e4 <xTaskRemoveFromEventList>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d001      	beq.n	8011ff6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011ff2:	f000 fd55 	bl	8012aa0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011ff6:	7bbb      	ldrb	r3, [r7, #14]
 8011ff8:	3b01      	subs	r3, #1
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012002:	2b00      	cmp	r3, #0
 8012004:	dce9      	bgt.n	8011fda <prvUnlockQueue+0x60>
 8012006:	e000      	b.n	801200a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012008:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	22ff      	movs	r2, #255	; 0xff
 801200e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012012:	f001 f993 	bl	801333c <vPortExitCritical>
}
 8012016:	bf00      	nop
 8012018:	3710      	adds	r7, #16
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}

0801201e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801201e:	b580      	push	{r7, lr}
 8012020:	b084      	sub	sp, #16
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012026:	f001 f957 	bl	80132d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801202e:	2b00      	cmp	r3, #0
 8012030:	d102      	bne.n	8012038 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012032:	2301      	movs	r3, #1
 8012034:	60fb      	str	r3, [r7, #12]
 8012036:	e001      	b.n	801203c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012038:	2300      	movs	r3, #0
 801203a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801203c:	f001 f97e 	bl	801333c <vPortExitCritical>

	return xReturn;
 8012040:	68fb      	ldr	r3, [r7, #12]
}
 8012042:	4618      	mov	r0, r3
 8012044:	3710      	adds	r7, #16
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}

0801204a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801204a:	b580      	push	{r7, lr}
 801204c:	b084      	sub	sp, #16
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012052:	f001 f941 	bl	80132d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801205e:	429a      	cmp	r2, r3
 8012060:	d102      	bne.n	8012068 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012062:	2301      	movs	r3, #1
 8012064:	60fb      	str	r3, [r7, #12]
 8012066:	e001      	b.n	801206c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012068:	2300      	movs	r3, #0
 801206a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801206c:	f001 f966 	bl	801333c <vPortExitCritical>

	return xReturn;
 8012070:	68fb      	ldr	r3, [r7, #12]
}
 8012072:	4618      	mov	r0, r3
 8012074:	3710      	adds	r7, #16
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}

0801207a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801207a:	b580      	push	{r7, lr}
 801207c:	b08c      	sub	sp, #48	; 0x30
 801207e:	af04      	add	r7, sp, #16
 8012080:	60f8      	str	r0, [r7, #12]
 8012082:	60b9      	str	r1, [r7, #8]
 8012084:	603b      	str	r3, [r7, #0]
 8012086:	4613      	mov	r3, r2
 8012088:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801208a:	88fb      	ldrh	r3, [r7, #6]
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	4618      	mov	r0, r3
 8012090:	f001 fa44 	bl	801351c <pvPortMalloc>
 8012094:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d00e      	beq.n	80120ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801209c:	2058      	movs	r0, #88	; 0x58
 801209e:	f001 fa3d 	bl	801351c <pvPortMalloc>
 80120a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80120a4:	69fb      	ldr	r3, [r7, #28]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d003      	beq.n	80120b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	697a      	ldr	r2, [r7, #20]
 80120ae:	631a      	str	r2, [r3, #48]	; 0x30
 80120b0:	e005      	b.n	80120be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80120b2:	6978      	ldr	r0, [r7, #20]
 80120b4:	f001 fafe 	bl	80136b4 <vPortFree>
 80120b8:	e001      	b.n	80120be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80120ba:	2300      	movs	r3, #0
 80120bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80120be:	69fb      	ldr	r3, [r7, #28]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d013      	beq.n	80120ec <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80120c4:	88fa      	ldrh	r2, [r7, #6]
 80120c6:	2300      	movs	r3, #0
 80120c8:	9303      	str	r3, [sp, #12]
 80120ca:	69fb      	ldr	r3, [r7, #28]
 80120cc:	9302      	str	r3, [sp, #8]
 80120ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d0:	9301      	str	r3, [sp, #4]
 80120d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d4:	9300      	str	r3, [sp, #0]
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	68b9      	ldr	r1, [r7, #8]
 80120da:	68f8      	ldr	r0, [r7, #12]
 80120dc:	f000 f80e 	bl	80120fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80120e0:	69f8      	ldr	r0, [r7, #28]
 80120e2:	f000 f897 	bl	8012214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80120e6:	2301      	movs	r3, #1
 80120e8:	61bb      	str	r3, [r7, #24]
 80120ea:	e002      	b.n	80120f2 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80120ec:	f04f 33ff 	mov.w	r3, #4294967295
 80120f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80120f2:	69bb      	ldr	r3, [r7, #24]
	}
 80120f4:	4618      	mov	r0, r3
 80120f6:	3720      	adds	r7, #32
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}

080120fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b088      	sub	sp, #32
 8012100:	af00      	add	r7, sp, #0
 8012102:	60f8      	str	r0, [r7, #12]
 8012104:	60b9      	str	r1, [r7, #8]
 8012106:	607a      	str	r2, [r7, #4]
 8012108:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801210c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	009b      	lsls	r3, r3, #2
 8012112:	461a      	mov	r2, r3
 8012114:	21a5      	movs	r1, #165	; 0xa5
 8012116:	f00d ff06 	bl	801ff26 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801211c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801211e:	6879      	ldr	r1, [r7, #4]
 8012120:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012124:	440b      	add	r3, r1
 8012126:	009b      	lsls	r3, r3, #2
 8012128:	4413      	add	r3, r2
 801212a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801212c:	69bb      	ldr	r3, [r7, #24]
 801212e:	f023 0307 	bic.w	r3, r3, #7
 8012132:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012134:	69bb      	ldr	r3, [r7, #24]
 8012136:	f003 0307 	and.w	r3, r3, #7
 801213a:	2b00      	cmp	r3, #0
 801213c:	d00b      	beq.n	8012156 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012142:	b672      	cpsid	i
 8012144:	f383 8811 	msr	BASEPRI, r3
 8012148:	f3bf 8f6f 	isb	sy
 801214c:	f3bf 8f4f 	dsb	sy
 8012150:	b662      	cpsie	i
 8012152:	617b      	str	r3, [r7, #20]
 8012154:	e7fe      	b.n	8012154 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012156:	2300      	movs	r3, #0
 8012158:	61fb      	str	r3, [r7, #28]
 801215a:	e012      	b.n	8012182 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801215c:	68ba      	ldr	r2, [r7, #8]
 801215e:	69fb      	ldr	r3, [r7, #28]
 8012160:	4413      	add	r3, r2
 8012162:	7819      	ldrb	r1, [r3, #0]
 8012164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	4413      	add	r3, r2
 801216a:	3334      	adds	r3, #52	; 0x34
 801216c:	460a      	mov	r2, r1
 801216e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8012170:	68ba      	ldr	r2, [r7, #8]
 8012172:	69fb      	ldr	r3, [r7, #28]
 8012174:	4413      	add	r3, r2
 8012176:	781b      	ldrb	r3, [r3, #0]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d006      	beq.n	801218a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	3301      	adds	r3, #1
 8012180:	61fb      	str	r3, [r7, #28]
 8012182:	69fb      	ldr	r3, [r7, #28]
 8012184:	2b0f      	cmp	r3, #15
 8012186:	d9e9      	bls.n	801215c <prvInitialiseNewTask+0x60>
 8012188:	e000      	b.n	801218c <prvInitialiseNewTask+0x90>
		{
			break;
 801218a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801218e:	2200      	movs	r2, #0
 8012190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012196:	2b06      	cmp	r3, #6
 8012198:	d901      	bls.n	801219e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801219a:	2306      	movs	r3, #6
 801219c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80121a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121a8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80121aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ac:	2200      	movs	r2, #0
 80121ae:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80121b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b2:	3304      	adds	r3, #4
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7ff f805 	bl	80111c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80121ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121bc:	3318      	adds	r3, #24
 80121be:	4618      	mov	r0, r3
 80121c0:	f7ff f800 	bl	80111c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80121c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121cc:	f1c3 0207 	rsb	r2, r3, #7
 80121d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80121d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80121da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121dc:	2200      	movs	r2, #0
 80121de:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80121e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e2:	2200      	movs	r2, #0
 80121e4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80121e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e8:	2200      	movs	r2, #0
 80121ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80121ee:	683a      	ldr	r2, [r7, #0]
 80121f0:	68f9      	ldr	r1, [r7, #12]
 80121f2:	69b8      	ldr	r0, [r7, #24]
 80121f4:	f000 ff64 	bl	80130c0 <pxPortInitialiseStack>
 80121f8:	4602      	mov	r2, r0
 80121fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80121fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012200:	2b00      	cmp	r3, #0
 8012202:	d002      	beq.n	801220a <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012208:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801220a:	bf00      	nop
 801220c:	3720      	adds	r7, #32
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
	...

08012214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b082      	sub	sp, #8
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801221c:	f001 f85c 	bl	80132d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012220:	4b2a      	ldr	r3, [pc, #168]	; (80122cc <prvAddNewTaskToReadyList+0xb8>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	3301      	adds	r3, #1
 8012226:	4a29      	ldr	r2, [pc, #164]	; (80122cc <prvAddNewTaskToReadyList+0xb8>)
 8012228:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801222a:	4b29      	ldr	r3, [pc, #164]	; (80122d0 <prvAddNewTaskToReadyList+0xbc>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d109      	bne.n	8012246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012232:	4a27      	ldr	r2, [pc, #156]	; (80122d0 <prvAddNewTaskToReadyList+0xbc>)
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012238:	4b24      	ldr	r3, [pc, #144]	; (80122cc <prvAddNewTaskToReadyList+0xb8>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	2b01      	cmp	r3, #1
 801223e:	d110      	bne.n	8012262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012240:	f000 fc54 	bl	8012aec <prvInitialiseTaskLists>
 8012244:	e00d      	b.n	8012262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012246:	4b23      	ldr	r3, [pc, #140]	; (80122d4 <prvAddNewTaskToReadyList+0xc0>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d109      	bne.n	8012262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801224e:	4b20      	ldr	r3, [pc, #128]	; (80122d0 <prvAddNewTaskToReadyList+0xbc>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012258:	429a      	cmp	r2, r3
 801225a:	d802      	bhi.n	8012262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801225c:	4a1c      	ldr	r2, [pc, #112]	; (80122d0 <prvAddNewTaskToReadyList+0xbc>)
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012262:	4b1d      	ldr	r3, [pc, #116]	; (80122d8 <prvAddNewTaskToReadyList+0xc4>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	3301      	adds	r3, #1
 8012268:	4a1b      	ldr	r2, [pc, #108]	; (80122d8 <prvAddNewTaskToReadyList+0xc4>)
 801226a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012270:	2201      	movs	r2, #1
 8012272:	409a      	lsls	r2, r3
 8012274:	4b19      	ldr	r3, [pc, #100]	; (80122dc <prvAddNewTaskToReadyList+0xc8>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4313      	orrs	r3, r2
 801227a:	4a18      	ldr	r2, [pc, #96]	; (80122dc <prvAddNewTaskToReadyList+0xc8>)
 801227c:	6013      	str	r3, [r2, #0]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012282:	4613      	mov	r3, r2
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	4413      	add	r3, r2
 8012288:	009b      	lsls	r3, r3, #2
 801228a:	4a15      	ldr	r2, [pc, #84]	; (80122e0 <prvAddNewTaskToReadyList+0xcc>)
 801228c:	441a      	add	r2, r3
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	3304      	adds	r3, #4
 8012292:	4619      	mov	r1, r3
 8012294:	4610      	mov	r0, r2
 8012296:	f7fe ffa2 	bl	80111de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801229a:	f001 f84f 	bl	801333c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801229e:	4b0d      	ldr	r3, [pc, #52]	; (80122d4 <prvAddNewTaskToReadyList+0xc0>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d00e      	beq.n	80122c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80122a6:	4b0a      	ldr	r3, [pc, #40]	; (80122d0 <prvAddNewTaskToReadyList+0xbc>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d207      	bcs.n	80122c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80122b4:	4b0b      	ldr	r3, [pc, #44]	; (80122e4 <prvAddNewTaskToReadyList+0xd0>)
 80122b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122ba:	601a      	str	r2, [r3, #0]
 80122bc:	f3bf 8f4f 	dsb	sy
 80122c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80122c4:	bf00      	nop
 80122c6:	3708      	adds	r7, #8
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}
 80122cc:	200001e8 	.word	0x200001e8
 80122d0:	200000e8 	.word	0x200000e8
 80122d4:	200001f4 	.word	0x200001f4
 80122d8:	20000204 	.word	0x20000204
 80122dc:	200001f0 	.word	0x200001f0
 80122e0:	200000ec 	.word	0x200000ec
 80122e4:	e000ed04 	.word	0xe000ed04

080122e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80122f0:	2300      	movs	r3, #0
 80122f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d018      	beq.n	801232c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80122fa:	4b14      	ldr	r3, [pc, #80]	; (801234c <vTaskDelay+0x64>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d00b      	beq.n	801231a <vTaskDelay+0x32>
 8012302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012306:	b672      	cpsid	i
 8012308:	f383 8811 	msr	BASEPRI, r3
 801230c:	f3bf 8f6f 	isb	sy
 8012310:	f3bf 8f4f 	dsb	sy
 8012314:	b662      	cpsie	i
 8012316:	60bb      	str	r3, [r7, #8]
 8012318:	e7fe      	b.n	8012318 <vTaskDelay+0x30>
			vTaskSuspendAll();
 801231a:	f000 f865 	bl	80123e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801231e:	2100      	movs	r1, #0
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f000 fe67 	bl	8012ff4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012326:	f000 f86d 	bl	8012404 <xTaskResumeAll>
 801232a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d107      	bne.n	8012342 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8012332:	4b07      	ldr	r3, [pc, #28]	; (8012350 <vTaskDelay+0x68>)
 8012334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012338:	601a      	str	r2, [r3, #0]
 801233a:	f3bf 8f4f 	dsb	sy
 801233e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012342:	bf00      	nop
 8012344:	3710      	adds	r7, #16
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop
 801234c:	20000210 	.word	0x20000210
 8012350:	e000ed04 	.word	0xe000ed04

08012354 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b086      	sub	sp, #24
 8012358:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801235a:	4b1d      	ldr	r3, [pc, #116]	; (80123d0 <vTaskStartScheduler+0x7c>)
 801235c:	9301      	str	r3, [sp, #4]
 801235e:	2300      	movs	r3, #0
 8012360:	9300      	str	r3, [sp, #0]
 8012362:	2300      	movs	r3, #0
 8012364:	2280      	movs	r2, #128	; 0x80
 8012366:	491b      	ldr	r1, [pc, #108]	; (80123d4 <vTaskStartScheduler+0x80>)
 8012368:	481b      	ldr	r0, [pc, #108]	; (80123d8 <vTaskStartScheduler+0x84>)
 801236a:	f7ff fe86 	bl	801207a <xTaskCreate>
 801236e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2b01      	cmp	r3, #1
 8012374:	d117      	bne.n	80123a6 <vTaskStartScheduler+0x52>
 8012376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801237a:	b672      	cpsid	i
 801237c:	f383 8811 	msr	BASEPRI, r3
 8012380:	f3bf 8f6f 	isb	sy
 8012384:	f3bf 8f4f 	dsb	sy
 8012388:	b662      	cpsie	i
 801238a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801238c:	4b13      	ldr	r3, [pc, #76]	; (80123dc <vTaskStartScheduler+0x88>)
 801238e:	f04f 32ff 	mov.w	r2, #4294967295
 8012392:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012394:	4b12      	ldr	r3, [pc, #72]	; (80123e0 <vTaskStartScheduler+0x8c>)
 8012396:	2201      	movs	r2, #1
 8012398:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801239a:	4b12      	ldr	r3, [pc, #72]	; (80123e4 <vTaskStartScheduler+0x90>)
 801239c:	2200      	movs	r2, #0
 801239e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80123a0:	f000 ff1e 	bl	80131e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80123a4:	e00f      	b.n	80123c6 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ac:	d10b      	bne.n	80123c6 <vTaskStartScheduler+0x72>
 80123ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b2:	b672      	cpsid	i
 80123b4:	f383 8811 	msr	BASEPRI, r3
 80123b8:	f3bf 8f6f 	isb	sy
 80123bc:	f3bf 8f4f 	dsb	sy
 80123c0:	b662      	cpsie	i
 80123c2:	607b      	str	r3, [r7, #4]
 80123c4:	e7fe      	b.n	80123c4 <vTaskStartScheduler+0x70>
}
 80123c6:	bf00      	nop
 80123c8:	3710      	adds	r7, #16
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	2000020c 	.word	0x2000020c
 80123d4:	08020fac 	.word	0x08020fac
 80123d8:	08012ab9 	.word	0x08012ab9
 80123dc:	20000208 	.word	0x20000208
 80123e0:	200001f4 	.word	0x200001f4
 80123e4:	200001ec 	.word	0x200001ec

080123e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80123e8:	b480      	push	{r7}
 80123ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80123ec:	4b04      	ldr	r3, [pc, #16]	; (8012400 <vTaskSuspendAll+0x18>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	3301      	adds	r3, #1
 80123f2:	4a03      	ldr	r2, [pc, #12]	; (8012400 <vTaskSuspendAll+0x18>)
 80123f4:	6013      	str	r3, [r2, #0]
}
 80123f6:	bf00      	nop
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr
 8012400:	20000210 	.word	0x20000210

08012404 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b084      	sub	sp, #16
 8012408:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801240a:	2300      	movs	r3, #0
 801240c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801240e:	2300      	movs	r3, #0
 8012410:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012412:	4b42      	ldr	r3, [pc, #264]	; (801251c <xTaskResumeAll+0x118>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d10b      	bne.n	8012432 <xTaskResumeAll+0x2e>
 801241a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801241e:	b672      	cpsid	i
 8012420:	f383 8811 	msr	BASEPRI, r3
 8012424:	f3bf 8f6f 	isb	sy
 8012428:	f3bf 8f4f 	dsb	sy
 801242c:	b662      	cpsie	i
 801242e:	603b      	str	r3, [r7, #0]
 8012430:	e7fe      	b.n	8012430 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012432:	f000 ff51 	bl	80132d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012436:	4b39      	ldr	r3, [pc, #228]	; (801251c <xTaskResumeAll+0x118>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	3b01      	subs	r3, #1
 801243c:	4a37      	ldr	r2, [pc, #220]	; (801251c <xTaskResumeAll+0x118>)
 801243e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012440:	4b36      	ldr	r3, [pc, #216]	; (801251c <xTaskResumeAll+0x118>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d161      	bne.n	801250c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012448:	4b35      	ldr	r3, [pc, #212]	; (8012520 <xTaskResumeAll+0x11c>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d05d      	beq.n	801250c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012450:	e02e      	b.n	80124b0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8012452:	4b34      	ldr	r3, [pc, #208]	; (8012524 <xTaskResumeAll+0x120>)
 8012454:	68db      	ldr	r3, [r3, #12]
 8012456:	68db      	ldr	r3, [r3, #12]
 8012458:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	3318      	adds	r3, #24
 801245e:	4618      	mov	r0, r3
 8012460:	f7fe ff1a 	bl	8011298 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	3304      	adds	r3, #4
 8012468:	4618      	mov	r0, r3
 801246a:	f7fe ff15 	bl	8011298 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012472:	2201      	movs	r2, #1
 8012474:	409a      	lsls	r2, r3
 8012476:	4b2c      	ldr	r3, [pc, #176]	; (8012528 <xTaskResumeAll+0x124>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	4313      	orrs	r3, r2
 801247c:	4a2a      	ldr	r2, [pc, #168]	; (8012528 <xTaskResumeAll+0x124>)
 801247e:	6013      	str	r3, [r2, #0]
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012484:	4613      	mov	r3, r2
 8012486:	009b      	lsls	r3, r3, #2
 8012488:	4413      	add	r3, r2
 801248a:	009b      	lsls	r3, r3, #2
 801248c:	4a27      	ldr	r2, [pc, #156]	; (801252c <xTaskResumeAll+0x128>)
 801248e:	441a      	add	r2, r3
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	3304      	adds	r3, #4
 8012494:	4619      	mov	r1, r3
 8012496:	4610      	mov	r0, r2
 8012498:	f7fe fea1 	bl	80111de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124a0:	4b23      	ldr	r3, [pc, #140]	; (8012530 <xTaskResumeAll+0x12c>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d302      	bcc.n	80124b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80124aa:	4b22      	ldr	r3, [pc, #136]	; (8012534 <xTaskResumeAll+0x130>)
 80124ac:	2201      	movs	r2, #1
 80124ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80124b0:	4b1c      	ldr	r3, [pc, #112]	; (8012524 <xTaskResumeAll+0x120>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d1cc      	bne.n	8012452 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d001      	beq.n	80124c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80124be:	f000 fb91 	bl	8012be4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80124c2:	4b1d      	ldr	r3, [pc, #116]	; (8012538 <xTaskResumeAll+0x134>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d010      	beq.n	80124f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80124ce:	f000 f859 	bl	8012584 <xTaskIncrementTick>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d002      	beq.n	80124de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80124d8:	4b16      	ldr	r3, [pc, #88]	; (8012534 <xTaskResumeAll+0x130>)
 80124da:	2201      	movs	r2, #1
 80124dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	3b01      	subs	r3, #1
 80124e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d1f1      	bne.n	80124ce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80124ea:	4b13      	ldr	r3, [pc, #76]	; (8012538 <xTaskResumeAll+0x134>)
 80124ec:	2200      	movs	r2, #0
 80124ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80124f0:	4b10      	ldr	r3, [pc, #64]	; (8012534 <xTaskResumeAll+0x130>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d009      	beq.n	801250c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80124f8:	2301      	movs	r3, #1
 80124fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80124fc:	4b0f      	ldr	r3, [pc, #60]	; (801253c <xTaskResumeAll+0x138>)
 80124fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012502:	601a      	str	r2, [r3, #0]
 8012504:	f3bf 8f4f 	dsb	sy
 8012508:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801250c:	f000 ff16 	bl	801333c <vPortExitCritical>

	return xAlreadyYielded;
 8012510:	68bb      	ldr	r3, [r7, #8]
}
 8012512:	4618      	mov	r0, r3
 8012514:	3710      	adds	r7, #16
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	20000210 	.word	0x20000210
 8012520:	200001e8 	.word	0x200001e8
 8012524:	200001a8 	.word	0x200001a8
 8012528:	200001f0 	.word	0x200001f0
 801252c:	200000ec 	.word	0x200000ec
 8012530:	200000e8 	.word	0x200000e8
 8012534:	200001fc 	.word	0x200001fc
 8012538:	200001f8 	.word	0x200001f8
 801253c:	e000ed04 	.word	0xe000ed04

08012540 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012540:	b480      	push	{r7}
 8012542:	b083      	sub	sp, #12
 8012544:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012546:	4b05      	ldr	r3, [pc, #20]	; (801255c <xTaskGetTickCount+0x1c>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801254c:	687b      	ldr	r3, [r7, #4]
}
 801254e:	4618      	mov	r0, r3
 8012550:	370c      	adds	r7, #12
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr
 801255a:	bf00      	nop
 801255c:	200001ec 	.word	0x200001ec

08012560 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012566:	f000 ff97 	bl	8013498 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801256a:	2300      	movs	r3, #0
 801256c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801256e:	4b04      	ldr	r3, [pc, #16]	; (8012580 <xTaskGetTickCountFromISR+0x20>)
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012574:	683b      	ldr	r3, [r7, #0]
}
 8012576:	4618      	mov	r0, r3
 8012578:	3708      	adds	r7, #8
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	200001ec 	.word	0x200001ec

08012584 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b086      	sub	sp, #24
 8012588:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801258a:	2300      	movs	r3, #0
 801258c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801258e:	4b51      	ldr	r3, [pc, #324]	; (80126d4 <xTaskIncrementTick+0x150>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	2b00      	cmp	r3, #0
 8012594:	f040 808e 	bne.w	80126b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012598:	4b4f      	ldr	r3, [pc, #316]	; (80126d8 <xTaskIncrementTick+0x154>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	3301      	adds	r3, #1
 801259e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80125a0:	4a4d      	ldr	r2, [pc, #308]	; (80126d8 <xTaskIncrementTick+0x154>)
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d121      	bne.n	80125f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80125ac:	4b4b      	ldr	r3, [pc, #300]	; (80126dc <xTaskIncrementTick+0x158>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d00b      	beq.n	80125ce <xTaskIncrementTick+0x4a>
 80125b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ba:	b672      	cpsid	i
 80125bc:	f383 8811 	msr	BASEPRI, r3
 80125c0:	f3bf 8f6f 	isb	sy
 80125c4:	f3bf 8f4f 	dsb	sy
 80125c8:	b662      	cpsie	i
 80125ca:	603b      	str	r3, [r7, #0]
 80125cc:	e7fe      	b.n	80125cc <xTaskIncrementTick+0x48>
 80125ce:	4b43      	ldr	r3, [pc, #268]	; (80126dc <xTaskIncrementTick+0x158>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	60fb      	str	r3, [r7, #12]
 80125d4:	4b42      	ldr	r3, [pc, #264]	; (80126e0 <xTaskIncrementTick+0x15c>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	4a40      	ldr	r2, [pc, #256]	; (80126dc <xTaskIncrementTick+0x158>)
 80125da:	6013      	str	r3, [r2, #0]
 80125dc:	4a40      	ldr	r2, [pc, #256]	; (80126e0 <xTaskIncrementTick+0x15c>)
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	6013      	str	r3, [r2, #0]
 80125e2:	4b40      	ldr	r3, [pc, #256]	; (80126e4 <xTaskIncrementTick+0x160>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	3301      	adds	r3, #1
 80125e8:	4a3e      	ldr	r2, [pc, #248]	; (80126e4 <xTaskIncrementTick+0x160>)
 80125ea:	6013      	str	r3, [r2, #0]
 80125ec:	f000 fafa 	bl	8012be4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80125f0:	4b3d      	ldr	r3, [pc, #244]	; (80126e8 <xTaskIncrementTick+0x164>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	693a      	ldr	r2, [r7, #16]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d34d      	bcc.n	8012696 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80125fa:	4b38      	ldr	r3, [pc, #224]	; (80126dc <xTaskIncrementTick+0x158>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d101      	bne.n	8012608 <xTaskIncrementTick+0x84>
 8012604:	2301      	movs	r3, #1
 8012606:	e000      	b.n	801260a <xTaskIncrementTick+0x86>
 8012608:	2300      	movs	r3, #0
 801260a:	2b00      	cmp	r3, #0
 801260c:	d004      	beq.n	8012618 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801260e:	4b36      	ldr	r3, [pc, #216]	; (80126e8 <xTaskIncrementTick+0x164>)
 8012610:	f04f 32ff 	mov.w	r2, #4294967295
 8012614:	601a      	str	r2, [r3, #0]
					break;
 8012616:	e03e      	b.n	8012696 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012618:	4b30      	ldr	r3, [pc, #192]	; (80126dc <xTaskIncrementTick+0x158>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	68db      	ldr	r3, [r3, #12]
 8012620:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012628:	693a      	ldr	r2, [r7, #16]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	429a      	cmp	r2, r3
 801262e:	d203      	bcs.n	8012638 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012630:	4a2d      	ldr	r2, [pc, #180]	; (80126e8 <xTaskIncrementTick+0x164>)
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	6013      	str	r3, [r2, #0]
						break;
 8012636:	e02e      	b.n	8012696 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	3304      	adds	r3, #4
 801263c:	4618      	mov	r0, r3
 801263e:	f7fe fe2b 	bl	8011298 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012646:	2b00      	cmp	r3, #0
 8012648:	d004      	beq.n	8012654 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	3318      	adds	r3, #24
 801264e:	4618      	mov	r0, r3
 8012650:	f7fe fe22 	bl	8011298 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012658:	2201      	movs	r2, #1
 801265a:	409a      	lsls	r2, r3
 801265c:	4b23      	ldr	r3, [pc, #140]	; (80126ec <xTaskIncrementTick+0x168>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4313      	orrs	r3, r2
 8012662:	4a22      	ldr	r2, [pc, #136]	; (80126ec <xTaskIncrementTick+0x168>)
 8012664:	6013      	str	r3, [r2, #0]
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801266a:	4613      	mov	r3, r2
 801266c:	009b      	lsls	r3, r3, #2
 801266e:	4413      	add	r3, r2
 8012670:	009b      	lsls	r3, r3, #2
 8012672:	4a1f      	ldr	r2, [pc, #124]	; (80126f0 <xTaskIncrementTick+0x16c>)
 8012674:	441a      	add	r2, r3
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	3304      	adds	r3, #4
 801267a:	4619      	mov	r1, r3
 801267c:	4610      	mov	r0, r2
 801267e:	f7fe fdae 	bl	80111de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012686:	4b1b      	ldr	r3, [pc, #108]	; (80126f4 <xTaskIncrementTick+0x170>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801268c:	429a      	cmp	r2, r3
 801268e:	d3b4      	bcc.n	80125fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012690:	2301      	movs	r3, #1
 8012692:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012694:	e7b1      	b.n	80125fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012696:	4b17      	ldr	r3, [pc, #92]	; (80126f4 <xTaskIncrementTick+0x170>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801269c:	4914      	ldr	r1, [pc, #80]	; (80126f0 <xTaskIncrementTick+0x16c>)
 801269e:	4613      	mov	r3, r2
 80126a0:	009b      	lsls	r3, r3, #2
 80126a2:	4413      	add	r3, r2
 80126a4:	009b      	lsls	r3, r3, #2
 80126a6:	440b      	add	r3, r1
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	2b01      	cmp	r3, #1
 80126ac:	d907      	bls.n	80126be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80126ae:	2301      	movs	r3, #1
 80126b0:	617b      	str	r3, [r7, #20]
 80126b2:	e004      	b.n	80126be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80126b4:	4b10      	ldr	r3, [pc, #64]	; (80126f8 <xTaskIncrementTick+0x174>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	3301      	adds	r3, #1
 80126ba:	4a0f      	ldr	r2, [pc, #60]	; (80126f8 <xTaskIncrementTick+0x174>)
 80126bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80126be:	4b0f      	ldr	r3, [pc, #60]	; (80126fc <xTaskIncrementTick+0x178>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d001      	beq.n	80126ca <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80126c6:	2301      	movs	r3, #1
 80126c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80126ca:	697b      	ldr	r3, [r7, #20]
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3718      	adds	r7, #24
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}
 80126d4:	20000210 	.word	0x20000210
 80126d8:	200001ec 	.word	0x200001ec
 80126dc:	200001a0 	.word	0x200001a0
 80126e0:	200001a4 	.word	0x200001a4
 80126e4:	20000200 	.word	0x20000200
 80126e8:	20000208 	.word	0x20000208
 80126ec:	200001f0 	.word	0x200001f0
 80126f0:	200000ec 	.word	0x200000ec
 80126f4:	200000e8 	.word	0x200000e8
 80126f8:	200001f8 	.word	0x200001f8
 80126fc:	200001fc 	.word	0x200001fc

08012700 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8012700:	b580      	push	{r7, lr}
 8012702:	b084      	sub	sp, #16
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d103      	bne.n	8012718 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8012710:	4b08      	ldr	r3, [pc, #32]	; (8012734 <vTaskSetApplicationTaskTag+0x34>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	60fb      	str	r3, [r7, #12]
 8012716:	e001      	b.n	801271c <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 801271c:	f000 fddc 	bl	80132d8 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	683a      	ldr	r2, [r7, #0]
 8012724:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 8012726:	f000 fe09 	bl	801333c <vPortExitCritical>
	}
 801272a:	bf00      	nop
 801272c:	3710      	adds	r7, #16
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	200000e8 	.word	0x200000e8

08012738 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d103      	bne.n	8012750 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8012748:	4b0b      	ldr	r3, [pc, #44]	; (8012778 <xTaskCallApplicationTaskHook+0x40>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	60fb      	str	r3, [r7, #12]
 801274e:	e001      	b.n	8012754 <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012758:	2b00      	cmp	r3, #0
 801275a:	d005      	beq.n	8012768 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012760:	6838      	ldr	r0, [r7, #0]
 8012762:	4798      	blx	r3
 8012764:	60b8      	str	r0, [r7, #8]
 8012766:	e001      	b.n	801276c <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8012768:	2300      	movs	r3, #0
 801276a:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 801276c:	68bb      	ldr	r3, [r7, #8]
	}
 801276e:	4618      	mov	r0, r3
 8012770:	3710      	adds	r7, #16
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	200000e8 	.word	0x200000e8

0801277c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b088      	sub	sp, #32
 8012780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012782:	4b40      	ldr	r3, [pc, #256]	; (8012884 <vTaskSwitchContext+0x108>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d003      	beq.n	8012792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801278a:	4b3f      	ldr	r3, [pc, #252]	; (8012888 <vTaskSwitchContext+0x10c>)
 801278c:	2201      	movs	r2, #1
 801278e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012790:	e073      	b.n	801287a <vTaskSwitchContext+0xfe>
		xYieldPending = pdFALSE;
 8012792:	4b3d      	ldr	r3, [pc, #244]	; (8012888 <vTaskSwitchContext+0x10c>)
 8012794:	2200      	movs	r2, #0
 8012796:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8012798:	4b3c      	ldr	r3, [pc, #240]	; (801288c <vTaskSwitchContext+0x110>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2101      	movs	r1, #1
 801279e:	4618      	mov	r0, r3
 80127a0:	f7ff ffca 	bl	8012738 <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 80127a4:	4b39      	ldr	r3, [pc, #228]	; (801288c <vTaskSwitchContext+0x110>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127aa:	61fb      	str	r3, [r7, #28]
 80127ac:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80127b0:	61bb      	str	r3, [r7, #24]
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	69ba      	ldr	r2, [r7, #24]
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d111      	bne.n	80127e0 <vTaskSwitchContext+0x64>
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	3304      	adds	r3, #4
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	69ba      	ldr	r2, [r7, #24]
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d10b      	bne.n	80127e0 <vTaskSwitchContext+0x64>
 80127c8:	69fb      	ldr	r3, [r7, #28]
 80127ca:	3308      	adds	r3, #8
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	69ba      	ldr	r2, [r7, #24]
 80127d0:	429a      	cmp	r2, r3
 80127d2:	d105      	bne.n	80127e0 <vTaskSwitchContext+0x64>
 80127d4:	69fb      	ldr	r3, [r7, #28]
 80127d6:	330c      	adds	r3, #12
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	69ba      	ldr	r2, [r7, #24]
 80127dc:	429a      	cmp	r2, r3
 80127de:	d008      	beq.n	80127f2 <vTaskSwitchContext+0x76>
 80127e0:	4b2a      	ldr	r3, [pc, #168]	; (801288c <vTaskSwitchContext+0x110>)
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	4b29      	ldr	r3, [pc, #164]	; (801288c <vTaskSwitchContext+0x110>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	3334      	adds	r3, #52	; 0x34
 80127ea:	4619      	mov	r1, r3
 80127ec:	4610      	mov	r0, r2
 80127ee:	f7fe fa60 	bl	8010cb2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80127f2:	4b27      	ldr	r3, [pc, #156]	; (8012890 <vTaskSwitchContext+0x114>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	fab3 f383 	clz	r3, r3
 80127fe:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012800:	7afb      	ldrb	r3, [r7, #11]
 8012802:	f1c3 031f 	rsb	r3, r3, #31
 8012806:	617b      	str	r3, [r7, #20]
 8012808:	4922      	ldr	r1, [pc, #136]	; (8012894 <vTaskSwitchContext+0x118>)
 801280a:	697a      	ldr	r2, [r7, #20]
 801280c:	4613      	mov	r3, r2
 801280e:	009b      	lsls	r3, r3, #2
 8012810:	4413      	add	r3, r2
 8012812:	009b      	lsls	r3, r3, #2
 8012814:	440b      	add	r3, r1
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d10b      	bne.n	8012834 <vTaskSwitchContext+0xb8>
	__asm volatile
 801281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012820:	b672      	cpsid	i
 8012822:	f383 8811 	msr	BASEPRI, r3
 8012826:	f3bf 8f6f 	isb	sy
 801282a:	f3bf 8f4f 	dsb	sy
 801282e:	b662      	cpsie	i
 8012830:	607b      	str	r3, [r7, #4]
 8012832:	e7fe      	b.n	8012832 <vTaskSwitchContext+0xb6>
 8012834:	697a      	ldr	r2, [r7, #20]
 8012836:	4613      	mov	r3, r2
 8012838:	009b      	lsls	r3, r3, #2
 801283a:	4413      	add	r3, r2
 801283c:	009b      	lsls	r3, r3, #2
 801283e:	4a15      	ldr	r2, [pc, #84]	; (8012894 <vTaskSwitchContext+0x118>)
 8012840:	4413      	add	r3, r2
 8012842:	613b      	str	r3, [r7, #16]
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	685b      	ldr	r3, [r3, #4]
 8012848:	685a      	ldr	r2, [r3, #4]
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	605a      	str	r2, [r3, #4]
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	685a      	ldr	r2, [r3, #4]
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	3308      	adds	r3, #8
 8012856:	429a      	cmp	r2, r3
 8012858:	d104      	bne.n	8012864 <vTaskSwitchContext+0xe8>
 801285a:	693b      	ldr	r3, [r7, #16]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	685a      	ldr	r2, [r3, #4]
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	605a      	str	r2, [r3, #4]
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	68db      	ldr	r3, [r3, #12]
 801286a:	4a08      	ldr	r2, [pc, #32]	; (801288c <vTaskSwitchContext+0x110>)
 801286c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801286e:	4b07      	ldr	r3, [pc, #28]	; (801288c <vTaskSwitchContext+0x110>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	2100      	movs	r1, #0
 8012874:	4618      	mov	r0, r3
 8012876:	f7ff ff5f 	bl	8012738 <xTaskCallApplicationTaskHook>
}
 801287a:	bf00      	nop
 801287c:	3720      	adds	r7, #32
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	20000210 	.word	0x20000210
 8012888:	200001fc 	.word	0x200001fc
 801288c:	200000e8 	.word	0x200000e8
 8012890:	200001f0 	.word	0x200001f0
 8012894:	200000ec 	.word	0x200000ec

08012898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d10b      	bne.n	80128c0 <vTaskPlaceOnEventList+0x28>
 80128a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ac:	b672      	cpsid	i
 80128ae:	f383 8811 	msr	BASEPRI, r3
 80128b2:	f3bf 8f6f 	isb	sy
 80128b6:	f3bf 8f4f 	dsb	sy
 80128ba:	b662      	cpsie	i
 80128bc:	60fb      	str	r3, [r7, #12]
 80128be:	e7fe      	b.n	80128be <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80128c0:	4b07      	ldr	r3, [pc, #28]	; (80128e0 <vTaskPlaceOnEventList+0x48>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	3318      	adds	r3, #24
 80128c6:	4619      	mov	r1, r3
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f7fe fcac 	bl	8011226 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80128ce:	2101      	movs	r1, #1
 80128d0:	6838      	ldr	r0, [r7, #0]
 80128d2:	f000 fb8f 	bl	8012ff4 <prvAddCurrentTaskToDelayedList>
}
 80128d6:	bf00      	nop
 80128d8:	3710      	adds	r7, #16
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	200000e8 	.word	0x200000e8

080128e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b086      	sub	sp, #24
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	68db      	ldr	r3, [r3, #12]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80128f4:	693b      	ldr	r3, [r7, #16]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d10b      	bne.n	8012912 <xTaskRemoveFromEventList+0x2e>
 80128fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128fe:	b672      	cpsid	i
 8012900:	f383 8811 	msr	BASEPRI, r3
 8012904:	f3bf 8f6f 	isb	sy
 8012908:	f3bf 8f4f 	dsb	sy
 801290c:	b662      	cpsie	i
 801290e:	60fb      	str	r3, [r7, #12]
 8012910:	e7fe      	b.n	8012910 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	3318      	adds	r3, #24
 8012916:	4618      	mov	r0, r3
 8012918:	f7fe fcbe 	bl	8011298 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801291c:	4b1d      	ldr	r3, [pc, #116]	; (8012994 <xTaskRemoveFromEventList+0xb0>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d11c      	bne.n	801295e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	3304      	adds	r3, #4
 8012928:	4618      	mov	r0, r3
 801292a:	f7fe fcb5 	bl	8011298 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801292e:	693b      	ldr	r3, [r7, #16]
 8012930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012932:	2201      	movs	r2, #1
 8012934:	409a      	lsls	r2, r3
 8012936:	4b18      	ldr	r3, [pc, #96]	; (8012998 <xTaskRemoveFromEventList+0xb4>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	4313      	orrs	r3, r2
 801293c:	4a16      	ldr	r2, [pc, #88]	; (8012998 <xTaskRemoveFromEventList+0xb4>)
 801293e:	6013      	str	r3, [r2, #0]
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012944:	4613      	mov	r3, r2
 8012946:	009b      	lsls	r3, r3, #2
 8012948:	4413      	add	r3, r2
 801294a:	009b      	lsls	r3, r3, #2
 801294c:	4a13      	ldr	r2, [pc, #76]	; (801299c <xTaskRemoveFromEventList+0xb8>)
 801294e:	441a      	add	r2, r3
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	3304      	adds	r3, #4
 8012954:	4619      	mov	r1, r3
 8012956:	4610      	mov	r0, r2
 8012958:	f7fe fc41 	bl	80111de <vListInsertEnd>
 801295c:	e005      	b.n	801296a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	3318      	adds	r3, #24
 8012962:	4619      	mov	r1, r3
 8012964:	480e      	ldr	r0, [pc, #56]	; (80129a0 <xTaskRemoveFromEventList+0xbc>)
 8012966:	f7fe fc3a 	bl	80111de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801296e:	4b0d      	ldr	r3, [pc, #52]	; (80129a4 <xTaskRemoveFromEventList+0xc0>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012974:	429a      	cmp	r2, r3
 8012976:	d905      	bls.n	8012984 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012978:	2301      	movs	r3, #1
 801297a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801297c:	4b0a      	ldr	r3, [pc, #40]	; (80129a8 <xTaskRemoveFromEventList+0xc4>)
 801297e:	2201      	movs	r2, #1
 8012980:	601a      	str	r2, [r3, #0]
 8012982:	e001      	b.n	8012988 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012984:	2300      	movs	r3, #0
 8012986:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8012988:	697b      	ldr	r3, [r7, #20]
}
 801298a:	4618      	mov	r0, r3
 801298c:	3718      	adds	r7, #24
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}
 8012992:	bf00      	nop
 8012994:	20000210 	.word	0x20000210
 8012998:	200001f0 	.word	0x200001f0
 801299c:	200000ec 	.word	0x200000ec
 80129a0:	200001a8 	.word	0x200001a8
 80129a4:	200000e8 	.word	0x200000e8
 80129a8:	200001fc 	.word	0x200001fc

080129ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80129ac:	b480      	push	{r7}
 80129ae:	b083      	sub	sp, #12
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80129b4:	4b06      	ldr	r3, [pc, #24]	; (80129d0 <vTaskInternalSetTimeOutState+0x24>)
 80129b6:	681a      	ldr	r2, [r3, #0]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80129bc:	4b05      	ldr	r3, [pc, #20]	; (80129d4 <vTaskInternalSetTimeOutState+0x28>)
 80129be:	681a      	ldr	r2, [r3, #0]
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	605a      	str	r2, [r3, #4]
}
 80129c4:	bf00      	nop
 80129c6:	370c      	adds	r7, #12
 80129c8:	46bd      	mov	sp, r7
 80129ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ce:	4770      	bx	lr
 80129d0:	20000200 	.word	0x20000200
 80129d4:	200001ec 	.word	0x200001ec

080129d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b088      	sub	sp, #32
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d10b      	bne.n	8012a00 <xTaskCheckForTimeOut+0x28>
 80129e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ec:	b672      	cpsid	i
 80129ee:	f383 8811 	msr	BASEPRI, r3
 80129f2:	f3bf 8f6f 	isb	sy
 80129f6:	f3bf 8f4f 	dsb	sy
 80129fa:	b662      	cpsie	i
 80129fc:	613b      	str	r3, [r7, #16]
 80129fe:	e7fe      	b.n	80129fe <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d10b      	bne.n	8012a1e <xTaskCheckForTimeOut+0x46>
 8012a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a0a:	b672      	cpsid	i
 8012a0c:	f383 8811 	msr	BASEPRI, r3
 8012a10:	f3bf 8f6f 	isb	sy
 8012a14:	f3bf 8f4f 	dsb	sy
 8012a18:	b662      	cpsie	i
 8012a1a:	60fb      	str	r3, [r7, #12]
 8012a1c:	e7fe      	b.n	8012a1c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8012a1e:	f000 fc5b 	bl	80132d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012a22:	4b1d      	ldr	r3, [pc, #116]	; (8012a98 <xTaskCheckForTimeOut+0xc0>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	685b      	ldr	r3, [r3, #4]
 8012a2c:	69ba      	ldr	r2, [r7, #24]
 8012a2e:	1ad3      	subs	r3, r2, r3
 8012a30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a3a:	d102      	bne.n	8012a42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	61fb      	str	r3, [r7, #28]
 8012a40:	e023      	b.n	8012a8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681a      	ldr	r2, [r3, #0]
 8012a46:	4b15      	ldr	r3, [pc, #84]	; (8012a9c <xTaskCheckForTimeOut+0xc4>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d007      	beq.n	8012a5e <xTaskCheckForTimeOut+0x86>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	685b      	ldr	r3, [r3, #4]
 8012a52:	69ba      	ldr	r2, [r7, #24]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d302      	bcc.n	8012a5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012a58:	2301      	movs	r3, #1
 8012a5a:	61fb      	str	r3, [r7, #28]
 8012a5c:	e015      	b.n	8012a8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	697a      	ldr	r2, [r7, #20]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d20b      	bcs.n	8012a80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	681a      	ldr	r2, [r3, #0]
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	1ad2      	subs	r2, r2, r3
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	f7ff ff99 	bl	80129ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	61fb      	str	r3, [r7, #28]
 8012a7e:	e004      	b.n	8012a8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	2200      	movs	r2, #0
 8012a84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012a86:	2301      	movs	r3, #1
 8012a88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012a8a:	f000 fc57 	bl	801333c <vPortExitCritical>

	return xReturn;
 8012a8e:	69fb      	ldr	r3, [r7, #28]
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3720      	adds	r7, #32
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	200001ec 	.word	0x200001ec
 8012a9c:	20000200 	.word	0x20000200

08012aa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012aa0:	b480      	push	{r7}
 8012aa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012aa4:	4b03      	ldr	r3, [pc, #12]	; (8012ab4 <vTaskMissedYield+0x14>)
 8012aa6:	2201      	movs	r2, #1
 8012aa8:	601a      	str	r2, [r3, #0]
}
 8012aaa:	bf00      	nop
 8012aac:	46bd      	mov	sp, r7
 8012aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab2:	4770      	bx	lr
 8012ab4:	200001fc 	.word	0x200001fc

08012ab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012ac0:	f000 f854 	bl	8012b6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012ac4:	4b07      	ldr	r3, [pc, #28]	; (8012ae4 <prvIdleTask+0x2c>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	2b01      	cmp	r3, #1
 8012aca:	d907      	bls.n	8012adc <prvIdleTask+0x24>
			{
				taskYIELD();
 8012acc:	4b06      	ldr	r3, [pc, #24]	; (8012ae8 <prvIdleTask+0x30>)
 8012ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ad2:	601a      	str	r2, [r3, #0]
 8012ad4:	f3bf 8f4f 	dsb	sy
 8012ad8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012adc:	f7fe f8f6 	bl	8010ccc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012ae0:	e7ee      	b.n	8012ac0 <prvIdleTask+0x8>
 8012ae2:	bf00      	nop
 8012ae4:	200000ec 	.word	0x200000ec
 8012ae8:	e000ed04 	.word	0xe000ed04

08012aec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012af2:	2300      	movs	r3, #0
 8012af4:	607b      	str	r3, [r7, #4]
 8012af6:	e00c      	b.n	8012b12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012af8:	687a      	ldr	r2, [r7, #4]
 8012afa:	4613      	mov	r3, r2
 8012afc:	009b      	lsls	r3, r3, #2
 8012afe:	4413      	add	r3, r2
 8012b00:	009b      	lsls	r3, r3, #2
 8012b02:	4a12      	ldr	r2, [pc, #72]	; (8012b4c <prvInitialiseTaskLists+0x60>)
 8012b04:	4413      	add	r3, r2
 8012b06:	4618      	mov	r0, r3
 8012b08:	f7fe fb3c 	bl	8011184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	3301      	adds	r3, #1
 8012b10:	607b      	str	r3, [r7, #4]
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2b06      	cmp	r3, #6
 8012b16:	d9ef      	bls.n	8012af8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012b18:	480d      	ldr	r0, [pc, #52]	; (8012b50 <prvInitialiseTaskLists+0x64>)
 8012b1a:	f7fe fb33 	bl	8011184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012b1e:	480d      	ldr	r0, [pc, #52]	; (8012b54 <prvInitialiseTaskLists+0x68>)
 8012b20:	f7fe fb30 	bl	8011184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012b24:	480c      	ldr	r0, [pc, #48]	; (8012b58 <prvInitialiseTaskLists+0x6c>)
 8012b26:	f7fe fb2d 	bl	8011184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012b2a:	480c      	ldr	r0, [pc, #48]	; (8012b5c <prvInitialiseTaskLists+0x70>)
 8012b2c:	f7fe fb2a 	bl	8011184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012b30:	480b      	ldr	r0, [pc, #44]	; (8012b60 <prvInitialiseTaskLists+0x74>)
 8012b32:	f7fe fb27 	bl	8011184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012b36:	4b0b      	ldr	r3, [pc, #44]	; (8012b64 <prvInitialiseTaskLists+0x78>)
 8012b38:	4a05      	ldr	r2, [pc, #20]	; (8012b50 <prvInitialiseTaskLists+0x64>)
 8012b3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012b3c:	4b0a      	ldr	r3, [pc, #40]	; (8012b68 <prvInitialiseTaskLists+0x7c>)
 8012b3e:	4a05      	ldr	r2, [pc, #20]	; (8012b54 <prvInitialiseTaskLists+0x68>)
 8012b40:	601a      	str	r2, [r3, #0]
}
 8012b42:	bf00      	nop
 8012b44:	3708      	adds	r7, #8
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}
 8012b4a:	bf00      	nop
 8012b4c:	200000ec 	.word	0x200000ec
 8012b50:	20000178 	.word	0x20000178
 8012b54:	2000018c 	.word	0x2000018c
 8012b58:	200001a8 	.word	0x200001a8
 8012b5c:	200001bc 	.word	0x200001bc
 8012b60:	200001d4 	.word	0x200001d4
 8012b64:	200001a0 	.word	0x200001a0
 8012b68:	200001a4 	.word	0x200001a4

08012b6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b082      	sub	sp, #8
 8012b70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012b72:	e019      	b.n	8012ba8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012b74:	f000 fbb0 	bl	80132d8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012b78:	4b0f      	ldr	r3, [pc, #60]	; (8012bb8 <prvCheckTasksWaitingTermination+0x4c>)
 8012b7a:	68db      	ldr	r3, [r3, #12]
 8012b7c:	68db      	ldr	r3, [r3, #12]
 8012b7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	3304      	adds	r3, #4
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7fe fb87 	bl	8011298 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012b8a:	4b0c      	ldr	r3, [pc, #48]	; (8012bbc <prvCheckTasksWaitingTermination+0x50>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	4a0a      	ldr	r2, [pc, #40]	; (8012bbc <prvCheckTasksWaitingTermination+0x50>)
 8012b92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012b94:	4b0a      	ldr	r3, [pc, #40]	; (8012bc0 <prvCheckTasksWaitingTermination+0x54>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	3b01      	subs	r3, #1
 8012b9a:	4a09      	ldr	r2, [pc, #36]	; (8012bc0 <prvCheckTasksWaitingTermination+0x54>)
 8012b9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012b9e:	f000 fbcd 	bl	801333c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	f000 f80e 	bl	8012bc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ba8:	4b05      	ldr	r3, [pc, #20]	; (8012bc0 <prvCheckTasksWaitingTermination+0x54>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1e1      	bne.n	8012b74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012bb0:	bf00      	nop
 8012bb2:	3708      	adds	r7, #8
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	200001bc 	.word	0x200001bc
 8012bbc:	200001e8 	.word	0x200001e8
 8012bc0:	200001d0 	.word	0x200001d0

08012bc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f000 fd6f 	bl	80136b4 <vPortFree>
			vPortFree( pxTCB );
 8012bd6:	6878      	ldr	r0, [r7, #4]
 8012bd8:	f000 fd6c 	bl	80136b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012bdc:	bf00      	nop
 8012bde:	3708      	adds	r7, #8
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012be4:	b480      	push	{r7}
 8012be6:	b083      	sub	sp, #12
 8012be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012bea:	4b0f      	ldr	r3, [pc, #60]	; (8012c28 <prvResetNextTaskUnblockTime+0x44>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d101      	bne.n	8012bf8 <prvResetNextTaskUnblockTime+0x14>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	e000      	b.n	8012bfa <prvResetNextTaskUnblockTime+0x16>
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d004      	beq.n	8012c08 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012bfe:	4b0b      	ldr	r3, [pc, #44]	; (8012c2c <prvResetNextTaskUnblockTime+0x48>)
 8012c00:	f04f 32ff 	mov.w	r2, #4294967295
 8012c04:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012c06:	e008      	b.n	8012c1a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012c08:	4b07      	ldr	r3, [pc, #28]	; (8012c28 <prvResetNextTaskUnblockTime+0x44>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	68db      	ldr	r3, [r3, #12]
 8012c0e:	68db      	ldr	r3, [r3, #12]
 8012c10:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	4a05      	ldr	r2, [pc, #20]	; (8012c2c <prvResetNextTaskUnblockTime+0x48>)
 8012c18:	6013      	str	r3, [r2, #0]
}
 8012c1a:	bf00      	nop
 8012c1c:	370c      	adds	r7, #12
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c24:	4770      	bx	lr
 8012c26:	bf00      	nop
 8012c28:	200001a0 	.word	0x200001a0
 8012c2c:	20000208 	.word	0x20000208

08012c30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012c30:	b480      	push	{r7}
 8012c32:	b083      	sub	sp, #12
 8012c34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012c36:	4b0b      	ldr	r3, [pc, #44]	; (8012c64 <xTaskGetSchedulerState+0x34>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d102      	bne.n	8012c44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012c3e:	2301      	movs	r3, #1
 8012c40:	607b      	str	r3, [r7, #4]
 8012c42:	e008      	b.n	8012c56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012c44:	4b08      	ldr	r3, [pc, #32]	; (8012c68 <xTaskGetSchedulerState+0x38>)
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d102      	bne.n	8012c52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012c4c:	2302      	movs	r3, #2
 8012c4e:	607b      	str	r3, [r7, #4]
 8012c50:	e001      	b.n	8012c56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012c52:	2300      	movs	r3, #0
 8012c54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012c56:	687b      	ldr	r3, [r7, #4]
	}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	370c      	adds	r7, #12
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr
 8012c64:	200001f4 	.word	0x200001f4
 8012c68:	20000210 	.word	0x20000210

08012c6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b084      	sub	sp, #16
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d06e      	beq.n	8012d60 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012c82:	68bb      	ldr	r3, [r7, #8]
 8012c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c86:	4b39      	ldr	r3, [pc, #228]	; (8012d6c <xTaskPriorityInherit+0x100>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d25e      	bcs.n	8012d4e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	699b      	ldr	r3, [r3, #24]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	db06      	blt.n	8012ca6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c98:	4b34      	ldr	r3, [pc, #208]	; (8012d6c <xTaskPriorityInherit+0x100>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c9e:	f1c3 0207 	rsb	r2, r3, #7
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	6959      	ldr	r1, [r3, #20]
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cae:	4613      	mov	r3, r2
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	4413      	add	r3, r2
 8012cb4:	009b      	lsls	r3, r3, #2
 8012cb6:	4a2e      	ldr	r2, [pc, #184]	; (8012d70 <xTaskPriorityInherit+0x104>)
 8012cb8:	4413      	add	r3, r2
 8012cba:	4299      	cmp	r1, r3
 8012cbc:	d101      	bne.n	8012cc2 <xTaskPriorityInherit+0x56>
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	e000      	b.n	8012cc4 <xTaskPriorityInherit+0x58>
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d03a      	beq.n	8012d3e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	3304      	adds	r3, #4
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7fe fae3 	bl	8011298 <uxListRemove>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d115      	bne.n	8012d04 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cdc:	4924      	ldr	r1, [pc, #144]	; (8012d70 <xTaskPriorityInherit+0x104>)
 8012cde:	4613      	mov	r3, r2
 8012ce0:	009b      	lsls	r3, r3, #2
 8012ce2:	4413      	add	r3, r2
 8012ce4:	009b      	lsls	r3, r3, #2
 8012ce6:	440b      	add	r3, r1
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d10a      	bne.n	8012d04 <xTaskPriorityInherit+0x98>
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8012cf8:	43da      	mvns	r2, r3
 8012cfa:	4b1e      	ldr	r3, [pc, #120]	; (8012d74 <xTaskPriorityInherit+0x108>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	4013      	ands	r3, r2
 8012d00:	4a1c      	ldr	r2, [pc, #112]	; (8012d74 <xTaskPriorityInherit+0x108>)
 8012d02:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012d04:	4b19      	ldr	r3, [pc, #100]	; (8012d6c <xTaskPriorityInherit+0x100>)
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d12:	2201      	movs	r2, #1
 8012d14:	409a      	lsls	r2, r3
 8012d16:	4b17      	ldr	r3, [pc, #92]	; (8012d74 <xTaskPriorityInherit+0x108>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	4313      	orrs	r3, r2
 8012d1c:	4a15      	ldr	r2, [pc, #84]	; (8012d74 <xTaskPriorityInherit+0x108>)
 8012d1e:	6013      	str	r3, [r2, #0]
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d24:	4613      	mov	r3, r2
 8012d26:	009b      	lsls	r3, r3, #2
 8012d28:	4413      	add	r3, r2
 8012d2a:	009b      	lsls	r3, r3, #2
 8012d2c:	4a10      	ldr	r2, [pc, #64]	; (8012d70 <xTaskPriorityInherit+0x104>)
 8012d2e:	441a      	add	r2, r3
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	3304      	adds	r3, #4
 8012d34:	4619      	mov	r1, r3
 8012d36:	4610      	mov	r0, r2
 8012d38:	f7fe fa51 	bl	80111de <vListInsertEnd>
 8012d3c:	e004      	b.n	8012d48 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012d3e:	4b0b      	ldr	r3, [pc, #44]	; (8012d6c <xTaskPriorityInherit+0x100>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	60fb      	str	r3, [r7, #12]
 8012d4c:	e008      	b.n	8012d60 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d52:	4b06      	ldr	r3, [pc, #24]	; (8012d6c <xTaskPriorityInherit+0x100>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d58:	429a      	cmp	r2, r3
 8012d5a:	d201      	bcs.n	8012d60 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012d60:	68fb      	ldr	r3, [r7, #12]
	}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3710      	adds	r7, #16
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
 8012d6a:	bf00      	nop
 8012d6c:	200000e8 	.word	0x200000e8
 8012d70:	200000ec 	.word	0x200000ec
 8012d74:	200001f0 	.word	0x200001f0

08012d78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b086      	sub	sp, #24
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012d84:	2300      	movs	r3, #0
 8012d86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d070      	beq.n	8012e70 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012d8e:	4b3b      	ldr	r3, [pc, #236]	; (8012e7c <xTaskPriorityDisinherit+0x104>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	693a      	ldr	r2, [r7, #16]
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d00b      	beq.n	8012db0 <xTaskPriorityDisinherit+0x38>
 8012d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d9c:	b672      	cpsid	i
 8012d9e:	f383 8811 	msr	BASEPRI, r3
 8012da2:	f3bf 8f6f 	isb	sy
 8012da6:	f3bf 8f4f 	dsb	sy
 8012daa:	b662      	cpsie	i
 8012dac:	60fb      	str	r3, [r7, #12]
 8012dae:	e7fe      	b.n	8012dae <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d10b      	bne.n	8012dd0 <xTaskPriorityDisinherit+0x58>
 8012db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dbc:	b672      	cpsid	i
 8012dbe:	f383 8811 	msr	BASEPRI, r3
 8012dc2:	f3bf 8f6f 	isb	sy
 8012dc6:	f3bf 8f4f 	dsb	sy
 8012dca:	b662      	cpsie	i
 8012dcc:	60bb      	str	r3, [r7, #8]
 8012dce:	e7fe      	b.n	8012dce <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012dd4:	1e5a      	subs	r2, r3, #1
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012de2:	429a      	cmp	r2, r3
 8012de4:	d044      	beq.n	8012e70 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012de6:	693b      	ldr	r3, [r7, #16]
 8012de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d140      	bne.n	8012e70 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	3304      	adds	r3, #4
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7fe fa50 	bl	8011298 <uxListRemove>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d115      	bne.n	8012e2a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e02:	491f      	ldr	r1, [pc, #124]	; (8012e80 <xTaskPriorityDisinherit+0x108>)
 8012e04:	4613      	mov	r3, r2
 8012e06:	009b      	lsls	r3, r3, #2
 8012e08:	4413      	add	r3, r2
 8012e0a:	009b      	lsls	r3, r3, #2
 8012e0c:	440b      	add	r3, r1
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d10a      	bne.n	8012e2a <xTaskPriorityDisinherit+0xb2>
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e18:	2201      	movs	r2, #1
 8012e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8012e1e:	43da      	mvns	r2, r3
 8012e20:	4b18      	ldr	r3, [pc, #96]	; (8012e84 <xTaskPriorityDisinherit+0x10c>)
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	4013      	ands	r3, r2
 8012e26:	4a17      	ldr	r2, [pc, #92]	; (8012e84 <xTaskPriorityDisinherit+0x10c>)
 8012e28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e36:	f1c3 0207 	rsb	r2, r3, #7
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e42:	2201      	movs	r2, #1
 8012e44:	409a      	lsls	r2, r3
 8012e46:	4b0f      	ldr	r3, [pc, #60]	; (8012e84 <xTaskPriorityDisinherit+0x10c>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	4313      	orrs	r3, r2
 8012e4c:	4a0d      	ldr	r2, [pc, #52]	; (8012e84 <xTaskPriorityDisinherit+0x10c>)
 8012e4e:	6013      	str	r3, [r2, #0]
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e54:	4613      	mov	r3, r2
 8012e56:	009b      	lsls	r3, r3, #2
 8012e58:	4413      	add	r3, r2
 8012e5a:	009b      	lsls	r3, r3, #2
 8012e5c:	4a08      	ldr	r2, [pc, #32]	; (8012e80 <xTaskPriorityDisinherit+0x108>)
 8012e5e:	441a      	add	r2, r3
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	3304      	adds	r3, #4
 8012e64:	4619      	mov	r1, r3
 8012e66:	4610      	mov	r0, r2
 8012e68:	f7fe f9b9 	bl	80111de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012e70:	697b      	ldr	r3, [r7, #20]
	}
 8012e72:	4618      	mov	r0, r3
 8012e74:	3718      	adds	r7, #24
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}
 8012e7a:	bf00      	nop
 8012e7c:	200000e8 	.word	0x200000e8
 8012e80:	200000ec 	.word	0x200000ec
 8012e84:	200001f0 	.word	0x200001f0

08012e88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b088      	sub	sp, #32
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012e96:	2301      	movs	r3, #1
 8012e98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	f000 808a 	beq.w	8012fb6 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d10b      	bne.n	8012ec2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8012eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eae:	b672      	cpsid	i
 8012eb0:	f383 8811 	msr	BASEPRI, r3
 8012eb4:	f3bf 8f6f 	isb	sy
 8012eb8:	f3bf 8f4f 	dsb	sy
 8012ebc:	b662      	cpsie	i
 8012ebe:	60fb      	str	r3, [r7, #12]
 8012ec0:	e7fe      	b.n	8012ec0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012ec2:	69bb      	ldr	r3, [r7, #24]
 8012ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ec6:	683a      	ldr	r2, [r7, #0]
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	d902      	bls.n	8012ed2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	61fb      	str	r3, [r7, #28]
 8012ed0:	e002      	b.n	8012ed8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012ed2:	69bb      	ldr	r3, [r7, #24]
 8012ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ed6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012ed8:	69bb      	ldr	r3, [r7, #24]
 8012eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012edc:	69fa      	ldr	r2, [r7, #28]
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d069      	beq.n	8012fb6 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ee6:	697a      	ldr	r2, [r7, #20]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d164      	bne.n	8012fb6 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012eec:	4b34      	ldr	r3, [pc, #208]	; (8012fc0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	69ba      	ldr	r2, [r7, #24]
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d10b      	bne.n	8012f0e <vTaskPriorityDisinheritAfterTimeout+0x86>
 8012ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efa:	b672      	cpsid	i
 8012efc:	f383 8811 	msr	BASEPRI, r3
 8012f00:	f3bf 8f6f 	isb	sy
 8012f04:	f3bf 8f4f 	dsb	sy
 8012f08:	b662      	cpsie	i
 8012f0a:	60bb      	str	r3, [r7, #8]
 8012f0c:	e7fe      	b.n	8012f0c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012f0e:	69bb      	ldr	r3, [r7, #24]
 8012f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f12:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012f14:	69bb      	ldr	r3, [r7, #24]
 8012f16:	69fa      	ldr	r2, [r7, #28]
 8012f18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012f1a:	69bb      	ldr	r3, [r7, #24]
 8012f1c:	699b      	ldr	r3, [r3, #24]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	db04      	blt.n	8012f2c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f22:	69fb      	ldr	r3, [r7, #28]
 8012f24:	f1c3 0207 	rsb	r2, r3, #7
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012f2c:	69bb      	ldr	r3, [r7, #24]
 8012f2e:	6959      	ldr	r1, [r3, #20]
 8012f30:	693a      	ldr	r2, [r7, #16]
 8012f32:	4613      	mov	r3, r2
 8012f34:	009b      	lsls	r3, r3, #2
 8012f36:	4413      	add	r3, r2
 8012f38:	009b      	lsls	r3, r3, #2
 8012f3a:	4a22      	ldr	r2, [pc, #136]	; (8012fc4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012f3c:	4413      	add	r3, r2
 8012f3e:	4299      	cmp	r1, r3
 8012f40:	d101      	bne.n	8012f46 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8012f42:	2301      	movs	r3, #1
 8012f44:	e000      	b.n	8012f48 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8012f46:	2300      	movs	r3, #0
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d034      	beq.n	8012fb6 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	3304      	adds	r3, #4
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7fe f9a1 	bl	8011298 <uxListRemove>
 8012f56:	4603      	mov	r3, r0
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d115      	bne.n	8012f88 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012f5c:	69bb      	ldr	r3, [r7, #24]
 8012f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f60:	4918      	ldr	r1, [pc, #96]	; (8012fc4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012f62:	4613      	mov	r3, r2
 8012f64:	009b      	lsls	r3, r3, #2
 8012f66:	4413      	add	r3, r2
 8012f68:	009b      	lsls	r3, r3, #2
 8012f6a:	440b      	add	r3, r1
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d10a      	bne.n	8012f88 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8012f72:	69bb      	ldr	r3, [r7, #24]
 8012f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f76:	2201      	movs	r2, #1
 8012f78:	fa02 f303 	lsl.w	r3, r2, r3
 8012f7c:	43da      	mvns	r2, r3
 8012f7e:	4b12      	ldr	r3, [pc, #72]	; (8012fc8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	4013      	ands	r3, r2
 8012f84:	4a10      	ldr	r2, [pc, #64]	; (8012fc8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012f86:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012f88:	69bb      	ldr	r3, [r7, #24]
 8012f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f8c:	2201      	movs	r2, #1
 8012f8e:	409a      	lsls	r2, r3
 8012f90:	4b0d      	ldr	r3, [pc, #52]	; (8012fc8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	4313      	orrs	r3, r2
 8012f96:	4a0c      	ldr	r2, [pc, #48]	; (8012fc8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012f98:	6013      	str	r3, [r2, #0]
 8012f9a:	69bb      	ldr	r3, [r7, #24]
 8012f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f9e:	4613      	mov	r3, r2
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	4413      	add	r3, r2
 8012fa4:	009b      	lsls	r3, r3, #2
 8012fa6:	4a07      	ldr	r2, [pc, #28]	; (8012fc4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012fa8:	441a      	add	r2, r3
 8012faa:	69bb      	ldr	r3, [r7, #24]
 8012fac:	3304      	adds	r3, #4
 8012fae:	4619      	mov	r1, r3
 8012fb0:	4610      	mov	r0, r2
 8012fb2:	f7fe f914 	bl	80111de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012fb6:	bf00      	nop
 8012fb8:	3720      	adds	r7, #32
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
 8012fbe:	bf00      	nop
 8012fc0:	200000e8 	.word	0x200000e8
 8012fc4:	200000ec 	.word	0x200000ec
 8012fc8:	200001f0 	.word	0x200001f0

08012fcc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8012fcc:	b480      	push	{r7}
 8012fce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012fd0:	4b07      	ldr	r3, [pc, #28]	; (8012ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d004      	beq.n	8012fe2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012fd8:	4b05      	ldr	r3, [pc, #20]	; (8012ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012fde:	3201      	adds	r2, #1
 8012fe0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012fe2:	4b03      	ldr	r3, [pc, #12]	; (8012ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
	}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fee:	4770      	bx	lr
 8012ff0:	200000e8 	.word	0x200000e8

08012ff4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b084      	sub	sp, #16
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012ffe:	4b29      	ldr	r3, [pc, #164]	; (80130a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013004:	4b28      	ldr	r3, [pc, #160]	; (80130a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	3304      	adds	r3, #4
 801300a:	4618      	mov	r0, r3
 801300c:	f7fe f944 	bl	8011298 <uxListRemove>
 8013010:	4603      	mov	r3, r0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d10b      	bne.n	801302e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8013016:	4b24      	ldr	r3, [pc, #144]	; (80130a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801301c:	2201      	movs	r2, #1
 801301e:	fa02 f303 	lsl.w	r3, r2, r3
 8013022:	43da      	mvns	r2, r3
 8013024:	4b21      	ldr	r3, [pc, #132]	; (80130ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	4013      	ands	r3, r2
 801302a:	4a20      	ldr	r2, [pc, #128]	; (80130ac <prvAddCurrentTaskToDelayedList+0xb8>)
 801302c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013034:	d10a      	bne.n	801304c <prvAddCurrentTaskToDelayedList+0x58>
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d007      	beq.n	801304c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801303c:	4b1a      	ldr	r3, [pc, #104]	; (80130a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	3304      	adds	r3, #4
 8013042:	4619      	mov	r1, r3
 8013044:	481a      	ldr	r0, [pc, #104]	; (80130b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013046:	f7fe f8ca 	bl	80111de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801304a:	e026      	b.n	801309a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801304c:	68fa      	ldr	r2, [r7, #12]
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	4413      	add	r3, r2
 8013052:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013054:	4b14      	ldr	r3, [pc, #80]	; (80130a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	68ba      	ldr	r2, [r7, #8]
 801305a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801305c:	68ba      	ldr	r2, [r7, #8]
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	429a      	cmp	r2, r3
 8013062:	d209      	bcs.n	8013078 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013064:	4b13      	ldr	r3, [pc, #76]	; (80130b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013066:	681a      	ldr	r2, [r3, #0]
 8013068:	4b0f      	ldr	r3, [pc, #60]	; (80130a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	3304      	adds	r3, #4
 801306e:	4619      	mov	r1, r3
 8013070:	4610      	mov	r0, r2
 8013072:	f7fe f8d8 	bl	8011226 <vListInsert>
}
 8013076:	e010      	b.n	801309a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013078:	4b0f      	ldr	r3, [pc, #60]	; (80130b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801307a:	681a      	ldr	r2, [r3, #0]
 801307c:	4b0a      	ldr	r3, [pc, #40]	; (80130a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	3304      	adds	r3, #4
 8013082:	4619      	mov	r1, r3
 8013084:	4610      	mov	r0, r2
 8013086:	f7fe f8ce 	bl	8011226 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801308a:	4b0c      	ldr	r3, [pc, #48]	; (80130bc <prvAddCurrentTaskToDelayedList+0xc8>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	68ba      	ldr	r2, [r7, #8]
 8013090:	429a      	cmp	r2, r3
 8013092:	d202      	bcs.n	801309a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013094:	4a09      	ldr	r2, [pc, #36]	; (80130bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	6013      	str	r3, [r2, #0]
}
 801309a:	bf00      	nop
 801309c:	3710      	adds	r7, #16
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}
 80130a2:	bf00      	nop
 80130a4:	200001ec 	.word	0x200001ec
 80130a8:	200000e8 	.word	0x200000e8
 80130ac:	200001f0 	.word	0x200001f0
 80130b0:	200001d4 	.word	0x200001d4
 80130b4:	200001a4 	.word	0x200001a4
 80130b8:	200001a0 	.word	0x200001a0
 80130bc:	20000208 	.word	0x20000208

080130c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80130c0:	b480      	push	{r7}
 80130c2:	b085      	sub	sp, #20
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	3b04      	subs	r3, #4
 80130d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80130d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	3b04      	subs	r3, #4
 80130de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	f023 0201 	bic.w	r2, r3, #1
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	3b04      	subs	r3, #4
 80130ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80130f0:	4a0c      	ldr	r2, [pc, #48]	; (8013124 <pxPortInitialiseStack+0x64>)
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	3b14      	subs	r3, #20
 80130fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80130fc:	687a      	ldr	r2, [r7, #4]
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	3b04      	subs	r3, #4
 8013106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	f06f 0202 	mvn.w	r2, #2
 801310e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	3b20      	subs	r3, #32
 8013114:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013116:	68fb      	ldr	r3, [r7, #12]
}
 8013118:	4618      	mov	r0, r3
 801311a:	3714      	adds	r7, #20
 801311c:	46bd      	mov	sp, r7
 801311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013122:	4770      	bx	lr
 8013124:	08013129 	.word	0x08013129

08013128 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013128:	b480      	push	{r7}
 801312a:	b085      	sub	sp, #20
 801312c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801312e:	2300      	movs	r3, #0
 8013130:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013132:	4b13      	ldr	r3, [pc, #76]	; (8013180 <prvTaskExitError+0x58>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801313a:	d00b      	beq.n	8013154 <prvTaskExitError+0x2c>
 801313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013140:	b672      	cpsid	i
 8013142:	f383 8811 	msr	BASEPRI, r3
 8013146:	f3bf 8f6f 	isb	sy
 801314a:	f3bf 8f4f 	dsb	sy
 801314e:	b662      	cpsie	i
 8013150:	60fb      	str	r3, [r7, #12]
 8013152:	e7fe      	b.n	8013152 <prvTaskExitError+0x2a>
 8013154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013158:	b672      	cpsid	i
 801315a:	f383 8811 	msr	BASEPRI, r3
 801315e:	f3bf 8f6f 	isb	sy
 8013162:	f3bf 8f4f 	dsb	sy
 8013166:	b662      	cpsie	i
 8013168:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801316a:	bf00      	nop
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d0fc      	beq.n	801316c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013172:	bf00      	nop
 8013174:	3714      	adds	r7, #20
 8013176:	46bd      	mov	sp, r7
 8013178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317c:	4770      	bx	lr
 801317e:	bf00      	nop
 8013180:	20000028 	.word	0x20000028
	...

08013190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013190:	4b07      	ldr	r3, [pc, #28]	; (80131b0 <pxCurrentTCBConst2>)
 8013192:	6819      	ldr	r1, [r3, #0]
 8013194:	6808      	ldr	r0, [r1, #0]
 8013196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319a:	f380 8809 	msr	PSP, r0
 801319e:	f3bf 8f6f 	isb	sy
 80131a2:	f04f 0000 	mov.w	r0, #0
 80131a6:	f380 8811 	msr	BASEPRI, r0
 80131aa:	4770      	bx	lr
 80131ac:	f3af 8000 	nop.w

080131b0 <pxCurrentTCBConst2>:
 80131b0:	200000e8 	.word	0x200000e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80131b4:	bf00      	nop
 80131b6:	bf00      	nop

080131b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80131b8:	4808      	ldr	r0, [pc, #32]	; (80131dc <prvPortStartFirstTask+0x24>)
 80131ba:	6800      	ldr	r0, [r0, #0]
 80131bc:	6800      	ldr	r0, [r0, #0]
 80131be:	f380 8808 	msr	MSP, r0
 80131c2:	f04f 0000 	mov.w	r0, #0
 80131c6:	f380 8814 	msr	CONTROL, r0
 80131ca:	b662      	cpsie	i
 80131cc:	b661      	cpsie	f
 80131ce:	f3bf 8f4f 	dsb	sy
 80131d2:	f3bf 8f6f 	isb	sy
 80131d6:	df00      	svc	0
 80131d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80131da:	bf00      	nop
 80131dc:	e000ed08 	.word	0xe000ed08

080131e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80131e6:	4b36      	ldr	r3, [pc, #216]	; (80132c0 <xPortStartScheduler+0xe0>)
 80131e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	b2db      	uxtb	r3, r3
 80131f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	22ff      	movs	r2, #255	; 0xff
 80131f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013200:	78fb      	ldrb	r3, [r7, #3]
 8013202:	b2db      	uxtb	r3, r3
 8013204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013208:	b2da      	uxtb	r2, r3
 801320a:	4b2e      	ldr	r3, [pc, #184]	; (80132c4 <xPortStartScheduler+0xe4>)
 801320c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801320e:	4b2e      	ldr	r3, [pc, #184]	; (80132c8 <xPortStartScheduler+0xe8>)
 8013210:	2207      	movs	r2, #7
 8013212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013214:	e009      	b.n	801322a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013216:	4b2c      	ldr	r3, [pc, #176]	; (80132c8 <xPortStartScheduler+0xe8>)
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	3b01      	subs	r3, #1
 801321c:	4a2a      	ldr	r2, [pc, #168]	; (80132c8 <xPortStartScheduler+0xe8>)
 801321e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013220:	78fb      	ldrb	r3, [r7, #3]
 8013222:	b2db      	uxtb	r3, r3
 8013224:	005b      	lsls	r3, r3, #1
 8013226:	b2db      	uxtb	r3, r3
 8013228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801322a:	78fb      	ldrb	r3, [r7, #3]
 801322c:	b2db      	uxtb	r3, r3
 801322e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013232:	2b80      	cmp	r3, #128	; 0x80
 8013234:	d0ef      	beq.n	8013216 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013236:	4b24      	ldr	r3, [pc, #144]	; (80132c8 <xPortStartScheduler+0xe8>)
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	f1c3 0307 	rsb	r3, r3, #7
 801323e:	2b04      	cmp	r3, #4
 8013240:	d00b      	beq.n	801325a <xPortStartScheduler+0x7a>
 8013242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013246:	b672      	cpsid	i
 8013248:	f383 8811 	msr	BASEPRI, r3
 801324c:	f3bf 8f6f 	isb	sy
 8013250:	f3bf 8f4f 	dsb	sy
 8013254:	b662      	cpsie	i
 8013256:	60bb      	str	r3, [r7, #8]
 8013258:	e7fe      	b.n	8013258 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801325a:	4b1b      	ldr	r3, [pc, #108]	; (80132c8 <xPortStartScheduler+0xe8>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	021b      	lsls	r3, r3, #8
 8013260:	4a19      	ldr	r2, [pc, #100]	; (80132c8 <xPortStartScheduler+0xe8>)
 8013262:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013264:	4b18      	ldr	r3, [pc, #96]	; (80132c8 <xPortStartScheduler+0xe8>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801326c:	4a16      	ldr	r2, [pc, #88]	; (80132c8 <xPortStartScheduler+0xe8>)
 801326e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	b2da      	uxtb	r2, r3
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013278:	4b14      	ldr	r3, [pc, #80]	; (80132cc <xPortStartScheduler+0xec>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	4a13      	ldr	r2, [pc, #76]	; (80132cc <xPortStartScheduler+0xec>)
 801327e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013282:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013284:	4b11      	ldr	r3, [pc, #68]	; (80132cc <xPortStartScheduler+0xec>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4a10      	ldr	r2, [pc, #64]	; (80132cc <xPortStartScheduler+0xec>)
 801328a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801328e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013290:	f000 f8d4 	bl	801343c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013294:	4b0e      	ldr	r3, [pc, #56]	; (80132d0 <xPortStartScheduler+0xf0>)
 8013296:	2200      	movs	r2, #0
 8013298:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801329a:	f000 f8f3 	bl	8013484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801329e:	4b0d      	ldr	r3, [pc, #52]	; (80132d4 <xPortStartScheduler+0xf4>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	4a0c      	ldr	r2, [pc, #48]	; (80132d4 <xPortStartScheduler+0xf4>)
 80132a4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80132a8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80132aa:	f7ff ff85 	bl	80131b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80132ae:	f7ff fa65 	bl	801277c <vTaskSwitchContext>
	prvTaskExitError();
 80132b2:	f7ff ff39 	bl	8013128 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80132b6:	2300      	movs	r3, #0
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3710      	adds	r7, #16
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	e000e400 	.word	0xe000e400
 80132c4:	20000214 	.word	0x20000214
 80132c8:	20000218 	.word	0x20000218
 80132cc:	e000ed20 	.word	0xe000ed20
 80132d0:	20000028 	.word	0x20000028
 80132d4:	e000ef34 	.word	0xe000ef34

080132d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80132d8:	b480      	push	{r7}
 80132da:	b083      	sub	sp, #12
 80132dc:	af00      	add	r7, sp, #0
 80132de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132e2:	b672      	cpsid	i
 80132e4:	f383 8811 	msr	BASEPRI, r3
 80132e8:	f3bf 8f6f 	isb	sy
 80132ec:	f3bf 8f4f 	dsb	sy
 80132f0:	b662      	cpsie	i
 80132f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80132f4:	4b0f      	ldr	r3, [pc, #60]	; (8013334 <vPortEnterCritical+0x5c>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	3301      	adds	r3, #1
 80132fa:	4a0e      	ldr	r2, [pc, #56]	; (8013334 <vPortEnterCritical+0x5c>)
 80132fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80132fe:	4b0d      	ldr	r3, [pc, #52]	; (8013334 <vPortEnterCritical+0x5c>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2b01      	cmp	r3, #1
 8013304:	d110      	bne.n	8013328 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013306:	4b0c      	ldr	r3, [pc, #48]	; (8013338 <vPortEnterCritical+0x60>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	b2db      	uxtb	r3, r3
 801330c:	2b00      	cmp	r3, #0
 801330e:	d00b      	beq.n	8013328 <vPortEnterCritical+0x50>
 8013310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013314:	b672      	cpsid	i
 8013316:	f383 8811 	msr	BASEPRI, r3
 801331a:	f3bf 8f6f 	isb	sy
 801331e:	f3bf 8f4f 	dsb	sy
 8013322:	b662      	cpsie	i
 8013324:	603b      	str	r3, [r7, #0]
 8013326:	e7fe      	b.n	8013326 <vPortEnterCritical+0x4e>
	}
}
 8013328:	bf00      	nop
 801332a:	370c      	adds	r7, #12
 801332c:	46bd      	mov	sp, r7
 801332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013332:	4770      	bx	lr
 8013334:	20000028 	.word	0x20000028
 8013338:	e000ed04 	.word	0xe000ed04

0801333c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801333c:	b480      	push	{r7}
 801333e:	b083      	sub	sp, #12
 8013340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013342:	4b12      	ldr	r3, [pc, #72]	; (801338c <vPortExitCritical+0x50>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d10b      	bne.n	8013362 <vPortExitCritical+0x26>
 801334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334e:	b672      	cpsid	i
 8013350:	f383 8811 	msr	BASEPRI, r3
 8013354:	f3bf 8f6f 	isb	sy
 8013358:	f3bf 8f4f 	dsb	sy
 801335c:	b662      	cpsie	i
 801335e:	607b      	str	r3, [r7, #4]
 8013360:	e7fe      	b.n	8013360 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8013362:	4b0a      	ldr	r3, [pc, #40]	; (801338c <vPortExitCritical+0x50>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	3b01      	subs	r3, #1
 8013368:	4a08      	ldr	r2, [pc, #32]	; (801338c <vPortExitCritical+0x50>)
 801336a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801336c:	4b07      	ldr	r3, [pc, #28]	; (801338c <vPortExitCritical+0x50>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d104      	bne.n	801337e <vPortExitCritical+0x42>
 8013374:	2300      	movs	r3, #0
 8013376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801337e:	bf00      	nop
 8013380:	370c      	adds	r7, #12
 8013382:	46bd      	mov	sp, r7
 8013384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013388:	4770      	bx	lr
 801338a:	bf00      	nop
 801338c:	20000028 	.word	0x20000028

08013390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013390:	f3ef 8009 	mrs	r0, PSP
 8013394:	f3bf 8f6f 	isb	sy
 8013398:	4b15      	ldr	r3, [pc, #84]	; (80133f0 <pxCurrentTCBConst>)
 801339a:	681a      	ldr	r2, [r3, #0]
 801339c:	f01e 0f10 	tst.w	lr, #16
 80133a0:	bf08      	it	eq
 80133a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80133a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133aa:	6010      	str	r0, [r2, #0]
 80133ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80133b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80133b4:	b672      	cpsid	i
 80133b6:	f380 8811 	msr	BASEPRI, r0
 80133ba:	f3bf 8f4f 	dsb	sy
 80133be:	f3bf 8f6f 	isb	sy
 80133c2:	b662      	cpsie	i
 80133c4:	f7ff f9da 	bl	801277c <vTaskSwitchContext>
 80133c8:	f04f 0000 	mov.w	r0, #0
 80133cc:	f380 8811 	msr	BASEPRI, r0
 80133d0:	bc09      	pop	{r0, r3}
 80133d2:	6819      	ldr	r1, [r3, #0]
 80133d4:	6808      	ldr	r0, [r1, #0]
 80133d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133da:	f01e 0f10 	tst.w	lr, #16
 80133de:	bf08      	it	eq
 80133e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80133e4:	f380 8809 	msr	PSP, r0
 80133e8:	f3bf 8f6f 	isb	sy
 80133ec:	4770      	bx	lr
 80133ee:	bf00      	nop

080133f0 <pxCurrentTCBConst>:
 80133f0:	200000e8 	.word	0x200000e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80133f4:	bf00      	nop
 80133f6:	bf00      	nop

080133f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
	__asm volatile
 80133fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013402:	b672      	cpsid	i
 8013404:	f383 8811 	msr	BASEPRI, r3
 8013408:	f3bf 8f6f 	isb	sy
 801340c:	f3bf 8f4f 	dsb	sy
 8013410:	b662      	cpsie	i
 8013412:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013414:	f7ff f8b6 	bl	8012584 <xTaskIncrementTick>
 8013418:	4603      	mov	r3, r0
 801341a:	2b00      	cmp	r3, #0
 801341c:	d003      	beq.n	8013426 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801341e:	4b06      	ldr	r3, [pc, #24]	; (8013438 <SysTick_Handler+0x40>)
 8013420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013424:	601a      	str	r2, [r3, #0]
 8013426:	2300      	movs	r3, #0
 8013428:	603b      	str	r3, [r7, #0]
	__asm volatile
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013430:	bf00      	nop
 8013432:	3708      	adds	r7, #8
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}
 8013438:	e000ed04 	.word	0xe000ed04

0801343c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801343c:	b480      	push	{r7}
 801343e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013440:	4b0b      	ldr	r3, [pc, #44]	; (8013470 <vPortSetupTimerInterrupt+0x34>)
 8013442:	2200      	movs	r2, #0
 8013444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013446:	4b0b      	ldr	r3, [pc, #44]	; (8013474 <vPortSetupTimerInterrupt+0x38>)
 8013448:	2200      	movs	r2, #0
 801344a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801344c:	4b0a      	ldr	r3, [pc, #40]	; (8013478 <vPortSetupTimerInterrupt+0x3c>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	4a0a      	ldr	r2, [pc, #40]	; (801347c <vPortSetupTimerInterrupt+0x40>)
 8013452:	fba2 2303 	umull	r2, r3, r2, r3
 8013456:	099b      	lsrs	r3, r3, #6
 8013458:	4a09      	ldr	r2, [pc, #36]	; (8013480 <vPortSetupTimerInterrupt+0x44>)
 801345a:	3b01      	subs	r3, #1
 801345c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801345e:	4b04      	ldr	r3, [pc, #16]	; (8013470 <vPortSetupTimerInterrupt+0x34>)
 8013460:	2207      	movs	r2, #7
 8013462:	601a      	str	r2, [r3, #0]
}
 8013464:	bf00      	nop
 8013466:	46bd      	mov	sp, r7
 8013468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346c:	4770      	bx	lr
 801346e:	bf00      	nop
 8013470:	e000e010 	.word	0xe000e010
 8013474:	e000e018 	.word	0xe000e018
 8013478:	2000003c 	.word	0x2000003c
 801347c:	10624dd3 	.word	0x10624dd3
 8013480:	e000e014 	.word	0xe000e014

08013484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013494 <vPortEnableVFP+0x10>
 8013488:	6801      	ldr	r1, [r0, #0]
 801348a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801348e:	6001      	str	r1, [r0, #0]
 8013490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013492:	bf00      	nop
 8013494:	e000ed88 	.word	0xe000ed88

08013498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013498:	b480      	push	{r7}
 801349a:	b085      	sub	sp, #20
 801349c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801349e:	f3ef 8305 	mrs	r3, IPSR
 80134a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2b0f      	cmp	r3, #15
 80134a8:	d915      	bls.n	80134d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80134aa:	4a18      	ldr	r2, [pc, #96]	; (801350c <vPortValidateInterruptPriority+0x74>)
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	4413      	add	r3, r2
 80134b0:	781b      	ldrb	r3, [r3, #0]
 80134b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80134b4:	4b16      	ldr	r3, [pc, #88]	; (8013510 <vPortValidateInterruptPriority+0x78>)
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	7afa      	ldrb	r2, [r7, #11]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d20b      	bcs.n	80134d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80134be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c2:	b672      	cpsid	i
 80134c4:	f383 8811 	msr	BASEPRI, r3
 80134c8:	f3bf 8f6f 	isb	sy
 80134cc:	f3bf 8f4f 	dsb	sy
 80134d0:	b662      	cpsie	i
 80134d2:	607b      	str	r3, [r7, #4]
 80134d4:	e7fe      	b.n	80134d4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80134d6:	4b0f      	ldr	r3, [pc, #60]	; (8013514 <vPortValidateInterruptPriority+0x7c>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80134de:	4b0e      	ldr	r3, [pc, #56]	; (8013518 <vPortValidateInterruptPriority+0x80>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d90b      	bls.n	80134fe <vPortValidateInterruptPriority+0x66>
 80134e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ea:	b672      	cpsid	i
 80134ec:	f383 8811 	msr	BASEPRI, r3
 80134f0:	f3bf 8f6f 	isb	sy
 80134f4:	f3bf 8f4f 	dsb	sy
 80134f8:	b662      	cpsie	i
 80134fa:	603b      	str	r3, [r7, #0]
 80134fc:	e7fe      	b.n	80134fc <vPortValidateInterruptPriority+0x64>
	}
 80134fe:	bf00      	nop
 8013500:	3714      	adds	r7, #20
 8013502:	46bd      	mov	sp, r7
 8013504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013508:	4770      	bx	lr
 801350a:	bf00      	nop
 801350c:	e000e3f0 	.word	0xe000e3f0
 8013510:	20000214 	.word	0x20000214
 8013514:	e000ed0c 	.word	0xe000ed0c
 8013518:	20000218 	.word	0x20000218

0801351c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b08a      	sub	sp, #40	; 0x28
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013524:	2300      	movs	r3, #0
 8013526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013528:	f7fe ff5e 	bl	80123e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801352c:	4b5c      	ldr	r3, [pc, #368]	; (80136a0 <pvPortMalloc+0x184>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d101      	bne.n	8013538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013534:	f000 f91a 	bl	801376c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013538:	4b5a      	ldr	r3, [pc, #360]	; (80136a4 <pvPortMalloc+0x188>)
 801353a:	681a      	ldr	r2, [r3, #0]
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	4013      	ands	r3, r2
 8013540:	2b00      	cmp	r3, #0
 8013542:	f040 8090 	bne.w	8013666 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d01e      	beq.n	801358a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801354c:	2208      	movs	r2, #8
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	4413      	add	r3, r2
 8013552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f003 0307 	and.w	r3, r3, #7
 801355a:	2b00      	cmp	r3, #0
 801355c:	d015      	beq.n	801358a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f023 0307 	bic.w	r3, r3, #7
 8013564:	3308      	adds	r3, #8
 8013566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f003 0307 	and.w	r3, r3, #7
 801356e:	2b00      	cmp	r3, #0
 8013570:	d00b      	beq.n	801358a <pvPortMalloc+0x6e>
 8013572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013576:	b672      	cpsid	i
 8013578:	f383 8811 	msr	BASEPRI, r3
 801357c:	f3bf 8f6f 	isb	sy
 8013580:	f3bf 8f4f 	dsb	sy
 8013584:	b662      	cpsie	i
 8013586:	617b      	str	r3, [r7, #20]
 8013588:	e7fe      	b.n	8013588 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d06a      	beq.n	8013666 <pvPortMalloc+0x14a>
 8013590:	4b45      	ldr	r3, [pc, #276]	; (80136a8 <pvPortMalloc+0x18c>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	687a      	ldr	r2, [r7, #4]
 8013596:	429a      	cmp	r2, r3
 8013598:	d865      	bhi.n	8013666 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801359a:	4b44      	ldr	r3, [pc, #272]	; (80136ac <pvPortMalloc+0x190>)
 801359c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801359e:	4b43      	ldr	r3, [pc, #268]	; (80136ac <pvPortMalloc+0x190>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80135a4:	e004      	b.n	80135b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80135a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80135aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80135b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	687a      	ldr	r2, [r7, #4]
 80135b6:	429a      	cmp	r2, r3
 80135b8:	d903      	bls.n	80135c2 <pvPortMalloc+0xa6>
 80135ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d1f1      	bne.n	80135a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80135c2:	4b37      	ldr	r3, [pc, #220]	; (80136a0 <pvPortMalloc+0x184>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d04c      	beq.n	8013666 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80135cc:	6a3b      	ldr	r3, [r7, #32]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	2208      	movs	r2, #8
 80135d2:	4413      	add	r3, r2
 80135d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80135d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	6a3b      	ldr	r3, [r7, #32]
 80135dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80135de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e0:	685a      	ldr	r2, [r3, #4]
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	1ad2      	subs	r2, r2, r3
 80135e6:	2308      	movs	r3, #8
 80135e8:	005b      	lsls	r3, r3, #1
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d920      	bls.n	8013630 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80135ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	4413      	add	r3, r2
 80135f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80135f6:	69bb      	ldr	r3, [r7, #24]
 80135f8:	f003 0307 	and.w	r3, r3, #7
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d00b      	beq.n	8013618 <pvPortMalloc+0xfc>
 8013600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013604:	b672      	cpsid	i
 8013606:	f383 8811 	msr	BASEPRI, r3
 801360a:	f3bf 8f6f 	isb	sy
 801360e:	f3bf 8f4f 	dsb	sy
 8013612:	b662      	cpsie	i
 8013614:	613b      	str	r3, [r7, #16]
 8013616:	e7fe      	b.n	8013616 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361a:	685a      	ldr	r2, [r3, #4]
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	1ad2      	subs	r2, r2, r3
 8013620:	69bb      	ldr	r3, [r7, #24]
 8013622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013626:	687a      	ldr	r2, [r7, #4]
 8013628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801362a:	69b8      	ldr	r0, [r7, #24]
 801362c:	f000 f900 	bl	8013830 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013630:	4b1d      	ldr	r3, [pc, #116]	; (80136a8 <pvPortMalloc+0x18c>)
 8013632:	681a      	ldr	r2, [r3, #0]
 8013634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013636:	685b      	ldr	r3, [r3, #4]
 8013638:	1ad3      	subs	r3, r2, r3
 801363a:	4a1b      	ldr	r2, [pc, #108]	; (80136a8 <pvPortMalloc+0x18c>)
 801363c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801363e:	4b1a      	ldr	r3, [pc, #104]	; (80136a8 <pvPortMalloc+0x18c>)
 8013640:	681a      	ldr	r2, [r3, #0]
 8013642:	4b1b      	ldr	r3, [pc, #108]	; (80136b0 <pvPortMalloc+0x194>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	429a      	cmp	r2, r3
 8013648:	d203      	bcs.n	8013652 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801364a:	4b17      	ldr	r3, [pc, #92]	; (80136a8 <pvPortMalloc+0x18c>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	4a18      	ldr	r2, [pc, #96]	; (80136b0 <pvPortMalloc+0x194>)
 8013650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013654:	685a      	ldr	r2, [r3, #4]
 8013656:	4b13      	ldr	r3, [pc, #76]	; (80136a4 <pvPortMalloc+0x188>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	431a      	orrs	r2, r3
 801365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013662:	2200      	movs	r2, #0
 8013664:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013666:	f7fe fecd 	bl	8012404 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801366a:	69fb      	ldr	r3, [r7, #28]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d101      	bne.n	8013674 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013670:	f7fd fb25 	bl	8010cbe <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013674:	69fb      	ldr	r3, [r7, #28]
 8013676:	f003 0307 	and.w	r3, r3, #7
 801367a:	2b00      	cmp	r3, #0
 801367c:	d00b      	beq.n	8013696 <pvPortMalloc+0x17a>
 801367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013682:	b672      	cpsid	i
 8013684:	f383 8811 	msr	BASEPRI, r3
 8013688:	f3bf 8f6f 	isb	sy
 801368c:	f3bf 8f4f 	dsb	sy
 8013690:	b662      	cpsie	i
 8013692:	60fb      	str	r3, [r7, #12]
 8013694:	e7fe      	b.n	8013694 <pvPortMalloc+0x178>
	return pvReturn;
 8013696:	69fb      	ldr	r3, [r7, #28]
}
 8013698:	4618      	mov	r0, r3
 801369a:	3728      	adds	r7, #40	; 0x28
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}
 80136a0:	20008224 	.word	0x20008224
 80136a4:	20008230 	.word	0x20008230
 80136a8:	20008228 	.word	0x20008228
 80136ac:	2000821c 	.word	0x2000821c
 80136b0:	2000822c 	.word	0x2000822c

080136b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b086      	sub	sp, #24
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d04a      	beq.n	801375c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80136c6:	2308      	movs	r3, #8
 80136c8:	425b      	negs	r3, r3
 80136ca:	697a      	ldr	r2, [r7, #20]
 80136cc:	4413      	add	r3, r2
 80136ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	685a      	ldr	r2, [r3, #4]
 80136d8:	4b22      	ldr	r3, [pc, #136]	; (8013764 <vPortFree+0xb0>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	4013      	ands	r3, r2
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d10b      	bne.n	80136fa <vPortFree+0x46>
 80136e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136e6:	b672      	cpsid	i
 80136e8:	f383 8811 	msr	BASEPRI, r3
 80136ec:	f3bf 8f6f 	isb	sy
 80136f0:	f3bf 8f4f 	dsb	sy
 80136f4:	b662      	cpsie	i
 80136f6:	60fb      	str	r3, [r7, #12]
 80136f8:	e7fe      	b.n	80136f8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80136fa:	693b      	ldr	r3, [r7, #16]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d00b      	beq.n	801371a <vPortFree+0x66>
 8013702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013706:	b672      	cpsid	i
 8013708:	f383 8811 	msr	BASEPRI, r3
 801370c:	f3bf 8f6f 	isb	sy
 8013710:	f3bf 8f4f 	dsb	sy
 8013714:	b662      	cpsie	i
 8013716:	60bb      	str	r3, [r7, #8]
 8013718:	e7fe      	b.n	8013718 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	685a      	ldr	r2, [r3, #4]
 801371e:	4b11      	ldr	r3, [pc, #68]	; (8013764 <vPortFree+0xb0>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	4013      	ands	r3, r2
 8013724:	2b00      	cmp	r3, #0
 8013726:	d019      	beq.n	801375c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d115      	bne.n	801375c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013730:	693b      	ldr	r3, [r7, #16]
 8013732:	685a      	ldr	r2, [r3, #4]
 8013734:	4b0b      	ldr	r3, [pc, #44]	; (8013764 <vPortFree+0xb0>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	43db      	mvns	r3, r3
 801373a:	401a      	ands	r2, r3
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013740:	f7fe fe52 	bl	80123e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	685a      	ldr	r2, [r3, #4]
 8013748:	4b07      	ldr	r3, [pc, #28]	; (8013768 <vPortFree+0xb4>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	4413      	add	r3, r2
 801374e:	4a06      	ldr	r2, [pc, #24]	; (8013768 <vPortFree+0xb4>)
 8013750:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013752:	6938      	ldr	r0, [r7, #16]
 8013754:	f000 f86c 	bl	8013830 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013758:	f7fe fe54 	bl	8012404 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801375c:	bf00      	nop
 801375e:	3718      	adds	r7, #24
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}
 8013764:	20008230 	.word	0x20008230
 8013768:	20008228 	.word	0x20008228

0801376c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801376c:	b480      	push	{r7}
 801376e:	b085      	sub	sp, #20
 8013770:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013776:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013778:	4b27      	ldr	r3, [pc, #156]	; (8013818 <prvHeapInit+0xac>)
 801377a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	f003 0307 	and.w	r3, r3, #7
 8013782:	2b00      	cmp	r3, #0
 8013784:	d00c      	beq.n	80137a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	3307      	adds	r3, #7
 801378a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	f023 0307 	bic.w	r3, r3, #7
 8013792:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013794:	68ba      	ldr	r2, [r7, #8]
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	1ad3      	subs	r3, r2, r3
 801379a:	4a1f      	ldr	r2, [pc, #124]	; (8013818 <prvHeapInit+0xac>)
 801379c:	4413      	add	r3, r2
 801379e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80137a4:	4a1d      	ldr	r2, [pc, #116]	; (801381c <prvHeapInit+0xb0>)
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80137aa:	4b1c      	ldr	r3, [pc, #112]	; (801381c <prvHeapInit+0xb0>)
 80137ac:	2200      	movs	r2, #0
 80137ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	68ba      	ldr	r2, [r7, #8]
 80137b4:	4413      	add	r3, r2
 80137b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80137b8:	2208      	movs	r2, #8
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	1a9b      	subs	r3, r3, r2
 80137be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	f023 0307 	bic.w	r3, r3, #7
 80137c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	4a15      	ldr	r2, [pc, #84]	; (8013820 <prvHeapInit+0xb4>)
 80137cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80137ce:	4b14      	ldr	r3, [pc, #80]	; (8013820 <prvHeapInit+0xb4>)
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	2200      	movs	r2, #0
 80137d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80137d6:	4b12      	ldr	r3, [pc, #72]	; (8013820 <prvHeapInit+0xb4>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	2200      	movs	r2, #0
 80137dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	68fa      	ldr	r2, [r7, #12]
 80137e6:	1ad2      	subs	r2, r2, r3
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80137ec:	4b0c      	ldr	r3, [pc, #48]	; (8013820 <prvHeapInit+0xb4>)
 80137ee:	681a      	ldr	r2, [r3, #0]
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	685b      	ldr	r3, [r3, #4]
 80137f8:	4a0a      	ldr	r2, [pc, #40]	; (8013824 <prvHeapInit+0xb8>)
 80137fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	4a09      	ldr	r2, [pc, #36]	; (8013828 <prvHeapInit+0xbc>)
 8013802:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013804:	4b09      	ldr	r3, [pc, #36]	; (801382c <prvHeapInit+0xc0>)
 8013806:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801380a:	601a      	str	r2, [r3, #0]
}
 801380c:	bf00      	nop
 801380e:	3714      	adds	r7, #20
 8013810:	46bd      	mov	sp, r7
 8013812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013816:	4770      	bx	lr
 8013818:	2000021c 	.word	0x2000021c
 801381c:	2000821c 	.word	0x2000821c
 8013820:	20008224 	.word	0x20008224
 8013824:	2000822c 	.word	0x2000822c
 8013828:	20008228 	.word	0x20008228
 801382c:	20008230 	.word	0x20008230

08013830 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013830:	b480      	push	{r7}
 8013832:	b085      	sub	sp, #20
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013838:	4b28      	ldr	r3, [pc, #160]	; (80138dc <prvInsertBlockIntoFreeList+0xac>)
 801383a:	60fb      	str	r3, [r7, #12]
 801383c:	e002      	b.n	8013844 <prvInsertBlockIntoFreeList+0x14>
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	60fb      	str	r3, [r7, #12]
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	687a      	ldr	r2, [r7, #4]
 801384a:	429a      	cmp	r2, r3
 801384c:	d8f7      	bhi.n	801383e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	685b      	ldr	r3, [r3, #4]
 8013856:	68ba      	ldr	r2, [r7, #8]
 8013858:	4413      	add	r3, r2
 801385a:	687a      	ldr	r2, [r7, #4]
 801385c:	429a      	cmp	r2, r3
 801385e:	d108      	bne.n	8013872 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	685a      	ldr	r2, [r3, #4]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	441a      	add	r2, r3
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	685b      	ldr	r3, [r3, #4]
 801387a:	68ba      	ldr	r2, [r7, #8]
 801387c:	441a      	add	r2, r3
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	429a      	cmp	r2, r3
 8013884:	d118      	bne.n	80138b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	4b15      	ldr	r3, [pc, #84]	; (80138e0 <prvInsertBlockIntoFreeList+0xb0>)
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	429a      	cmp	r2, r3
 8013890:	d00d      	beq.n	80138ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	685a      	ldr	r2, [r3, #4]
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	441a      	add	r2, r3
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	681a      	ldr	r2, [r3, #0]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	601a      	str	r2, [r3, #0]
 80138ac:	e008      	b.n	80138c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80138ae:	4b0c      	ldr	r3, [pc, #48]	; (80138e0 <prvInsertBlockIntoFreeList+0xb0>)
 80138b0:	681a      	ldr	r2, [r3, #0]
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	601a      	str	r2, [r3, #0]
 80138b6:	e003      	b.n	80138c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681a      	ldr	r2, [r3, #0]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80138c0:	68fa      	ldr	r2, [r7, #12]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d002      	beq.n	80138ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	687a      	ldr	r2, [r7, #4]
 80138cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80138ce:	bf00      	nop
 80138d0:	3714      	adds	r7, #20
 80138d2:	46bd      	mov	sp, r7
 80138d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d8:	4770      	bx	lr
 80138da:	bf00      	nop
 80138dc:	2000821c 	.word	0x2000821c
 80138e0:	20008224 	.word	0x20008224

080138e4 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80138e4:	b480      	push	{r7}
 80138e6:	b083      	sub	sp, #12
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	6039      	str	r1, [r7, #0]
    {
    }
 80138ee:	bf00      	nop
 80138f0:	370c      	adds	r7, #12
 80138f2:	46bd      	mov	sp, r7
 80138f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f8:	4770      	bx	lr

080138fa <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80138fa:	b480      	push	{r7}
 80138fc:	b083      	sub	sp, #12
 80138fe:	af00      	add	r7, sp, #0
 8013900:	6078      	str	r0, [r7, #4]
 8013902:	6039      	str	r1, [r7, #0]
    {
    }
 8013904:	bf00      	nop
 8013906:	370c      	adds	r7, #12
 8013908:	46bd      	mov	sp, r7
 801390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390e:	4770      	bx	lr

08013910 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8013910:	b480      	push	{r7}
 8013912:	b083      	sub	sp, #12
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]
    {
    }
 801391a:	bf00      	nop
 801391c:	370c      	adds	r7, #12
 801391e:	46bd      	mov	sp, r7
 8013920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013924:	4770      	bx	lr

08013926 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8013926:	b480      	push	{r7}
 8013928:	b083      	sub	sp, #12
 801392a:	af00      	add	r7, sp, #0
 801392c:	6078      	str	r0, [r7, #4]
 801392e:	460b      	mov	r3, r1
 8013930:	70fb      	strb	r3, [r7, #3]
    {
    }
 8013932:	bf00      	nop
 8013934:	370c      	adds	r7, #12
 8013936:	46bd      	mov	sp, r7
 8013938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393c:	4770      	bx	lr

0801393e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 801393e:	b480      	push	{r7}
 8013940:	b083      	sub	sp, #12
 8013942:	af00      	add	r7, sp, #0
 8013944:	6078      	str	r0, [r7, #4]
    {
    }
 8013946:	bf00      	nop
 8013948:	370c      	adds	r7, #12
 801394a:	46bd      	mov	sp, r7
 801394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013950:	4770      	bx	lr

08013952 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8013952:	b480      	push	{r7}
 8013954:	b083      	sub	sp, #12
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
    {
    }
 801395a:	bf00      	nop
 801395c:	370c      	adds	r7, #12
 801395e:	46bd      	mov	sp, r7
 8013960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013964:	4770      	bx	lr
	...

08013968 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8013968:	b480      	push	{r7}
 801396a:	b083      	sub	sp, #12
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
    {
 8013970:	4a04      	ldr	r2, [pc, #16]	; (8013984 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	601a      	str	r2, [r3, #0]
    }
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	4618      	mov	r0, r3
 801397a:	370c      	adds	r7, #12
 801397c:	46bd      	mov	sp, r7
 801397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013982:	4770      	bx	lr
 8013984:	08021bb0 	.word	0x08021bb0

08013988 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8013988:	b580      	push	{r7, lr}
 801398a:	b082      	sub	sp, #8
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
    }
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f7ff ffe9 	bl	8013968 <_ZN8touchgfx15UIEventListenerD1Ev>
 8013996:	2104      	movs	r1, #4
 8013998:	6878      	ldr	r0, [r7, #4]
 801399a:	f00c fa2c 	bl	801fdf6 <_ZdlPvj>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	4618      	mov	r0, r3
 80139a2:	3708      	adds	r7, #8
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}

080139a8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80139a8:	b480      	push	{r7}
 80139aa:	b083      	sub	sp, #12
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2200      	movs	r2, #0
 80139b4:	801a      	strh	r2, [r3, #0]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2200      	movs	r2, #0
 80139ba:	805a      	strh	r2, [r3, #2]
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2200      	movs	r2, #0
 80139c0:	809a      	strh	r2, [r3, #4]
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2200      	movs	r2, #0
 80139c6:	80da      	strh	r2, [r3, #6]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2200      	movs	r2, #0
 80139cc:	811a      	strh	r2, [r3, #8]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2200      	movs	r2, #0
 80139d2:	815a      	strh	r2, [r3, #10]
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2200      	movs	r2, #0
 80139d8:	819a      	strh	r2, [r3, #12]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	2200      	movs	r2, #0
 80139de:	739a      	strb	r2, [r3, #14]
        {
        }
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	4618      	mov	r0, r3
 80139e4:	370c      	adds	r7, #12
 80139e6:	46bd      	mov	sp, r7
 80139e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ec:	4770      	bx	lr

080139ee <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80139ee:	b580      	push	{r7, lr}
 80139f0:	b082      	sub	sp, #8
 80139f2:	af00      	add	r7, sp, #0
 80139f4:	6078      	str	r0, [r7, #4]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7ff ffd5 	bl	80139a8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2200      	movs	r2, #0
 8013a02:	611a      	str	r2, [r3, #16]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2200      	movs	r2, #0
 8013a08:	829a      	strh	r2, [r3, #20]
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3708      	adds	r7, #8
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}

08013a14 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
 8013a14:	b480      	push	{r7}
 8013a16:	b083      	sub	sp, #12
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
        cc_consumed(0),
        cc_in(0)
 8013a1c:	4a07      	ldr	r2, [pc, #28]	; (8013a3c <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	601a      	str	r2, [r3, #0]
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2200      	movs	r2, #0
 8013a26:	605a      	str	r2, [r3, #4]
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	609a      	str	r2, [r3, #8]
    {
    }
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	4618      	mov	r0, r3
 8013a32:	370c      	adds	r7, #12
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr
 8013a3c:	08021b88 	.word	0x08021b88

08013a40 <_ZN8touchgfx18MCUInstrumentationD1Ev>:
     *
     * @brief Virtual destructor.
     *
     *        Virtual destructor.
     */
    virtual ~MCUInstrumentation() {}
 8013a40:	b480      	push	{r7}
 8013a42:	b083      	sub	sp, #12
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
 8013a48:	4a04      	ldr	r2, [pc, #16]	; (8013a5c <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	601a      	str	r2, [r3, #0]
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	4618      	mov	r0, r3
 8013a52:	370c      	adds	r7, #12
 8013a54:	46bd      	mov	sp, r7
 8013a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5a:	4770      	bx	lr
 8013a5c:	08021b88 	.word	0x08021b88

08013a60 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b082      	sub	sp, #8
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f7ff ffe9 	bl	8013a40 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8013a6e:	210c      	movs	r1, #12
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f00c f9c0 	bl	801fdf6 <_ZdlPvj>
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3708      	adds	r7, #8
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
     *
     *        Sets MCU activity high.
     *
     * @param active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b084      	sub	sp, #16
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	460b      	mov	r3, r1
 8013a8a:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 8013a8c:	78fb      	ldrb	r3, [r7, #3]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d011      	beq.n	8013ab6 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	3310      	adds	r3, #16
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	4798      	blx	r3
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	689b      	ldr	r3, [r3, #8]
 8013aa4:	1ad3      	subs	r3, r2, r3
 8013aa6:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	685a      	ldr	r2, [r3, #4]
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	441a      	add	r2, r3
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 8013ab4:	e008      	b.n	8013ac8 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	3310      	adds	r3, #16
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	6878      	ldr	r0, [r7, #4]
 8013ac0:	4798      	blx	r3
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	609a      	str	r2, [r3, #8]
    }
 8013ac8:	bf00      	nop
 8013aca:	3710      	adds	r7, #16
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}

08013ad0 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     *        Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 8013ad0:	b480      	push	{r7}
 8013ad2:	b083      	sub	sp, #12
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	685b      	ldr	r3, [r3, #4]
    }
 8013adc:	4618      	mov	r0, r3
 8013ade:	370c      	adds	r7, #12
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae6:	4770      	bx	lr

08013ae8 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     *        Sets number of consumed clock cycles.
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 8013ae8:	b480      	push	{r7}
 8013aea:	b083      	sub	sp, #12
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	683a      	ldr	r2, [r7, #0]
 8013af6:	605a      	str	r2, [r3, #4]
    }
 8013af8:	bf00      	nop
 8013afa:	370c      	adds	r7, #12
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr

08013b04 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b084      	sub	sp, #16
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	60f8      	str	r0, [r7, #12]
 8013b0c:	60b9      	str	r1, [r7, #8]
 8013b0e:	607a      	str	r2, [r7, #4]
 8013b10:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8013b12:	4a3e      	ldr	r2, [pc, #248]	; (8013c0c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x108>)
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	601a      	str	r2, [r3, #0]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	68ba      	ldr	r2, [r7, #8]
 8013b1c:	605a      	str	r2, [r3, #4]
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	609a      	str	r2, [r3, #8]
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	683a      	ldr	r2, [r7, #0]
 8013b28:	60da      	str	r2, [r3, #12]
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	611a      	str	r2, [r3, #16]
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	2200      	movs	r2, #0
 8013b34:	615a      	str	r2, [r3, #20]
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	3318      	adds	r3, #24
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f7ff ff57 	bl	80139ee <_ZN8touchgfx8GesturesC1Ev>
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	2200      	movs	r2, #0
 8013b44:	635a      	str	r2, [r3, #52]	; 0x34
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	639a      	str	r2, [r3, #56]	; 0x38
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	63da      	str	r2, [r3, #60]	; 0x3c
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	2200      	movs	r2, #0
 8013b56:	641a      	str	r2, [r3, #64]	; 0x40
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	2201      	movs	r2, #1
 8013b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	2201      	movs	r2, #1
 8013b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2201      	movs	r2, #1
 8013b74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	2200      	movs	r2, #0
 8013b84:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	2201      	movs	r2, #1
 8013b8c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	2200      	movs	r2, #0
 8013b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	2200      	movs	r2, #0
 8013bac:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2200      	movs	r2, #0
 8013bbc:	661a      	str	r2, [r3, #96]	; 0x60
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        instance = this;
 8013bc6:	4a12      	ldr	r2, [pc, #72]	; (8013c10 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>)
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8013bcc:	4a11      	ldr	r2, [pc, #68]	; (8013c14 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 8013bce:	8b3b      	ldrh	r3, [r7, #24]
 8013bd0:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8013bd2:	4a11      	ldr	r2, [pc, #68]	; (8013c18 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 8013bd4:	8bbb      	ldrh	r3, [r7, #28]
 8013bd6:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8013bd8:	4b10      	ldr	r3, [pc, #64]	; (8013c1c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x118>)
 8013bda:	2200      	movs	r2, #0
 8013bdc:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013bde:	4b0d      	ldr	r3, [pc, #52]	; (8013c14 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 8013be0:	881a      	ldrh	r2, [r3, #0]
 8013be2:	4b0f      	ldr	r3, [pc, #60]	; (8013c20 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11c>)
 8013be4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013be6:	4b0c      	ldr	r3, [pc, #48]	; (8013c18 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 8013be8:	881a      	ldrh	r2, [r3, #0]
 8013bea:	4b0e      	ldr	r3, [pc, #56]	; (8013c24 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8013bec:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013bee:	8b3a      	ldrh	r2, [r7, #24]
 8013bf0:	8bbb      	ldrh	r3, [r7, #28]
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d301      	bcc.n	8013bfa <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xf6>
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	e000      	b.n	8013bfc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xf8>
 8013bfa:	2201      	movs	r2, #1
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	4618      	mov	r0, r3
 8013c06:	3710      	adds	r7, #16
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}
 8013c0c:	08022ab8 	.word	0x08022ab8
 8013c10:	20009cd4 	.word	0x20009cd4
 8013c14:	20009cc8 	.word	0x20009cc8
 8013c18:	20009cca 	.word	0x20009cca
 8013c1c:	20009ccc 	.word	0x20009ccc
 8013c20:	20009cce 	.word	0x20009cce
 8013c24:	20009cd0 	.word	0x20009cd0

08013c28 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL() { }
 8013c28:	b480      	push	{r7}
 8013c2a:	b083      	sub	sp, #12
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	4a04      	ldr	r2, [pc, #16]	; (8013c44 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	601a      	str	r2, [r3, #0]
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	4618      	mov	r0, r3
 8013c3a:	370c      	adds	r7, #12
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c42:	4770      	bx	lr
 8013c44:	08022ab8 	.word	0x08022ab8

08013c48 <_ZN8touchgfx3HALD0Ev>:
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b082      	sub	sp, #8
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f7ff ffe9 	bl	8013c28 <_ZN8touchgfx3HALD1Ev>
 8013c56:	2168      	movs	r1, #104	; 0x68
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f00c f8cc 	bl	801fdf6 <_ZdlPvj>
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	4618      	mov	r0, r3
 8013c62:	3708      	adds	r7, #8
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
     *
     * @param enableLock True to lock DMA transfers to the front porch signal. Conservative,
     *                   default setting. False to disable, which will normally yield substantial
     *                   performance improvement.
     */
    void lockDMAToFrontPorch(bool enableLock)
 8013c68:	b480      	push	{r7}
 8013c6a:	b083      	sub	sp, #12
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
 8013c70:	460b      	mov	r3, r1
 8013c72:	70fb      	strb	r3, [r7, #3]
    {
        lockDMAToPorch = enableLock;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	78fa      	ldrb	r2, [r7, #3]
 8013c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }
 8013c7c:	bf00      	nop
 8013c7e:	370c      	adds	r7, #12
 8013c80:	46bd      	mov	sp, r7
 8013c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c86:	4770      	bx	lr

08013c88 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>:
     *
     *        Enables or disables compensation for lost frames. See knowledge base article.
     *
     * @param enabled true to enable, false to disable.
     */
    void setFrameRateCompensation(bool enabled)
 8013c88:	b480      	push	{r7}
 8013c8a:	b083      	sub	sp, #12
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
 8013c90:	460b      	mov	r3, r1
 8013c92:	70fb      	strb	r3, [r7, #3]
    {
        vSyncCompensationEnabled = enabled;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	78fa      	ldrb	r2, [r7, #3]
 8013c98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    };
 8013c9c:	bf00      	nop
 8013c9e:	370c      	adds	r7, #12
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca6:	4770      	bx	lr

08013ca8 <_ZN8touchgfx3HAL18setTouchSampleRateEa>:
     *
     *        Sets the number of ticks between each touch screen sample.
     *
     * @param sampleRateInTicks Sample rate. Default is 1 (every tick).
     */
    void setTouchSampleRate(int8_t sampleRateInTicks)
 8013ca8:	b480      	push	{r7}
 8013caa:	b083      	sub	sp, #12
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	460b      	mov	r3, r1
 8013cb2:	70fb      	strb	r3, [r7, #3]
    {
        if (sampleRateInTicks > 0)
 8013cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	dd03      	ble.n	8013cc4 <_ZN8touchgfx3HAL18setTouchSampleRateEa+0x1c>
        {
            touchSampleRate = sampleRateInTicks;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	78fa      	ldrb	r2, [r7, #3]
 8013cc0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
    }
 8013cc4:	bf00      	nop
 8013cc6:	370c      	adds	r7, #12
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr

08013cd0 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
     *
     *        Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 8013cd0:	b480      	push	{r7}
 8013cd2:	b083      	sub	sp, #12
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	683a      	ldr	r2, [r7, #0]
 8013cde:	611a      	str	r2, [r3, #16]
    }
 8013ce0:	bf00      	nop
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr

08013cec <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     *        This method sets a flag that determines if generic HAL should calculate MCU load
     *        based on concrete MCU instrumentation.
     *
     * @param enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 8013cec:	b480      	push	{r7}
 8013cee:	b083      	sub	sp, #12
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	460b      	mov	r3, r1
 8013cf6:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	78fa      	ldrb	r2, [r7, #3]
 8013cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    }
 8013d00:	bf00      	nop
 8013d02:	370c      	adds	r7, #12
 8013d04:	46bd      	mov	sp, r7
 8013d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0a:	4770      	bx	lr

08013d0c <_ZN8touchgfx3HAL13setFingerSizeEh>:
     *        algorithm will consider the size of the drawable and the distance from the touch
     *        point.
     *
     * @param [in] size the size of the finger.
     */
    void setFingerSize(uint8_t size)
 8013d0c:	b480      	push	{r7}
 8013d0e:	b083      	sub	sp, #12
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	460b      	mov	r3, r1
 8013d16:	70fb      	strb	r3, [r7, #3]
    {
        fingerSize = size;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	78fa      	ldrb	r2, [r7, #3]
 8013d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 8013d20:	bf00      	nop
 8013d22:	370c      	adds	r7, #12
 8013d24:	46bd      	mov	sp, r7
 8013d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2a:	4770      	bx	lr

08013d2c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     *
     *        Registers an array of texts.
     *
     * @param t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8013d2c:	b480      	push	{r7}
 8013d2e:	b083      	sub	sp, #12
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8013d34:	4a04      	ldr	r2, [pc, #16]	; (8013d48 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6013      	str	r3, [r2, #0]
    }
 8013d3a:	bf00      	nop
 8013d3c:	370c      	adds	r7, #12
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d44:	4770      	bx	lr
 8013d46:	bf00      	nop
 8013d48:	20009d40 	.word	0x20009d40

08013d4c <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 8013d4c:	b480      	push	{r7}
 8013d4e:	b083      	sub	sp, #12
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
    {
 8013d54:	4a04      	ldr	r2, [pc, #16]	; (8013d68 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	601a      	str	r2, [r3, #0]
    }
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	370c      	adds	r7, #12
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr
 8013d68:	08021b74 	.word	0x08021b74

08013d6c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b082      	sub	sp, #8
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
    }
 8013d74:	6878      	ldr	r0, [r7, #4]
 8013d76:	f7ff ffe9 	bl	8013d4c <_ZN8touchgfx12FontProviderD1Ev>
 8013d7a:	2104      	movs	r1, #4
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f00c f83a 	bl	801fdf6 <_ZdlPvj>
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	4618      	mov	r0, r3
 8013d86:	3708      	adds	r7, #8
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}

08013d8c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8013d8c:	b480      	push	{r7}
 8013d8e:	b085      	sub	sp, #20
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	60f8      	str	r0, [r7, #12]
 8013d94:	60b9      	str	r1, [r7, #8]
 8013d96:	607a      	str	r2, [r7, #4]
 8013d98:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8013d9a:	4a0b      	ldr	r2, [pc, #44]	; (8013dc8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	601a      	str	r2, [r3, #0]
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	68ba      	ldr	r2, [r7, #8]
 8013da4:	605a      	str	r2, [r3, #4]
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	687a      	ldr	r2, [r7, #4]
 8013daa:	609a      	str	r2, [r3, #8]
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	683a      	ldr	r2, [r7, #0]
 8013db0:	60da      	str	r2, [r3, #12]
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	69ba      	ldr	r2, [r7, #24]
 8013db6:	611a      	str	r2, [r3, #16]
    {
    }
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3714      	adds	r7, #20
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc4:	4770      	bx	lr
 8013dc6:	bf00      	nop
 8013dc8:	08021b64 	.word	0x08021b64

08013dcc <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8013dcc:	b480      	push	{r7}
 8013dce:	b083      	sub	sp, #12
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
    {
 8013dd4:	4a04      	ldr	r2, [pc, #16]	; (8013de8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	601a      	str	r2, [r3, #0]
    }
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	370c      	adds	r7, #12
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr
 8013de8:	08021b64 	.word	0x08021b64

08013dec <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b082      	sub	sp, #8
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
    }
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f7ff ffe9 	bl	8013dcc <_ZN8touchgfx7MVPHeapD1Ev>
 8013dfa:	2114      	movs	r1, #20
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f00b fffa 	bl	801fdf6 <_ZdlPvj>
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	4618      	mov	r0, r3
 8013e06:	3708      	adds	r7, #8
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}

08013e0c <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD() { }
 8013e0c:	b480      	push	{r7}
 8013e0e:	b083      	sub	sp, #12
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
 8013e14:	4a04      	ldr	r2, [pc, #16]	; (8013e28 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	601a      	str	r2, [r3, #0]
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	370c      	adds	r7, #12
 8013e20:	46bd      	mov	sp, r7
 8013e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e26:	4770      	bx	lr
 8013e28:	08021b30 	.word	0x08021b30

08013e2c <_ZN8touchgfx3LCDD0Ev>:
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b082      	sub	sp, #8
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f7ff ffe9 	bl	8013e0c <_ZN8touchgfx3LCDD1Ev>
 8013e3a:	2104      	movs	r1, #4
 8013e3c:	6878      	ldr	r0, [r7, #4]
 8013e3e:	f00b ffda 	bl	801fdf6 <_ZdlPvj>
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	4618      	mov	r0, r3
 8013e46:	3708      	adds	r7, #8
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}

08013e4c <_ZN8touchgfx3LCD4initEv>:
     *
     * @brief Performs initialization.
     *
     *        Performs initialization.
     */
    virtual void init() { }
 8013e4c:	b480      	push	{r7}
 8013e4e:	b083      	sub	sp, #12
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	bf00      	nop
 8013e56:	370c      	adds	r7, #12
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr

08013e60 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8013e60:	b480      	push	{r7}
 8013e62:	b083      	sub	sp, #12
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	460b      	mov	r3, r1
 8013e6a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8013e6c:	bf00      	nop
 8013e6e:	370c      	adds	r7, #12
 8013e70:	46bd      	mov	sp, r7
 8013e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e76:	4770      	bx	lr

08013e78 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8013e78:	b480      	push	{r7}
 8013e7a:	b083      	sub	sp, #12
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
    {
 8013e80:	4a04      	ldr	r2, [pc, #16]	; (8013e94 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	601a      	str	r2, [r3, #0]
    }
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	4618      	mov	r0, r3
 8013e8a:	370c      	adds	r7, #12
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e92:	4770      	bx	lr
 8013e94:	08021b18 	.word	0x08021b18

08013e98 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
    }
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	f7ff ffe9 	bl	8013e78 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8013ea6:	2104      	movs	r1, #4
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f00b ffa4 	bl	801fdf6 <_ZdlPvj>
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	4a05      	ldr	r2, [pc, #20]	; (8013ed8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	601a      	str	r2, [r3, #0]
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7ff fd4d 	bl	8013968 <_ZN8touchgfx15UIEventListenerD1Ev>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3708      	adds	r7, #8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}
 8013ed8:	08023014 	.word	0x08023014

08013edc <_ZN8touchgfx11ApplicationD0Ev>:
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f7ff ffe7 	bl	8013eb8 <_ZN8touchgfx11ApplicationD1Ev>
 8013eea:	f44f 7198 	mov.w	r1, #304	; 0x130
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f00b ff81 	bl	801fdf6 <_ZdlPvj>
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3708      	adds	r7, #8
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}
	...

08013f00 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b082      	sub	sp, #8
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
 8013f08:	4a05      	ldr	r2, [pc, #20]	; (8013f20 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	601a      	str	r2, [r3, #0]
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7ff ffd1 	bl	8013eb8 <_ZN8touchgfx11ApplicationD1Ev>
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3708      	adds	r7, #8
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	08021adc 	.word	0x08021adc

08013f24 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b082      	sub	sp, #8
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f7ff ffe7 	bl	8013f00 <_ZN8touchgfx14MVPApplicationD1Ev>
 8013f32:	f44f 719c 	mov.w	r1, #312	; 0x138
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f00b ff5d 	bl	801fdf6 <_ZdlPvj>
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3708      	adds	r7, #8
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}

08013f46 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8013f46:	b580      	push	{r7, lr}
 8013f48:	b082      	sub	sp, #8
 8013f4a:	af00      	add	r7, sp, #0
 8013f4c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8013f4e:	6878      	ldr	r0, [r7, #4]
 8013f50:	f000 f804 	bl	8013f5c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8013f54:	bf00      	nop
 8013f56:	3708      	adds	r7, #8
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d00f      	beq.n	8013f8e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	330c      	adds	r3, #12
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	4610      	mov	r0, r2
 8013f82:	4798      	blx	r3
 8013f84:	4603      	mov	r3, r0
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d001      	beq.n	8013f8e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	e000      	b.n	8013f90 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8013f8e:	2300      	movs	r3, #0
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d00e      	beq.n	8013fb2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	3308      	adds	r3, #8
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	4610      	mov	r0, r2
 8013fa8:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2200      	movs	r2, #0
 8013fae:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8013fb2:	bf00      	nop
 8013fb4:	3708      	adds	r7, #8
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
	...

08013fbc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b082      	sub	sp, #8
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	4a08      	ldr	r2, [pc, #32]	; (8013fe8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	601a      	str	r2, [r3, #0]
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f000 fbdd 	bl	8014790 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7ff ff91 	bl	8013f00 <_ZN8touchgfx14MVPApplicationD1Ev>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3708      	adds	r7, #8
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}
 8013fe8:	08021a88 	.word	0x08021a88

08013fec <_ZN23FrontendApplicationBaseD0Ev>:
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b082      	sub	sp, #8
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	6878      	ldr	r0, [r7, #4]
 8013ff6:	f7ff ffe1 	bl	8013fbc <_ZN23FrontendApplicationBaseD1Ev>
 8013ffa:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8013ffe:	6878      	ldr	r0, [r7, #4]
 8014000:	f00b fef9 	bl	801fdf6 <_ZdlPvj>
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	4618      	mov	r0, r3
 8014008:	3708      	adds	r7, #8
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}
	...

08014010 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	4a05      	ldr	r2, [pc, #20]	; (8014030 <_ZN19FrontendApplicationD1Ev+0x20>)
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	601a      	str	r2, [r3, #0]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	4618      	mov	r0, r3
 8014022:	f7ff ffcb 	bl	8013fbc <_ZN23FrontendApplicationBaseD1Ev>
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	4618      	mov	r0, r3
 801402a:	3708      	adds	r7, #8
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	08021a4c 	.word	0x08021a4c

08014034 <_ZN19FrontendApplicationD0Ev>:
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f7ff ffe7 	bl	8014010 <_ZN19FrontendApplicationD1Ev>
 8014042:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	f00b fed5 	bl	801fdf6 <_ZdlPvj>
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	4618      	mov	r0, r3
 8014050:	3708      	adds	r7, #8
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}

08014056 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8014056:	b580      	push	{r7, lr}
 8014058:	b082      	sub	sp, #8
 801405a:	af00      	add	r7, sp, #0
 801405c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8014064:	4618      	mov	r0, r3
 8014066:	f007 fb05 	bl	801b674 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	4618      	mov	r0, r3
 801406e:	f008 fabf 	bl	801c5f0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8014072:	bf00      	nop
 8014074:	3708      	adds	r7, #8
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}

0801407a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801407a:	b580      	push	{r7, lr}
 801407c:	b082      	sub	sp, #8
 801407e:	af00      	add	r7, sp, #0
 8014080:	6078      	str	r0, [r7, #4]
 8014082:	6039      	str	r1, [r7, #0]
    {
        app.gotoStartUpScreenScreenNoTransition();
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	4618      	mov	r0, r3
 8014088:	f005 facc 	bl	8019624 <_ZN23FrontendApplicationBase35gotoStartUpScreenScreenNoTransitionEv>
    }
 801408c:	bf00      	nop
 801408e:	3708      	adds	r7, #8
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}

08014094 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(AbstractPartition& presenters, AbstractPartition& views, AbstractPartition& transitions, FrontendApplication& app)
 8014094:	b580      	push	{r7, lr}
 8014096:	b086      	sub	sp, #24
 8014098:	af02      	add	r7, sp, #8
 801409a:	60f8      	str	r0, [r7, #12]
 801409c:	60b9      	str	r1, [r7, #8]
 801409e:	607a      	str	r2, [r7, #4]
 80140a0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80140a2:	68f8      	ldr	r0, [r7, #12]
 80140a4:	69bb      	ldr	r3, [r7, #24]
 80140a6:	9300      	str	r3, [sp, #0]
 80140a8:	683b      	ldr	r3, [r7, #0]
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	68b9      	ldr	r1, [r7, #8]
 80140ae:	f7ff fe6d 	bl	8013d8c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80140b2:	4a04      	ldr	r2, [pc, #16]	; (80140c4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	601a      	str	r2, [r3, #0]
    {

    }
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	4618      	mov	r0, r3
 80140bc:	3710      	adds	r7, #16
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}
 80140c2:	bf00      	nop
 80140c4:	08021a38 	.word	0x08021a38

080140c8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80140c8:	b580      	push	{r7, lr}
 80140ca:	af00      	add	r7, sp, #0
 80140cc:	4801      	ldr	r0, [pc, #4]	; (80140d4 <__tcf_0+0xc>)
 80140ce:	f000 faa5 	bl	801461c <_ZN12FrontendHeapD1Ev>
 80140d2:	bd80      	pop	{r7, pc}
 80140d4:	20008234 	.word	0x20008234

080140d8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80140d8:	b580      	push	{r7, lr}
 80140da:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80140dc:	4b08      	ldr	r3, [pc, #32]	; (8014100 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	f003 0301 	and.w	r3, r3, #1
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d108      	bne.n	80140fa <_ZN12FrontendHeap11getInstanceEv+0x22>
 80140e8:	4806      	ldr	r0, [pc, #24]	; (8014104 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 80140ea:	f000 f831 	bl	8014150 <_ZN12FrontendHeapC1Ev>
 80140ee:	4b04      	ldr	r3, [pc, #16]	; (8014100 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80140f0:	2201      	movs	r2, #1
 80140f2:	601a      	str	r2, [r3, #0]
 80140f4:	4804      	ldr	r0, [pc, #16]	; (8014108 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 80140f6:	f00b feb9 	bl	801fe6c <atexit>
        return instance;
 80140fa:	4b02      	ldr	r3, [pc, #8]	; (8014104 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 80140fc:	4618      	mov	r0, r3
 80140fe:	bd80      	pop	{r7, pc}
 8014100:	20008740 	.word	0x20008740
 8014104:	20008234 	.word	0x20008234
 8014108:	080140c9 	.word	0x080140c9

0801410c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public MVPHeap
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	4a05      	ldr	r2, [pc, #20]	; (801412c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	601a      	str	r2, [r3, #0]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	4618      	mov	r0, r3
 801411e:	f7ff fe55 	bl	8013dcc <_ZN8touchgfx7MVPHeapD1Ev>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	4618      	mov	r0, r3
 8014126:	3708      	adds	r7, #8
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}
 801412c:	08021a38 	.word	0x08021a38

08014130 <_ZN16FrontendHeapBaseD0Ev>:
 8014130:	b580      	push	{r7, lr}
 8014132:	b082      	sub	sp, #8
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f7ff ffe7 	bl	801410c <_ZN16FrontendHeapBaseD1Ev>
 801413e:	2114      	movs	r1, #20
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f00b fe58 	bl	801fdf6 <_ZdlPvj>
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	4618      	mov	r0, r3
 801414a:	3708      	adds	r7, #8
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014150:	b590      	push	{r4, r7, lr}
 8014152:	b085      	sub	sp, #20
 8014154:	af02      	add	r7, sp, #8
 8014156:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	f103 0114 	add.w	r1, r3, #20
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f503 7458 	add.w	r4, r3, #864	; 0x360
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8014172:	9300      	str	r3, [sp, #0]
 8014174:	4623      	mov	r3, r4
 8014176:	f7ff ff8d 	bl	8014094 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801417a:	4a18      	ldr	r2, [pc, #96]	; (80141dc <_ZN12FrontendHeapC1Ev+0x8c>)
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	601a      	str	r2, [r3, #0]
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	3314      	adds	r3, #20
 8014184:	4618      	mov	r0, r3
 8014186:	f000 f915 	bl	80143b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainMenuPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	332c      	adds	r3, #44	; 0x2c
 801418e:	4618      	mov	r0, r3
 8014190:	f000 f944 	bl	801441c <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainMenuViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801419a:	4618      	mov	r0, r3
 801419c:	f000 f974 	bl	8014488 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	f503 706e 	add.w	r0, r3, #952	; 0x3b8
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80141ac:	687a      	ldr	r2, [r7, #4]
 80141ae:	4619      	mov	r1, r3
 80141b0:	f007 f8ce 	bl	801b350 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80141ba:	4618      	mov	r0, r3
 80141bc:	f007 fa4c 	bl	801b658 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80141c0:	687a      	ldr	r2, [r7, #4]
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80141c8:	4619      	mov	r1, r3
 80141ca:	4610      	mov	r0, r2
 80141cc:	f7ff ff55 	bl	801407a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	4618      	mov	r0, r3
 80141d4:	370c      	adds	r7, #12
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd90      	pop	{r4, r7, pc}
 80141da:	bf00      	nop
 80141dc:	08021988 	.word	0x08021988

080141e0 <_ZN8touchgfx8LCD16bppD1Ev>:
 */
class LCD16bpp : public LCD
{
public:

    virtual ~LCD16bpp() {}
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b082      	sub	sp, #8
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	4a05      	ldr	r2, [pc, #20]	; (8014200 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	601a      	str	r2, [r3, #0]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7ff fe0b 	bl	8013e0c <_ZN8touchgfx3LCDD1Ev>
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	4618      	mov	r0, r3
 80141fa:	3708      	adds	r7, #8
 80141fc:	46bd      	mov	sp, r7
 80141fe:	bd80      	pop	{r7, pc}
 8014200:	080235cc 	.word	0x080235cc

08014204 <_ZN8touchgfx8LCD16bppD0Ev>:
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f7ff ffe7 	bl	80141e0 <_ZN8touchgfx8LCD16bppD1Ev>
 8014212:	2104      	movs	r1, #4
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f00b fdee 	bl	801fdf6 <_ZdlPvj>
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	4618      	mov	r0, r3
 801421e:	3708      	adds	r7, #8
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F7HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8014224:	b580      	push	{r7, lr}
 8014226:	b086      	sub	sp, #24
 8014228:	af02      	add	r7, sp, #8
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	607a      	str	r2, [r7, #4]
 8014230:	603b      	str	r3, [r7, #0]
 8014232:	68f8      	ldr	r0, [r7, #12]
 8014234:	8bbb      	ldrh	r3, [r7, #28]
 8014236:	9301      	str	r3, [sp, #4]
 8014238:	8b3b      	ldrh	r3, [r7, #24]
 801423a:	9300      	str	r3, [sp, #0]
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	687a      	ldr	r2, [r7, #4]
 8014240:	68b9      	ldr	r1, [r7, #8]
 8014242:	f7ff fc5f 	bl	8013b04 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8014246:	4a04      	ldr	r2, [pc, #16]	; (8014258 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	601a      	str	r2, [r3, #0]
    {
    }
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	4618      	mov	r0, r3
 8014250:	3710      	adds	r7, #16
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
 8014256:	bf00      	nop
 8014258:	08021c48 	.word	0x08021c48

0801425c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 801425c:	b480      	push	{r7}
 801425e:	b083      	sub	sp, #12
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
 8014264:	4a04      	ldr	r2, [pc, #16]	; (8014278 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	601a      	str	r2, [r3, #0]
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	4618      	mov	r0, r3
 801426e:	370c      	adds	r7, #12
 8014270:	46bd      	mov	sp, r7
 8014272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014276:	4770      	bx	lr
 8014278:	0802138c 	.word	0x0802138c

0801427c <_ZN8touchgfx22STM32F7TouchControllerC1Ev>:
namespace touchgfx
{
class STM32F7TouchController: public TouchController
{
public:
    STM32F7TouchController() {}
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	4618      	mov	r0, r3
 8014288:	f7ff ffe8 	bl	801425c <_ZN8touchgfx15TouchControllerC1Ev>
 801428c:	4a03      	ldr	r2, [pc, #12]	; (801429c <_ZN8touchgfx22STM32F7TouchControllerC1Ev+0x20>)
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	601a      	str	r2, [r3, #0]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	4618      	mov	r0, r3
 8014296:	3708      	adds	r7, #8
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}
 801429c:	08021dbc 	.word	0x08021dbc

080142a0 <_Z16GRAPHICS_HW_Initv>:
  return 272;
}
}

void GRAPHICS_HW_Init()
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	af00      	add	r7, sp, #0
    

    /* Initialize the SDRAM */
    MX_FMC_Init();
 80142a4:	f000 fc7a 	bl	8014b9c <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 80142a8:	f000 fcce 	bl	8014c48 <_Z15MX_SDRAM_InitExv>

    /* Configure LCD */
    MX_LCD_Init();
 80142ac:	f000 fbe6 	bl	8014a7c <_Z11MX_LCD_Initv>
    GPIO::init();
 80142b0:	f000 fbbb 	bl	8014a2a <_ZN8touchgfx4GPIO4initEv>

//Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80142b4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80142b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80142bc:	601a      	str	r2, [r3, #0]
}
 80142be:	bf00      	nop
 80142c0:	bd80      	pop	{r7, pc}
	...

080142c4 <_ZN8touchgfx22STM32F7InstrumentationC1Ev>:
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F7Instrumentation: public MCUInstrumentation
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b082      	sub	sp, #8
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	4618      	mov	r0, r3
 80142d0:	f7ff fba0 	bl	8013a14 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 80142d4:	4a03      	ldr	r2, [pc, #12]	; (80142e4 <_ZN8touchgfx22STM32F7InstrumentationC1Ev+0x20>)
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	601a      	str	r2, [r3, #0]
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	4618      	mov	r0, r3
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}
 80142e4:	08021d94 	.word	0x08021d94

080142e8 <_ZN8touchgfx13touchgfx_initEv>:
static uint16_t bitdepth = 16;

namespace touchgfx
{
void touchgfx_init()
{
 80142e8:	b590      	push	{r4, r7, lr}
 80142ea:	b087      	sub	sp, #28
 80142ec:	af04      	add	r7, sp, #16
  uint16_t dispWidth = 480;
 80142ee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80142f2:	80fb      	strh	r3, [r7, #6]
  uint16_t dispHeight = 272;  
 80142f4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80142f8:	80bb      	strh	r3, [r7, #4]
  
    HAL& hal = touchgfx_generic_init<STM32F7HAL>(dma, display, tc, dispWidth, dispHeight,(uint16_t*) 0, 
                                               0, 0);
 80142fa:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80142fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014302:	2200      	movs	r2, #0
 8014304:	9203      	str	r2, [sp, #12]
 8014306:	2200      	movs	r2, #0
 8014308:	9202      	str	r2, [sp, #8]
 801430a:	2200      	movs	r2, #0
 801430c:	9201      	str	r2, [sp, #4]
 801430e:	9300      	str	r3, [sp, #0]
 8014310:	460b      	mov	r3, r1
 8014312:	4a19      	ldr	r2, [pc, #100]	; (8014378 <_ZN8touchgfx13touchgfx_initEv+0x90>)
 8014314:	4919      	ldr	r1, [pc, #100]	; (801437c <_ZN8touchgfx13touchgfx_initEv+0x94>)
 8014316:	481a      	ldr	r0, [pc, #104]	; (8014380 <_ZN8touchgfx13touchgfx_initEv+0x98>)
 8014318:	f000 f8ea 	bl	80144f0 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 801431c:	6038      	str	r0, [r7, #0]

    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth ,true , true);
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	3374      	adds	r3, #116	; 0x74
 8014324:	681c      	ldr	r4, [r3, #0]
 8014326:	4b17      	ldr	r3, [pc, #92]	; (8014384 <_ZN8touchgfx13touchgfx_initEv+0x9c>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	4619      	mov	r1, r3
 801432c:	4b16      	ldr	r3, [pc, #88]	; (8014388 <_ZN8touchgfx13touchgfx_initEv+0xa0>)
 801432e:	881a      	ldrh	r2, [r3, #0]
 8014330:	2301      	movs	r3, #1
 8014332:	9300      	str	r3, [sp, #0]
 8014334:	2301      	movs	r3, #1
 8014336:	6838      	ldr	r0, [r7, #0]
 8014338:	47a0      	blx	r4

    hal.setTouchSampleRate(2);
 801433a:	2102      	movs	r1, #2
 801433c:	6838      	ldr	r0, [r7, #0]
 801433e:	f7ff fcb3 	bl	8013ca8 <_ZN8touchgfx3HAL18setTouchSampleRateEa>
    hal.setFingerSize(1);
 8014342:	2101      	movs	r1, #1
 8014344:	6838      	ldr	r0, [r7, #0]
 8014346:	f7ff fce1 	bl	8013d0c <_ZN8touchgfx3HAL13setFingerSizeEh>

    // By default frame rate compensation is off.
    // Enable frame rate compensation to smooth out animations in case there is periodic slow frame rates.
    hal.setFrameRateCompensation(false);
 801434a:	2100      	movs	r1, #0
 801434c:	6838      	ldr	r0, [r7, #0]
 801434e:	f7ff fc9b 	bl	8013c88 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>

    // This platform can handle simultaneous DMA and TFT accesses to SDRAM, so disable lock to increase performance.
    hal.lockDMAToFrontPorch(false);
 8014352:	2100      	movs	r1, #0
 8014354:	6838      	ldr	r0, [r7, #0]
 8014356:	f7ff fc87 	bl	8013c68 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>

    mcuInstr.init();
 801435a:	480c      	ldr	r0, [pc, #48]	; (801438c <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 801435c:	f001 fe0c 	bl	8015f78 <_ZN8touchgfx22STM32F7Instrumentation4initEv>

    //Set MCU instrumentation and Load calculation
    hal.setMCUInstrumentation(&mcuInstr);
 8014360:	490a      	ldr	r1, [pc, #40]	; (801438c <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 8014362:	6838      	ldr	r0, [r7, #0]
 8014364:	f7ff fcb4 	bl	8013cd0 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    hal.enableMCULoadCalculation(true);
 8014368:	2101      	movs	r1, #1
 801436a:	6838      	ldr	r0, [r7, #0]
 801436c:	f7ff fcbe 	bl	8013cec <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 8014370:	bf00      	nop
 8014372:	370c      	adds	r7, #12
 8014374:	46bd      	mov	sp, r7
 8014376:	bd90      	pop	{r4, r7, pc}
 8014378:	200091e8 	.word	0x200091e8
 801437c:	20000034 	.word	0x20000034
 8014380:	20008748 	.word	0x20008748
 8014384:	20000030 	.word	0x20000030
 8014388:	20000038 	.word	0x20000038
 801438c:	200091ec 	.word	0x200091ec

08014390 <_Z13GRAPHICS_Initv>:
}

void GRAPHICS_Init()
{
 8014390:	b580      	push	{r7, lr}
 8014392:	af00      	add	r7, sp, #0
   touchgfx::touchgfx_init();
 8014394:	f7ff ffa8 	bl	80142e8 <_ZN8touchgfx13touchgfx_initEv>
}
 8014398:	bf00      	nop
 801439a:	bd80      	pop	{r7, pc}

0801439c <_Z17GRAPHICS_MainTaskv>:

void GRAPHICS_MainTask(void)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	af00      	add	r7, sp, #0
    touchgfx::HAL::getInstance()->taskEntry();
 80143a0:	f7fa f8be 	bl	800e520 <_ZN8touchgfx3HAL11getInstanceEv>
 80143a4:	4602      	mov	r2, r0
 80143a6:	6813      	ldr	r3, [r2, #0]
 80143a8:	330c      	adds	r3, #12
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	4610      	mov	r0, r2
 80143ae:	4798      	blx	r3
}
 80143b0:	bf00      	nop
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainMenuPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b082      	sub	sp, #8
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	4618      	mov	r0, r3
 80143c0:	f007 fa9e 	bl	801b900 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80143c4:	4a03      	ldr	r2, [pc, #12]	; (80143d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainMenuPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	601a      	str	r2, [r3, #0]
    {
    }
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	4618      	mov	r0, r3
 80143ce:	3708      	adds	r7, #8
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}
 80143d4:	08021a04 	.word	0x08021a04

080143d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainMenuPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80143d8:	b580      	push	{r7, lr}
 80143da:	b082      	sub	sp, #8
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
    {
    }
 80143e0:	4a05      	ldr	r2, [pc, #20]	; (80143f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainMenuPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	601a      	str	r2, [r3, #0]
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	4618      	mov	r0, r3
 80143ea:	f007 fa87 	bl	801b8fc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	4618      	mov	r0, r3
 80143f2:	3708      	adds	r7, #8
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}
 80143f8:	08021a04 	.word	0x08021a04

080143fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainMenuPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b082      	sub	sp, #8
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
    }
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f7ff ffe7 	bl	80143d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainMenuPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801440a:	2118      	movs	r1, #24
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f00b fcf2 	bl	801fdf6 <_ZdlPvj>
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	4618      	mov	r0, r3
 8014416:	3708      	adds	r7, #8
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainMenuViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801441c:	b580      	push	{r7, lr}
 801441e:	b082      	sub	sp, #8
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	4618      	mov	r0, r3
 8014428:	f007 fa6a 	bl	801b900 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801442c:	4a03      	ldr	r2, [pc, #12]	; (801443c <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainMenuViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	601a      	str	r2, [r3, #0]
    }
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	4618      	mov	r0, r3
 8014436:	3708      	adds	r7, #8
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}
 801443c:	080219d0 	.word	0x080219d0

08014440 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainMenuViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8014440:	b580      	push	{r7, lr}
 8014442:	b082      	sub	sp, #8
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
    }
 8014448:	4a05      	ldr	r2, [pc, #20]	; (8014460 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainMenuViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	601a      	str	r2, [r3, #0]
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	4618      	mov	r0, r3
 8014452:	f007 fa53 	bl	801b8fc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	4618      	mov	r0, r3
 801445a:	3708      	adds	r7, #8
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}
 8014460:	080219d0 	.word	0x080219d0

08014464 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainMenuViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014464:	b580      	push	{r7, lr}
 8014466:	b082      	sub	sp, #8
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
    }
 801446c:	6878      	ldr	r0, [r7, #4]
 801446e:	f7ff ffe7 	bl	8014440 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainMenuViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014472:	f44f 714d 	mov.w	r1, #820	; 0x334
 8014476:	6878      	ldr	r0, [r7, #4]
 8014478:	f00b fcbd 	bl	801fdf6 <_ZdlPvj>
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	4618      	mov	r0, r3
 8014480:	3708      	adds	r7, #8
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
	...

08014488 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	4618      	mov	r0, r3
 8014494:	f007 fa34 	bl	801b900 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014498:	4a03      	ldr	r2, [pc, #12]	; (80144a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	601a      	str	r2, [r3, #0]
    }
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	4618      	mov	r0, r3
 80144a2:	3708      	adds	r7, #8
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	0802199c 	.word	0x0802199c

080144ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b082      	sub	sp, #8
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
    }
 80144b4:	4a05      	ldr	r2, [pc, #20]	; (80144cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	601a      	str	r2, [r3, #0]
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	4618      	mov	r0, r3
 80144be:	f007 fa1d 	bl	801b8fc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	4618      	mov	r0, r3
 80144c6:	3708      	adds	r7, #8
 80144c8:	46bd      	mov	sp, r7
 80144ca:	bd80      	pop	{r7, pc}
 80144cc:	0802199c 	.word	0x0802199c

080144d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
    }
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f7ff ffe7 	bl	80144ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80144de:	2158      	movs	r1, #88	; 0x58
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f00b fc88 	bl	801fdf6 <_ZdlPvj>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	4618      	mov	r0, r3
 80144ea:	3708      	adds	r7, #8
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 80144f0:	b590      	push	{r4, r7, lr}
 80144f2:	b089      	sub	sp, #36	; 0x24
 80144f4:	af02      	add	r7, sp, #8
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	60b9      	str	r1, [r7, #8]
 80144fa:	607a      	str	r2, [r7, #4]
 80144fc:	807b      	strh	r3, [r7, #2]
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 80144fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014502:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8014506:	9300      	str	r3, [sp, #0]
 8014508:	4613      	mov	r3, r2
 801450a:	687a      	ldr	r2, [r7, #4]
 801450c:	68b9      	ldr	r1, [r7, #8]
 801450e:	68f8      	ldr	r0, [r7, #12]
 8014510:	f000 f85c 	bl	80145cc <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 8014514:	6178      	str	r0, [r7, #20]
    hal.initialize();
 8014516:	6978      	ldr	r0, [r7, #20]
 8014518:	f007 fbc4 	bl	801bca4 <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 801451c:	f006 fe5c 	bl	801b1d8 <_ZN14BitmapDatabase11getInstanceEv>
 8014520:	4604      	mov	r4, r0
 8014522:	f006 fe63 	bl	801b1ec <_ZN14BitmapDatabase15getInstanceSizeEv>
 8014526:	4603      	mov	r3, r0
 8014528:	4619      	mov	r1, r3
 801452a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801452c:	9300      	str	r3, [sp, #0]
 801452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014532:	4620      	mov	r0, r4
 8014534:	f009 fb7c 	bl	801dc30 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
                                   BitmapDatabase::getInstanceSize(),
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
 8014538:	480d      	ldr	r0, [pc, #52]	; (8014570 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x80>)
 801453a:	f7ff fbf7 	bl	8013d2c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 801453e:	2000      	movs	r0, #0
 8014540:	f006 fe78 	bl	801b234 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8014544:	480b      	ldr	r0, [pc, #44]	; (8014574 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x84>)
 8014546:	f009 fadd 	bl	801db04 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 801454a:	f7ff fdc5 	bl	80140d8 <_ZN12FrontendHeap11getInstanceEv>
 801454e:	6138      	str	r0, [r7, #16]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 8014550:	697b      	ldr	r3, [r7, #20]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	3350      	adds	r3, #80	; 0x50
 8014556:	681c      	ldr	r4, [r3, #0]
 8014558:	f008 f914 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 801455c:	4603      	mov	r3, r0
 801455e:	4619      	mov	r1, r3
 8014560:	6978      	ldr	r0, [r7, #20]
 8014562:	47a0      	blx	r4

    return hal;
 8014564:	697b      	ldr	r3, [r7, #20]
}
 8014566:	4618      	mov	r0, r3
 8014568:	371c      	adds	r7, #28
 801456a:	46bd      	mov	sp, r7
 801456c:	bd90      	pop	{r4, r7, pc}
 801456e:	bf00      	nop
 8014570:	20008744 	.word	0x20008744
 8014574:	2000002c 	.word	0x2000002c

08014578 <_ZN10STM32F7HALD1Ev>:
class STM32F7HAL : public touchgfx::HAL
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	4a05      	ldr	r2, [pc, #20]	; (8014598 <_ZN10STM32F7HALD1Ev+0x20>)
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	601a      	str	r2, [r3, #0]
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	4618      	mov	r0, r3
 801458a:	f7ff fb4d 	bl	8013c28 <_ZN8touchgfx3HALD1Ev>
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	4618      	mov	r0, r3
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}
 8014598:	08021c48 	.word	0x08021c48

0801459c <_ZN10STM32F7HALD0Ev>:
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f7ff ffe7 	bl	8014578 <_ZN10STM32F7HALD1Ev>
 80145aa:	2168      	movs	r1, #104	; 0x68
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f00b fc22 	bl	801fdf6 <_ZdlPvj>
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	4618      	mov	r0, r3
 80145b6:	3708      	adds	r7, #8
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}

080145bc <__tcf_1>:
    static T hal(dma, display, tc, width, height);
 80145bc:	b580      	push	{r7, lr}
 80145be:	af00      	add	r7, sp, #0
 80145c0:	4801      	ldr	r0, [pc, #4]	; (80145c8 <__tcf_1+0xc>)
 80145c2:	f7ff ffd9 	bl	8014578 <_ZN10STM32F7HALD1Ev>
 80145c6:	bd80      	pop	{r7, pc}
 80145c8:	200091fc 	.word	0x200091fc

080145cc <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b086      	sub	sp, #24
 80145d0:	af02      	add	r7, sp, #8
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	607a      	str	r2, [r7, #4]
 80145d8:	807b      	strh	r3, [r7, #2]
    static T hal(dma, display, tc, width, height);
 80145da:	4b0d      	ldr	r3, [pc, #52]	; (8014610 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	f003 0301 	and.w	r3, r3, #1
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d10f      	bne.n	8014606 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x3a>
 80145e6:	887b      	ldrh	r3, [r7, #2]
 80145e8:	8b3a      	ldrh	r2, [r7, #24]
 80145ea:	9201      	str	r2, [sp, #4]
 80145ec:	9300      	str	r3, [sp, #0]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	68ba      	ldr	r2, [r7, #8]
 80145f2:	68f9      	ldr	r1, [r7, #12]
 80145f4:	4807      	ldr	r0, [pc, #28]	; (8014614 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
 80145f6:	f7ff fe15 	bl	8014224 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80145fa:	4b05      	ldr	r3, [pc, #20]	; (8014610 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 80145fc:	2201      	movs	r2, #1
 80145fe:	601a      	str	r2, [r3, #0]
 8014600:	4805      	ldr	r0, [pc, #20]	; (8014618 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x4c>)
 8014602:	f00b fc33 	bl	801fe6c <atexit>
    return hal;
 8014606:	4b03      	ldr	r3, [pc, #12]	; (8014614 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
}
 8014608:	4618      	mov	r0, r3
 801460a:	3710      	adds	r7, #16
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}
 8014610:	20009264 	.word	0x20009264
 8014614:	200091fc 	.word	0x200091fc
 8014618:	080145bd 	.word	0x080145bd

0801461c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
 8014624:	4a10      	ldr	r2, [pc, #64]	; (8014668 <_ZN12FrontendHeapD1Ev+0x4c>)
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	601a      	str	r2, [r3, #0]
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8014630:	4618      	mov	r0, r3
 8014632:	f7ff fced 	bl	8014010 <_ZN19FrontendApplicationD1Ev>
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801463c:	4618      	mov	r0, r3
 801463e:	f7ff ff35 	bl	80144ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	332c      	adds	r3, #44	; 0x2c
 8014646:	4618      	mov	r0, r3
 8014648:	f7ff fefa 	bl	8014440 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainMenuViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	3314      	adds	r3, #20
 8014650:	4618      	mov	r0, r3
 8014652:	f7ff fec1 	bl	80143d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainMenuPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	4618      	mov	r0, r3
 801465a:	f7ff fd57 	bl	801410c <_ZN16FrontendHeapBaseD1Ev>
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	4618      	mov	r0, r3
 8014662:	3708      	adds	r7, #8
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}
 8014668:	08021988 	.word	0x08021988

0801466c <_ZN12FrontendHeapD0Ev>:
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f7ff ffd1 	bl	801461c <_ZN12FrontendHeapD1Ev>
 801467a:	f240 510c 	movw	r1, #1292	; 0x50c
 801467e:	6878      	ldr	r0, [r7, #4]
 8014680:	f00b fbb9 	bl	801fdf6 <_ZdlPvj>
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	4618      	mov	r0, r3
 8014688:	3708      	adds	r7, #8
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}
	...

08014690 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>:
 8014690:	b580      	push	{r7, lr}
 8014692:	b082      	sub	sp, #8
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	4a05      	ldr	r2, [pc, #20]	; (80146b0 <_ZN8touchgfx22STM32F7InstrumentationD1Ev+0x20>)
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	601a      	str	r2, [r3, #0]
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7ff f9cd 	bl	8013a40 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	4618      	mov	r0, r3
 80146aa:	3708      	adds	r7, #8
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}
 80146b0:	08021d94 	.word	0x08021d94

080146b4 <_ZN8touchgfx22STM32F7InstrumentationD0Ev>:
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b082      	sub	sp, #8
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f7ff ffe7 	bl	8014690 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
 80146c2:	2110      	movs	r1, #16
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f00b fb96 	bl	801fdf6 <_ZdlPvj>
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	4618      	mov	r0, r3
 80146ce:	3708      	adds	r7, #8
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}

080146d4 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>:
class STM32F7TouchController: public TouchController
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	4a05      	ldr	r2, [pc, #20]	; (80146f4 <_ZN8touchgfx22STM32F7TouchControllerD1Ev+0x20>)
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	601a      	str	r2, [r3, #0]
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7f8 fe6f 	bl	800d3c8 <_ZN8touchgfx15TouchControllerD1Ev>
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	4618      	mov	r0, r3
 80146ee:	3708      	adds	r7, #8
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}
 80146f4:	08021dbc 	.word	0x08021dbc

080146f8 <_ZN8touchgfx22STM32F7TouchControllerD0Ev>:
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b082      	sub	sp, #8
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f7ff ffe7 	bl	80146d4 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
 8014706:	2104      	movs	r1, #4
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f00b fb74 	bl	801fdf6 <_ZdlPvj>
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	4618      	mov	r0, r3
 8014712:	3708      	adds	r7, #8
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}

08014718 <_Z41__static_initialization_and_destruction_0ii>:
 8014718:	b580      	push	{r7, lr}
 801471a:	b082      	sub	sp, #8
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	6039      	str	r1, [r7, #0]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2b01      	cmp	r3, #1
 8014726:	d10d      	bne.n	8014744 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801472e:	4293      	cmp	r3, r2
 8014730:	d108      	bne.n	8014744 <_Z41__static_initialization_and_destruction_0ii+0x2c>
STM32F7DMA dma;
 8014732:	4812      	ldr	r0, [pc, #72]	; (801477c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8014734:	f000 fde6 	bl	8015304 <_ZN10STM32F7DMAC1Ev>
STM32F7TouchController tc;
 8014738:	4811      	ldr	r0, [pc, #68]	; (8014780 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801473a:	f7ff fd9f 	bl	801427c <_ZN8touchgfx22STM32F7TouchControllerC1Ev>
STM32F7Instrumentation mcuInstr;
 801473e:	4811      	ldr	r0, [pc, #68]	; (8014784 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8014740:	f7ff fdc0 	bl	80142c4 <_ZN8touchgfx22STM32F7InstrumentationC1Ev>
static LCD16bpp display;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d113      	bne.n	8014772 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014750:	4293      	cmp	r3, r2
 8014752:	d10e      	bne.n	8014772 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8014754:	480c      	ldr	r0, [pc, #48]	; (8014788 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8014756:	f7ff fd43 	bl	80141e0 <_ZN8touchgfx8LCD16bppD1Ev>
STM32F7Instrumentation mcuInstr;
 801475a:	480a      	ldr	r0, [pc, #40]	; (8014784 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801475c:	f7ff ff98 	bl	8014690 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
STM32F7TouchController tc;
 8014760:	4807      	ldr	r0, [pc, #28]	; (8014780 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8014762:	f7ff ffb7 	bl	80146d4 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
STM32F7DMA dma;
 8014766:	4805      	ldr	r0, [pc, #20]	; (801477c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8014768:	f000 fdf6 	bl	8015358 <_ZN10STM32F7DMAD1Ev>
static ApplicationFontProvider fontProvider;
 801476c:	4807      	ldr	r0, [pc, #28]	; (801478c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 801476e:	f000 f831 	bl	80147d4 <_ZN23ApplicationFontProviderD1Ev>
}
 8014772:	bf00      	nop
 8014774:	3708      	adds	r7, #8
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
 801477a:	bf00      	nop
 801477c:	20008748 	.word	0x20008748
 8014780:	200091e8 	.word	0x200091e8
 8014784:	200091ec 	.word	0x200091ec
 8014788:	20000034 	.word	0x20000034
 801478c:	2000002c 	.word	0x2000002c

08014790 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8014790:	b580      	push	{r7, lr}
 8014792:	b082      	sub	sp, #8
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
 8014798:	4a05      	ldr	r2, [pc, #20]	; (80147b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	601a      	str	r2, [r3, #0]
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	4618      	mov	r0, r3
 80147a2:	f7ff fb69 	bl	8013e78 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	4618      	mov	r0, r3
 80147aa:	3708      	adds	r7, #8
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	08021ac4 	.word	0x08021ac4

080147b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b082      	sub	sp, #8
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f7ff ffe7 	bl	8014790 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80147c2:	2110      	movs	r1, #16
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f00b fb16 	bl	801fdf6 <_ZdlPvj>
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	4618      	mov	r0, r3
 80147ce:	3708      	adds	r7, #8
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}

080147d4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId DEFAULT = 0;
    static const touchgfx::FontId LARGE = 1;
    static const touchgfx::FontId SMALL = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b082      	sub	sp, #8
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	4a05      	ldr	r2, [pc, #20]	; (80147f4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	601a      	str	r2, [r3, #0]
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	4618      	mov	r0, r3
 80147e6:	f7ff fab1 	bl	8013d4c <_ZN8touchgfx12FontProviderD1Ev>
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	4618      	mov	r0, r3
 80147ee:	3708      	adds	r7, #8
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	08021e00 	.word	0x08021e00

080147f8 <_ZN23ApplicationFontProviderD0Ev>:
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f7ff ffe7 	bl	80147d4 <_ZN23ApplicationFontProviderD1Ev>
 8014806:	2104      	movs	r1, #4
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f00b faf4 	bl	801fdf6 <_ZdlPvj>
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	4618      	mov	r0, r3
 8014812:	3708      	adds	r7, #8
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8014818:	b480      	push	{r7}
 801481a:	b083      	sub	sp, #12
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014820:	2301      	movs	r3, #1
    }
 8014822:	4618      	mov	r0, r3
 8014824:	370c      	adds	r7, #12
 8014826:	46bd      	mov	sp, r7
 8014828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482c:	4770      	bx	lr

0801482e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 801482e:	b480      	push	{r7}
 8014830:	b083      	sub	sp, #12
 8014832:	af00      	add	r7, sp, #0
 8014834:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014836:	2350      	movs	r3, #80	; 0x50
    }
 8014838:	4618      	mov	r0, r3
 801483a:	370c      	adds	r7, #12
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr

08014844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8014844:	b480      	push	{r7}
 8014846:	b083      	sub	sp, #12
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	460b      	mov	r3, r1
 801484e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014850:	887a      	ldrh	r2, [r7, #2]
 8014852:	4613      	mov	r3, r2
 8014854:	009b      	lsls	r3, r3, #2
 8014856:	4413      	add	r3, r2
 8014858:	011b      	lsls	r3, r3, #4
 801485a:	3308      	adds	r3, #8
 801485c:	687a      	ldr	r2, [r7, #4]
 801485e:	4413      	add	r3, r2
    }
 8014860:	4618      	mov	r0, r3
 8014862:	370c      	adds	r7, #12
 8014864:	46bd      	mov	sp, r7
 8014866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486a:	4770      	bx	lr

0801486c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 801486c:	b480      	push	{r7}
 801486e:	b083      	sub	sp, #12
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	460b      	mov	r3, r1
 8014876:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014878:	887a      	ldrh	r2, [r7, #2]
 801487a:	4613      	mov	r3, r2
 801487c:	009b      	lsls	r3, r3, #2
 801487e:	4413      	add	r3, r2
 8014880:	011b      	lsls	r3, r3, #4
 8014882:	3308      	adds	r3, #8
 8014884:	687a      	ldr	r2, [r7, #4]
 8014886:	4413      	add	r3, r2
    }
 8014888:	4618      	mov	r0, r3
 801488a:	370c      	adds	r7, #12
 801488c:	46bd      	mov	sp, r7
 801488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014892:	4770      	bx	lr

08014894 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12mainMenuViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014894:	b480      	push	{r7}
 8014896:	b083      	sub	sp, #12
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801489c:	2301      	movs	r3, #1
    }
 801489e:	4618      	mov	r0, r3
 80148a0:	370c      	adds	r7, #12
 80148a2:	46bd      	mov	sp, r7
 80148a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a8:	4770      	bx	lr

080148aa <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainMenuViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80148aa:	b480      	push	{r7}
 80148ac:	b083      	sub	sp, #12
 80148ae:	af00      	add	r7, sp, #0
 80148b0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80148b2:	f44f 734b 	mov.w	r3, #812	; 0x32c
    }
 80148b6:	4618      	mov	r0, r3
 80148b8:	370c      	adds	r7, #12
 80148ba:	46bd      	mov	sp, r7
 80148bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c0:	4770      	bx	lr

080148c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainMenuViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80148c2:	b480      	push	{r7}
 80148c4:	b083      	sub	sp, #12
 80148c6:	af00      	add	r7, sp, #0
 80148c8:	6078      	str	r0, [r7, #4]
 80148ca:	460b      	mov	r3, r1
 80148cc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80148ce:	887b      	ldrh	r3, [r7, #2]
 80148d0:	f44f 724b 	mov.w	r2, #812	; 0x32c
 80148d4:	fb02 f303 	mul.w	r3, r2, r3
 80148d8:	3308      	adds	r3, #8
 80148da:	687a      	ldr	r2, [r7, #4]
 80148dc:	4413      	add	r3, r2
    }
 80148de:	4618      	mov	r0, r3
 80148e0:	370c      	adds	r7, #12
 80148e2:	46bd      	mov	sp, r7
 80148e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e8:	4770      	bx	lr

080148ea <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12mainMenuViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80148ea:	b480      	push	{r7}
 80148ec:	b083      	sub	sp, #12
 80148ee:	af00      	add	r7, sp, #0
 80148f0:	6078      	str	r0, [r7, #4]
 80148f2:	460b      	mov	r3, r1
 80148f4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80148f6:	887b      	ldrh	r3, [r7, #2]
 80148f8:	f44f 724b 	mov.w	r2, #812	; 0x32c
 80148fc:	fb02 f303 	mul.w	r3, r2, r3
 8014900:	3308      	adds	r3, #8
 8014902:	687a      	ldr	r2, [r7, #4]
 8014904:	4413      	add	r3, r2
    }
 8014906:	4618      	mov	r0, r3
 8014908:	370c      	adds	r7, #12
 801490a:	46bd      	mov	sp, r7
 801490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014910:	4770      	bx	lr

08014912 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17mainMenuPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014912:	b480      	push	{r7}
 8014914:	b083      	sub	sp, #12
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801491a:	2301      	movs	r3, #1
    }
 801491c:	4618      	mov	r0, r3
 801491e:	370c      	adds	r7, #12
 8014920:	46bd      	mov	sp, r7
 8014922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014926:	4770      	bx	lr

08014928 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainMenuPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014928:	b480      	push	{r7}
 801492a:	b083      	sub	sp, #12
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014930:	2310      	movs	r3, #16
    }
 8014932:	4618      	mov	r0, r3
 8014934:	370c      	adds	r7, #12
 8014936:	46bd      	mov	sp, r7
 8014938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493c:	4770      	bx	lr

0801493e <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainMenuPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801493e:	b480      	push	{r7}
 8014940:	b083      	sub	sp, #12
 8014942:	af00      	add	r7, sp, #0
 8014944:	6078      	str	r0, [r7, #4]
 8014946:	460b      	mov	r3, r1
 8014948:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801494a:	887b      	ldrh	r3, [r7, #2]
 801494c:	011b      	lsls	r3, r3, #4
 801494e:	3308      	adds	r3, #8
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	4413      	add	r3, r2
    }
 8014954:	4618      	mov	r0, r3
 8014956:	370c      	adds	r7, #12
 8014958:	46bd      	mov	sp, r7
 801495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495e:	4770      	bx	lr

08014960 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17mainMenuPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014960:	b480      	push	{r7}
 8014962:	b083      	sub	sp, #12
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	460b      	mov	r3, r1
 801496a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801496c:	887b      	ldrh	r3, [r7, #2]
 801496e:	011b      	lsls	r3, r3, #4
 8014970:	3308      	adds	r3, #8
 8014972:	687a      	ldr	r2, [r7, #4]
 8014974:	4413      	add	r3, r2
    }
 8014976:	4618      	mov	r0, r3
 8014978:	370c      	adds	r7, #12
 801497a:	46bd      	mov	sp, r7
 801497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014980:	4770      	bx	lr

08014982 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8014982:	b580      	push	{r7, lr}
 8014984:	b082      	sub	sp, #8
 8014986:	af00      	add	r7, sp, #0
 8014988:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	685b      	ldr	r3, [r3, #4]
 801498e:	687a      	ldr	r2, [r7, #4]
 8014990:	68d2      	ldr	r2, [r2, #12]
 8014992:	1052      	asrs	r2, r2, #1
 8014994:	1899      	adds	r1, r3, r2
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	68db      	ldr	r3, [r3, #12]
 801499a:	f003 0301 	and.w	r3, r3, #1
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d102      	bne.n	80149a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	689b      	ldr	r3, [r3, #8]
 80149a6:	e00a      	b.n	80149be <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	685b      	ldr	r3, [r3, #4]
 80149ac:	687a      	ldr	r2, [r7, #4]
 80149ae:	68d2      	ldr	r2, [r2, #12]
 80149b0:	1052      	asrs	r2, r2, #1
 80149b2:	4413      	add	r3, r2
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	687a      	ldr	r2, [r7, #4]
 80149b8:	6892      	ldr	r2, [r2, #8]
 80149ba:	4413      	add	r3, r2
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	4608      	mov	r0, r1
 80149c0:	4798      	blx	r3
    }
 80149c2:	bf00      	nop
 80149c4:	3708      	adds	r7, #8
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}

080149ca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80149ca:	b480      	push	{r7}
 80149cc:	b083      	sub	sp, #12
 80149ce:	af00      	add	r7, sp, #0
 80149d0:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	685b      	ldr	r3, [r3, #4]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d010      	beq.n	80149fc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	689b      	ldr	r3, [r3, #8]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d107      	bne.n	80149f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	68db      	ldr	r3, [r3, #12]
 80149e6:	f003 0301 	and.w	r3, r3, #1
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d101      	bne.n	80149f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80149ee:	2301      	movs	r3, #1
 80149f0:	e000      	b.n	80149f4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80149f2:	2300      	movs	r3, #0
 80149f4:	2b01      	cmp	r3, #1
 80149f6:	d001      	beq.n	80149fc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80149f8:	2301      	movs	r3, #1
 80149fa:	e000      	b.n	80149fe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80149fc:	2300      	movs	r3, #0
    }
 80149fe:	4618      	mov	r0, r3
 8014a00:	370c      	adds	r7, #12
 8014a02:	46bd      	mov	sp, r7
 8014a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a08:	4770      	bx	lr

08014a0a <_GLOBAL__sub_I_LCD_GetXSize>:
 8014a0a:	b580      	push	{r7, lr}
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014a12:	2001      	movs	r0, #1
 8014a14:	f7ff fe80 	bl	8014718 <_Z41__static_initialization_and_destruction_0ii>
 8014a18:	bd80      	pop	{r7, pc}

08014a1a <_GLOBAL__sub_D_LCD_GetXSize>:
 8014a1a:	b580      	push	{r7, lr}
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014a22:	2000      	movs	r0, #0
 8014a24:	f7ff fe78 	bl	8014718 <_Z41__static_initialization_and_destruction_0ii>
 8014a28:	bd80      	pop	{r7, pc}

08014a2a <_ZN8touchgfx4GPIO4initEv>:
/* USER CODE END user includes */

using namespace touchgfx;

void GPIO::init()
{
 8014a2a:	b480      	push	{r7}
 8014a2c:	af00      	add	r7, sp, #0
}
 8014a2e:	bf00      	nop
 8014a30:	46bd      	mov	sp, r7
 8014a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a36:	4770      	bx	lr

08014a38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO_ID id)
{
 8014a38:	b480      	push	{r7}
 8014a3a:	b083      	sub	sp, #12
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	4603      	mov	r3, r0
 8014a40:	71fb      	strb	r3, [r7, #7]
}
 8014a42:	bf00      	nop
 8014a44:	370c      	adds	r7, #12
 8014a46:	46bd      	mov	sp, r7
 8014a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4c:	4770      	bx	lr

08014a4e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO_ID id)
{
 8014a4e:	b480      	push	{r7}
 8014a50:	b083      	sub	sp, #12
 8014a52:	af00      	add	r7, sp, #0
 8014a54:	4603      	mov	r3, r0
 8014a56:	71fb      	strb	r3, [r7, #7]
}
 8014a58:	bf00      	nop
 8014a5a:	370c      	adds	r7, #12
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a62:	4770      	bx	lr

08014a64 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO_ID id)
{
 8014a64:	b480      	push	{r7}
 8014a66:	b083      	sub	sp, #12
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	71fb      	strb	r3, [r7, #7]
}
 8014a6e:	bf00      	nop
 8014a70:	370c      	adds	r7, #12
 8014a72:	46bd      	mov	sp, r7
 8014a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a78:	4770      	bx	lr
	...

08014a7c <_Z11MX_LCD_Initv>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b08e      	sub	sp, #56	; 0x38
 8014a80:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 8014a82:	4844      	ldr	r0, [pc, #272]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014a84:	f7ef fcfa 	bl	800447c <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 8014a88:	4b42      	ldr	r3, [pc, #264]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014a8a:	4a43      	ldr	r2, [pc, #268]	; (8014b98 <_Z11MX_LCD_Initv+0x11c>)
 8014a8c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8014a8e:	4b41      	ldr	r3, [pc, #260]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014a90:	2200      	movs	r2, #0
 8014a92:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8014a94:	4b3f      	ldr	r3, [pc, #252]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014a96:	2200      	movs	r2, #0
 8014a98:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8014a9a:	4b3e      	ldr	r3, [pc, #248]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8014aa0:	4b3c      	ldr	r3, [pc, #240]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8014aa6:	4b3b      	ldr	r3, [pc, #236]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014aa8:	2228      	movs	r2, #40	; 0x28
 8014aaa:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8014aac:	4b39      	ldr	r3, [pc, #228]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014aae:	2209      	movs	r2, #9
 8014ab0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8014ab2:	4b38      	ldr	r3, [pc, #224]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014ab4:	2235      	movs	r2, #53	; 0x35
 8014ab6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8014ab8:	4b36      	ldr	r3, [pc, #216]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014aba:	220b      	movs	r2, #11
 8014abc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8014abe:	4b35      	ldr	r3, [pc, #212]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014ac0:	f240 2215 	movw	r2, #533	; 0x215
 8014ac4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8014ac6:	4b33      	ldr	r3, [pc, #204]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014ac8:	f240 121b 	movw	r2, #283	; 0x11b
 8014acc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8014ace:	4b31      	ldr	r3, [pc, #196]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014ad0:	f240 2235 	movw	r2, #565	; 0x235
 8014ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8014ad6:	4b2f      	ldr	r3, [pc, #188]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014ad8:	f240 121d 	movw	r2, #285	; 0x11d
 8014adc:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8014ade:	4b2d      	ldr	r3, [pc, #180]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8014ae6:	4b2b      	ldr	r3, [pc, #172]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014ae8:	2200      	movs	r2, #0
 8014aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8014aee:	4b29      	ldr	r3, [pc, #164]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014af0:	2200      	movs	r2, #0
 8014af2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8014af6:	4827      	ldr	r0, [pc, #156]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014af8:	f7ef fbf0 	bl	80042dc <HAL_LTDC_Init>
 8014afc:	4603      	mov	r3, r0
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	bf14      	ite	ne
 8014b02:	2301      	movne	r3, #1
 8014b04:	2300      	moveq	r3, #0
 8014b06:	b2db      	uxtb	r3, r3
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d001      	beq.n	8014b10 <_Z11MX_LCD_Initv+0x94>
  {
    Error_Handler( );
 8014b0c:	f002 fd8a 	bl	8017624 <Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 8014b10:	2300      	movs	r3, #0
 8014b12:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8014b14:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014b18:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8014b1e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014b22:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8014b24:	2302      	movs	r3, #2
 8014b26:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8014b28:	23ff      	movs	r3, #255	; 0xff
 8014b2a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8014b30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8014b34:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8014b36:	2307      	movs	r3, #7
 8014b38:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8014b3a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8014b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8014b40:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8014b46:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014b4a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8014b52:	2300      	movs	r3, #0
 8014b54:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8014b5e:	1d3b      	adds	r3, r7, #4
 8014b60:	2200      	movs	r2, #0
 8014b62:	4619      	mov	r1, r3
 8014b64:	480b      	ldr	r0, [pc, #44]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014b66:	f7ef fd59 	bl	800461c <HAL_LTDC_ConfigLayer>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	bf14      	ite	ne
 8014b70:	2301      	movne	r3, #1
 8014b72:	2300      	moveq	r3, #0
 8014b74:	b2db      	uxtb	r3, r3
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d001      	beq.n	8014b7e <_Z11MX_LCD_Initv+0x102>
  {
    Error_Handler( );
 8014b7a:	f002 fd53 	bl	8017624 <Error_Handler>
  }

 HAL_LTDC_SetPitch(&hltdc, 480, 0);
 8014b7e:	2200      	movs	r2, #0
 8014b80:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8014b84:	4803      	ldr	r0, [pc, #12]	; (8014b94 <_Z11MX_LCD_Initv+0x118>)
 8014b86:	f7ef fd87 	bl	8004698 <HAL_LTDC_SetPitch>

}
 8014b8a:	bf00      	nop
 8014b8c:	3738      	adds	r7, #56	; 0x38
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}
 8014b92:	bf00      	nop
 8014b94:	20009268 	.word	0x20009268
 8014b98:	40016800 	.word	0x40016800

08014b9c <_Z11MX_FMC_Initv>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b088      	sub	sp, #32
 8014ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8014ba2:	1d3b      	adds	r3, r7, #4
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	601a      	str	r2, [r3, #0]
 8014ba8:	605a      	str	r2, [r3, #4]
 8014baa:	609a      	str	r2, [r3, #8]
 8014bac:	60da      	str	r2, [r3, #12]
 8014bae:	611a      	str	r2, [r3, #16]
 8014bb0:	615a      	str	r2, [r3, #20]
 8014bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8014bb4:	4b22      	ldr	r3, [pc, #136]	; (8014c40 <_Z11MX_FMC_Initv+0xa4>)
 8014bb6:	4a23      	ldr	r2, [pc, #140]	; (8014c44 <_Z11MX_FMC_Initv+0xa8>)
 8014bb8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8014bba:	4b21      	ldr	r3, [pc, #132]	; (8014c40 <_Z11MX_FMC_Initv+0xa4>)
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8014bc0:	4b1f      	ldr	r3, [pc, #124]	; (8014c40 <_Z11MX_FMC_Initv+0xa4>)
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8014bc6:	4b1e      	ldr	r3, [pc, #120]	; (8014c40 <_Z11MX_FMC_Initv+0xa4>)
 8014bc8:	2204      	movs	r2, #4
 8014bca:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8014bcc:	4b1c      	ldr	r3, [pc, #112]	; (8014c40 <_Z11MX_FMC_Initv+0xa4>)
 8014bce:	2210      	movs	r2, #16
 8014bd0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8014bd2:	4b1b      	ldr	r3, [pc, #108]	; (8014c40 <_Z11MX_FMC_Initv+0xa4>)
 8014bd4:	2240      	movs	r2, #64	; 0x40
 8014bd6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8014bd8:	4b19      	ldr	r3, [pc, #100]	; (8014c40 <_Z11MX_FMC_Initv+0xa4>)
 8014bda:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8014bde:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8014be0:	4b17      	ldr	r3, [pc, #92]	; (8014c40 <_Z11MX_FMC_Initv+0xa4>)
 8014be2:	2200      	movs	r2, #0
 8014be4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8014be6:	4b16      	ldr	r3, [pc, #88]	; (8014c40 <_Z11MX_FMC_Initv+0xa4>)
 8014be8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014bec:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8014bee:	4b14      	ldr	r3, [pc, #80]	; (8014c40 <_Z11MX_FMC_Initv+0xa4>)
 8014bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8014bf6:	4b12      	ldr	r3, [pc, #72]	; (8014c40 <_Z11MX_FMC_Initv+0xa4>)
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8014bfc:	2302      	movs	r3, #2
 8014bfe:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8014c00:	2307      	movs	r3, #7
 8014c02:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8014c04:	2304      	movs	r3, #4
 8014c06:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8014c08:	2307      	movs	r3, #7
 8014c0a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8014c0c:	2303      	movs	r3, #3
 8014c0e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8014c10:	2302      	movs	r3, #2
 8014c12:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8014c14:	2302      	movs	r3, #2
 8014c16:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8014c18:	1d3b      	adds	r3, r7, #4
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	4808      	ldr	r0, [pc, #32]	; (8014c40 <_Z11MX_FMC_Initv+0xa4>)
 8014c1e:	f7f3 f87f 	bl	8007d20 <HAL_SDRAM_Init>
 8014c22:	4603      	mov	r3, r0
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	bf14      	ite	ne
 8014c28:	2301      	movne	r3, #1
 8014c2a:	2300      	moveq	r3, #0
 8014c2c:	b2db      	uxtb	r3, r3
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d001      	beq.n	8014c36 <_Z11MX_FMC_Initv+0x9a>
  {
    Error_Handler( );
 8014c32:	f002 fcf7 	bl	8017624 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8014c36:	bf00      	nop
 8014c38:	3720      	adds	r7, #32
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	20009350 	.word	0x20009350
 8014c44:	a0000140 	.word	0xa0000140

08014c48 <_Z15MX_SDRAM_InitExv>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b082      	sub	sp, #8
 8014c4c:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 8014c4e:	2300      	movs	r3, #0
 8014c50:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8014c52:	4b2b      	ldr	r3, [pc, #172]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014c54:	2201      	movs	r2, #1
 8014c56:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8014c58:	4b29      	ldr	r3, [pc, #164]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014c5a:	2210      	movs	r2, #16
 8014c5c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8014c5e:	4b28      	ldr	r3, [pc, #160]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014c60:	2201      	movs	r2, #1
 8014c62:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8014c64:	4b26      	ldr	r3, [pc, #152]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014c66:	2200      	movs	r2, #0
 8014c68:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8014c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c6e:	4924      	ldr	r1, [pc, #144]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014c70:	4824      	ldr	r0, [pc, #144]	; (8014d04 <_Z15MX_SDRAM_InitExv+0xbc>)
 8014c72:	f7f3 f889 	bl	8007d88 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8014c76:	2001      	movs	r0, #1
 8014c78:	f7eb fcc8 	bl	800060c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8014c7c:	4b20      	ldr	r3, [pc, #128]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014c7e:	2202      	movs	r2, #2
 8014c80:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8014c82:	4b1f      	ldr	r3, [pc, #124]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014c84:	2210      	movs	r2, #16
 8014c86:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8014c88:	4b1d      	ldr	r3, [pc, #116]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8014c8e:	4b1c      	ldr	r3, [pc, #112]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014c90:	2200      	movs	r2, #0
 8014c92:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8014c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c98:	4919      	ldr	r1, [pc, #100]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014c9a:	481a      	ldr	r0, [pc, #104]	; (8014d04 <_Z15MX_SDRAM_InitExv+0xbc>)
 8014c9c:	f7f3 f874 	bl	8007d88 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8014ca0:	4b17      	ldr	r3, [pc, #92]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014ca2:	2203      	movs	r2, #3
 8014ca4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8014ca6:	4b16      	ldr	r3, [pc, #88]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014ca8:	2210      	movs	r2, #16
 8014caa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8014cac:	4b14      	ldr	r3, [pc, #80]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014cae:	2208      	movs	r2, #8
 8014cb0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8014cb2:	4b13      	ldr	r3, [pc, #76]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8014cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014cbc:	4910      	ldr	r1, [pc, #64]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014cbe:	4811      	ldr	r0, [pc, #68]	; (8014d04 <_Z15MX_SDRAM_InitExv+0xbc>)
 8014cc0:	f7f3 f862 	bl	8007d88 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8014cc4:	f44f 730c 	mov.w	r3, #560	; 0x230
 8014cc8:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8014cca:	4b0d      	ldr	r3, [pc, #52]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014ccc:	2204      	movs	r2, #4
 8014cce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8014cd0:	4b0b      	ldr	r3, [pc, #44]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014cd2:	2210      	movs	r2, #16
 8014cd4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8014cd6:	4b0a      	ldr	r3, [pc, #40]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014cd8:	2201      	movs	r2, #1
 8014cda:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	4a08      	ldr	r2, [pc, #32]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014ce0:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8014ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ce6:	4906      	ldr	r1, [pc, #24]	; (8014d00 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014ce8:	4806      	ldr	r0, [pc, #24]	; (8014d04 <_Z15MX_SDRAM_InitExv+0xbc>)
 8014cea:	f7f3 f84d 	bl	8007d88 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8014cee:	f240 6175 	movw	r1, #1653	; 0x675
 8014cf2:	4804      	ldr	r0, [pc, #16]	; (8014d04 <_Z15MX_SDRAM_InitExv+0xbc>)
 8014cf4:	f7f3 f873 	bl	8007dde <HAL_SDRAM_ProgramRefreshRate>
}
 8014cf8:	bf00      	nop
 8014cfa:	3708      	adds	r7, #8
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}
 8014d00:	20009384 	.word	0x20009384
 8014d04:	20009350 	.word	0x20009350

08014d08 <HAL_LTDC_MspInit>:
}

/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b08e      	sub	sp, #56	; 0x38
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014d14:	2200      	movs	r2, #0
 8014d16:	601a      	str	r2, [r3, #0]
 8014d18:	605a      	str	r2, [r3, #4]
 8014d1a:	609a      	str	r2, [r3, #8]
 8014d1c:	60da      	str	r2, [r3, #12]
 8014d1e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	4a55      	ldr	r2, [pc, #340]	; (8014e7c <HAL_LTDC_MspInit+0x174>)
 8014d26:	4293      	cmp	r3, r2
 8014d28:	f040 80a3 	bne.w	8014e72 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8014d2c:	4b54      	ldr	r3, [pc, #336]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d30:	4a53      	ldr	r2, [pc, #332]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014d36:	6453      	str	r3, [r2, #68]	; 0x44
 8014d38:	4b51      	ldr	r3, [pc, #324]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014d40:	623b      	str	r3, [r7, #32]
 8014d42:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8014d44:	4b4e      	ldr	r3, [pc, #312]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d48:	4a4d      	ldr	r2, [pc, #308]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d4a:	f043 0310 	orr.w	r3, r3, #16
 8014d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8014d50:	4b4b      	ldr	r3, [pc, #300]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d54:	f003 0310 	and.w	r3, r3, #16
 8014d58:	61fb      	str	r3, [r7, #28]
 8014d5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8014d5c:	4b48      	ldr	r3, [pc, #288]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d60:	4a47      	ldr	r2, [pc, #284]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014d66:	6313      	str	r3, [r2, #48]	; 0x30
 8014d68:	4b45      	ldr	r3, [pc, #276]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014d70:	61bb      	str	r3, [r7, #24]
 8014d72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8014d74:	4b42      	ldr	r3, [pc, #264]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d78:	4a41      	ldr	r2, [pc, #260]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8014d80:	4b3f      	ldr	r3, [pc, #252]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014d88:	617b      	str	r3, [r7, #20]
 8014d8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014d8c:	4b3c      	ldr	r3, [pc, #240]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d90:	4a3b      	ldr	r2, [pc, #236]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d96:	6313      	str	r3, [r2, #48]	; 0x30
 8014d98:	4b39      	ldr	r3, [pc, #228]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014da0:	613b      	str	r3, [r7, #16]
 8014da2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8014da4:	4b36      	ldr	r3, [pc, #216]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014da8:	4a35      	ldr	r2, [pc, #212]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014dae:	6313      	str	r3, [r2, #48]	; 0x30
 8014db0:	4b33      	ldr	r3, [pc, #204]	; (8014e80 <HAL_LTDC_MspInit+0x178>)
 8014db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014db8:	60fb      	str	r3, [r7, #12]
 8014dba:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8014dbc:	2310      	movs	r3, #16
 8014dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014dc0:	2302      	movs	r3, #2
 8014dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014dc8:	2300      	movs	r3, #0
 8014dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8014dcc:	230e      	movs	r3, #14
 8014dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8014dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014dd4:	4619      	mov	r1, r3
 8014dd6:	482b      	ldr	r0, [pc, #172]	; (8014e84 <HAL_LTDC_MspInit+0x17c>)
 8014dd8:	f7ed fa18 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8014ddc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8014de0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014de2:	2302      	movs	r3, #2
 8014de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014de6:	2300      	movs	r3, #0
 8014de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014dea:	2300      	movs	r3, #0
 8014dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8014dee:	230e      	movs	r3, #14
 8014df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8014df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014df6:	4619      	mov	r1, r3
 8014df8:	4823      	ldr	r0, [pc, #140]	; (8014e88 <HAL_LTDC_MspInit+0x180>)
 8014dfa:	f7ed fa07 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8014dfe:	23f7      	movs	r3, #247	; 0xf7
 8014e00:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e02:	2302      	movs	r3, #2
 8014e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e06:	2300      	movs	r3, #0
 8014e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8014e0e:	230e      	movs	r3, #14
 8014e10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8014e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014e16:	4619      	mov	r1, r3
 8014e18:	481c      	ldr	r0, [pc, #112]	; (8014e8c <HAL_LTDC_MspInit+0x184>)
 8014e1a:	f7ed f9f7 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8014e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e24:	2302      	movs	r3, #2
 8014e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e28:	2300      	movs	r3, #0
 8014e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8014e30:	2309      	movs	r3, #9
 8014e32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8014e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014e38:	4619      	mov	r1, r3
 8014e3a:	4815      	ldr	r0, [pc, #84]	; (8014e90 <HAL_LTDC_MspInit+0x188>)
 8014e3c:	f7ed f9e6 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8014e40:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8014e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e46:	2302      	movs	r3, #2
 8014e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8014e52:	230e      	movs	r3, #14
 8014e54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8014e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014e5a:	4619      	mov	r1, r3
 8014e5c:	480d      	ldr	r0, [pc, #52]	; (8014e94 <HAL_LTDC_MspInit+0x18c>)
 8014e5e:	f7ed f9d5 	bl	800220c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8014e62:	2200      	movs	r2, #0
 8014e64:	2105      	movs	r1, #5
 8014e66:	2058      	movs	r0, #88	; 0x58
 8014e68:	f7eb ff3e 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8014e6c:	2058      	movs	r0, #88	; 0x58
 8014e6e:	f7eb ff57 	bl	8000d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8014e72:	bf00      	nop
 8014e74:	3738      	adds	r7, #56	; 0x38
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}
 8014e7a:	bf00      	nop
 8014e7c:	40016800 	.word	0x40016800
 8014e80:	40023800 	.word	0x40023800
 8014e84:	40021000 	.word	0x40021000
 8014e88:	40022400 	.word	0x40022400
 8014e8c:	40022800 	.word	0x40022800
 8014e90:	40021800 	.word	0x40021800
 8014e94:	40022000 	.word	0x40022000

08014e98 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b082      	sub	sp, #8
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	4a13      	ldr	r2, [pc, #76]	; (8014ef4 <HAL_LTDC_MspDeInit+0x5c>)
 8014ea6:	4293      	cmp	r3, r2
 8014ea8:	d11f      	bne.n	8014eea <HAL_LTDC_MspDeInit+0x52>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8014eaa:	4b13      	ldr	r3, [pc, #76]	; (8014ef8 <HAL_LTDC_MspDeInit+0x60>)
 8014eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014eae:	4a12      	ldr	r2, [pc, #72]	; (8014ef8 <HAL_LTDC_MspDeInit+0x60>)
 8014eb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014eb4:	6453      	str	r3, [r2, #68]	; 0x44
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 8014eb6:	2110      	movs	r1, #16
 8014eb8:	4810      	ldr	r0, [pc, #64]	; (8014efc <HAL_LTDC_MspDeInit+0x64>)
 8014eba:	f7ed fb51 	bl	8002560 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8014ebe:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8014ec2:	480f      	ldr	r0, [pc, #60]	; (8014f00 <HAL_LTDC_MspDeInit+0x68>)
 8014ec4:	f7ed fb4c 	bl	8002560 <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8014ec8:	21f7      	movs	r1, #247	; 0xf7
 8014eca:	480e      	ldr	r0, [pc, #56]	; (8014f04 <HAL_LTDC_MspDeInit+0x6c>)
 8014ecc:	f7ed fb48 	bl	8002560 <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 8014ed0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014ed4:	480c      	ldr	r0, [pc, #48]	; (8014f08 <HAL_LTDC_MspDeInit+0x70>)
 8014ed6:	f7ed fb43 	bl	8002560 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 8014eda:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 8014ede:	480b      	ldr	r0, [pc, #44]	; (8014f0c <HAL_LTDC_MspDeInit+0x74>)
 8014ee0:	f7ed fb3e 	bl	8002560 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8014ee4:	2058      	movs	r0, #88	; 0x58
 8014ee6:	f7eb ff29 	bl	8000d3c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 8014eea:	bf00      	nop
 8014eec:	3708      	adds	r7, #8
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	bd80      	pop	{r7, pc}
 8014ef2:	bf00      	nop
 8014ef4:	40016800 	.word	0x40016800
 8014ef8:	40023800 	.word	0x40023800
 8014efc:	40021000 	.word	0x40021000
 8014f00:	40022400 	.word	0x40022400
 8014f04:	40022800 	.word	0x40022800
 8014f08:	40021800 	.word	0x40021800
 8014f0c:	40022000 	.word	0x40022000

08014f10 <_ZL15HAL_FMC_MspInitv>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b086      	sub	sp, #24
 8014f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8014f16:	1d3b      	adds	r3, r7, #4
 8014f18:	2200      	movs	r2, #0
 8014f1a:	601a      	str	r2, [r3, #0]
 8014f1c:	605a      	str	r2, [r3, #4]
 8014f1e:	609a      	str	r2, [r3, #8]
 8014f20:	60da      	str	r2, [r3, #12]
 8014f22:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8014f24:	4b3a      	ldr	r3, [pc, #232]	; (8015010 <_ZL15HAL_FMC_MspInitv+0x100>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d16d      	bne.n	8015008 <_ZL15HAL_FMC_MspInitv+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8014f2c:	4b38      	ldr	r3, [pc, #224]	; (8015010 <_ZL15HAL_FMC_MspInitv+0x100>)
 8014f2e:	2201      	movs	r2, #1
 8014f30:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8014f32:	4b38      	ldr	r3, [pc, #224]	; (8015014 <_ZL15HAL_FMC_MspInitv+0x104>)
 8014f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f36:	4a37      	ldr	r2, [pc, #220]	; (8015014 <_ZL15HAL_FMC_MspInitv+0x104>)
 8014f38:	f043 0301 	orr.w	r3, r3, #1
 8014f3c:	6393      	str	r3, [r2, #56]	; 0x38
 8014f3e:	4b35      	ldr	r3, [pc, #212]	; (8015014 <_ZL15HAL_FMC_MspInitv+0x104>)
 8014f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f42:	f003 0301 	and.w	r3, r3, #1
 8014f46:	603b      	str	r3, [r7, #0]
 8014f48:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8014f4a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8014f4e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f50:	2302      	movs	r3, #2
 8014f52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f54:	2300      	movs	r3, #0
 8014f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f58:	2303      	movs	r3, #3
 8014f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014f5c:	230c      	movs	r3, #12
 8014f5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014f60:	1d3b      	adds	r3, r7, #4
 8014f62:	4619      	mov	r1, r3
 8014f64:	482c      	ldr	r0, [pc, #176]	; (8015018 <_ZL15HAL_FMC_MspInitv+0x108>)
 8014f66:	f7ed f951 	bl	800220c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8014f6a:	f248 1333 	movw	r3, #33075	; 0x8133
 8014f6e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f70:	2302      	movs	r3, #2
 8014f72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f74:	2300      	movs	r3, #0
 8014f76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f78:	2303      	movs	r3, #3
 8014f7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014f7c:	230c      	movs	r3, #12
 8014f7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014f80:	1d3b      	adds	r3, r7, #4
 8014f82:	4619      	mov	r1, r3
 8014f84:	4825      	ldr	r0, [pc, #148]	; (801501c <_ZL15HAL_FMC_MspInitv+0x10c>)
 8014f86:	f7ed f941 	bl	800220c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8014f8a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8014f8e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f90:	2302      	movs	r3, #2
 8014f92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f94:	2300      	movs	r3, #0
 8014f96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f98:	2303      	movs	r3, #3
 8014f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014f9c:	230c      	movs	r3, #12
 8014f9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014fa0:	1d3b      	adds	r3, r7, #4
 8014fa2:	4619      	mov	r1, r3
 8014fa4:	481e      	ldr	r0, [pc, #120]	; (8015020 <_ZL15HAL_FMC_MspInitv+0x110>)
 8014fa6:	f7ed f931 	bl	800220c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8014faa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8014fae:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014fb0:	2302      	movs	r3, #2
 8014fb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014fb8:	2303      	movs	r3, #3
 8014fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014fbc:	230c      	movs	r3, #12
 8014fbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014fc0:	1d3b      	adds	r3, r7, #4
 8014fc2:	4619      	mov	r1, r3
 8014fc4:	4817      	ldr	r0, [pc, #92]	; (8015024 <_ZL15HAL_FMC_MspInitv+0x114>)
 8014fc6:	f7ed f921 	bl	800220c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8014fca:	2328      	movs	r3, #40	; 0x28
 8014fcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014fce:	2302      	movs	r3, #2
 8014fd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014fd6:	2303      	movs	r3, #3
 8014fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014fda:	230c      	movs	r3, #12
 8014fdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8014fde:	1d3b      	adds	r3, r7, #4
 8014fe0:	4619      	mov	r1, r3
 8014fe2:	4811      	ldr	r0, [pc, #68]	; (8015028 <_ZL15HAL_FMC_MspInitv+0x118>)
 8014fe4:	f7ed f912 	bl	800220c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8014fe8:	2308      	movs	r3, #8
 8014fea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014fec:	2302      	movs	r3, #2
 8014fee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014ff4:	2303      	movs	r3, #3
 8014ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014ff8:	230c      	movs	r3, #12
 8014ffa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8014ffc:	1d3b      	adds	r3, r7, #4
 8014ffe:	4619      	mov	r1, r3
 8015000:	480a      	ldr	r0, [pc, #40]	; (801502c <_ZL15HAL_FMC_MspInitv+0x11c>)
 8015002:	f7ed f903 	bl	800220c <HAL_GPIO_Init>
 8015006:	e000      	b.n	801500a <_ZL15HAL_FMC_MspInitv+0xfa>
    return;
 8015008:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 801500a:	3718      	adds	r7, #24
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}
 8015010:	20009394 	.word	0x20009394
 8015014:	40023800 	.word	0x40023800
 8015018:	40021000 	.word	0x40021000
 801501c:	40021800 	.word	0x40021800
 8015020:	40020c00 	.word	0x40020c00
 8015024:	40021400 	.word	0x40021400
 8015028:	40021c00 	.word	0x40021c00
 801502c:	40020800 	.word	0x40020800

08015030 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8015030:	b580      	push	{r7, lr}
 8015032:	b082      	sub	sp, #8
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8015038:	f7ff ff6a 	bl	8014f10 <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 801503c:	bf00      	nop
 801503e:	3708      	adds	r7, #8
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}

08015044 <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b084      	sub	sp, #16
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	4a0d      	ldr	r2, [pc, #52]	; (8015088 <HAL_DMA2D_MspInit+0x44>)
 8015052:	4293      	cmp	r3, r2
 8015054:	d113      	bne.n	801507e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8015056:	4b0d      	ldr	r3, [pc, #52]	; (801508c <HAL_DMA2D_MspInit+0x48>)
 8015058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801505a:	4a0c      	ldr	r2, [pc, #48]	; (801508c <HAL_DMA2D_MspInit+0x48>)
 801505c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015060:	6313      	str	r3, [r2, #48]	; 0x30
 8015062:	4b0a      	ldr	r3, [pc, #40]	; (801508c <HAL_DMA2D_MspInit+0x48>)
 8015064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015066:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801506a:	60fb      	str	r3, [r7, #12]
 801506c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 801506e:	2200      	movs	r2, #0
 8015070:	2105      	movs	r1, #5
 8015072:	205a      	movs	r0, #90	; 0x5a
 8015074:	f7eb fe38 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8015078:	205a      	movs	r0, #90	; 0x5a
 801507a:	f7eb fe51 	bl	8000d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 801507e:	bf00      	nop
 8015080:	3710      	adds	r7, #16
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}
 8015086:	bf00      	nop
 8015088:	4002b000 	.word	0x4002b000
 801508c:	40023800 	.word	0x40023800

08015090 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b082      	sub	sp, #8
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	4a07      	ldr	r2, [pc, #28]	; (80150bc <HAL_DMA2D_MspDeInit+0x2c>)
 801509e:	4293      	cmp	r3, r2
 80150a0:	d108      	bne.n	80150b4 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80150a2:	4b07      	ldr	r3, [pc, #28]	; (80150c0 <HAL_DMA2D_MspDeInit+0x30>)
 80150a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150a6:	4a06      	ldr	r2, [pc, #24]	; (80150c0 <HAL_DMA2D_MspDeInit+0x30>)
 80150a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80150ac:	6313      	str	r3, [r2, #48]	; 0x30

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80150ae:	205a      	movs	r0, #90	; 0x5a
 80150b0:	f7eb fe44 	bl	8000d3c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 80150b4:	bf00      	nop
 80150b6:	3708      	adds	r7, #8
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}
 80150bc:	4002b000 	.word	0x4002b000
 80150c0:	40023800 	.word	0x40023800

080150c4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 80150c4:	b480      	push	{r7}
 80150c6:	b083      	sub	sp, #12
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
    {
 80150cc:	4a04      	ldr	r2, [pc, #16]	; (80150e0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	601a      	str	r2, [r3, #0]
    }
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	4618      	mov	r0, r3
 80150d6:	370c      	adds	r7, #12
 80150d8:	46bd      	mov	sp, r7
 80150da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150de:	4770      	bx	lr
 80150e0:	08021c24 	.word	0x08021c24

080150e4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b082      	sub	sp, #8
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
    }
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f7ff ffe9 	bl	80150c4 <_ZN8touchgfx9DMA_QueueD1Ev>
 80150f2:	2104      	movs	r1, #4
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f00a fe7e 	bl	801fdf6 <_ZdlPvj>
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	4618      	mov	r0, r3
 80150fe:	3708      	adds	r7, #8
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8015104:	b580      	push	{r7, lr}
 8015106:	b082      	sub	sp, #8
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	3340      	adds	r3, #64	; 0x40
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	4798      	blx	r3
    }
 8015118:	bf00      	nop
 801511a:	3708      	adds	r7, #8
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}

08015120 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8015120:	b480      	push	{r7}
 8015122:	b083      	sub	sp, #12
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
    {
 8015128:	4a04      	ldr	r2, [pc, #16]	; (801513c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	601a      	str	r2, [r3, #0]
    }
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	4618      	mov	r0, r3
 8015132:	370c      	adds	r7, #12
 8015134:	46bd      	mov	sp, r7
 8015136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513a:	4770      	bx	lr
 801513c:	08022e40 	.word	0x08022e40

08015140 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8015140:	b580      	push	{r7, lr}
 8015142:	b082      	sub	sp, #8
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
    }
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f7ff ffe9 	bl	8015120 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801514e:	210c      	movs	r1, #12
 8015150:	6878      	ldr	r0, [r7, #4]
 8015152:	f00a fe50 	bl	801fdf6 <_ZdlPvj>
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	4618      	mov	r0, r3
 801515a:	3708      	adds	r7, #8
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}

08015160 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8015160:	b480      	push	{r7}
 8015162:	b083      	sub	sp, #12
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801516a:	4a09      	ldr	r2, [pc, #36]	; (8015190 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	601a      	str	r2, [r3, #0]
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	683a      	ldr	r2, [r7, #0]
 8015174:	605a      	str	r2, [r3, #4]
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2200      	movs	r2, #0
 801517a:	721a      	strb	r2, [r3, #8]
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	2200      	movs	r2, #0
 8015180:	725a      	strb	r2, [r3, #9]
    {
    }
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	4618      	mov	r0, r3
 8015186:	370c      	adds	r7, #12
 8015188:	46bd      	mov	sp, r7
 801518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518e:	4770      	bx	lr
 8015190:	08022e40 	.word	0x08022e40

08015194 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	685a      	ldr	r2, [r3, #4]
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	685b      	ldr	r3, [r3, #4]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	3314      	adds	r3, #20
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	4610      	mov	r0, r2
 80151ac:	4798      	blx	r3
    }
 80151ae:	bf00      	nop
 80151b0:	3708      	adds	r7, #8
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}

080151b6 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80151b6:	b580      	push	{r7, lr}
 80151b8:	b082      	sub	sp, #8
 80151ba:	af00      	add	r7, sp, #0
 80151bc:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80151be:	687a      	ldr	r2, [r7, #4]
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	3324      	adds	r3, #36	; 0x24
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	4610      	mov	r0, r2
 80151ca:	4798      	blx	r3
    }
 80151cc:	bf00      	nop
 80151ce:	3708      	adds	r7, #8
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <__NVIC_EnableIRQ>:
{
 80151d4:	b480      	push	{r7}
 80151d6:	b083      	sub	sp, #12
 80151d8:	af00      	add	r7, sp, #0
 80151da:	4603      	mov	r3, r0
 80151dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80151de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	db0d      	blt.n	8015202 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80151e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	f003 021f 	and.w	r2, r3, #31
 80151f0:	4907      	ldr	r1, [pc, #28]	; (8015210 <__NVIC_EnableIRQ+0x3c>)
 80151f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80151f6:	095b      	lsrs	r3, r3, #5
 80151f8:	2001      	movs	r0, #1
 80151fa:	fa00 f202 	lsl.w	r2, r0, r2
 80151fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015202:	bf00      	nop
 8015204:	370c      	adds	r7, #12
 8015206:	46bd      	mov	sp, r7
 8015208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520c:	4770      	bx	lr
 801520e:	bf00      	nop
 8015210:	e000e100 	.word	0xe000e100

08015214 <__NVIC_DisableIRQ>:
{
 8015214:	b480      	push	{r7}
 8015216:	b083      	sub	sp, #12
 8015218:	af00      	add	r7, sp, #0
 801521a:	4603      	mov	r3, r0
 801521c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801521e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015222:	2b00      	cmp	r3, #0
 8015224:	db12      	blt.n	801524c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801522a:	b2db      	uxtb	r3, r3
 801522c:	f003 021f 	and.w	r2, r3, #31
 8015230:	4909      	ldr	r1, [pc, #36]	; (8015258 <__NVIC_DisableIRQ+0x44>)
 8015232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015236:	095b      	lsrs	r3, r3, #5
 8015238:	2001      	movs	r0, #1
 801523a:	fa00 f202 	lsl.w	r2, r0, r2
 801523e:	3320      	adds	r3, #32
 8015240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015244:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015248:	f3bf 8f6f 	isb	sy
}
 801524c:	bf00      	nop
 801524e:	370c      	adds	r7, #12
 8015250:	46bd      	mov	sp, r7
 8015252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015256:	4770      	bx	lr
 8015258:	e000e100 	.word	0xe000e100

0801525c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 801525c:	b480      	push	{r7}
 801525e:	b085      	sub	sp, #20
 8015260:	af00      	add	r7, sp, #0
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	607a      	str	r2, [r7, #4]
 8015268:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8015274:	68ba      	ldr	r2, [r7, #8]
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	430a      	orrs	r2, r1
 801527c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015284:	f023 0107 	bic.w	r1, r3, #7
 8015288:	687a      	ldr	r2, [r7, #4]
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	430a      	orrs	r2, r1
 8015290:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015298:	4b06      	ldr	r3, [pc, #24]	; (80152b4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 801529a:	4013      	ands	r3, r2
 801529c:	6839      	ldr	r1, [r7, #0]
 801529e:	68fa      	ldr	r2, [r7, #12]
 80152a0:	6812      	ldr	r2, [r2, #0]
 80152a2:	430b      	orrs	r3, r1
 80152a4:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80152a6:	2300      	movs	r3, #0
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3714      	adds	r7, #20
 80152ac:	46bd      	mov	sp, r7
 80152ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b2:	4770      	bx	lr
 80152b4:	ffffc000 	.word	0xffffc000

080152b8 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b082      	sub	sp, #8
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80152c0:	f7f9 f92e 	bl	800e520 <_ZN8touchgfx3HAL11getInstanceEv>
 80152c4:	4603      	mov	r3, r0
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7ff ff64 	bl	8015194 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80152cc:	bf00      	nop
 80152ce:	3708      	adds	r7, #8
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 80152d4:	b480      	push	{r7}
 80152d6:	b083      	sub	sp, #12
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
    //assert(0);
}
 80152dc:	bf00      	nop
 80152de:	370c      	adds	r7, #12
 80152e0:	46bd      	mov	sp, r7
 80152e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e6:	4770      	bx	lr

080152e8 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	3314      	adds	r3, #20
 80152f4:	4618      	mov	r0, r3
 80152f6:	f7f9 f98e 	bl	800e616 <_ZN8touchgfx9colortypeC1Ev>
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	4618      	mov	r0, r3
 80152fe:	3708      	adds	r7, #8
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}

08015304 <_ZN10STM32F7DMAC1Ev>:

}

STM32F7DMA::STM32F7DMA()
 8015304:	b5b0      	push	{r4, r5, r7, lr}
 8015306:	b082      	sub	sp, #8
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801530c:	687a      	ldr	r2, [r7, #4]
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	330c      	adds	r3, #12
 8015312:	4619      	mov	r1, r3
 8015314:	4610      	mov	r0, r2
 8015316:	f7ff ff23 	bl	8015160 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801531a:	4a0e      	ldr	r2, [pc, #56]	; (8015354 <_ZN10STM32F7DMAC1Ev+0x50>)
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	601a      	str	r2, [r3, #0]
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f103 000c 	add.w	r0, r3, #12
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	3320      	adds	r3, #32
 801532a:	2260      	movs	r2, #96	; 0x60
 801532c:	4619      	mov	r1, r3
 801532e:	f006 ffe1 	bl	801c2f4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	3320      	adds	r3, #32
 8015336:	245f      	movs	r4, #95	; 0x5f
 8015338:	461d      	mov	r5, r3
 801533a:	2c00      	cmp	r4, #0
 801533c:	db05      	blt.n	801534a <_ZN10STM32F7DMAC1Ev+0x46>
 801533e:	4628      	mov	r0, r5
 8015340:	f7ff ffd2 	bl	80152e8 <_ZN8touchgfx6BlitOpC1Ev>
 8015344:	351c      	adds	r5, #28
 8015346:	3c01      	subs	r4, #1
 8015348:	e7f7      	b.n	801533a <_ZN10STM32F7DMAC1Ev+0x36>
{}
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	4618      	mov	r0, r3
 801534e:	3708      	adds	r7, #8
 8015350:	46bd      	mov	sp, r7
 8015352:	bdb0      	pop	{r4, r5, r7, pc}
 8015354:	08021bd8 	.word	0x08021bd8

08015358 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8015358:	b580      	push	{r7, lr}
 801535a:	b082      	sub	sp, #8
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
 8015360:	4a0b      	ldr	r2, [pc, #44]	; (8015390 <_ZN10STM32F7DMAD1Ev+0x38>)
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8015366:	480b      	ldr	r0, [pc, #44]	; (8015394 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8015368:	f7eb ff36 	bl	80011d8 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 801536c:	205a      	movs	r0, #90	; 0x5a
 801536e:	f7ff ff51 	bl	8015214 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	330c      	adds	r3, #12
 8015376:	4618      	mov	r0, r3
 8015378:	f000 fab6 	bl	80158e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	4618      	mov	r0, r3
 8015380:	f7ff fece 	bl	8015120 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	4618      	mov	r0, r3
 8015388:	3708      	adds	r7, #8
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}
 801538e:	bf00      	nop
 8015390:	08021bd8 	.word	0x08021bd8
 8015394:	20009310 	.word	0x20009310

08015398 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
}
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	f7ff ffd9 	bl	8015358 <_ZN10STM32F7DMAD1Ev>
 80153a6:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 80153aa:	6878      	ldr	r0, [r7, #4]
 80153ac:	f00a fd23 	bl	801fdf6 <_ZdlPvj>
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	4618      	mov	r0, r3
 80153b4:	3708      	adds	r7, #8
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}
	...

080153bc <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 80153c4:	4b09      	ldr	r3, [pc, #36]	; (80153ec <_ZN10STM32F7DMA10initializeEv+0x30>)
 80153c6:	4a0a      	ldr	r2, [pc, #40]	; (80153f0 <_ZN10STM32F7DMA10initializeEv+0x34>)
 80153c8:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 80153ca:	4808      	ldr	r0, [pc, #32]	; (80153ec <_ZN10STM32F7DMA10initializeEv+0x30>)
 80153cc:	f7eb feba 	bl	8001144 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80153d0:	4b06      	ldr	r3, [pc, #24]	; (80153ec <_ZN10STM32F7DMA10initializeEv+0x30>)
 80153d2:	4a08      	ldr	r2, [pc, #32]	; (80153f4 <_ZN10STM32F7DMA10initializeEv+0x38>)
 80153d4:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 80153d6:	4b05      	ldr	r3, [pc, #20]	; (80153ec <_ZN10STM32F7DMA10initializeEv+0x30>)
 80153d8:	4a07      	ldr	r2, [pc, #28]	; (80153f8 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 80153da:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 80153dc:	205a      	movs	r0, #90	; 0x5a
 80153de:	f7ff fef9 	bl	80151d4 <__NVIC_EnableIRQ>
}
 80153e2:	bf00      	nop
 80153e4:	3708      	adds	r7, #8
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	20009310 	.word	0x20009310
 80153f0:	4002b000 	.word	0x4002b000
 80153f4:	080152b9 	.word	0x080152b9
 80153f8:	080152d5 	.word	0x080152d5

080153fc <_ZN10STM32F7DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F7DMA::getBlitCaps()
{
 80153fc:	b480      	push	{r7}
 80153fe:	b083      	sub	sp, #12
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
    if (disableChromArt)
 8015404:	4b07      	ldr	r3, [pc, #28]	; (8015424 <_ZN10STM32F7DMA11getBlitCapsEv+0x28>)
 8015406:	781b      	ldrb	r3, [r3, #0]
 8015408:	b2db      	uxtb	r3, r3
 801540a:	2b00      	cmp	r3, #0
 801540c:	d001      	beq.n	8015412 <_ZN10STM32F7DMA11getBlitCapsEv+0x16>
    {
        return static_cast<BlitOperations>(0);
 801540e:	2300      	movs	r3, #0
 8015410:	e001      	b.n	8015416 <_ZN10STM32F7DMA11getBlitCapsEv+0x1a>
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 8015412:	f240 13ef 	movw	r3, #495	; 0x1ef
    }
}
 8015416:	4618      	mov	r0, r3
 8015418:	370c      	adds	r7, #12
 801541a:	46bd      	mov	sp, r7
 801541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015420:	4770      	bx	lr
 8015422:	bf00      	nop
 8015424:	20009398 	.word	0x20009398

08015428 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8015428:	b590      	push	{r4, r7, lr}
 801542a:	b08d      	sub	sp, #52	; 0x34
 801542c:	af02      	add	r7, sp, #8
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8015432:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015436:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8015438:	2300      	movs	r3, #0
 801543a:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8015440:	2b20      	cmp	r3, #32
 8015442:	d007      	beq.n	8015454 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	2b40      	cmp	r3, #64	; 0x40
 801544a:	d003      	beq.n	8015454 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	2b04      	cmp	r3, #4
 8015452:	d101      	bne.n	8015458 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8015454:	2301      	movs	r3, #1
 8015456:	e000      	b.n	801545a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8015458:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801545a:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801545c:	683b      	ldr	r3, [r7, #0]
 801545e:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8015460:	2b80      	cmp	r3, #128	; 0x80
 8015462:	d004      	beq.n	801546e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8015464:	683b      	ldr	r3, [r7, #0]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801546c:	d101      	bne.n	8015472 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 801546e:	2301      	movs	r3, #1
 8015470:	e000      	b.n	8015474 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8015472:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8015474:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8015476:	f7f9 f8dd 	bl	800e634 <_ZN8touchgfx3HAL3lcdEv>
 801547a:	4602      	mov	r2, r0
 801547c:	6813      	ldr	r3, [r2, #0]
 801547e:	3320      	adds	r3, #32
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	4610      	mov	r0, r2
 8015484:	4798      	blx	r3
 8015486:	4603      	mov	r3, r0
 8015488:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	2b40      	cmp	r3, #64	; 0x40
 8015490:	d01d      	beq.n	80154ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8015492:	2b40      	cmp	r3, #64	; 0x40
 8015494:	d804      	bhi.n	80154a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8015496:	2b04      	cmp	r3, #4
 8015498:	d00e      	beq.n	80154b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 801549a:	2b20      	cmp	r3, #32
 801549c:	d017      	beq.n	80154ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801549e:	e019      	b.n	80154d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 80154a0:	2b80      	cmp	r3, #128	; 0x80
 80154a2:	d003      	beq.n	80154ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 80154a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80154a8:	d003      	beq.n	80154b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 80154aa:	e013      	b.n	80154d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80154ac:	230a      	movs	r3, #10
 80154ae:	623b      	str	r3, [r7, #32]
        break;
 80154b0:	e01a      	b.n	80154e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80154b2:	2309      	movs	r3, #9
 80154b4:	623b      	str	r3, [r7, #32]
        break;
 80154b6:	e017      	b.n	80154e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80154b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80154bc:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80154be:	7f7b      	ldrb	r3, [r7, #29]
 80154c0:	2b10      	cmp	r3, #16
 80154c2:	d101      	bne.n	80154c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 80154c4:	2302      	movs	r3, #2
 80154c6:	e000      	b.n	80154ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 80154c8:	2301      	movs	r3, #1
 80154ca:	623b      	str	r3, [r7, #32]
        break;
 80154cc:	e00c      	b.n	80154e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 80154ce:	2300      	movs	r3, #0
 80154d0:	623b      	str	r3, [r7, #32]
        break;
 80154d2:	e009      	b.n	80154e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 80154d4:	2300      	movs	r3, #0
 80154d6:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80154d8:	7f7b      	ldrb	r3, [r7, #29]
 80154da:	2b10      	cmp	r3, #16
 80154dc:	d101      	bne.n	80154e2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 80154de:	2302      	movs	r3, #2
 80154e0:	e000      	b.n	80154e4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 80154e2:	2301      	movs	r3, #1
 80154e4:	623b      	str	r3, [r7, #32]
        break;
 80154e6:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80154e8:	4a76      	ldr	r2, [pc, #472]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80154ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ec:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80154ee:	7f7b      	ldrb	r3, [r7, #29]
 80154f0:	2b10      	cmp	r3, #16
 80154f2:	d101      	bne.n	80154f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80154f4:	2302      	movs	r3, #2
 80154f6:	e000      	b.n	80154fa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 80154f8:	2301      	movs	r3, #1
 80154fa:	4a72      	ldr	r2, [pc, #456]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80154fc:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	8a5b      	ldrh	r3, [r3, #18]
 8015502:	461a      	mov	r2, r3
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	899b      	ldrh	r3, [r3, #12]
 8015508:	1ad3      	subs	r3, r2, r3
 801550a:	461a      	mov	r2, r3
 801550c:	4b6d      	ldr	r3, [pc, #436]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801550e:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8015510:	7f7b      	ldrb	r3, [r7, #29]
 8015512:	2b10      	cmp	r3, #16
 8015514:	d101      	bne.n	801551a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8015516:	2202      	movs	r2, #2
 8015518:	e000      	b.n	801551c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 801551a:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	8a5b      	ldrh	r3, [r3, #18]
 8015520:	4619      	mov	r1, r3
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	899b      	ldrh	r3, [r3, #12]
 8015526:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8015528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801552a:	4866      	ldr	r0, [pc, #408]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801552c:	f7ff fe96 	bl	801525c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8015530:	4a64      	ldr	r2, [pc, #400]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8015532:	6a3b      	ldr	r3, [r7, #32]
 8015534:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8015536:	683b      	ldr	r3, [r7, #0]
 8015538:	8a1b      	ldrh	r3, [r3, #16]
 801553a:	461a      	mov	r2, r3
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	899b      	ldrh	r3, [r3, #12]
 8015540:	1ad3      	subs	r3, r2, r3
 8015542:	461a      	mov	r2, r3
 8015544:	4b5f      	ldr	r3, [pc, #380]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8015546:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8015548:	7ffb      	ldrb	r3, [r7, #31]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d103      	bne.n	8015556 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 801554e:	7fbb      	ldrb	r3, [r7, #30]
 8015550:	2b00      	cmp	r3, #0
 8015552:	f000 8082 	beq.w	801565a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	7e1b      	ldrb	r3, [r3, #24]
 801555a:	2bff      	cmp	r3, #255	; 0xff
 801555c:	d008      	beq.n	8015570 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 801555e:	4b59      	ldr	r3, [pc, #356]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8015560:	2202      	movs	r2, #2
 8015562:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	7e1b      	ldrb	r3, [r3, #24]
 8015568:	461a      	mov	r2, r3
 801556a:	4b56      	ldr	r3, [pc, #344]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801556c:	635a      	str	r2, [r3, #52]	; 0x34
 801556e:	e002      	b.n	8015576 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8015570:	4b54      	ldr	r3, [pc, #336]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8015572:	2200      	movs	r2, #0
 8015574:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8015576:	7fbb      	ldrb	r3, [r7, #30]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d059      	beq.n	8015630 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 801557c:	7f7b      	ldrb	r3, [r7, #29]
 801557e:	2b10      	cmp	r3, #16
 8015580:	d14a      	bne.n	8015618 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	3314      	adds	r3, #20
 8015586:	4618      	mov	r0, r3
 8015588:	f7fb fa8d 	bl	8010aa6 <_ZNK8touchgfx9colortypecvtEv>
 801558c:	4603      	mov	r3, r0
 801558e:	12db      	asrs	r3, r3, #11
 8015590:	f003 021f 	and.w	r2, r3, #31
 8015594:	4613      	mov	r3, r2
 8015596:	021b      	lsls	r3, r3, #8
 8015598:	1a9b      	subs	r3, r3, r2
 801559a:	4a4b      	ldr	r2, [pc, #300]	; (80156c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801559c:	fb82 1203 	smull	r1, r2, r2, r3
 80155a0:	441a      	add	r2, r3
 80155a2:	1112      	asrs	r2, r2, #4
 80155a4:	17db      	asrs	r3, r3, #31
 80155a6:	1ad3      	subs	r3, r2, r3
 80155a8:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80155aa:	683b      	ldr	r3, [r7, #0]
 80155ac:	3314      	adds	r3, #20
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7fb fa79 	bl	8010aa6 <_ZNK8touchgfx9colortypecvtEv>
 80155b4:	4603      	mov	r3, r0
 80155b6:	115b      	asrs	r3, r3, #5
 80155b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80155bc:	4613      	mov	r3, r2
 80155be:	021b      	lsls	r3, r3, #8
 80155c0:	1a9b      	subs	r3, r3, r2
 80155c2:	4a42      	ldr	r2, [pc, #264]	; (80156cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80155c4:	fb82 1203 	smull	r1, r2, r2, r3
 80155c8:	441a      	add	r2, r3
 80155ca:	1152      	asrs	r2, r2, #5
 80155cc:	17db      	asrs	r3, r3, #31
 80155ce:	1ad3      	subs	r3, r2, r3
 80155d0:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80155d2:	683b      	ldr	r3, [r7, #0]
 80155d4:	3314      	adds	r3, #20
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7fb fa65 	bl	8010aa6 <_ZNK8touchgfx9colortypecvtEv>
 80155dc:	4603      	mov	r3, r0
 80155de:	f003 021f 	and.w	r2, r3, #31
 80155e2:	4613      	mov	r3, r2
 80155e4:	021b      	lsls	r3, r3, #8
 80155e6:	1a9b      	subs	r3, r3, r2
 80155e8:	4a37      	ldr	r2, [pc, #220]	; (80156c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80155ea:	fb82 1203 	smull	r1, r2, r2, r3
 80155ee:	441a      	add	r2, r3
 80155f0:	1112      	asrs	r2, r2, #4
 80155f2:	17db      	asrs	r3, r3, #31
 80155f4:	1ad3      	subs	r3, r2, r3
 80155f6:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 80155f8:	683b      	ldr	r3, [r7, #0]
 80155fa:	7e1b      	ldrb	r3, [r3, #24]
 80155fc:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	061a      	lsls	r2, r3, #24
 8015602:	69bb      	ldr	r3, [r7, #24]
 8015604:	041b      	lsls	r3, r3, #16
 8015606:	431a      	orrs	r2, r3
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	021b      	lsls	r3, r3, #8
 801560c:	431a      	orrs	r2, r3
 801560e:	693b      	ldr	r3, [r7, #16]
 8015610:	4313      	orrs	r3, r2
 8015612:	4a2c      	ldr	r2, [pc, #176]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8015614:	6353      	str	r3, [r2, #52]	; 0x34
 8015616:	e00b      	b.n	8015630 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8015618:	683b      	ldr	r3, [r7, #0]
 801561a:	3314      	adds	r3, #20
 801561c:	4618      	mov	r0, r3
 801561e:	f7fb fa4f 	bl	8010ac0 <_ZNK8touchgfx9colortype10getColor32Ev>
 8015622:	4602      	mov	r2, r0
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	7e1b      	ldrb	r3, [r3, #24]
 8015628:	061b      	lsls	r3, r3, #24
 801562a:	4313      	orrs	r3, r2
 801562c:	4a25      	ldr	r2, [pc, #148]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801562e:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	8a5b      	ldrh	r3, [r3, #18]
 8015634:	461a      	mov	r2, r3
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	899b      	ldrh	r3, [r3, #12]
 801563a:	1ad3      	subs	r3, r2, r3
 801563c:	461a      	mov	r2, r3
 801563e:	4b21      	ldr	r3, [pc, #132]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8015640:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8015642:	7f7b      	ldrb	r3, [r7, #29]
 8015644:	2b10      	cmp	r3, #16
 8015646:	d101      	bne.n	801564c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8015648:	2302      	movs	r3, #2
 801564a:	e000      	b.n	801564e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 801564c:	2301      	movs	r3, #1
 801564e:	4a1d      	ldr	r2, [pc, #116]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8015650:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8015652:	2100      	movs	r1, #0
 8015654:	481b      	ldr	r0, [pc, #108]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8015656:	f7ec f83f 	bl	80016d8 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801565a:	2101      	movs	r1, #1
 801565c:	4819      	ldr	r0, [pc, #100]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801565e:	f7ec f83b 	bl	80016d8 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 8015662:	7ffb      	ldrb	r3, [r7, #31]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d102      	bne.n	801566e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8015668:	7fbb      	ldrb	r3, [r7, #30]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d015      	beq.n	801569a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015672:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015678:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801567e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015684:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801568a:	9301      	str	r3, [sp, #4]
 801568c:	9200      	str	r2, [sp, #0]
 801568e:	4623      	mov	r3, r4
 8015690:	4602      	mov	r2, r0
 8015692:	480c      	ldr	r0, [pc, #48]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8015694:	f7eb fe43 	bl	800131e <HAL_DMA2D_BlendingStart_IT>
 8015698:	e00f      	b.n	80156ba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 801569e:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_Start_IT(&hdma2d,
 80156a4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80156aa:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d,
 80156b0:	9300      	str	r3, [sp, #0]
 80156b2:	4603      	mov	r3, r0
 80156b4:	4803      	ldr	r0, [pc, #12]	; (80156c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80156b6:	f7eb fdff 	bl	80012b8 <HAL_DMA2D_Start_IT>
    }
}
 80156ba:	bf00      	nop
 80156bc:	372c      	adds	r7, #44	; 0x2c
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd90      	pop	{r4, r7, pc}
 80156c2:	bf00      	nop
 80156c4:	20009310 	.word	0x20009310
 80156c8:	84210843 	.word	0x84210843
 80156cc:	82082083 	.word	0x82082083

080156d0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80156d0:	b590      	push	{r4, r7, lr}
 80156d2:	b08d      	sub	sp, #52	; 0x34
 80156d4:	af02      	add	r7, sp, #8
 80156d6:	6078      	str	r0, [r7, #4]
 80156d8:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 80156da:	f7f8 ffab 	bl	800e634 <_ZN8touchgfx3HAL3lcdEv>
 80156de:	4602      	mov	r2, r0
 80156e0:	6813      	ldr	r3, [r2, #0]
 80156e2:	3320      	adds	r3, #32
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	4610      	mov	r0, r2
 80156e8:	4798      	blx	r3
 80156ea:	4603      	mov	r3, r0
 80156ec:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80156ee:	7ffb      	ldrb	r3, [r7, #31]
 80156f0:	2b10      	cmp	r3, #16
 80156f2:	d101      	bne.n	80156f8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 80156f4:	2302      	movs	r3, #2
 80156f6:	e000      	b.n	80156fa <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 80156f8:	2301      	movs	r3, #1
 80156fa:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 80156fc:	2300      	movs	r3, #0
 80156fe:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8015700:	7ffb      	ldrb	r3, [r7, #31]
 8015702:	2b10      	cmp	r3, #16
 8015704:	d149      	bne.n	801579a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8015706:	683b      	ldr	r3, [r7, #0]
 8015708:	3314      	adds	r3, #20
 801570a:	4618      	mov	r0, r3
 801570c:	f7fb f9cb 	bl	8010aa6 <_ZNK8touchgfx9colortypecvtEv>
 8015710:	4603      	mov	r3, r0
 8015712:	12db      	asrs	r3, r3, #11
 8015714:	f003 021f 	and.w	r2, r3, #31
 8015718:	4613      	mov	r3, r2
 801571a:	021b      	lsls	r3, r3, #8
 801571c:	1a9b      	subs	r3, r3, r2
 801571e:	4a69      	ldr	r2, [pc, #420]	; (80158c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8015720:	fb82 1203 	smull	r1, r2, r2, r3
 8015724:	441a      	add	r2, r3
 8015726:	1112      	asrs	r2, r2, #4
 8015728:	17db      	asrs	r3, r3, #31
 801572a:	1ad3      	subs	r3, r2, r3
 801572c:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	3314      	adds	r3, #20
 8015732:	4618      	mov	r0, r3
 8015734:	f7fb f9b7 	bl	8010aa6 <_ZNK8touchgfx9colortypecvtEv>
 8015738:	4603      	mov	r3, r0
 801573a:	115b      	asrs	r3, r3, #5
 801573c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8015740:	4613      	mov	r3, r2
 8015742:	021b      	lsls	r3, r3, #8
 8015744:	1a9b      	subs	r3, r3, r2
 8015746:	4a60      	ldr	r2, [pc, #384]	; (80158c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8015748:	fb82 1203 	smull	r1, r2, r2, r3
 801574c:	441a      	add	r2, r3
 801574e:	1152      	asrs	r2, r2, #5
 8015750:	17db      	asrs	r3, r3, #31
 8015752:	1ad3      	subs	r3, r2, r3
 8015754:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	3314      	adds	r3, #20
 801575a:	4618      	mov	r0, r3
 801575c:	f7fb f9a3 	bl	8010aa6 <_ZNK8touchgfx9colortypecvtEv>
 8015760:	4603      	mov	r3, r0
 8015762:	f003 021f 	and.w	r2, r3, #31
 8015766:	4613      	mov	r3, r2
 8015768:	021b      	lsls	r3, r3, #8
 801576a:	1a9b      	subs	r3, r3, r2
 801576c:	4a55      	ldr	r2, [pc, #340]	; (80158c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 801576e:	fb82 1203 	smull	r1, r2, r2, r3
 8015772:	441a      	add	r2, r3
 8015774:	1112      	asrs	r2, r2, #4
 8015776:	17db      	asrs	r3, r3, #31
 8015778:	1ad3      	subs	r3, r2, r3
 801577a:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 801577c:	683b      	ldr	r3, [r7, #0]
 801577e:	7e1b      	ldrb	r3, [r3, #24]
 8015780:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	061a      	lsls	r2, r3, #24
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	041b      	lsls	r3, r3, #16
 801578a:	431a      	orrs	r2, r3
 801578c:	693b      	ldr	r3, [r7, #16]
 801578e:	021b      	lsls	r3, r3, #8
 8015790:	4313      	orrs	r3, r2
 8015792:	68fa      	ldr	r2, [r7, #12]
 8015794:	4313      	orrs	r3, r2
 8015796:	623b      	str	r3, [r7, #32]
 8015798:	e00b      	b.n	80157b2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	7e1b      	ldrb	r3, [r3, #24]
 801579e:	061b      	lsls	r3, r3, #24
 80157a0:	461c      	mov	r4, r3
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	3314      	adds	r3, #20
 80157a6:	4618      	mov	r0, r3
 80157a8:	f7fb f98a 	bl	8010ac0 <_ZNK8touchgfx9colortype10getColor32Ev>
 80157ac:	4603      	mov	r3, r0
 80157ae:	4323      	orrs	r3, r4
 80157b0:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 80157b2:	683b      	ldr	r3, [r7, #0]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	2b08      	cmp	r3, #8
 80157b8:	d103      	bne.n	80157c2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80157ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80157be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80157c0:	e003      	b.n	80157ca <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80157c2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80157c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80157c8:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80157ca:	4a40      	ldr	r2, [pc, #256]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80157cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ce:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80157d0:	7ffb      	ldrb	r3, [r7, #31]
 80157d2:	2b10      	cmp	r3, #16
 80157d4:	d101      	bne.n	80157da <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 80157d6:	2302      	movs	r3, #2
 80157d8:	e000      	b.n	80157dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 80157da:	2301      	movs	r3, #1
 80157dc:	4a3b      	ldr	r2, [pc, #236]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80157de:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80157e0:	683b      	ldr	r3, [r7, #0]
 80157e2:	8a5b      	ldrh	r3, [r3, #18]
 80157e4:	461a      	mov	r2, r3
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	899b      	ldrh	r3, [r3, #12]
 80157ea:	1ad3      	subs	r3, r2, r3
 80157ec:	461a      	mov	r2, r3
 80157ee:	4b37      	ldr	r3, [pc, #220]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80157f0:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80157f2:	7ffb      	ldrb	r3, [r7, #31]
 80157f4:	2b10      	cmp	r3, #16
 80157f6:	d101      	bne.n	80157fc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 80157f8:	2202      	movs	r2, #2
 80157fa:	e000      	b.n	80157fe <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 80157fc:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80157fe:	683b      	ldr	r3, [r7, #0]
 8015800:	8a5b      	ldrh	r3, [r3, #18]
 8015802:	4619      	mov	r1, r3
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	899b      	ldrh	r3, [r3, #12]
 8015808:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801580a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801580c:	482f      	ldr	r0, [pc, #188]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801580e:	f7ff fd25 	bl	801525c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8015812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015818:	d11e      	bne.n	8015858 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801581a:	4b2c      	ldr	r3, [pc, #176]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801581c:	2201      	movs	r2, #1
 801581e:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8015820:	4a2a      	ldr	r2, [pc, #168]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8015822:	6a3b      	ldr	r3, [r7, #32]
 8015824:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8015826:	4b29      	ldr	r3, [pc, #164]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8015828:	2209      	movs	r2, #9
 801582a:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	8a5b      	ldrh	r3, [r3, #18]
 8015830:	461a      	mov	r2, r3
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	899b      	ldrh	r3, [r3, #12]
 8015836:	1ad3      	subs	r3, r2, r3
 8015838:	461a      	mov	r2, r3
 801583a:	4b24      	ldr	r3, [pc, #144]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801583c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801583e:	7ffb      	ldrb	r3, [r7, #31]
 8015840:	2b10      	cmp	r3, #16
 8015842:	d101      	bne.n	8015848 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8015844:	2302      	movs	r3, #2
 8015846:	e000      	b.n	801584a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8015848:	2301      	movs	r3, #1
 801584a:	4a20      	ldr	r2, [pc, #128]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801584c:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801584e:	2100      	movs	r1, #0
 8015850:	481e      	ldr	r0, [pc, #120]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8015852:	f7eb ff41 	bl	80016d8 <HAL_DMA2D_ConfigLayer>
 8015856:	e005      	b.n	8015864 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8015858:	4a1c      	ldr	r2, [pc, #112]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801585a:	69bb      	ldr	r3, [r7, #24]
 801585c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 801585e:	4b1b      	ldr	r3, [pc, #108]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8015860:	2200      	movs	r2, #0
 8015862:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8015864:	2101      	movs	r1, #1
 8015866:	4819      	ldr	r0, [pc, #100]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8015868:	f7eb ff36 	bl	80016d8 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 801586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801586e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015872:	d115      	bne.n	80158a0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015878:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801587e:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8015880:	683b      	ldr	r3, [r7, #0]
 8015882:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015884:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801588a:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8015890:	9301      	str	r3, [sp, #4]
 8015892:	9200      	str	r2, [sp, #0]
 8015894:	4623      	mov	r3, r4
 8015896:	4602      	mov	r2, r0
 8015898:	480c      	ldr	r0, [pc, #48]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801589a:	f7eb fd40 	bl	800131e <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 801589e:	e00d      	b.n	80158bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	689b      	ldr	r3, [r3, #8]
 80158a4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80158a6:	683b      	ldr	r3, [r7, #0]
 80158a8:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80158aa:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 80158ac:	683b      	ldr	r3, [r7, #0]
 80158ae:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80158b0:	9300      	str	r3, [sp, #0]
 80158b2:	460b      	mov	r3, r1
 80158b4:	6a39      	ldr	r1, [r7, #32]
 80158b6:	4805      	ldr	r0, [pc, #20]	; (80158cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80158b8:	f7eb fcfe 	bl	80012b8 <HAL_DMA2D_Start_IT>
}
 80158bc:	bf00      	nop
 80158be:	372c      	adds	r7, #44	; 0x2c
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd90      	pop	{r4, r7, pc}
 80158c4:	84210843 	.word	0x84210843
 80158c8:	82082083 	.word	0x82082083
 80158cc:	20009310 	.word	0x20009310

080158d0 <_ZN10STM32F7DMA5startEv>:

void STM32F7DMA::start()
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b082      	sub	sp, #8
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanDCache() or SCB_CleanDCache_by_Addr().
    DMA_Interface::start();
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	4618      	mov	r0, r3
 80158dc:	f006 fcf8 	bl	801c2d0 <_ZN8touchgfx13DMA_Interface5startEv>
}
 80158e0:	bf00      	nop
 80158e2:	3708      	adds	r7, #8
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}

080158e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b082      	sub	sp, #8
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
 80158f0:	4a05      	ldr	r2, [pc, #20]	; (8015908 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	601a      	str	r2, [r3, #0]
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	4618      	mov	r0, r3
 80158fa:	f7ff fbe3 	bl	80150c4 <_ZN8touchgfx9DMA_QueueD1Ev>
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	4618      	mov	r0, r3
 8015902:	3708      	adds	r7, #8
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}
 8015908:	08022e8c 	.word	0x08022e8c

0801590c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801590c:	b580      	push	{r7, lr}
 801590e:	b082      	sub	sp, #8
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f7ff ffe7 	bl	80158e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801591a:	2114      	movs	r1, #20
 801591c:	6878      	ldr	r0, [r7, #4]
 801591e:	f00a fa6a 	bl	801fdf6 <_ZdlPvj>
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	4618      	mov	r0, r3
 8015926:	3708      	adds	r7, #8
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}

0801592c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801592c:	b480      	push	{r7}
 801592e:	b083      	sub	sp, #12
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
 8015934:	460b      	mov	r3, r1
 8015936:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	78fa      	ldrb	r2, [r7, #3]
 801593c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        displayOrientationChangeRequested = true;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2201      	movs	r2, #1
 8015944:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }
 8015948:	bf00      	nop
 801594a:	370c      	adds	r7, #12
 801594c:	46bd      	mov	sp, r7
 801594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015952:	4770      	bx	lr

08015954 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8015954:	b580      	push	{r7, lr}
 8015956:	b082      	sub	sp, #8
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	3318      	adds	r3, #24
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	6878      	ldr	r0, [r7, #4]
 8015966:	4798      	blx	r3
    }
 8015968:	bf00      	nop
 801596a:	3708      	adds	r7, #8
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}

08015970 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8015970:	b580      	push	{r7, lr}
 8015972:	b082      	sub	sp, #8
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	685a      	ldr	r2, [r3, #4]
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	685b      	ldr	r3, [r3, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	4610      	mov	r0, r2
 8015986:	4798      	blx	r3
 8015988:	4603      	mov	r3, r0
    };
 801598a:	4618      	mov	r0, r3
 801598c:	3708      	adds	r7, #8
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}

08015992 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8015992:	b480      	push	{r7}
 8015994:	b083      	sub	sp, #12
 8015996:	af00      	add	r7, sp, #0
 8015998:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80159a0:	3301      	adds	r3, #1
 80159a2:	b2da      	uxtb	r2, r3
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    };
 80159aa:	bf00      	nop
 80159ac:	370c      	adds	r7, #12
 80159ae:	46bd      	mov	sp, r7
 80159b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b4:	4770      	bx	lr

080159b6 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80159b6:	b580      	push	{r7, lr}
 80159b8:	b082      	sub	sp, #8
 80159ba:	af00      	add	r7, sp, #0
 80159bc:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	f006 fb5c 	bl	801c07c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	3384      	adds	r3, #132	; 0x84
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	6878      	ldr	r0, [r7, #4]
 80159ce:	4798      	blx	r3
    }
 80159d0:	bf00      	nop
 80159d2:	3708      	adds	r7, #8
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bd80      	pop	{r7, pc}

080159d8 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 80159d8:	b480      	push	{r7}
 80159da:	b083      	sub	sp, #12
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	6039      	str	r1, [r7, #0]
        return false;
 80159e2:	2300      	movs	r3, #0
    }
 80159e4:	4618      	mov	r0, r3
 80159e6:	370c      	adds	r7, #12
 80159e8:	46bd      	mov	sp, r7
 80159ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ee:	4770      	bx	lr

080159f0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b086      	sub	sp, #24
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	60f8      	str	r0, [r7, #12]
 80159f8:	60b9      	str	r1, [r7, #8]
 80159fa:	4611      	mov	r1, r2
 80159fc:	461a      	mov	r2, r3
 80159fe:	460b      	mov	r3, r1
 8015a00:	80fb      	strh	r3, [r7, #6]
 8015a02:	4613      	mov	r3, r2
 8015a04:	717b      	strb	r3, [r7, #5]
        uint32_t bufferSizeInBytes = 0;
 8015a06:	2300      	movs	r3, #0
 8015a08:	617b      	str	r3, [r7, #20]
        switch (depth)
 8015a0a:	88fb      	ldrh	r3, [r7, #6]
 8015a0c:	3b01      	subs	r3, #1
 8015a0e:	2b1f      	cmp	r3, #31
 8015a10:	d862      	bhi.n	8015ad8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xe8>
 8015a12:	a201      	add	r2, pc, #4	; (adr r2, 8015a18 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x28>)
 8015a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a18:	08015ab5 	.word	0x08015ab5
 8015a1c:	08015ab5 	.word	0x08015ab5
 8015a20:	08015ad9 	.word	0x08015ad9
 8015a24:	08015ab5 	.word	0x08015ab5
 8015a28:	08015ad9 	.word	0x08015ad9
 8015a2c:	08015ad9 	.word	0x08015ad9
 8015a30:	08015ad9 	.word	0x08015ad9
 8015a34:	08015a99 	.word	0x08015a99
 8015a38:	08015ad9 	.word	0x08015ad9
 8015a3c:	08015ad9 	.word	0x08015ad9
 8015a40:	08015ad9 	.word	0x08015ad9
 8015a44:	08015ad9 	.word	0x08015ad9
 8015a48:	08015ad9 	.word	0x08015ad9
 8015a4c:	08015ad9 	.word	0x08015ad9
 8015a50:	08015ad9 	.word	0x08015ad9
 8015a54:	08015a99 	.word	0x08015a99
 8015a58:	08015ad9 	.word	0x08015ad9
 8015a5c:	08015ad9 	.word	0x08015ad9
 8015a60:	08015ad9 	.word	0x08015ad9
 8015a64:	08015ad9 	.word	0x08015ad9
 8015a68:	08015ad9 	.word	0x08015ad9
 8015a6c:	08015ad9 	.word	0x08015ad9
 8015a70:	08015ad9 	.word	0x08015ad9
 8015a74:	08015a99 	.word	0x08015a99
 8015a78:	08015ad9 	.word	0x08015ad9
 8015a7c:	08015ad9 	.word	0x08015ad9
 8015a80:	08015ad9 	.word	0x08015ad9
 8015a84:	08015ad9 	.word	0x08015ad9
 8015a88:	08015ad9 	.word	0x08015ad9
 8015a8c:	08015ad9 	.word	0x08015ad9
 8015a90:	08015ad9 	.word	0x08015ad9
 8015a94:	08015a99 	.word	0x08015a99
            bufferSizeInBytes = (DISPLAY_WIDTH * DISPLAY_HEIGHT) * (depth / 8);
 8015a98:	4b29      	ldr	r3, [pc, #164]	; (8015b40 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 8015a9a:	881b      	ldrh	r3, [r3, #0]
 8015a9c:	461a      	mov	r2, r3
 8015a9e:	4b29      	ldr	r3, [pc, #164]	; (8015b44 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 8015aa0:	881b      	ldrh	r3, [r3, #0]
 8015aa2:	fb03 f302 	mul.w	r3, r3, r2
 8015aa6:	88fa      	ldrh	r2, [r7, #6]
 8015aa8:	08d2      	lsrs	r2, r2, #3
 8015aaa:	b292      	uxth	r2, r2
 8015aac:	fb02 f303 	mul.w	r3, r2, r3
 8015ab0:	617b      	str	r3, [r7, #20]
            break;
 8015ab2:	e018      	b.n	8015ae6 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            bufferSizeInBytes = ((DISPLAY_WIDTH * depth + 7) / 8) * DISPLAY_HEIGHT;
 8015ab4:	4b22      	ldr	r3, [pc, #136]	; (8015b40 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 8015ab6:	881b      	ldrh	r3, [r3, #0]
 8015ab8:	461a      	mov	r2, r3
 8015aba:	88fb      	ldrh	r3, [r7, #6]
 8015abc:	fb03 f302 	mul.w	r3, r3, r2
 8015ac0:	3307      	adds	r3, #7
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	da00      	bge.n	8015ac8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd8>
 8015ac6:	3307      	adds	r3, #7
 8015ac8:	10db      	asrs	r3, r3, #3
 8015aca:	461a      	mov	r2, r3
 8015acc:	4b1d      	ldr	r3, [pc, #116]	; (8015b44 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 8015ace:	881b      	ldrh	r3, [r3, #0]
 8015ad0:	fb03 f302 	mul.w	r3, r3, r2
 8015ad4:	617b      	str	r3, [r7, #20]
            break;
 8015ad6:	e006      	b.n	8015ae6 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            assert(0 && "Unsupported bit depth"); // Must be power of two
 8015ad8:	4b1b      	ldr	r3, [pc, #108]	; (8015b48 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x158>)
 8015ada:	4a1c      	ldr	r2, [pc, #112]	; (8015b4c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x15c>)
 8015adc:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 8015ae0:	481b      	ldr	r0, [pc, #108]	; (8015b50 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x160>)
 8015ae2:	f00a f9a5 	bl	801fe30 <__assert_func>
        uint8_t* buffer = static_cast<uint8_t*>(adr);
 8015ae6:	68bb      	ldr	r3, [r7, #8]
 8015ae8:	613b      	str	r3, [r7, #16]
        frameBuffer0 = reinterpret_cast<uint16_t*>(buffer);
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	693a      	ldr	r2, [r7, #16]
 8015aee:	639a      	str	r2, [r3, #56]	; 0x38
        if (useDoubleBuffering)
 8015af0:	797b      	ldrb	r3, [r7, #5]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d007      	beq.n	8015b06 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x116>
            buffer += bufferSizeInBytes;
 8015af6:	693a      	ldr	r2, [r7, #16]
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	4413      	add	r3, r2
 8015afc:	613b      	str	r3, [r7, #16]
            frameBuffer1 = reinterpret_cast<uint16_t*>(buffer);
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	693a      	ldr	r2, [r7, #16]
 8015b02:	63da      	str	r2, [r3, #60]	; 0x3c
 8015b04:	e002      	b.n	8015b0c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11c>
            frameBuffer1 = 0;
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	2200      	movs	r2, #0
 8015b0a:	63da      	str	r2, [r3, #60]	; 0x3c
        if (useAnimationStorage)
 8015b0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d007      	beq.n	8015b24 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x134>
            buffer += bufferSizeInBytes;
 8015b14:	693a      	ldr	r2, [r7, #16]
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	4413      	add	r3, r2
 8015b1a:	613b      	str	r3, [r7, #16]
            frameBuffer2 = reinterpret_cast<uint16_t*>(buffer);
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	693a      	ldr	r2, [r7, #16]
 8015b20:	641a      	str	r2, [r3, #64]	; 0x40
 8015b22:	e002      	b.n	8015b2a <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x13a>
            frameBuffer2 = 0;
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	2200      	movs	r2, #0
 8015b28:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = useDoubleBuffering;
 8015b2a:	4a0a      	ldr	r2, [pc, #40]	; (8015b54 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x164>)
 8015b2c:	797b      	ldrb	r3, [r7, #5]
 8015b2e:	7013      	strb	r3, [r2, #0]
        USE_ANIMATION_STORAGE = useAnimationStorage;
 8015b30:	4a09      	ldr	r2, [pc, #36]	; (8015b58 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x168>)
 8015b32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b36:	7013      	strb	r3, [r2, #0]
    }
 8015b38:	bf00      	nop
 8015b3a:	3718      	adds	r7, #24
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}
 8015b40:	20009cc8 	.word	0x20009cc8
 8015b44:	20009cca 	.word	0x20009cca
 8015b48:	08020fb4 	.word	0x08020fb4
 8015b4c:	08021d38 	.word	0x08021d38
 8015b50:	08020fd4 	.word	0x08020fd4
 8015b54:	20009cd2 	.word	0x20009cd2
 8015b58:	20009cd3 	.word	0x20009cd3

08015b5c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b084      	sub	sp, #16
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	60f8      	str	r0, [r7, #12]
 8015b64:	60b9      	str	r1, [r7, #8]
 8015b66:	607a      	str	r2, [r7, #4]
 8015b68:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8015b6a:	68bb      	ldr	r3, [r7, #8]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d106      	bne.n	8015b7e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8015b70:	4b11      	ldr	r3, [pc, #68]	; (8015bb8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8015b72:	4a12      	ldr	r2, [pc, #72]	; (8015bbc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8015b74:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8015b78:	4811      	ldr	r0, [pc, #68]	; (8015bc0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8015b7a:	f00a f959 	bl	801fe30 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	68ba      	ldr	r2, [r7, #8]
 8015b82:	639a      	str	r2, [r3, #56]	; 0x38
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	687a      	ldr	r2, [r7, #4]
 8015b88:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	683a      	ldr	r2, [r7, #0]
 8015b8e:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	bf14      	ite	ne
 8015b96:	2301      	movne	r3, #1
 8015b98:	2300      	moveq	r3, #0
 8015b9a:	b2da      	uxtb	r2, r3
 8015b9c:	4b09      	ldr	r3, [pc, #36]	; (8015bc4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8015b9e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	bf14      	ite	ne
 8015ba6:	2301      	movne	r3, #1
 8015ba8:	2300      	moveq	r3, #0
 8015baa:	b2da      	uxtb	r2, r3
 8015bac:	4b06      	ldr	r3, [pc, #24]	; (8015bc8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8015bae:	701a      	strb	r2, [r3, #0]
    }
 8015bb0:	bf00      	nop
 8015bb2:	3710      	adds	r7, #16
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bd80      	pop	{r7, pc}
 8015bb8:	08021020 	.word	0x08021020
 8015bbc:	08021ce8 	.word	0x08021ce8
 8015bc0:	08020fd4 	.word	0x08020fd4
 8015bc4:	20009cd2 	.word	0x20009cd2
 8015bc8:	20009cd3 	.word	0x20009cd3

08015bcc <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b082      	sub	sp, #8
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
 8015bd4:	460b      	mov	r3, r1
 8015bd6:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d004      	beq.n	8015bea <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015be4:	887a      	ldrh	r2, [r7, #2]
 8015be6:	4610      	mov	r0, r2
 8015be8:	4798      	blx	r3
        }
    }
 8015bea:	bf00      	nop
 8015bec:	3708      	adds	r7, #8
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}
	...

08015bf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8015bf4:	b480      	push	{r7}
 8015bf6:	b083      	sub	sp, #12
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	d017      	beq.n	8015c3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8015c0c:	4b1a      	ldr	r3, [pc, #104]	; (8015c78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d12a      	bne.n	8015c6a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8015c14:	4b19      	ldr	r3, [pc, #100]	; (8015c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015c16:	881a      	ldrh	r2, [r3, #0]
 8015c18:	4b19      	ldr	r3, [pc, #100]	; (8015c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015c1a:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8015c1c:	4b19      	ldr	r3, [pc, #100]	; (8015c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015c1e:	881a      	ldrh	r2, [r3, #0]
 8015c20:	4b19      	ldr	r3, [pc, #100]	; (8015c88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015c22:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8015c24:	4b16      	ldr	r3, [pc, #88]	; (8015c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015c26:	881a      	ldrh	r2, [r3, #0]
 8015c28:	4b16      	ldr	r3, [pc, #88]	; (8015c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015c2a:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8015c2c:	4b16      	ldr	r3, [pc, #88]	; (8015c88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015c2e:	881a      	ldrh	r2, [r3, #0]
 8015c30:	4b12      	ldr	r3, [pc, #72]	; (8015c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015c32:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8015c34:	4b10      	ldr	r3, [pc, #64]	; (8015c78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015c36:	2201      	movs	r2, #1
 8015c38:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8015c3a:	e016      	b.n	8015c6a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8015c3c:	4b0e      	ldr	r3, [pc, #56]	; (8015c78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015c3e:	781b      	ldrb	r3, [r3, #0]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d012      	beq.n	8015c6a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8015c44:	4b0f      	ldr	r3, [pc, #60]	; (8015c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015c46:	881a      	ldrh	r2, [r3, #0]
 8015c48:	4b0d      	ldr	r3, [pc, #52]	; (8015c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015c4a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8015c4c:	4b0b      	ldr	r3, [pc, #44]	; (8015c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015c4e:	881a      	ldrh	r2, [r3, #0]
 8015c50:	4b0d      	ldr	r3, [pc, #52]	; (8015c88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015c52:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8015c54:	4b0c      	ldr	r3, [pc, #48]	; (8015c88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015c56:	881a      	ldrh	r2, [r3, #0]
 8015c58:	4b0a      	ldr	r3, [pc, #40]	; (8015c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015c5a:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8015c5c:	4b08      	ldr	r3, [pc, #32]	; (8015c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015c5e:	881a      	ldrh	r2, [r3, #0]
 8015c60:	4b06      	ldr	r3, [pc, #24]	; (8015c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015c62:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8015c64:	4b04      	ldr	r3, [pc, #16]	; (8015c78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015c66:	2200      	movs	r2, #0
 8015c68:	701a      	strb	r2, [r3, #0]
    }
 8015c6a:	bf00      	nop
 8015c6c:	370c      	adds	r7, #12
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c74:	4770      	bx	lr
 8015c76:	bf00      	nop
 8015c78:	20009ccc 	.word	0x20009ccc
 8015c7c:	20009cc8 	.word	0x20009cc8
 8015c80:	20009cce 	.word	0x20009cce
 8015c84:	20009cca 	.word	0x20009cca
 8015c88:	20009cd0 	.word	0x20009cd0

08015c8c <__NVIC_EnableIRQ>:
{
 8015c8c:	b480      	push	{r7}
 8015c8e:	b083      	sub	sp, #12
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	4603      	mov	r3, r0
 8015c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	db0d      	blt.n	8015cba <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ca2:	b2db      	uxtb	r3, r3
 8015ca4:	f003 021f 	and.w	r2, r3, #31
 8015ca8:	4907      	ldr	r1, [pc, #28]	; (8015cc8 <__NVIC_EnableIRQ+0x3c>)
 8015caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015cae:	095b      	lsrs	r3, r3, #5
 8015cb0:	2001      	movs	r0, #1
 8015cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8015cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015cba:	bf00      	nop
 8015cbc:	370c      	adds	r7, #12
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc4:	4770      	bx	lr
 8015cc6:	bf00      	nop
 8015cc8:	e000e100 	.word	0xe000e100

08015ccc <__NVIC_DisableIRQ>:
{
 8015ccc:	b480      	push	{r7}
 8015cce:	b083      	sub	sp, #12
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	db12      	blt.n	8015d04 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ce2:	b2db      	uxtb	r3, r3
 8015ce4:	f003 021f 	and.w	r2, r3, #31
 8015ce8:	4909      	ldr	r1, [pc, #36]	; (8015d10 <__NVIC_DisableIRQ+0x44>)
 8015cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015cee:	095b      	lsrs	r3, r3, #5
 8015cf0:	2001      	movs	r0, #1
 8015cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8015cf6:	3320      	adds	r3, #32
 8015cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015cfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015d00:	f3bf 8f6f 	isb	sy
}
 8015d04:	bf00      	nop
 8015d06:	370c      	adds	r7, #12
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0e:	4770      	bx	lr
 8015d10:	e000e100 	.word	0xe000e100

08015d14 <__NVIC_SetPriority>:
{
 8015d14:	b480      	push	{r7}
 8015d16:	b083      	sub	sp, #12
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	6039      	str	r1, [r7, #0]
 8015d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	db0c      	blt.n	8015d42 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	b2db      	uxtb	r3, r3
 8015d2c:	4a0e      	ldr	r2, [pc, #56]	; (8015d68 <__NVIC_SetPriority+0x54>)
 8015d2e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8015d32:	4608      	mov	r0, r1
 8015d34:	011b      	lsls	r3, r3, #4
 8015d36:	b2d9      	uxtb	r1, r3
 8015d38:	1813      	adds	r3, r2, r0
 8015d3a:	460a      	mov	r2, r1
 8015d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015d40:	e00c      	b.n	8015d5c <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	b2da      	uxtb	r2, r3
 8015d46:	4909      	ldr	r1, [pc, #36]	; (8015d6c <__NVIC_SetPriority+0x58>)
 8015d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d4c:	b2db      	uxtb	r3, r3
 8015d4e:	f003 030f 	and.w	r3, r3, #15
 8015d52:	3b04      	subs	r3, #4
 8015d54:	0112      	lsls	r2, r2, #4
 8015d56:	b2d2      	uxtb	r2, r2
 8015d58:	440b      	add	r3, r1
 8015d5a:	761a      	strb	r2, [r3, #24]
}
 8015d5c:	bf00      	nop
 8015d5e:	370c      	adds	r7, #12
 8015d60:	46bd      	mov	sp, r7
 8015d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d66:	4770      	bx	lr
 8015d68:	e000e100 	.word	0xe000e100
 8015d6c:	e000ed00 	.word	0xe000ed00

08015d70 <_ZN10STM32F7HAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b082      	sub	sp, #8
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f005 fdcb 	bl	801b916 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8015d80:	bf00      	nop
 8015d82:	3708      	adds	r7, #8
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}

08015d88 <_ZNK10STM32F7HAL17getTFTFrameBufferEv>:
/* USER CODE END user includes */

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F7HAL::getTFTFrameBuffer() const
{
 8015d88:	b480      	push	{r7}
 8015d8a:	b083      	sub	sp, #12
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015d90:	4b03      	ldr	r3, [pc, #12]	; (8015da0 <_ZNK10STM32F7HAL17getTFTFrameBufferEv+0x18>)
 8015d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015d94:	4618      	mov	r0, r3
 8015d96:	370c      	adds	r7, #12
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9e:	4770      	bx	lr
 8015da0:	40016884 	.word	0x40016884

08015da4 <_ZN10STM32F7HAL17setTFTFrameBufferEPt>:

void STM32F7HAL::setTFTFrameBuffer(uint16_t* adr)
{
 8015da4:	b480      	push	{r7}
 8015da6:	b083      	sub	sp, #12
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
 8015dac:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8015dae:	4a06      	ldr	r2, [pc, #24]	; (8015dc8 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x24>)
 8015db0:	683b      	ldr	r3, [r7, #0]
 8015db2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8015db4:	4b05      	ldr	r3, [pc, #20]	; (8015dcc <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x28>)
 8015db6:	2201      	movs	r2, #1
 8015db8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015dba:	bf00      	nop
 8015dbc:	370c      	adds	r7, #12
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc4:	4770      	bx	lr
 8015dc6:	bf00      	nop
 8015dc8:	40016884 	.word	0x40016884
 8015dcc:	40016800 	.word	0x40016800

08015dd0 <_ZN10STM32F7HAL17getTFTCurrentLineEv>:

uint16_t STM32F7HAL::getTFTCurrentLine()
{
 8015dd0:	b480      	push	{r7}
 8015dd2:	b085      	sub	sp, #20
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8015dd8:	4b0d      	ldr	r3, [pc, #52]	; (8015e10 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 8015dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ddc:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8015dde:	4b0c      	ldr	r3, [pc, #48]	; (8015e10 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 8015de0:	68db      	ldr	r3, [r3, #12]
 8015de2:	b29b      	uxth	r3, r3
 8015de4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015de8:	b29b      	uxth	r3, r3
 8015dea:	3301      	adds	r3, #1
 8015dec:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8015dee:	89fa      	ldrh	r2, [r7, #14]
 8015df0:	89bb      	ldrh	r3, [r7, #12]
 8015df2:	429a      	cmp	r2, r3
 8015df4:	d201      	bcs.n	8015dfa <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8015df6:	2300      	movs	r3, #0
 8015df8:	e003      	b.n	8015e02 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8015dfa:	89fa      	ldrh	r2, [r7, #14]
 8015dfc:	89bb      	ldrh	r3, [r7, #12]
 8015dfe:	1ad3      	subs	r3, r2, r3
 8015e00:	b29b      	uxth	r3, r3
    }
}
 8015e02:	4618      	mov	r0, r3
 8015e04:	3714      	adds	r7, #20
 8015e06:	46bd      	mov	sp, r7
 8015e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0c:	4770      	bx	lr
 8015e0e:	bf00      	nop
 8015e10:	40016800 	.word	0x40016800

08015e14 <_ZN10STM32F7HAL19configureInterruptsEv>:

void STM32F7HAL::configureInterrupts()
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b082      	sub	sp, #8
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8015e1c:	2109      	movs	r1, #9
 8015e1e:	205a      	movs	r0, #90	; 0x5a
 8015e20:	f7ff ff78 	bl	8015d14 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8015e24:	2109      	movs	r1, #9
 8015e26:	2058      	movs	r0, #88	; 0x58
 8015e28:	f7ff ff74 	bl	8015d14 <__NVIC_SetPriority>
}
 8015e2c:	bf00      	nop
 8015e2e:	3708      	adds	r7, #8
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}

08015e34 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;

/* Enable LCD line interrupt, when entering video (active) area */
void STM32F7HAL::enableLCDControllerInterrupt()
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b082      	sub	sp, #8
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8015e3c:	4b12      	ldr	r3, [pc, #72]	; (8015e88 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 8015e3e:	68db      	ldr	r3, [r3, #12]
 8015e40:	b29b      	uxth	r3, r3
 8015e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015e46:	b29b      	uxth	r3, r3
 8015e48:	3b01      	subs	r3, #1
 8015e4a:	b29a      	uxth	r2, r3
 8015e4c:	4b0f      	ldr	r3, [pc, #60]	; (8015e8c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 8015e4e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8015e50:	4b0d      	ldr	r3, [pc, #52]	; (8015e88 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 8015e52:	691b      	ldr	r3, [r3, #16]
 8015e54:	b29b      	uxth	r3, r3
 8015e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015e5a:	b29b      	uxth	r3, r3
 8015e5c:	3b01      	subs	r3, #1
 8015e5e:	b29a      	uxth	r2, r3
 8015e60:	4b0b      	ldr	r3, [pc, #44]	; (8015e90 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x5c>)
 8015e62:	801a      	strh	r2, [r3, #0]

    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 8015e64:	4b09      	ldr	r3, [pc, #36]	; (8015e8c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 8015e66:	881b      	ldrh	r3, [r3, #0]
 8015e68:	4619      	mov	r1, r3
 8015e6a:	480a      	ldr	r0, [pc, #40]	; (8015e94 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8015e6c:	f7ee fc9a 	bl	80047a4 <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 8015e70:	4b08      	ldr	r3, [pc, #32]	; (8015e94 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015e76:	4b07      	ldr	r3, [pc, #28]	; (8015e94 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	f042 0203 	orr.w	r2, r2, #3
 8015e7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8015e80:	bf00      	nop
 8015e82:	3708      	adds	r7, #8
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}
 8015e88:	40016800 	.word	0x40016800
 8015e8c:	2000939a 	.word	0x2000939a
 8015e90:	2000939c 	.word	0x2000939c
 8015e94:	20009268 	.word	0x20009268

08015e98 <_ZN10STM32F7HAL17disableInterruptsEv>:

void STM32F7HAL::disableInterrupts()
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b082      	sub	sp, #8
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 8015ea0:	2058      	movs	r0, #88	; 0x58
 8015ea2:	f7ff ff13 	bl	8015ccc <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8015ea6:	205a      	movs	r0, #90	; 0x5a
 8015ea8:	f7ff ff10 	bl	8015ccc <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_ER_IRQn);
 8015eac:	2059      	movs	r0, #89	; 0x59
 8015eae:	f7ff ff0d 	bl	8015ccc <__NVIC_DisableIRQ>
}
 8015eb2:	bf00      	nop
 8015eb4:	3708      	adds	r7, #8
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	bd80      	pop	{r7, pc}

08015eba <_ZN10STM32F7HAL16enableInterruptsEv>:

void STM32F7HAL::enableInterrupts()
{
 8015eba:	b580      	push	{r7, lr}
 8015ebc:	b082      	sub	sp, #8
 8015ebe:	af00      	add	r7, sp, #0
 8015ec0:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 8015ec2:	2058      	movs	r0, #88	; 0x58
 8015ec4:	f7ff fee2 	bl	8015c8c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015ec8:	205a      	movs	r0, #90	; 0x5a
 8015eca:	f7ff fedf 	bl	8015c8c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_ER_IRQn);
 8015ece:	2059      	movs	r0, #89	; 0x59
 8015ed0:	f7ff fedc 	bl	8015c8c <__NVIC_EnableIRQ>
}
 8015ed4:	bf00      	nop
 8015ed6:	3708      	adds	r7, #8
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}

08015edc <_ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE>:

void STM32F7HAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b082      	sub	sp, #8
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	6039      	str	r1, [r7, #0]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // the CPU to read back the latest pixels produced by the h/w accelerator
    // thus we have to both flush and invalidate the Dcache prior to letting
    // DMA2D accessing it. That's done using SCB_CleanInvalidateDCache().
    HAL::flushFrameBuffer(rect);
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	6839      	ldr	r1, [r7, #0]
 8015eea:	4618      	mov	r0, r3
 8015eec:	f005 fd19 	bl	801b922 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8015ef0:	bf00      	nop
 8015ef2:	3708      	adds	r7, #8
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}

08015ef8 <HAL_LTDC_LineEventCallback>:

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b082      	sub	sp, #8
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
    if (LTDC->LIPCR == lcd_int_active_line)
 8015f00:	4b1a      	ldr	r3, [pc, #104]	; (8015f6c <HAL_LTDC_LineEventCallback+0x74>)
 8015f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f04:	4a1a      	ldr	r2, [pc, #104]	; (8015f70 <HAL_LTDC_LineEventCallback+0x78>)
 8015f06:	8812      	ldrh	r2, [r2, #0]
 8015f08:	4293      	cmp	r3, r2
 8015f0a:	bf0c      	ite	eq
 8015f0c:	2301      	moveq	r3, #1
 8015f0e:	2300      	movne	r3, #0
 8015f10:	b2db      	uxtb	r3, r3
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d017      	beq.n	8015f46 <HAL_LTDC_LineEventCallback+0x4e>
    {
        //entering active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8015f16:	4b17      	ldr	r3, [pc, #92]	; (8015f74 <HAL_LTDC_LineEventCallback+0x7c>)
 8015f18:	881b      	ldrh	r3, [r3, #0]
 8015f1a:	4619      	mov	r1, r3
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f7ee fc41 	bl	80047a4 <HAL_LTDC_ProgramLineEvent>
        HAL::getInstance()->vSync();
 8015f22:	f7f8 fafd 	bl	800e520 <_ZN8touchgfx3HAL11getInstanceEv>
 8015f26:	4603      	mov	r3, r0
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f7ff fd32 	bl	8015992 <_ZN8touchgfx3HAL5vSyncEv>
        OSWrappers::signalVSync();
 8015f2e:	f7fa fe73 	bl	8010c18 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
        // Note: task will also swap when it wakes up, but that operation is guarded and will not have
        // any effect if already swapped.
        HAL::getInstance()->swapFrameBuffers();
 8015f32:	f7f8 faf5 	bl	800e520 <_ZN8touchgfx3HAL11getInstanceEv>
 8015f36:	4603      	mov	r3, r0
 8015f38:	4618      	mov	r0, r3
 8015f3a:	f006 f89f 	bl	801c07c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 8015f3e:	2000      	movs	r0, #0
 8015f40:	f7fe fd7a 	bl	8014a38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
        GPIO::clear(GPIO::VSYNC_FREQ);
        HAL::getInstance()->frontPorchEntered();
    }
}
 8015f44:	e00e      	b.n	8015f64 <HAL_LTDC_LineEventCallback+0x6c>
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8015f46:	4b0a      	ldr	r3, [pc, #40]	; (8015f70 <HAL_LTDC_LineEventCallback+0x78>)
 8015f48:	881b      	ldrh	r3, [r3, #0]
 8015f4a:	4619      	mov	r1, r3
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f7ee fc29 	bl	80047a4 <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 8015f52:	2000      	movs	r0, #0
 8015f54:	f7fe fd7b 	bl	8014a4e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        HAL::getInstance()->frontPorchEntered();
 8015f58:	f7f8 fae2 	bl	800e520 <_ZN8touchgfx3HAL11getInstanceEv>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7ff fcf8 	bl	8015954 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
}
 8015f64:	bf00      	nop
 8015f66:	3708      	adds	r7, #8
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bd80      	pop	{r7, pc}
 8015f6c:	40016800 	.word	0x40016800
 8015f70:	2000939a 	.word	0x2000939a
 8015f74:	2000939c 	.word	0x2000939c

08015f78 <_ZN8touchgfx22STM32F7Instrumentation4initEv>:
namespace touchgfx
{
static TIM_HandleTypeDef htim1;

void STM32F7Instrumentation::init()
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b0a4      	sub	sp, #144	; 0x90
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
   RCC_ClkInitTypeDef clkconfig;
    uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 8015f80:	2300      	movs	r3, #0
 8015f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t pFLatency;

    __TIM2_CLK_ENABLE();
 8015f86:	4b84      	ldr	r3, [pc, #528]	; (8016198 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8015f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f8a:	4a83      	ldr	r2, [pc, #524]	; (8016198 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8015f8c:	f043 0301 	orr.w	r3, r3, #1
 8015f90:	6413      	str	r3, [r2, #64]	; 0x40
 8015f92:	4b81      	ldr	r3, [pc, #516]	; (8016198 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8015f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f96:	f003 0301 	and.w	r3, r3, #1
 8015f9a:	60bb      	str	r3, [r7, #8]
 8015f9c:	68bb      	ldr	r3, [r7, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8015f9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	601a      	str	r2, [r3, #0]
 8015fa6:	605a      	str	r2, [r3, #4]
 8015fa8:	609a      	str	r2, [r3, #8]
 8015faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015fac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	601a      	str	r2, [r3, #0]
 8015fb4:	605a      	str	r2, [r3, #4]
 8015fb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8015fb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	601a      	str	r2, [r3, #0]
 8015fc0:	605a      	str	r2, [r3, #4]
 8015fc2:	609a      	str	r2, [r3, #8]
 8015fc4:	60da      	str	r2, [r3, #12]
 8015fc6:	611a      	str	r2, [r3, #16]
 8015fc8:	615a      	str	r2, [r3, #20]
 8015fca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8015fcc:	f107 030c 	add.w	r3, r7, #12
 8015fd0:	222c      	movs	r2, #44	; 0x2c
 8015fd2:	2100      	movs	r1, #0
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f009 ffa6 	bl	801ff26 <memset>
  htim1.Instance = TIM1;
 8015fda:	4b70      	ldr	r3, [pc, #448]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015fdc:	4a70      	ldr	r2, [pc, #448]	; (80161a0 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 8015fde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8015fe0:	4b6e      	ldr	r3, [pc, #440]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015fe6:	4b6d      	ldr	r3, [pc, #436]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015fe8:	2200      	movs	r2, #0
 8015fea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8015fec:	4b6b      	ldr	r3, [pc, #428]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015fee:	2200      	movs	r2, #0
 8015ff0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015ff2:	4b6a      	ldr	r3, [pc, #424]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8015ff8:	4b68      	ldr	r3, [pc, #416]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015ffe:	4b67      	ldr	r3, [pc, #412]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016000:	2200      	movs	r2, #0
 8016002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8016004:	4865      	ldr	r0, [pc, #404]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016006:	f7f1 fff9 	bl	8007ffc <HAL_TIM_Base_Init>
 801600a:	4603      	mov	r3, r0
 801600c:	2b00      	cmp	r3, #0
 801600e:	bf14      	ite	ne
 8016010:	2301      	movne	r3, #1
 8016012:	2300      	moveq	r3, #0
 8016014:	b2db      	uxtb	r3, r3
 8016016:	2b00      	cmp	r3, #0
 8016018:	d001      	beq.n	801601e <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xa6>
  {
    Error_Handler( );
 801601a:	f001 fb03 	bl	8017624 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801601e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016022:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8016024:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016028:	4619      	mov	r1, r3
 801602a:	485c      	ldr	r0, [pc, #368]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801602c:	f7f2 fac8 	bl	80085c0 <HAL_TIM_ConfigClockSource>
 8016030:	4603      	mov	r3, r0
 8016032:	2b00      	cmp	r3, #0
 8016034:	bf14      	ite	ne
 8016036:	2301      	movne	r3, #1
 8016038:	2300      	moveq	r3, #0
 801603a:	b2db      	uxtb	r3, r3
 801603c:	2b00      	cmp	r3, #0
 801603e:	d001      	beq.n	8016044 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xcc>
  {
    Error_Handler( );
 8016040:	f001 faf0 	bl	8017624 <Error_Handler>
  }

  htim1.Instance = TIM1;
 8016044:	4b55      	ldr	r3, [pc, #340]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016046:	4a56      	ldr	r2, [pc, #344]	; (80161a0 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 8016048:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 801604a:	4b54      	ldr	r3, [pc, #336]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801604c:	2200      	movs	r2, #0
 801604e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016050:	4b52      	ldr	r3, [pc, #328]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016052:	2200      	movs	r2, #0
 8016054:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8016056:	4b51      	ldr	r3, [pc, #324]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016058:	2200      	movs	r2, #0
 801605a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801605c:	4b4f      	ldr	r3, [pc, #316]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801605e:	2200      	movs	r2, #0
 8016060:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8016062:	4b4e      	ldr	r3, [pc, #312]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016064:	2200      	movs	r2, #0
 8016066:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016068:	4b4c      	ldr	r3, [pc, #304]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801606a:	2200      	movs	r2, #0
 801606c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 801606e:	484b      	ldr	r0, [pc, #300]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016070:	f7f2 f844 	bl	80080fc <HAL_TIM_PWM_Init>
 8016074:	4603      	mov	r3, r0
 8016076:	2b00      	cmp	r3, #0
 8016078:	bf14      	ite	ne
 801607a:	2301      	movne	r3, #1
 801607c:	2300      	moveq	r3, #0
 801607e:	b2db      	uxtb	r3, r3
 8016080:	2b00      	cmp	r3, #0
 8016082:	d001      	beq.n	8016088 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x110>
  {
    Error_Handler( );
 8016084:	f001 face 	bl	8017624 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016088:	2300      	movs	r3, #0
 801608a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801608c:	2300      	movs	r3, #0
 801608e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016090:	2300      	movs	r3, #0
 8016092:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8016094:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016098:	4619      	mov	r1, r3
 801609a:	4840      	ldr	r0, [pc, #256]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801609c:	f7f2 ff0a 	bl	8008eb4 <HAL_TIMEx_MasterConfigSynchronization>
 80160a0:	4603      	mov	r3, r0
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	bf14      	ite	ne
 80160a6:	2301      	movne	r3, #1
 80160a8:	2300      	moveq	r3, #0
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d001      	beq.n	80160b4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x13c>
  {
    Error_Handler( );
 80160b0:	f001 fab8 	bl	8017624 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80160b4:	2360      	movs	r3, #96	; 0x60
 80160b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80160b8:	2300      	movs	r3, #0
 80160ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80160bc:	2300      	movs	r3, #0
 80160be:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80160c0:	2300      	movs	r3, #0
 80160c2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80160c4:	2300      	movs	r3, #0
 80160c6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80160c8:	2300      	movs	r3, #0
 80160ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80160cc:	2300      	movs	r3, #0
 80160ce:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80160d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80160d4:	2200      	movs	r2, #0
 80160d6:	4619      	mov	r1, r3
 80160d8:	4830      	ldr	r0, [pc, #192]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80160da:	f7f2 f959 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 80160de:	4603      	mov	r3, r0
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	bf14      	ite	ne
 80160e4:	2301      	movne	r3, #1
 80160e6:	2300      	moveq	r3, #0
 80160e8:	b2db      	uxtb	r3, r3
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d001      	beq.n	80160f2 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x17a>
  {
    Error_Handler( );
 80160ee:	f001 fa99 	bl	8017624 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80160f2:	2300      	movs	r3, #0
 80160f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80160f6:	2300      	movs	r3, #0
 80160f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80160fa:	2300      	movs	r3, #0
 80160fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 80160fe:	2300      	movs	r3, #0
 8016100:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016102:	2300      	movs	r3, #0
 8016104:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801610a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 801610c:	2300      	movs	r3, #0
 801610e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8016110:	2300      	movs	r3, #0
 8016112:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8016114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016118:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 801611a:	2300      	movs	r3, #0
 801611c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801611e:	2300      	movs	r3, #0
 8016120:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8016122:	f107 030c 	add.w	r3, r7, #12
 8016126:	4619      	mov	r1, r3
 8016128:	481c      	ldr	r0, [pc, #112]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801612a:	f7f2 ff1f 	bl	8008f6c <HAL_TIMEx_ConfigBreakDeadTime>
 801612e:	4603      	mov	r3, r0
 8016130:	2b00      	cmp	r3, #0
 8016132:	bf14      	ite	ne
 8016134:	2301      	movne	r3, #1
 8016136:	2300      	moveq	r3, #0
 8016138:	b2db      	uxtb	r3, r3
 801613a:	2b00      	cmp	r3, #0
 801613c:	d001      	beq.n	8016142 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1ca>
  {
    Error_Handler( );
 801613e:	f001 fa71 	bl	8017624 <Error_Handler>
  }

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8016142:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8016146:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801614a:	4611      	mov	r1, r2
 801614c:	4618      	mov	r0, r3
 801614e:	f7ef fa69 	bl	8005624 <HAL_RCC_GetClockConfig>

    /* TIM2 is on APB1 bus */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8016152:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801615a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801615e:	2b00      	cmp	r3, #0
 8016160:	d104      	bne.n	801616c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1f4>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 8016162:	f7ef fa37 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8016166:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 801616a:	e005      	b.n	8016178 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x200>
    else
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 801616c:	f7ef fa32 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8016170:	4603      	mov	r3, r0
 8016172:	005b      	lsls	r3, r3, #1
 8016174:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 8016178:	f7ef fa20 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 801617c:	4602      	mov	r2, r0
 801617e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016182:	fbb2 f2f3 	udiv	r2, r2, r3
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	60da      	str	r2, [r3, #12]

    HAL_TIM_Base_Start(&htim1);
 801618a:	4804      	ldr	r0, [pc, #16]	; (801619c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801618c:	f7f1 ff62 	bl	8008054 <HAL_TIM_Base_Start>
}
 8016190:	bf00      	nop
 8016192:	3790      	adds	r7, #144	; 0x90
 8016194:	46bd      	mov	sp, r7
 8016196:	bd80      	pop	{r7, pc}
 8016198:	40023800 	.word	0x40023800
 801619c:	200093a0 	.word	0x200093a0
 80161a0:	40010000 	.word	0x40010000

080161a4 <_ZN8touchgfx22STM32F7Instrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int STM32F7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 80161a4:	b480      	push	{r7}
 80161a6:	b085      	sub	sp, #20
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	60f8      	str	r0, [r7, #12]
 80161ac:	60b9      	str	r1, [r7, #8]
 80161ae:	607a      	str	r2, [r7, #4]
 80161b0:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80161b2:	687a      	ldr	r2, [r7, #4]
 80161b4:	68bb      	ldr	r3, [r7, #8]
 80161b6:	1ad2      	subs	r2, r2, r3
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	085b      	lsrs	r3, r3, #1
 80161bc:	441a      	add	r2, r3
 80161be:	683b      	ldr	r3, [r7, #0]
 80161c0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80161c4:	4618      	mov	r0, r3
 80161c6:	3714      	adds	r7, #20
 80161c8:	46bd      	mov	sp, r7
 80161ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ce:	4770      	bx	lr

080161d0 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv>:

unsigned int STM32F7Instrumentation::getCPUCycles()
{
 80161d0:	b480      	push	{r7}
 80161d2:	b083      	sub	sp, #12
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_COUNTER(&htim1) * m_sysclkRatio;
 80161d8:	4b06      	ldr	r3, [pc, #24]	; (80161f4 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv+0x24>)
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161de:	687a      	ldr	r2, [r7, #4]
 80161e0:	68d2      	ldr	r2, [r2, #12]
 80161e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80161e6:	4618      	mov	r0, r3
 80161e8:	370c      	adds	r7, #12
 80161ea:	46bd      	mov	sp, r7
 80161ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f0:	4770      	bx	lr
 80161f2:	bf00      	nop
 80161f4:	200093a0 	.word	0x200093a0

080161f8 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb>:

void STM32F7Instrumentation::setMCUActive(bool active)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	460b      	mov	r3, r1
 8016202:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 8016204:	78fb      	ldrb	r3, [r7, #3]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d00f      	beq.n	801622a <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x32>
    {
        cc_consumed += getCPUCycles() - cc_in;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	3310      	adds	r3, #16
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	6878      	ldr	r0, [r7, #4]
 8016214:	4798      	blx	r3
 8016216:	4602      	mov	r2, r0
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	689b      	ldr	r3, [r3, #8]
 801621c:	1ad2      	subs	r2, r2, r3
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	685b      	ldr	r3, [r3, #4]
 8016222:	441a      	add	r2, r3
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8016228:	e008      	b.n	801623c <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x44>
        cc_in = getCPUCycles();
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	3310      	adds	r3, #16
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	4798      	blx	r3
 8016236:	4602      	mov	r2, r0
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	609a      	str	r2, [r3, #8]
}
 801623c:	bf00      	nop
 801623e:	3708      	adds	r7, #8
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}

08016244 <_ZN8touchgfx22STM32F7TouchController4initEv>:
}

using namespace touchgfx;

void STM32F7TouchController::init()
{
 8016244:	b480      	push	{r7}
 8016246:	b083      	sub	sp, #12
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]

  /* Add code for touch controller Initialization */
   /* BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());  */

/* USER CODE END F4TouchController_init */
}
 801624c:	bf00      	nop
 801624e:	370c      	adds	r7, #12
 8016250:	46bd      	mov	sp, r7
 8016252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016256:	4770      	bx	lr

08016258 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_>:

bool STM32F7TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8016258:	b480      	push	{r7}
 801625a:	b085      	sub	sp, #20
 801625c:	af00      	add	r7, sp, #0
 801625e:	60f8      	str	r0, [r7, #12]
 8016260:	60b9      	str	r1, [r7, #8]
 8016262:	607a      	str	r2, [r7, #4]
        x = state.touchX[0];
        y = state.touchY[0];

        return true;
    }*/
    return false; 
 8016264:	2300      	movs	r3, #0

/* USER CODE END F4TouchController_sampleTouch  */
}
 8016266:	4618      	mov	r0, r3
 8016268:	3714      	adds	r7, #20
 801626a:	46bd      	mov	sp, r7
 801626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016270:	4770      	bx	lr
	...

08016274 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b082      	sub	sp, #8
 8016278:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801627a:	2300      	movs	r3, #0
 801627c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801627e:	f000 f87b 	bl	8016378 <BSP_SD_IsDetected>
 8016282:	4603      	mov	r3, r0
 8016284:	2b01      	cmp	r3, #1
 8016286:	d001      	beq.n	801628c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8016288:	2302      	movs	r3, #2
 801628a:	e012      	b.n	80162b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801628c:	480b      	ldr	r0, [pc, #44]	; (80162bc <BSP_SD_Init+0x48>)
 801628e:	f7f0 fc87 	bl	8006ba0 <HAL_SD_Init>
 8016292:	4603      	mov	r3, r0
 8016294:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8016296:	79fb      	ldrb	r3, [r7, #7]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d109      	bne.n	80162b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801629c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80162a0:	4806      	ldr	r0, [pc, #24]	; (80162bc <BSP_SD_Init+0x48>)
 80162a2:	f7f1 f907 	bl	80074b4 <HAL_SD_ConfigWideBusOperation>
 80162a6:	4603      	mov	r3, r0
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d001      	beq.n	80162b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80162ac:	2301      	movs	r3, #1
 80162ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80162b0:	79fb      	ldrb	r3, [r7, #7]
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	3708      	adds	r7, #8
 80162b6:	46bd      	mov	sp, r7
 80162b8:	bd80      	pop	{r7, pc}
 80162ba:	bf00      	nop
 80162bc:	200096f0 	.word	0x200096f0

080162c0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b086      	sub	sp, #24
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	60f8      	str	r0, [r7, #12]
 80162c8:	60b9      	str	r1, [r7, #8]
 80162ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80162cc:	2300      	movs	r3, #0
 80162ce:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	68ba      	ldr	r2, [r7, #8]
 80162d4:	68f9      	ldr	r1, [r7, #12]
 80162d6:	4806      	ldr	r0, [pc, #24]	; (80162f0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80162d8:	f7f0 fcf2 	bl	8006cc0 <HAL_SD_ReadBlocks_DMA>
 80162dc:	4603      	mov	r3, r0
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d001      	beq.n	80162e6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80162e2:	2301      	movs	r3, #1
 80162e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80162e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80162e8:	4618      	mov	r0, r3
 80162ea:	3718      	adds	r7, #24
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}
 80162f0:	200096f0 	.word	0x200096f0

080162f4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b086      	sub	sp, #24
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	60f8      	str	r0, [r7, #12]
 80162fc:	60b9      	str	r1, [r7, #8]
 80162fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8016300:	2300      	movs	r3, #0
 8016302:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	68ba      	ldr	r2, [r7, #8]
 8016308:	68f9      	ldr	r1, [r7, #12]
 801630a:	4806      	ldr	r0, [pc, #24]	; (8016324 <BSP_SD_WriteBlocks_DMA+0x30>)
 801630c:	f7f0 fda6 	bl	8006e5c <HAL_SD_WriteBlocks_DMA>
 8016310:	4603      	mov	r3, r0
 8016312:	2b00      	cmp	r3, #0
 8016314:	d001      	beq.n	801631a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8016316:	2301      	movs	r3, #1
 8016318:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801631a:	7dfb      	ldrb	r3, [r7, #23]
}
 801631c:	4618      	mov	r0, r3
 801631e:	3718      	adds	r7, #24
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}
 8016324:	200096f0 	.word	0x200096f0

08016328 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801632c:	4805      	ldr	r0, [pc, #20]	; (8016344 <BSP_SD_GetCardState+0x1c>)
 801632e:	f7f1 f93d 	bl	80075ac <HAL_SD_GetCardState>
 8016332:	4603      	mov	r3, r0
 8016334:	2b04      	cmp	r3, #4
 8016336:	bf14      	ite	ne
 8016338:	2301      	movne	r3, #1
 801633a:	2300      	moveq	r3, #0
 801633c:	b2db      	uxtb	r3, r3
}
 801633e:	4618      	mov	r0, r3
 8016340:	bd80      	pop	{r7, pc}
 8016342:	bf00      	nop
 8016344:	200096f0 	.word	0x200096f0

08016348 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b082      	sub	sp, #8
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8016350:	6879      	ldr	r1, [r7, #4]
 8016352:	4803      	ldr	r0, [pc, #12]	; (8016360 <BSP_SD_GetCardInfo+0x18>)
 8016354:	f7f1 f882 	bl	800745c <HAL_SD_GetCardInfo>
}
 8016358:	bf00      	nop
 801635a:	3708      	adds	r7, #8
 801635c:	46bd      	mov	sp, r7
 801635e:	bd80      	pop	{r7, pc}
 8016360:	200096f0 	.word	0x200096f0

08016364 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b082      	sub	sp, #8
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801636c:	f001 fb66 	bl	8017a3c <BSP_SD_ReadCpltCallback>
}
 8016370:	bf00      	nop
 8016372:	3708      	adds	r7, #8
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}

08016378 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b082      	sub	sp, #8
 801637c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801637e:	2301      	movs	r3, #1
 8016380:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8016382:	f000 f81d 	bl	80163c0 <BSP_PlatformIsDetected>
 8016386:	4603      	mov	r3, r0
 8016388:	2b00      	cmp	r3, #0
 801638a:	d101      	bne.n	8016390 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801638c:	2300      	movs	r3, #0
 801638e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8016390:	79fb      	ldrb	r3, [r7, #7]
 8016392:	b2db      	uxtb	r3, r3
}
 8016394:	4618      	mov	r0, r3
 8016396:	3708      	adds	r7, #8
 8016398:	46bd      	mov	sp, r7
 801639a:	bd80      	pop	{r7, pc}

0801639c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 801639c:	b580      	push	{r7, lr}
 801639e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80163a0:	4904      	ldr	r1, [pc, #16]	; (80163b4 <MX_FATFS_Init+0x18>)
 80163a2:	4805      	ldr	r0, [pc, #20]	; (80163b8 <MX_FATFS_Init+0x1c>)
 80163a4:	f7fa fce8 	bl	8010d78 <FATFS_LinkDriver>
 80163a8:	4603      	mov	r3, r0
 80163aa:	461a      	mov	r2, r3
 80163ac:	4b03      	ldr	r3, [pc, #12]	; (80163bc <MX_FATFS_Init+0x20>)
 80163ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80163b0:	bf00      	nop
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	2000a270 	.word	0x2000a270
 80163b8:	08021dcc 	.word	0x08021dcc
 80163bc:	2000a274 	.word	0x2000a274

080163c0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b082      	sub	sp, #8
 80163c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80163c6:	2301      	movs	r3, #1
 80163c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80163ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80163ce:	4806      	ldr	r0, [pc, #24]	; (80163e8 <BSP_PlatformIsDetected+0x28>)
 80163d0:	f7ec f9d0 	bl	8002774 <HAL_GPIO_ReadPin>
 80163d4:	4603      	mov	r3, r0
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d001      	beq.n	80163de <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80163da:	2300      	movs	r3, #0
 80163dc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80163de:	79fb      	ldrb	r3, [r7, #7]
}  
 80163e0:	4618      	mov	r0, r3
 80163e2:	3708      	adds	r7, #8
 80163e4:	46bd      	mov	sp, r7
 80163e6:	bd80      	pop	{r7, pc}
 80163e8:	40020800 	.word	0x40020800

080163ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80163ec:	b5b0      	push	{r4, r5, r7, lr}
 80163ee:	b086      	sub	sp, #24
 80163f0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80163f2:	f7ea f8dd 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80163f6:	f000 f841 	bl	801647c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80163fa:	f000 ff1f 	bl	801723c <_ZL12MX_GPIO_Initv>
  MX_ADC3_Init();
 80163fe:	f000 f911 	bl	8016624 <_ZL12MX_ADC3_Initv>
  MX_CRC_Init();
 8016402:	f000 f96b 	bl	80166dc <_ZL11MX_CRC_Initv>
  MX_DCMI_Init();
 8016406:	f000 f991 	bl	801672c <_ZL12MX_DCMI_Initv>
  MX_ETH_Init();
 801640a:	f000 f9c9 	bl	80167a0 <_ZL11MX_ETH_Initv>
  MX_I2C1_Init();
 801640e:	f000 fa01 	bl	8016814 <_ZL12MX_I2C1_Initv>
  MX_I2C3_Init();
 8016412:	f000 fa4d 	bl	80168b0 <_ZL12MX_I2C3_Initv>
  MX_QUADSPI_Init();
 8016416:	f000 fa99 	bl	801694c <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 801641a:	f000 fac7 	bl	80169ac <_ZL11MX_RTC_Initv>
  MX_SAI2_Init();
 801641e:	f000 fb8b 	bl	8016b38 <_ZL12MX_SAI2_Initv>
  MX_SDMMC1_SD_Init();
 8016422:	f000 fc3b 	bl	8016c9c <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX_Init();
 8016426:	f000 fc59 	bl	8016cdc <_ZL15MX_SPDIFRX_Initv>
  MX_SPI2_Init();
 801642a:	f000 fc8d 	bl	8016d48 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 801642e:	f000 fccd 	bl	8016dcc <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8016432:	f000 fd5b 	bl	8016eec <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 8016436:	f000 fde9 	bl	801700c <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 801643a:	f000 fe49 	bl	80170d0 <_ZL13MX_TIM12_Initv>
  MX_USART1_UART_Init();
 801643e:	f000 fe95 	bl	801716c <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 8016442:	f000 fec7 	bl	80171d4 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 8016446:	f7fd ff2b 	bl	80142a0 <_Z16GRAPHICS_HW_Initv>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 801644a:	f7fd ffa1 	bl	8014390 <_Z13GRAPHICS_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 801644e:	4b09      	ldr	r3, [pc, #36]	; (8016474 <main+0x88>)
 8016450:	1d3c      	adds	r4, r7, #4
 8016452:	461d      	mov	r5, r3
 8016454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016458:	682b      	ldr	r3, [r5, #0]
 801645a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801645c:	1d3b      	adds	r3, r7, #4
 801645e:	2100      	movs	r1, #0
 8016460:	4618      	mov	r0, r3
 8016462:	f7fa fce5 	bl	8010e30 <osThreadCreate>
 8016466:	4602      	mov	r2, r0
 8016468:	4b03      	ldr	r3, [pc, #12]	; (8016478 <main+0x8c>)
 801646a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 801646c:	f7fa fcbd 	bl	8010dea <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8016470:	e7fe      	b.n	8016470 <main+0x84>
 8016472:	bf00      	nop
 8016474:	08021064 	.word	0x08021064
 8016478:	20009a24 	.word	0x20009a24

0801647c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b0b4      	sub	sp, #208	; 0xd0
 8016480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8016482:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016486:	2230      	movs	r2, #48	; 0x30
 8016488:	2100      	movs	r1, #0
 801648a:	4618      	mov	r0, r3
 801648c:	f009 fd4b 	bl	801ff26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016490:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016494:	2200      	movs	r2, #0
 8016496:	601a      	str	r2, [r3, #0]
 8016498:	605a      	str	r2, [r3, #4]
 801649a:	609a      	str	r2, [r3, #8]
 801649c:	60da      	str	r2, [r3, #12]
 801649e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80164a0:	f107 0308 	add.w	r3, r7, #8
 80164a4:	2284      	movs	r2, #132	; 0x84
 80164a6:	2100      	movs	r1, #0
 80164a8:	4618      	mov	r0, r3
 80164aa:	f009 fd3c 	bl	801ff26 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80164ae:	f7ee fb4b 	bl	8004b48 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80164b2:	4b59      	ldr	r3, [pc, #356]	; (8016618 <SystemClock_Config+0x19c>)
 80164b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164b6:	4a58      	ldr	r2, [pc, #352]	; (8016618 <SystemClock_Config+0x19c>)
 80164b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80164bc:	6413      	str	r3, [r2, #64]	; 0x40
 80164be:	4b56      	ldr	r3, [pc, #344]	; (8016618 <SystemClock_Config+0x19c>)
 80164c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80164c6:	607b      	str	r3, [r7, #4]
 80164c8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80164ca:	4b54      	ldr	r3, [pc, #336]	; (801661c <SystemClock_Config+0x1a0>)
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	4a53      	ldr	r2, [pc, #332]	; (801661c <SystemClock_Config+0x1a0>)
 80164d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80164d4:	6013      	str	r3, [r2, #0]
 80164d6:	4b51      	ldr	r3, [pc, #324]	; (801661c <SystemClock_Config+0x1a0>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80164de:	603b      	str	r3, [r7, #0]
 80164e0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80164e2:	2309      	movs	r3, #9
 80164e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80164e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80164ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80164f0:	2301      	movs	r3, #1
 80164f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80164f6:	2302      	movs	r3, #2
 80164f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80164fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8016504:	2319      	movs	r3, #25
 8016506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 801650a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801650e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8016512:	2302      	movs	r3, #2
 8016514:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8016518:	2309      	movs	r3, #9
 801651a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801651e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016522:	4618      	mov	r0, r3
 8016524:	f7ee fc40 	bl	8004da8 <HAL_RCC_OscConfig>
 8016528:	4603      	mov	r3, r0
 801652a:	2b00      	cmp	r3, #0
 801652c:	bf14      	ite	ne
 801652e:	2301      	movne	r3, #1
 8016530:	2300      	moveq	r3, #0
 8016532:	b2db      	uxtb	r3, r3
 8016534:	2b00      	cmp	r3, #0
 8016536:	d001      	beq.n	801653c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8016538:	f001 f874 	bl	8017624 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 801653c:	f7ee fb14 	bl	8004b68 <HAL_PWREx_EnableOverDrive>
 8016540:	4603      	mov	r3, r0
 8016542:	2b00      	cmp	r3, #0
 8016544:	bf14      	ite	ne
 8016546:	2301      	movne	r3, #1
 8016548:	2300      	moveq	r3, #0
 801654a:	b2db      	uxtb	r3, r3
 801654c:	2b00      	cmp	r3, #0
 801654e:	d001      	beq.n	8016554 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8016550:	f001 f868 	bl	8017624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8016554:	230f      	movs	r3, #15
 8016556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801655a:	2302      	movs	r3, #2
 801655c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8016560:	2300      	movs	r3, #0
 8016562:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8016566:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801656a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801656e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8016576:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801657a:	2106      	movs	r1, #6
 801657c:	4618      	mov	r0, r3
 801657e:	f7ee fe83 	bl	8005288 <HAL_RCC_ClockConfig>
 8016582:	4603      	mov	r3, r0
 8016584:	2b00      	cmp	r3, #0
 8016586:	bf14      	ite	ne
 8016588:	2301      	movne	r3, #1
 801658a:	2300      	moveq	r3, #0
 801658c:	b2db      	uxtb	r3, r3
 801658e:	2b00      	cmp	r3, #0
 8016590:	d001      	beq.n	8016596 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8016592:	f001 f847 	bl	8017624 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8016596:	4b22      	ldr	r3, [pc, #136]	; (8016620 <SystemClock_Config+0x1a4>)
 8016598:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 801659a:	2364      	movs	r3, #100	; 0x64
 801659c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 801659e:	2302      	movs	r3, #2
 80165a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80165a2:	2302      	movs	r3, #2
 80165a4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80165a6:	2302      	movs	r3, #2
 80165a8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80165aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80165ae:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80165b0:	2305      	movs	r3, #5
 80165b2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80165b4:	2302      	movs	r3, #2
 80165b6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80165b8:	2303      	movs	r3, #3
 80165ba:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80165bc:	2301      	movs	r3, #1
 80165be:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80165c0:	2301      	movs	r3, #1
 80165c2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80165c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80165c8:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80165ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80165ce:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80165d0:	2300      	movs	r3, #0
 80165d2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80165d4:	2300      	movs	r3, #0
 80165d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80165d8:	2300      	movs	r3, #0
 80165da:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80165dc:	2300      	movs	r3, #0
 80165de:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80165e0:	2300      	movs	r3, #0
 80165e2:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80165e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80165e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80165ec:	2300      	movs	r3, #0
 80165ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80165f2:	f107 0308 	add.w	r3, r7, #8
 80165f6:	4618      	mov	r0, r3
 80165f8:	f7ef f846 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 80165fc:	4603      	mov	r3, r0
 80165fe:	2b00      	cmp	r3, #0
 8016600:	bf14      	ite	ne
 8016602:	2301      	movne	r3, #1
 8016604:	2300      	moveq	r3, #0
 8016606:	b2db      	uxtb	r3, r3
 8016608:	2b00      	cmp	r3, #0
 801660a:	d001      	beq.n	8016610 <SystemClock_Config+0x194>
  {
    Error_Handler();
 801660c:	f001 f80a 	bl	8017624 <Error_Handler>
  }
}
 8016610:	bf00      	nop
 8016612:	37d0      	adds	r7, #208	; 0xd0
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}
 8016618:	40023800 	.word	0x40023800
 801661c:	40007000 	.word	0x40007000
 8016620:	01b14868 	.word	0x01b14868

08016624 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b084      	sub	sp, #16
 8016628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801662a:	463b      	mov	r3, r7
 801662c:	2200      	movs	r2, #0
 801662e:	601a      	str	r2, [r3, #0]
 8016630:	605a      	str	r2, [r3, #4]
 8016632:	609a      	str	r2, [r3, #8]
 8016634:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8016636:	4b26      	ldr	r3, [pc, #152]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 8016638:	4a26      	ldr	r2, [pc, #152]	; (80166d4 <_ZL12MX_ADC3_Initv+0xb0>)
 801663a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801663c:	4b24      	ldr	r3, [pc, #144]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 801663e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016642:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8016644:	4b22      	ldr	r3, [pc, #136]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 8016646:	2200      	movs	r2, #0
 8016648:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801664a:	4b21      	ldr	r3, [pc, #132]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 801664c:	2200      	movs	r2, #0
 801664e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8016650:	4b1f      	ldr	r3, [pc, #124]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 8016652:	2200      	movs	r2, #0
 8016654:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8016656:	4b1e      	ldr	r3, [pc, #120]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 8016658:	2200      	movs	r2, #0
 801665a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801665e:	4b1c      	ldr	r3, [pc, #112]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 8016660:	2200      	movs	r2, #0
 8016662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8016664:	4b1a      	ldr	r3, [pc, #104]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 8016666:	4a1c      	ldr	r2, [pc, #112]	; (80166d8 <_ZL12MX_ADC3_Initv+0xb4>)
 8016668:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801666a:	4b19      	ldr	r3, [pc, #100]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 801666c:	2200      	movs	r2, #0
 801666e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8016670:	4b17      	ldr	r3, [pc, #92]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 8016672:	2201      	movs	r2, #1
 8016674:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8016676:	4b16      	ldr	r3, [pc, #88]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 8016678:	2200      	movs	r2, #0
 801667a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801667e:	4b14      	ldr	r3, [pc, #80]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 8016680:	2201      	movs	r2, #1
 8016682:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8016684:	4812      	ldr	r0, [pc, #72]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 8016686:	f7e9 ffe3 	bl	8000650 <HAL_ADC_Init>
 801668a:	4603      	mov	r3, r0
 801668c:	2b00      	cmp	r3, #0
 801668e:	bf14      	ite	ne
 8016690:	2301      	movne	r3, #1
 8016692:	2300      	moveq	r3, #0
 8016694:	b2db      	uxtb	r3, r3
 8016696:	2b00      	cmp	r3, #0
 8016698:	d001      	beq.n	801669e <_ZL12MX_ADC3_Initv+0x7a>
  {
    Error_Handler();
 801669a:	f000 ffc3 	bl	8017624 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 801669e:	2304      	movs	r3, #4
 80166a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80166a2:	2301      	movs	r3, #1
 80166a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80166a6:	2300      	movs	r3, #0
 80166a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80166aa:	463b      	mov	r3, r7
 80166ac:	4619      	mov	r1, r3
 80166ae:	4808      	ldr	r0, [pc, #32]	; (80166d0 <_ZL12MX_ADC3_Initv+0xac>)
 80166b0:	f7ea f812 	bl	80006d8 <HAL_ADC_ConfigChannel>
 80166b4:	4603      	mov	r3, r0
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	bf14      	ite	ne
 80166ba:	2301      	movne	r3, #1
 80166bc:	2300      	moveq	r3, #0
 80166be:	b2db      	uxtb	r3, r3
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d001      	beq.n	80166c8 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80166c4:	f000 ffae 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80166c8:	bf00      	nop
 80166ca:	3710      	adds	r7, #16
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bd80      	pop	{r7, pc}
 80166d0:	200093e0 	.word	0x200093e0
 80166d4:	40012200 	.word	0x40012200
 80166d8:	0f000001 	.word	0x0f000001

080166dc <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80166e0:	4b10      	ldr	r3, [pc, #64]	; (8016724 <_ZL11MX_CRC_Initv+0x48>)
 80166e2:	4a11      	ldr	r2, [pc, #68]	; (8016728 <_ZL11MX_CRC_Initv+0x4c>)
 80166e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80166e6:	4b0f      	ldr	r3, [pc, #60]	; (8016724 <_ZL11MX_CRC_Initv+0x48>)
 80166e8:	2200      	movs	r2, #0
 80166ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80166ec:	4b0d      	ldr	r3, [pc, #52]	; (8016724 <_ZL11MX_CRC_Initv+0x48>)
 80166ee:	2200      	movs	r2, #0
 80166f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80166f2:	4b0c      	ldr	r3, [pc, #48]	; (8016724 <_ZL11MX_CRC_Initv+0x48>)
 80166f4:	2200      	movs	r2, #0
 80166f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80166f8:	4b0a      	ldr	r3, [pc, #40]	; (8016724 <_ZL11MX_CRC_Initv+0x48>)
 80166fa:	2200      	movs	r2, #0
 80166fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80166fe:	4b09      	ldr	r3, [pc, #36]	; (8016724 <_ZL11MX_CRC_Initv+0x48>)
 8016700:	2201      	movs	r2, #1
 8016702:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8016704:	4807      	ldr	r0, [pc, #28]	; (8016724 <_ZL11MX_CRC_Initv+0x48>)
 8016706:	f7ea fb27 	bl	8000d58 <HAL_CRC_Init>
 801670a:	4603      	mov	r3, r0
 801670c:	2b00      	cmp	r3, #0
 801670e:	bf14      	ite	ne
 8016710:	2301      	movne	r3, #1
 8016712:	2300      	moveq	r3, #0
 8016714:	b2db      	uxtb	r3, r3
 8016716:	2b00      	cmp	r3, #0
 8016718:	d001      	beq.n	801671e <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 801671a:	f000 ff83 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 801671e:	bf00      	nop
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	20009428 	.word	0x20009428
 8016728:	40023000 	.word	0x40023000

0801672c <_ZL12MX_DCMI_Initv>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8016730:	4b19      	ldr	r3, [pc, #100]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 8016732:	4a1a      	ldr	r2, [pc, #104]	; (801679c <_ZL12MX_DCMI_Initv+0x70>)
 8016734:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8016736:	4b18      	ldr	r3, [pc, #96]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 8016738:	2200      	movs	r2, #0
 801673a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 801673c:	4b16      	ldr	r3, [pc, #88]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 801673e:	2200      	movs	r2, #0
 8016740:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8016742:	4b15      	ldr	r3, [pc, #84]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 8016744:	2200      	movs	r2, #0
 8016746:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8016748:	4b13      	ldr	r3, [pc, #76]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 801674a:	2200      	movs	r2, #0
 801674c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 801674e:	4b12      	ldr	r3, [pc, #72]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 8016750:	2200      	movs	r2, #0
 8016752:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8016754:	4b10      	ldr	r3, [pc, #64]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 8016756:	2200      	movs	r2, #0
 8016758:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 801675a:	4b0f      	ldr	r3, [pc, #60]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 801675c:	2200      	movs	r2, #0
 801675e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8016760:	4b0d      	ldr	r3, [pc, #52]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 8016762:	2200      	movs	r2, #0
 8016764:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8016766:	4b0c      	ldr	r3, [pc, #48]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 8016768:	2200      	movs	r2, #0
 801676a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 801676c:	4b0a      	ldr	r3, [pc, #40]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 801676e:	2200      	movs	r2, #0
 8016770:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8016772:	4b09      	ldr	r3, [pc, #36]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 8016774:	2200      	movs	r2, #0
 8016776:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8016778:	4807      	ldr	r0, [pc, #28]	; (8016798 <_ZL12MX_DCMI_Initv+0x6c>)
 801677a:	f7ea fbd7 	bl	8000f2c <HAL_DCMI_Init>
 801677e:	4603      	mov	r3, r0
 8016780:	2b00      	cmp	r3, #0
 8016782:	bf14      	ite	ne
 8016784:	2301      	movne	r3, #1
 8016786:	2300      	moveq	r3, #0
 8016788:	b2db      	uxtb	r3, r3
 801678a:	2b00      	cmp	r3, #0
 801678c:	d001      	beq.n	8016792 <_ZL12MX_DCMI_Initv+0x66>
  {
    Error_Handler();
 801678e:	f000 ff49 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8016792:	bf00      	nop
 8016794:	bd80      	pop	{r7, pc}
 8016796:	bf00      	nop
 8016798:	2000944c 	.word	0x2000944c
 801679c:	50050000 	.word	0x50050000

080167a0 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b082      	sub	sp, #8
 80167a4:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80167a6:	4b19      	ldr	r3, [pc, #100]	; (801680c <_ZL11MX_ETH_Initv+0x6c>)
 80167a8:	4a19      	ldr	r2, [pc, #100]	; (8016810 <_ZL11MX_ETH_Initv+0x70>)
 80167aa:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80167ac:	4b17      	ldr	r3, [pc, #92]	; (801680c <_ZL11MX_ETH_Initv+0x6c>)
 80167ae:	2201      	movs	r2, #1
 80167b0:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80167b2:	4b16      	ldr	r3, [pc, #88]	; (801680c <_ZL11MX_ETH_Initv+0x6c>)
 80167b4:	2200      	movs	r2, #0
 80167b6:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80167b8:	2300      	movs	r3, #0
 80167ba:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 80167bc:	2380      	movs	r3, #128	; 0x80
 80167be:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 80167c0:	23e1      	movs	r3, #225	; 0xe1
 80167c2:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 80167c4:	2300      	movs	r3, #0
 80167c6:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 80167c8:	2300      	movs	r3, #0
 80167ca:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 80167cc:	2300      	movs	r3, #0
 80167ce:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80167d0:	4a0e      	ldr	r2, [pc, #56]	; (801680c <_ZL11MX_ETH_Initv+0x6c>)
 80167d2:	463b      	mov	r3, r7
 80167d4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80167d6:	4b0d      	ldr	r3, [pc, #52]	; (801680c <_ZL11MX_ETH_Initv+0x6c>)
 80167d8:	2200      	movs	r2, #0
 80167da:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80167dc:	4b0b      	ldr	r3, [pc, #44]	; (801680c <_ZL11MX_ETH_Initv+0x6c>)
 80167de:	2200      	movs	r2, #0
 80167e0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80167e2:	4b0a      	ldr	r3, [pc, #40]	; (801680c <_ZL11MX_ETH_Initv+0x6c>)
 80167e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80167e8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80167ea:	4808      	ldr	r0, [pc, #32]	; (801680c <_ZL11MX_ETH_Initv+0x6c>)
 80167ec:	f7eb f8a2 	bl	8001934 <HAL_ETH_Init>
 80167f0:	4603      	mov	r3, r0
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	bf14      	ite	ne
 80167f6:	2301      	movne	r3, #1
 80167f8:	2300      	moveq	r3, #0
 80167fa:	b2db      	uxtb	r3, r3
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d001      	beq.n	8016804 <_ZL11MX_ETH_Initv+0x64>
  {
    Error_Handler();
 8016800:	f000 ff10 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8016804:	bf00      	nop
 8016806:	3708      	adds	r7, #8
 8016808:	46bd      	mov	sp, r7
 801680a:	bd80      	pop	{r7, pc}
 801680c:	2000949c 	.word	0x2000949c
 8016810:	40028000 	.word	0x40028000

08016814 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8016818:	4b22      	ldr	r3, [pc, #136]	; (80168a4 <_ZL12MX_I2C1_Initv+0x90>)
 801681a:	4a23      	ldr	r2, [pc, #140]	; (80168a8 <_ZL12MX_I2C1_Initv+0x94>)
 801681c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 801681e:	4b21      	ldr	r3, [pc, #132]	; (80168a4 <_ZL12MX_I2C1_Initv+0x90>)
 8016820:	4a22      	ldr	r2, [pc, #136]	; (80168ac <_ZL12MX_I2C1_Initv+0x98>)
 8016822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8016824:	4b1f      	ldr	r3, [pc, #124]	; (80168a4 <_ZL12MX_I2C1_Initv+0x90>)
 8016826:	2200      	movs	r2, #0
 8016828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801682a:	4b1e      	ldr	r3, [pc, #120]	; (80168a4 <_ZL12MX_I2C1_Initv+0x90>)
 801682c:	2201      	movs	r2, #1
 801682e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8016830:	4b1c      	ldr	r3, [pc, #112]	; (80168a4 <_ZL12MX_I2C1_Initv+0x90>)
 8016832:	2200      	movs	r2, #0
 8016834:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8016836:	4b1b      	ldr	r3, [pc, #108]	; (80168a4 <_ZL12MX_I2C1_Initv+0x90>)
 8016838:	2200      	movs	r2, #0
 801683a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801683c:	4b19      	ldr	r3, [pc, #100]	; (80168a4 <_ZL12MX_I2C1_Initv+0x90>)
 801683e:	2200      	movs	r2, #0
 8016840:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8016842:	4b18      	ldr	r3, [pc, #96]	; (80168a4 <_ZL12MX_I2C1_Initv+0x90>)
 8016844:	2200      	movs	r2, #0
 8016846:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8016848:	4b16      	ldr	r3, [pc, #88]	; (80168a4 <_ZL12MX_I2C1_Initv+0x90>)
 801684a:	2200      	movs	r2, #0
 801684c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801684e:	4815      	ldr	r0, [pc, #84]	; (80168a4 <_ZL12MX_I2C1_Initv+0x90>)
 8016850:	f7ed fc1c 	bl	800408c <HAL_I2C_Init>
 8016854:	4603      	mov	r3, r0
 8016856:	2b00      	cmp	r3, #0
 8016858:	bf14      	ite	ne
 801685a:	2301      	movne	r3, #1
 801685c:	2300      	moveq	r3, #0
 801685e:	b2db      	uxtb	r3, r3
 8016860:	2b00      	cmp	r3, #0
 8016862:	d001      	beq.n	8016868 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8016864:	f000 fede 	bl	8017624 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8016868:	2100      	movs	r1, #0
 801686a:	480e      	ldr	r0, [pc, #56]	; (80168a4 <_ZL12MX_I2C1_Initv+0x90>)
 801686c:	f7ed fc9e 	bl	80041ac <HAL_I2CEx_ConfigAnalogFilter>
 8016870:	4603      	mov	r3, r0
 8016872:	2b00      	cmp	r3, #0
 8016874:	bf14      	ite	ne
 8016876:	2301      	movne	r3, #1
 8016878:	2300      	moveq	r3, #0
 801687a:	b2db      	uxtb	r3, r3
 801687c:	2b00      	cmp	r3, #0
 801687e:	d001      	beq.n	8016884 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8016880:	f000 fed0 	bl	8017624 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8016884:	2100      	movs	r1, #0
 8016886:	4807      	ldr	r0, [pc, #28]	; (80168a4 <_ZL12MX_I2C1_Initv+0x90>)
 8016888:	f7ed fcdb 	bl	8004242 <HAL_I2CEx_ConfigDigitalFilter>
 801688c:	4603      	mov	r3, r0
 801688e:	2b00      	cmp	r3, #0
 8016890:	bf14      	ite	ne
 8016892:	2301      	movne	r3, #1
 8016894:	2300      	moveq	r3, #0
 8016896:	b2db      	uxtb	r3, r3
 8016898:	2b00      	cmp	r3, #0
 801689a:	d001      	beq.n	80168a0 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 801689c:	f000 fec2 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80168a0:	bf00      	nop
 80168a2:	bd80      	pop	{r7, pc}
 80168a4:	200094e4 	.word	0x200094e4
 80168a8:	40005400 	.word	0x40005400
 80168ac:	00c0eaff 	.word	0x00c0eaff

080168b0 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80168b4:	4b22      	ldr	r3, [pc, #136]	; (8016940 <_ZL12MX_I2C3_Initv+0x90>)
 80168b6:	4a23      	ldr	r2, [pc, #140]	; (8016944 <_ZL12MX_I2C3_Initv+0x94>)
 80168b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80168ba:	4b21      	ldr	r3, [pc, #132]	; (8016940 <_ZL12MX_I2C3_Initv+0x90>)
 80168bc:	4a22      	ldr	r2, [pc, #136]	; (8016948 <_ZL12MX_I2C3_Initv+0x98>)
 80168be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80168c0:	4b1f      	ldr	r3, [pc, #124]	; (8016940 <_ZL12MX_I2C3_Initv+0x90>)
 80168c2:	2200      	movs	r2, #0
 80168c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80168c6:	4b1e      	ldr	r3, [pc, #120]	; (8016940 <_ZL12MX_I2C3_Initv+0x90>)
 80168c8:	2201      	movs	r2, #1
 80168ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80168cc:	4b1c      	ldr	r3, [pc, #112]	; (8016940 <_ZL12MX_I2C3_Initv+0x90>)
 80168ce:	2200      	movs	r2, #0
 80168d0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80168d2:	4b1b      	ldr	r3, [pc, #108]	; (8016940 <_ZL12MX_I2C3_Initv+0x90>)
 80168d4:	2200      	movs	r2, #0
 80168d6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80168d8:	4b19      	ldr	r3, [pc, #100]	; (8016940 <_ZL12MX_I2C3_Initv+0x90>)
 80168da:	2200      	movs	r2, #0
 80168dc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80168de:	4b18      	ldr	r3, [pc, #96]	; (8016940 <_ZL12MX_I2C3_Initv+0x90>)
 80168e0:	2200      	movs	r2, #0
 80168e2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80168e4:	4b16      	ldr	r3, [pc, #88]	; (8016940 <_ZL12MX_I2C3_Initv+0x90>)
 80168e6:	2200      	movs	r2, #0
 80168e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80168ea:	4815      	ldr	r0, [pc, #84]	; (8016940 <_ZL12MX_I2C3_Initv+0x90>)
 80168ec:	f7ed fbce 	bl	800408c <HAL_I2C_Init>
 80168f0:	4603      	mov	r3, r0
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	bf14      	ite	ne
 80168f6:	2301      	movne	r3, #1
 80168f8:	2300      	moveq	r3, #0
 80168fa:	b2db      	uxtb	r3, r3
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d001      	beq.n	8016904 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8016900:	f000 fe90 	bl	8017624 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8016904:	2100      	movs	r1, #0
 8016906:	480e      	ldr	r0, [pc, #56]	; (8016940 <_ZL12MX_I2C3_Initv+0x90>)
 8016908:	f7ed fc50 	bl	80041ac <HAL_I2CEx_ConfigAnalogFilter>
 801690c:	4603      	mov	r3, r0
 801690e:	2b00      	cmp	r3, #0
 8016910:	bf14      	ite	ne
 8016912:	2301      	movne	r3, #1
 8016914:	2300      	moveq	r3, #0
 8016916:	b2db      	uxtb	r3, r3
 8016918:	2b00      	cmp	r3, #0
 801691a:	d001      	beq.n	8016920 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 801691c:	f000 fe82 	bl	8017624 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8016920:	2100      	movs	r1, #0
 8016922:	4807      	ldr	r0, [pc, #28]	; (8016940 <_ZL12MX_I2C3_Initv+0x90>)
 8016924:	f7ed fc8d 	bl	8004242 <HAL_I2CEx_ConfigDigitalFilter>
 8016928:	4603      	mov	r3, r0
 801692a:	2b00      	cmp	r3, #0
 801692c:	bf14      	ite	ne
 801692e:	2301      	movne	r3, #1
 8016930:	2300      	moveq	r3, #0
 8016932:	b2db      	uxtb	r3, r3
 8016934:	2b00      	cmp	r3, #0
 8016936:	d001      	beq.n	801693c <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8016938:	f000 fe74 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 801693c:	bf00      	nop
 801693e:	bd80      	pop	{r7, pc}
 8016940:	20009530 	.word	0x20009530
 8016944:	40005c00 	.word	0x40005c00
 8016948:	00c0eaff 	.word	0x00c0eaff

0801694c <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8016950:	4b14      	ldr	r3, [pc, #80]	; (80169a4 <_ZL15MX_QUADSPI_Initv+0x58>)
 8016952:	4a15      	ldr	r2, [pc, #84]	; (80169a8 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8016954:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8016956:	4b13      	ldr	r3, [pc, #76]	; (80169a4 <_ZL15MX_QUADSPI_Initv+0x58>)
 8016958:	22ff      	movs	r2, #255	; 0xff
 801695a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 801695c:	4b11      	ldr	r3, [pc, #68]	; (80169a4 <_ZL15MX_QUADSPI_Initv+0x58>)
 801695e:	2201      	movs	r2, #1
 8016960:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8016962:	4b10      	ldr	r3, [pc, #64]	; (80169a4 <_ZL15MX_QUADSPI_Initv+0x58>)
 8016964:	2200      	movs	r2, #0
 8016966:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8016968:	4b0e      	ldr	r3, [pc, #56]	; (80169a4 <_ZL15MX_QUADSPI_Initv+0x58>)
 801696a:	2201      	movs	r2, #1
 801696c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 801696e:	4b0d      	ldr	r3, [pc, #52]	; (80169a4 <_ZL15MX_QUADSPI_Initv+0x58>)
 8016970:	2200      	movs	r2, #0
 8016972:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8016974:	4b0b      	ldr	r3, [pc, #44]	; (80169a4 <_ZL15MX_QUADSPI_Initv+0x58>)
 8016976:	2200      	movs	r2, #0
 8016978:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 801697a:	4b0a      	ldr	r3, [pc, #40]	; (80169a4 <_ZL15MX_QUADSPI_Initv+0x58>)
 801697c:	2200      	movs	r2, #0
 801697e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8016980:	4b08      	ldr	r3, [pc, #32]	; (80169a4 <_ZL15MX_QUADSPI_Initv+0x58>)
 8016982:	2200      	movs	r2, #0
 8016984:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8016986:	4807      	ldr	r0, [pc, #28]	; (80169a4 <_ZL15MX_QUADSPI_Initv+0x58>)
 8016988:	f7ee f93e 	bl	8004c08 <HAL_QSPI_Init>
 801698c:	4603      	mov	r3, r0
 801698e:	2b00      	cmp	r3, #0
 8016990:	bf14      	ite	ne
 8016992:	2301      	movne	r3, #1
 8016994:	2300      	moveq	r3, #0
 8016996:	b2db      	uxtb	r3, r3
 8016998:	2b00      	cmp	r3, #0
 801699a:	d001      	beq.n	80169a0 <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 801699c:	f000 fe42 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80169a0:	bf00      	nop
 80169a2:	bd80      	pop	{r7, pc}
 80169a4:	2000957c 	.word	0x2000957c
 80169a8:	a0001000 	.word	0xa0001000

080169ac <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b092      	sub	sp, #72	; 0x48
 80169b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80169b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80169b6:	2200      	movs	r2, #0
 80169b8:	601a      	str	r2, [r3, #0]
 80169ba:	605a      	str	r2, [r3, #4]
 80169bc:	609a      	str	r2, [r3, #8]
 80169be:	60da      	str	r2, [r3, #12]
 80169c0:	611a      	str	r2, [r3, #16]
 80169c2:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80169c4:	2300      	movs	r3, #0
 80169c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80169c8:	463b      	mov	r3, r7
 80169ca:	222c      	movs	r2, #44	; 0x2c
 80169cc:	2100      	movs	r1, #0
 80169ce:	4618      	mov	r0, r3
 80169d0:	f009 faa9 	bl	801ff26 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80169d4:	4b56      	ldr	r3, [pc, #344]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 80169d6:	4a57      	ldr	r2, [pc, #348]	; (8016b34 <_ZL11MX_RTC_Initv+0x188>)
 80169d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80169da:	4b55      	ldr	r3, [pc, #340]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 80169dc:	2200      	movs	r2, #0
 80169de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80169e0:	4b53      	ldr	r3, [pc, #332]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 80169e2:	227f      	movs	r2, #127	; 0x7f
 80169e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80169e6:	4b52      	ldr	r3, [pc, #328]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 80169e8:	22ff      	movs	r2, #255	; 0xff
 80169ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80169ec:	4b50      	ldr	r3, [pc, #320]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 80169ee:	2200      	movs	r2, #0
 80169f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80169f2:	4b4f      	ldr	r3, [pc, #316]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 80169f4:	2200      	movs	r2, #0
 80169f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80169f8:	4b4d      	ldr	r3, [pc, #308]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 80169fa:	2200      	movs	r2, #0
 80169fc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80169fe:	484c      	ldr	r0, [pc, #304]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 8016a00:	f7ef fb64 	bl	80060cc <HAL_RTC_Init>
 8016a04:	4603      	mov	r3, r0
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	bf14      	ite	ne
 8016a0a:	2301      	movne	r3, #1
 8016a0c:	2300      	moveq	r3, #0
 8016a0e:	b2db      	uxtb	r3, r3
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d001      	beq.n	8016a18 <_ZL11MX_RTC_Initv+0x6c>
  {
    Error_Handler();
 8016a14:	f000 fe06 	bl	8017624 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8016a18:	2300      	movs	r3, #0
 8016a1a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8016a24:	2300      	movs	r3, #0
 8016a26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8016a32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016a36:	2201      	movs	r2, #1
 8016a38:	4619      	mov	r1, r3
 8016a3a:	483d      	ldr	r0, [pc, #244]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 8016a3c:	f7ef fbc2 	bl	80061c4 <HAL_RTC_SetTime>
 8016a40:	4603      	mov	r3, r0
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	bf14      	ite	ne
 8016a46:	2301      	movne	r3, #1
 8016a48:	2300      	moveq	r3, #0
 8016a4a:	b2db      	uxtb	r3, r3
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d001      	beq.n	8016a54 <_ZL11MX_RTC_Initv+0xa8>
  {
    Error_Handler();
 8016a50:	f000 fde8 	bl	8017624 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8016a54:	2301      	movs	r3, #1
 8016a56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8016a5a:	2301      	movs	r3, #1
 8016a5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8016a60:	2301      	movs	r3, #1
 8016a62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8016a66:	2300      	movs	r3, #0
 8016a68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8016a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a70:	2201      	movs	r2, #1
 8016a72:	4619      	mov	r1, r3
 8016a74:	482e      	ldr	r0, [pc, #184]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 8016a76:	f7ef fc63 	bl	8006340 <HAL_RTC_SetDate>
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	bf14      	ite	ne
 8016a80:	2301      	movne	r3, #1
 8016a82:	2300      	moveq	r3, #0
 8016a84:	b2db      	uxtb	r3, r3
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d001      	beq.n	8016a8e <_ZL11MX_RTC_Initv+0xe2>
  {
    Error_Handler();
 8016a8a:	f000 fdcb 	bl	8017624 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8016a8e:	2300      	movs	r3, #0
 8016a90:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8016a92:	2300      	movs	r3, #0
 8016a94:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8016a96:	2300      	movs	r3, #0
 8016a98:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8016ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016abc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8016abe:	463b      	mov	r3, r7
 8016ac0:	2201      	movs	r2, #1
 8016ac2:	4619      	mov	r1, r3
 8016ac4:	481a      	ldr	r0, [pc, #104]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 8016ac6:	f7ef fce3 	bl	8006490 <HAL_RTC_SetAlarm>
 8016aca:	4603      	mov	r3, r0
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	bf14      	ite	ne
 8016ad0:	2301      	movne	r3, #1
 8016ad2:	2300      	moveq	r3, #0
 8016ad4:	b2db      	uxtb	r3, r3
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d001      	beq.n	8016ade <_ZL11MX_RTC_Initv+0x132>
  {
    Error_Handler();
 8016ada:	f000 fda3 	bl	8017624 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8016ade:	2301      	movs	r3, #1
 8016ae0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8016ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8016aea:	463b      	mov	r3, r7
 8016aec:	2201      	movs	r2, #1
 8016aee:	4619      	mov	r1, r3
 8016af0:	480f      	ldr	r0, [pc, #60]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 8016af2:	f7ef fccd 	bl	8006490 <HAL_RTC_SetAlarm>
 8016af6:	4603      	mov	r3, r0
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	bf14      	ite	ne
 8016afc:	2301      	movne	r3, #1
 8016afe:	2300      	moveq	r3, #0
 8016b00:	b2db      	uxtb	r3, r3
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d001      	beq.n	8016b0a <_ZL11MX_RTC_Initv+0x15e>
  {
    Error_Handler();
 8016b06:	f000 fd8d 	bl	8017624 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8016b0a:	2202      	movs	r2, #2
 8016b0c:	2100      	movs	r1, #0
 8016b0e:	4808      	ldr	r0, [pc, #32]	; (8016b30 <_ZL11MX_RTC_Initv+0x184>)
 8016b10:	f7ef fe48 	bl	80067a4 <HAL_RTCEx_SetTimeStamp>
 8016b14:	4603      	mov	r3, r0
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	bf14      	ite	ne
 8016b1a:	2301      	movne	r3, #1
 8016b1c:	2300      	moveq	r3, #0
 8016b1e:	b2db      	uxtb	r3, r3
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d001      	beq.n	8016b28 <_ZL11MX_RTC_Initv+0x17c>
  {
    Error_Handler();
 8016b24:	f000 fd7e 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8016b28:	bf00      	nop
 8016b2a:	3748      	adds	r7, #72	; 0x48
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}
 8016b30:	200095c8 	.word	0x200095c8
 8016b34:	40002800 	.word	0x40002800

08016b38 <_ZL12MX_SAI2_Initv>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8016b3c:	4b52      	ldr	r3, [pc, #328]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b3e:	4a53      	ldr	r2, [pc, #332]	; (8016c8c <_ZL12MX_SAI2_Initv+0x154>)
 8016b40:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8016b42:	4b51      	ldr	r3, [pc, #324]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b44:	2200      	movs	r2, #0
 8016b46:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8016b48:	4b4f      	ldr	r3, [pc, #316]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8016b4e:	4b4e      	ldr	r3, [pc, #312]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b50:	2240      	movs	r2, #64	; 0x40
 8016b52:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8016b54:	4b4c      	ldr	r3, [pc, #304]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b56:	2200      	movs	r2, #0
 8016b58:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8016b5a:	4b4b      	ldr	r3, [pc, #300]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8016b60:	4b49      	ldr	r3, [pc, #292]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b62:	2200      	movs	r2, #0
 8016b64:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8016b66:	4b48      	ldr	r3, [pc, #288]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b68:	2200      	movs	r2, #0
 8016b6a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8016b6c:	4b46      	ldr	r3, [pc, #280]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b6e:	2200      	movs	r2, #0
 8016b70:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8016b72:	4b45      	ldr	r3, [pc, #276]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b74:	2200      	movs	r2, #0
 8016b76:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8016b78:	4b43      	ldr	r3, [pc, #268]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b7a:	4a45      	ldr	r2, [pc, #276]	; (8016c90 <_ZL12MX_SAI2_Initv+0x158>)
 8016b7c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8016b7e:	4b42      	ldr	r3, [pc, #264]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b80:	2200      	movs	r2, #0
 8016b82:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8016b84:	4b40      	ldr	r3, [pc, #256]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b86:	2200      	movs	r2, #0
 8016b88:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8016b8a:	4b3f      	ldr	r3, [pc, #252]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8016b90:	4b3d      	ldr	r3, [pc, #244]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b92:	2200      	movs	r2, #0
 8016b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8016b96:	4b3c      	ldr	r3, [pc, #240]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b98:	2208      	movs	r2, #8
 8016b9a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8016b9c:	4b3a      	ldr	r3, [pc, #232]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016b9e:	2201      	movs	r2, #1
 8016ba0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8016ba2:	4b39      	ldr	r3, [pc, #228]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8016ba8:	4b37      	ldr	r3, [pc, #220]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016baa:	2200      	movs	r2, #0
 8016bac:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8016bae:	4b36      	ldr	r3, [pc, #216]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016bb0:	2200      	movs	r2, #0
 8016bb2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8016bb4:	4b34      	ldr	r3, [pc, #208]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016bb6:	2200      	movs	r2, #0
 8016bb8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8016bba:	4b33      	ldr	r3, [pc, #204]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8016bc0:	4b31      	ldr	r3, [pc, #196]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016bc2:	2201      	movs	r2, #1
 8016bc4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8016bc6:	4b30      	ldr	r3, [pc, #192]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016bc8:	2200      	movs	r2, #0
 8016bca:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8016bcc:	482e      	ldr	r0, [pc, #184]	; (8016c88 <_ZL12MX_SAI2_Initv+0x150>)
 8016bce:	f7ef fe3f 	bl	8006850 <HAL_SAI_Init>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	bf14      	ite	ne
 8016bd8:	2301      	movne	r3, #1
 8016bda:	2300      	moveq	r3, #0
 8016bdc:	b2db      	uxtb	r3, r3
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d001      	beq.n	8016be6 <_ZL12MX_SAI2_Initv+0xae>
  {
    Error_Handler();
 8016be2:	f000 fd1f 	bl	8017624 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8016be6:	4b2b      	ldr	r3, [pc, #172]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016be8:	4a2b      	ldr	r2, [pc, #172]	; (8016c98 <_ZL12MX_SAI2_Initv+0x160>)
 8016bea:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8016bec:	4b29      	ldr	r3, [pc, #164]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016bee:	2200      	movs	r2, #0
 8016bf0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8016bf2:	4b28      	ldr	r3, [pc, #160]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016bf4:	2203      	movs	r2, #3
 8016bf6:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8016bf8:	4b26      	ldr	r3, [pc, #152]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016bfa:	2240      	movs	r2, #64	; 0x40
 8016bfc:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8016bfe:	4b25      	ldr	r3, [pc, #148]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c00:	2200      	movs	r2, #0
 8016c02:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8016c04:	4b23      	ldr	r3, [pc, #140]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c06:	2200      	movs	r2, #0
 8016c08:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8016c0a:	4b22      	ldr	r3, [pc, #136]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c0c:	2201      	movs	r2, #1
 8016c0e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8016c10:	4b20      	ldr	r3, [pc, #128]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c12:	2200      	movs	r2, #0
 8016c14:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8016c16:	4b1f      	ldr	r3, [pc, #124]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c18:	2200      	movs	r2, #0
 8016c1a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8016c1c:	4b1d      	ldr	r3, [pc, #116]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c1e:	2200      	movs	r2, #0
 8016c20:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8016c22:	4b1c      	ldr	r3, [pc, #112]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c24:	2200      	movs	r2, #0
 8016c26:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8016c28:	4b1a      	ldr	r3, [pc, #104]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8016c2e:	4b19      	ldr	r3, [pc, #100]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c30:	2200      	movs	r2, #0
 8016c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 8016c34:	4b17      	ldr	r3, [pc, #92]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c36:	2218      	movs	r2, #24
 8016c38:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8016c3a:	4b16      	ldr	r3, [pc, #88]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c3c:	2201      	movs	r2, #1
 8016c3e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8016c40:	4b14      	ldr	r3, [pc, #80]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c42:	2200      	movs	r2, #0
 8016c44:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8016c46:	4b13      	ldr	r3, [pc, #76]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c48:	2200      	movs	r2, #0
 8016c4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8016c4c:	4b11      	ldr	r3, [pc, #68]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c4e:	2200      	movs	r2, #0
 8016c50:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8016c52:	4b10      	ldr	r3, [pc, #64]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c54:	2200      	movs	r2, #0
 8016c56:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8016c58:	4b0e      	ldr	r3, [pc, #56]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8016c5e:	4b0d      	ldr	r3, [pc, #52]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c60:	2201      	movs	r2, #1
 8016c62:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8016c64:	4b0b      	ldr	r3, [pc, #44]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c66:	2200      	movs	r2, #0
 8016c68:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8016c6a:	480a      	ldr	r0, [pc, #40]	; (8016c94 <_ZL12MX_SAI2_Initv+0x15c>)
 8016c6c:	f7ef fdf0 	bl	8006850 <HAL_SAI_Init>
 8016c70:	4603      	mov	r3, r0
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	bf14      	ite	ne
 8016c76:	2301      	movne	r3, #1
 8016c78:	2300      	moveq	r3, #0
 8016c7a:	b2db      	uxtb	r3, r3
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d001      	beq.n	8016c84 <_ZL12MX_SAI2_Initv+0x14c>
  {
    Error_Handler();
 8016c80:	f000 fcd0 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8016c84:	bf00      	nop
 8016c86:	bd80      	pop	{r7, pc}
 8016c88:	200095e8 	.word	0x200095e8
 8016c8c:	40015c04 	.word	0x40015c04
 8016c90:	0002ee00 	.word	0x0002ee00
 8016c94:	2000966c 	.word	0x2000966c
 8016c98:	40015c24 	.word	0x40015c24

08016c9c <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8016c9c:	b480      	push	{r7}
 8016c9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8016ca0:	4b0c      	ldr	r3, [pc, #48]	; (8016cd4 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016ca2:	4a0d      	ldr	r2, [pc, #52]	; (8016cd8 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 8016ca4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8016ca6:	4b0b      	ldr	r3, [pc, #44]	; (8016cd4 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016ca8:	2200      	movs	r2, #0
 8016caa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8016cac:	4b09      	ldr	r3, [pc, #36]	; (8016cd4 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016cae:	2200      	movs	r2, #0
 8016cb0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8016cb2:	4b08      	ldr	r3, [pc, #32]	; (8016cd4 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8016cb8:	4b06      	ldr	r3, [pc, #24]	; (8016cd4 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016cba:	2200      	movs	r2, #0
 8016cbc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8016cbe:	4b05      	ldr	r3, [pc, #20]	; (8016cd4 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8016cc4:	4b03      	ldr	r3, [pc, #12]	; (8016cd4 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8016cca:	bf00      	nop
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd2:	4770      	bx	lr
 8016cd4:	200096f0 	.word	0x200096f0
 8016cd8:	40012c00 	.word	0x40012c00

08016cdc <_ZL15MX_SPDIFRX_Initv>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8016ce0:	4b18      	ldr	r3, [pc, #96]	; (8016d44 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016ce2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8016ce6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8016ce8:	4b16      	ldr	r3, [pc, #88]	; (8016d44 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016cea:	2200      	movs	r2, #0
 8016cec:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8016cee:	4b15      	ldr	r3, [pc, #84]	; (8016d44 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8016cf4:	4b13      	ldr	r3, [pc, #76]	; (8016d44 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8016cfa:	4b12      	ldr	r3, [pc, #72]	; (8016d44 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8016d00:	4b10      	ldr	r3, [pc, #64]	; (8016d44 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016d02:	2200      	movs	r2, #0
 8016d04:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8016d06:	4b0f      	ldr	r3, [pc, #60]	; (8016d44 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016d08:	2200      	movs	r2, #0
 8016d0a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8016d0c:	4b0d      	ldr	r3, [pc, #52]	; (8016d44 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016d0e:	2200      	movs	r2, #0
 8016d10:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8016d12:	4b0c      	ldr	r3, [pc, #48]	; (8016d44 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016d14:	2200      	movs	r2, #0
 8016d16:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8016d18:	4b0a      	ldr	r3, [pc, #40]	; (8016d44 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8016d1e:	4b09      	ldr	r3, [pc, #36]	; (8016d44 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016d20:	2200      	movs	r2, #0
 8016d22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8016d24:	4807      	ldr	r0, [pc, #28]	; (8016d44 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016d26:	f7f1 f87b 	bl	8007e20 <HAL_SPDIFRX_Init>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	bf14      	ite	ne
 8016d30:	2301      	movne	r3, #1
 8016d32:	2300      	moveq	r3, #0
 8016d34:	b2db      	uxtb	r3, r3
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d001      	beq.n	8016d3e <_ZL15MX_SPDIFRX_Initv+0x62>
  {
    Error_Handler();
 8016d3a:	f000 fc73 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8016d3e:	bf00      	nop
 8016d40:	bd80      	pop	{r7, pc}
 8016d42:	bf00      	nop
 8016d44:	20009774 	.word	0x20009774

08016d48 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8016d4c:	4b1d      	ldr	r3, [pc, #116]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d4e:	4a1e      	ldr	r2, [pc, #120]	; (8016dc8 <_ZL12MX_SPI2_Initv+0x80>)
 8016d50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8016d52:	4b1c      	ldr	r3, [pc, #112]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016d58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8016d5a:	4b1a      	ldr	r3, [pc, #104]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8016d60:	4b18      	ldr	r3, [pc, #96]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d62:	f44f 7240 	mov.w	r2, #768	; 0x300
 8016d66:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016d68:	4b16      	ldr	r3, [pc, #88]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8016d6e:	4b15      	ldr	r3, [pc, #84]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d70:	2200      	movs	r2, #0
 8016d72:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8016d74:	4b13      	ldr	r3, [pc, #76]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d7a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016d7c:	4b11      	ldr	r3, [pc, #68]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d7e:	2200      	movs	r2, #0
 8016d80:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016d82:	4b10      	ldr	r3, [pc, #64]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d84:	2200      	movs	r2, #0
 8016d86:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8016d88:	4b0e      	ldr	r3, [pc, #56]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016d8e:	4b0d      	ldr	r3, [pc, #52]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d90:	2200      	movs	r2, #0
 8016d92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8016d94:	4b0b      	ldr	r3, [pc, #44]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d96:	2207      	movs	r2, #7
 8016d98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8016d9a:	4b0a      	ldr	r3, [pc, #40]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8016da0:	4b08      	ldr	r3, [pc, #32]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016da2:	2208      	movs	r2, #8
 8016da4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8016da6:	4807      	ldr	r0, [pc, #28]	; (8016dc4 <_ZL12MX_SPI2_Initv+0x7c>)
 8016da8:	f7f1 f896 	bl	8007ed8 <HAL_SPI_Init>
 8016dac:	4603      	mov	r3, r0
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	bf14      	ite	ne
 8016db2:	2301      	movne	r3, #1
 8016db4:	2300      	moveq	r3, #0
 8016db6:	b2db      	uxtb	r3, r3
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d001      	beq.n	8016dc0 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8016dbc:	f000 fc32 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8016dc0:	bf00      	nop
 8016dc2:	bd80      	pop	{r7, pc}
 8016dc4:	200097c0 	.word	0x200097c0
 8016dc8:	40003800 	.word	0x40003800

08016dcc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b08e      	sub	sp, #56	; 0x38
 8016dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	601a      	str	r2, [r3, #0]
 8016dda:	605a      	str	r2, [r3, #4]
 8016ddc:	609a      	str	r2, [r3, #8]
 8016dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016de0:	f107 031c 	add.w	r3, r7, #28
 8016de4:	2200      	movs	r2, #0
 8016de6:	601a      	str	r2, [r3, #0]
 8016de8:	605a      	str	r2, [r3, #4]
 8016dea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016dec:	463b      	mov	r3, r7
 8016dee:	2200      	movs	r2, #0
 8016df0:	601a      	str	r2, [r3, #0]
 8016df2:	605a      	str	r2, [r3, #4]
 8016df4:	609a      	str	r2, [r3, #8]
 8016df6:	60da      	str	r2, [r3, #12]
 8016df8:	611a      	str	r2, [r3, #16]
 8016dfa:	615a      	str	r2, [r3, #20]
 8016dfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8016dfe:	4b39      	ldr	r3, [pc, #228]	; (8016ee4 <_ZL12MX_TIM3_Initv+0x118>)
 8016e00:	4a39      	ldr	r2, [pc, #228]	; (8016ee8 <_ZL12MX_TIM3_Initv+0x11c>)
 8016e02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8016e04:	4b37      	ldr	r3, [pc, #220]	; (8016ee4 <_ZL12MX_TIM3_Initv+0x118>)
 8016e06:	2200      	movs	r2, #0
 8016e08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016e0a:	4b36      	ldr	r3, [pc, #216]	; (8016ee4 <_ZL12MX_TIM3_Initv+0x118>)
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8016e10:	4b34      	ldr	r3, [pc, #208]	; (8016ee4 <_ZL12MX_TIM3_Initv+0x118>)
 8016e12:	2200      	movs	r2, #0
 8016e14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016e16:	4b33      	ldr	r3, [pc, #204]	; (8016ee4 <_ZL12MX_TIM3_Initv+0x118>)
 8016e18:	2200      	movs	r2, #0
 8016e1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016e1c:	4b31      	ldr	r3, [pc, #196]	; (8016ee4 <_ZL12MX_TIM3_Initv+0x118>)
 8016e1e:	2200      	movs	r2, #0
 8016e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8016e22:	4830      	ldr	r0, [pc, #192]	; (8016ee4 <_ZL12MX_TIM3_Initv+0x118>)
 8016e24:	f7f1 f8ea 	bl	8007ffc <HAL_TIM_Base_Init>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	bf14      	ite	ne
 8016e2e:	2301      	movne	r3, #1
 8016e30:	2300      	moveq	r3, #0
 8016e32:	b2db      	uxtb	r3, r3
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d001      	beq.n	8016e3c <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8016e38:	f000 fbf4 	bl	8017624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016e40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8016e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016e46:	4619      	mov	r1, r3
 8016e48:	4826      	ldr	r0, [pc, #152]	; (8016ee4 <_ZL12MX_TIM3_Initv+0x118>)
 8016e4a:	f7f1 fbb9 	bl	80085c0 <HAL_TIM_ConfigClockSource>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	bf14      	ite	ne
 8016e54:	2301      	movne	r3, #1
 8016e56:	2300      	moveq	r3, #0
 8016e58:	b2db      	uxtb	r3, r3
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d001      	beq.n	8016e62 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8016e5e:	f000 fbe1 	bl	8017624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8016e62:	4820      	ldr	r0, [pc, #128]	; (8016ee4 <_ZL12MX_TIM3_Initv+0x118>)
 8016e64:	f7f1 f94a 	bl	80080fc <HAL_TIM_PWM_Init>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	bf14      	ite	ne
 8016e6e:	2301      	movne	r3, #1
 8016e70:	2300      	moveq	r3, #0
 8016e72:	b2db      	uxtb	r3, r3
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d001      	beq.n	8016e7c <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8016e78:	f000 fbd4 	bl	8017624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016e80:	2300      	movs	r3, #0
 8016e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8016e84:	f107 031c 	add.w	r3, r7, #28
 8016e88:	4619      	mov	r1, r3
 8016e8a:	4816      	ldr	r0, [pc, #88]	; (8016ee4 <_ZL12MX_TIM3_Initv+0x118>)
 8016e8c:	f7f2 f812 	bl	8008eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8016e90:	4603      	mov	r3, r0
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	bf14      	ite	ne
 8016e96:	2301      	movne	r3, #1
 8016e98:	2300      	moveq	r3, #0
 8016e9a:	b2db      	uxtb	r3, r3
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d001      	beq.n	8016ea4 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8016ea0:	f000 fbc0 	bl	8017624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016ea4:	2360      	movs	r3, #96	; 0x60
 8016ea6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016eac:	2300      	movs	r3, #0
 8016eae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016eb4:	463b      	mov	r3, r7
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	4619      	mov	r1, r3
 8016eba:	480a      	ldr	r0, [pc, #40]	; (8016ee4 <_ZL12MX_TIM3_Initv+0x118>)
 8016ebc:	f7f1 fa68 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	bf14      	ite	ne
 8016ec6:	2301      	movne	r3, #1
 8016ec8:	2300      	moveq	r3, #0
 8016eca:	b2db      	uxtb	r3, r3
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d001      	beq.n	8016ed4 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8016ed0:	f000 fba8 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8016ed4:	4803      	ldr	r0, [pc, #12]	; (8016ee4 <_ZL12MX_TIM3_Initv+0x118>)
 8016ed6:	f001 fa5b 	bl	8018390 <HAL_TIM_MspPostInit>

}
 8016eda:	bf00      	nop
 8016edc:	3738      	adds	r7, #56	; 0x38
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bd80      	pop	{r7, pc}
 8016ee2:	bf00      	nop
 8016ee4:	20009824 	.word	0x20009824
 8016ee8:	40000400 	.word	0x40000400

08016eec <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b08e      	sub	sp, #56	; 0x38
 8016ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	601a      	str	r2, [r3, #0]
 8016efa:	605a      	str	r2, [r3, #4]
 8016efc:	609a      	str	r2, [r3, #8]
 8016efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016f00:	f107 031c 	add.w	r3, r7, #28
 8016f04:	2200      	movs	r2, #0
 8016f06:	601a      	str	r2, [r3, #0]
 8016f08:	605a      	str	r2, [r3, #4]
 8016f0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016f0c:	463b      	mov	r3, r7
 8016f0e:	2200      	movs	r2, #0
 8016f10:	601a      	str	r2, [r3, #0]
 8016f12:	605a      	str	r2, [r3, #4]
 8016f14:	609a      	str	r2, [r3, #8]
 8016f16:	60da      	str	r2, [r3, #12]
 8016f18:	611a      	str	r2, [r3, #16]
 8016f1a:	615a      	str	r2, [r3, #20]
 8016f1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8016f1e:	4b39      	ldr	r3, [pc, #228]	; (8017004 <_ZL12MX_TIM5_Initv+0x118>)
 8016f20:	4a39      	ldr	r2, [pc, #228]	; (8017008 <_ZL12MX_TIM5_Initv+0x11c>)
 8016f22:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8016f24:	4b37      	ldr	r3, [pc, #220]	; (8017004 <_ZL12MX_TIM5_Initv+0x118>)
 8016f26:	2200      	movs	r2, #0
 8016f28:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016f2a:	4b36      	ldr	r3, [pc, #216]	; (8017004 <_ZL12MX_TIM5_Initv+0x118>)
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8016f30:	4b34      	ldr	r3, [pc, #208]	; (8017004 <_ZL12MX_TIM5_Initv+0x118>)
 8016f32:	2200      	movs	r2, #0
 8016f34:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016f36:	4b33      	ldr	r3, [pc, #204]	; (8017004 <_ZL12MX_TIM5_Initv+0x118>)
 8016f38:	2200      	movs	r2, #0
 8016f3a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016f3c:	4b31      	ldr	r3, [pc, #196]	; (8017004 <_ZL12MX_TIM5_Initv+0x118>)
 8016f3e:	2200      	movs	r2, #0
 8016f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8016f42:	4830      	ldr	r0, [pc, #192]	; (8017004 <_ZL12MX_TIM5_Initv+0x118>)
 8016f44:	f7f1 f85a 	bl	8007ffc <HAL_TIM_Base_Init>
 8016f48:	4603      	mov	r3, r0
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	bf14      	ite	ne
 8016f4e:	2301      	movne	r3, #1
 8016f50:	2300      	moveq	r3, #0
 8016f52:	b2db      	uxtb	r3, r3
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d001      	beq.n	8016f5c <_ZL12MX_TIM5_Initv+0x70>
  {
    Error_Handler();
 8016f58:	f000 fb64 	bl	8017624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016f60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8016f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016f66:	4619      	mov	r1, r3
 8016f68:	4826      	ldr	r0, [pc, #152]	; (8017004 <_ZL12MX_TIM5_Initv+0x118>)
 8016f6a:	f7f1 fb29 	bl	80085c0 <HAL_TIM_ConfigClockSource>
 8016f6e:	4603      	mov	r3, r0
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	bf14      	ite	ne
 8016f74:	2301      	movne	r3, #1
 8016f76:	2300      	moveq	r3, #0
 8016f78:	b2db      	uxtb	r3, r3
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d001      	beq.n	8016f82 <_ZL12MX_TIM5_Initv+0x96>
  {
    Error_Handler();
 8016f7e:	f000 fb51 	bl	8017624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8016f82:	4820      	ldr	r0, [pc, #128]	; (8017004 <_ZL12MX_TIM5_Initv+0x118>)
 8016f84:	f7f1 f8ba 	bl	80080fc <HAL_TIM_PWM_Init>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	bf14      	ite	ne
 8016f8e:	2301      	movne	r3, #1
 8016f90:	2300      	moveq	r3, #0
 8016f92:	b2db      	uxtb	r3, r3
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d001      	beq.n	8016f9c <_ZL12MX_TIM5_Initv+0xb0>
  {
    Error_Handler();
 8016f98:	f000 fb44 	bl	8017624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8016fa4:	f107 031c 	add.w	r3, r7, #28
 8016fa8:	4619      	mov	r1, r3
 8016faa:	4816      	ldr	r0, [pc, #88]	; (8017004 <_ZL12MX_TIM5_Initv+0x118>)
 8016fac:	f7f1 ff82 	bl	8008eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	bf14      	ite	ne
 8016fb6:	2301      	movne	r3, #1
 8016fb8:	2300      	moveq	r3, #0
 8016fba:	b2db      	uxtb	r3, r3
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d001      	beq.n	8016fc4 <_ZL12MX_TIM5_Initv+0xd8>
  {
    Error_Handler();
 8016fc0:	f000 fb30 	bl	8017624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016fc4:	2360      	movs	r3, #96	; 0x60
 8016fc6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016fcc:	2300      	movs	r3, #0
 8016fce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8016fd4:	463b      	mov	r3, r7
 8016fd6:	220c      	movs	r2, #12
 8016fd8:	4619      	mov	r1, r3
 8016fda:	480a      	ldr	r0, [pc, #40]	; (8017004 <_ZL12MX_TIM5_Initv+0x118>)
 8016fdc:	f7f1 f9d8 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	bf14      	ite	ne
 8016fe6:	2301      	movne	r3, #1
 8016fe8:	2300      	moveq	r3, #0
 8016fea:	b2db      	uxtb	r3, r3
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d001      	beq.n	8016ff4 <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 8016ff0:	f000 fb18 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8016ff4:	4803      	ldr	r0, [pc, #12]	; (8017004 <_ZL12MX_TIM5_Initv+0x118>)
 8016ff6:	f001 f9cb 	bl	8018390 <HAL_TIM_MspPostInit>

}
 8016ffa:	bf00      	nop
 8016ffc:	3738      	adds	r7, #56	; 0x38
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bd80      	pop	{r7, pc}
 8017002:	bf00      	nop
 8017004:	20009864 	.word	0x20009864
 8017008:	40000c00 	.word	0x40000c00

0801700c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b088      	sub	sp, #32
 8017010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017012:	f107 0310 	add.w	r3, r7, #16
 8017016:	2200      	movs	r2, #0
 8017018:	601a      	str	r2, [r3, #0]
 801701a:	605a      	str	r2, [r3, #4]
 801701c:	609a      	str	r2, [r3, #8]
 801701e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017020:	1d3b      	adds	r3, r7, #4
 8017022:	2200      	movs	r2, #0
 8017024:	601a      	str	r2, [r3, #0]
 8017026:	605a      	str	r2, [r3, #4]
 8017028:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 801702a:	4b27      	ldr	r3, [pc, #156]	; (80170c8 <_ZL12MX_TIM8_Initv+0xbc>)
 801702c:	4a27      	ldr	r2, [pc, #156]	; (80170cc <_ZL12MX_TIM8_Initv+0xc0>)
 801702e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8017030:	4b25      	ldr	r3, [pc, #148]	; (80170c8 <_ZL12MX_TIM8_Initv+0xbc>)
 8017032:	2200      	movs	r2, #0
 8017034:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017036:	4b24      	ldr	r3, [pc, #144]	; (80170c8 <_ZL12MX_TIM8_Initv+0xbc>)
 8017038:	2200      	movs	r2, #0
 801703a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 801703c:	4b22      	ldr	r3, [pc, #136]	; (80170c8 <_ZL12MX_TIM8_Initv+0xbc>)
 801703e:	2200      	movs	r2, #0
 8017040:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017042:	4b21      	ldr	r3, [pc, #132]	; (80170c8 <_ZL12MX_TIM8_Initv+0xbc>)
 8017044:	2200      	movs	r2, #0
 8017046:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8017048:	4b1f      	ldr	r3, [pc, #124]	; (80170c8 <_ZL12MX_TIM8_Initv+0xbc>)
 801704a:	2200      	movs	r2, #0
 801704c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801704e:	4b1e      	ldr	r3, [pc, #120]	; (80170c8 <_ZL12MX_TIM8_Initv+0xbc>)
 8017050:	2200      	movs	r2, #0
 8017052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8017054:	481c      	ldr	r0, [pc, #112]	; (80170c8 <_ZL12MX_TIM8_Initv+0xbc>)
 8017056:	f7f0 ffd1 	bl	8007ffc <HAL_TIM_Base_Init>
 801705a:	4603      	mov	r3, r0
 801705c:	2b00      	cmp	r3, #0
 801705e:	bf14      	ite	ne
 8017060:	2301      	movne	r3, #1
 8017062:	2300      	moveq	r3, #0
 8017064:	b2db      	uxtb	r3, r3
 8017066:	2b00      	cmp	r3, #0
 8017068:	d001      	beq.n	801706e <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 801706a:	f000 fadb 	bl	8017624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801706e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017072:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8017074:	f107 0310 	add.w	r3, r7, #16
 8017078:	4619      	mov	r1, r3
 801707a:	4813      	ldr	r0, [pc, #76]	; (80170c8 <_ZL12MX_TIM8_Initv+0xbc>)
 801707c:	f7f1 faa0 	bl	80085c0 <HAL_TIM_ConfigClockSource>
 8017080:	4603      	mov	r3, r0
 8017082:	2b00      	cmp	r3, #0
 8017084:	bf14      	ite	ne
 8017086:	2301      	movne	r3, #1
 8017088:	2300      	moveq	r3, #0
 801708a:	b2db      	uxtb	r3, r3
 801708c:	2b00      	cmp	r3, #0
 801708e:	d001      	beq.n	8017094 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8017090:	f000 fac8 	bl	8017624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017094:	2300      	movs	r3, #0
 8017096:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8017098:	2300      	movs	r3, #0
 801709a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801709c:	2300      	movs	r3, #0
 801709e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80170a0:	1d3b      	adds	r3, r7, #4
 80170a2:	4619      	mov	r1, r3
 80170a4:	4808      	ldr	r0, [pc, #32]	; (80170c8 <_ZL12MX_TIM8_Initv+0xbc>)
 80170a6:	f7f1 ff05 	bl	8008eb4 <HAL_TIMEx_MasterConfigSynchronization>
 80170aa:	4603      	mov	r3, r0
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	bf14      	ite	ne
 80170b0:	2301      	movne	r3, #1
 80170b2:	2300      	moveq	r3, #0
 80170b4:	b2db      	uxtb	r3, r3
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d001      	beq.n	80170be <_ZL12MX_TIM8_Initv+0xb2>
  {
    Error_Handler();
 80170ba:	f000 fab3 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80170be:	bf00      	nop
 80170c0:	3720      	adds	r7, #32
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}
 80170c6:	bf00      	nop
 80170c8:	200098a4 	.word	0x200098a4
 80170cc:	40010400 	.word	0x40010400

080170d0 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b088      	sub	sp, #32
 80170d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80170d6:	1d3b      	adds	r3, r7, #4
 80170d8:	2200      	movs	r2, #0
 80170da:	601a      	str	r2, [r3, #0]
 80170dc:	605a      	str	r2, [r3, #4]
 80170de:	609a      	str	r2, [r3, #8]
 80170e0:	60da      	str	r2, [r3, #12]
 80170e2:	611a      	str	r2, [r3, #16]
 80170e4:	615a      	str	r2, [r3, #20]
 80170e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80170e8:	4b1e      	ldr	r3, [pc, #120]	; (8017164 <_ZL13MX_TIM12_Initv+0x94>)
 80170ea:	4a1f      	ldr	r2, [pc, #124]	; (8017168 <_ZL13MX_TIM12_Initv+0x98>)
 80170ec:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80170ee:	4b1d      	ldr	r3, [pc, #116]	; (8017164 <_ZL13MX_TIM12_Initv+0x94>)
 80170f0:	2200      	movs	r2, #0
 80170f2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80170f4:	4b1b      	ldr	r3, [pc, #108]	; (8017164 <_ZL13MX_TIM12_Initv+0x94>)
 80170f6:	2200      	movs	r2, #0
 80170f8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80170fa:	4b1a      	ldr	r3, [pc, #104]	; (8017164 <_ZL13MX_TIM12_Initv+0x94>)
 80170fc:	2200      	movs	r2, #0
 80170fe:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017100:	4b18      	ldr	r3, [pc, #96]	; (8017164 <_ZL13MX_TIM12_Initv+0x94>)
 8017102:	2200      	movs	r2, #0
 8017104:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017106:	4b17      	ldr	r3, [pc, #92]	; (8017164 <_ZL13MX_TIM12_Initv+0x94>)
 8017108:	2200      	movs	r2, #0
 801710a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 801710c:	4815      	ldr	r0, [pc, #84]	; (8017164 <_ZL13MX_TIM12_Initv+0x94>)
 801710e:	f7f0 fff5 	bl	80080fc <HAL_TIM_PWM_Init>
 8017112:	4603      	mov	r3, r0
 8017114:	2b00      	cmp	r3, #0
 8017116:	bf14      	ite	ne
 8017118:	2301      	movne	r3, #1
 801711a:	2300      	moveq	r3, #0
 801711c:	b2db      	uxtb	r3, r3
 801711e:	2b00      	cmp	r3, #0
 8017120:	d001      	beq.n	8017126 <_ZL13MX_TIM12_Initv+0x56>
  {
    Error_Handler();
 8017122:	f000 fa7f 	bl	8017624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017126:	2360      	movs	r3, #96	; 0x60
 8017128:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 801712a:	2300      	movs	r3, #0
 801712c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801712e:	2300      	movs	r3, #0
 8017130:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017132:	2300      	movs	r3, #0
 8017134:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017136:	1d3b      	adds	r3, r7, #4
 8017138:	2200      	movs	r2, #0
 801713a:	4619      	mov	r1, r3
 801713c:	4809      	ldr	r0, [pc, #36]	; (8017164 <_ZL13MX_TIM12_Initv+0x94>)
 801713e:	f7f1 f927 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 8017142:	4603      	mov	r3, r0
 8017144:	2b00      	cmp	r3, #0
 8017146:	bf14      	ite	ne
 8017148:	2301      	movne	r3, #1
 801714a:	2300      	moveq	r3, #0
 801714c:	b2db      	uxtb	r3, r3
 801714e:	2b00      	cmp	r3, #0
 8017150:	d001      	beq.n	8017156 <_ZL13MX_TIM12_Initv+0x86>
  {
    Error_Handler();
 8017152:	f000 fa67 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8017156:	4803      	ldr	r0, [pc, #12]	; (8017164 <_ZL13MX_TIM12_Initv+0x94>)
 8017158:	f001 f91a 	bl	8018390 <HAL_TIM_MspPostInit>

}
 801715c:	bf00      	nop
 801715e:	3720      	adds	r7, #32
 8017160:	46bd      	mov	sp, r7
 8017162:	bd80      	pop	{r7, pc}
 8017164:	200098e4 	.word	0x200098e4
 8017168:	40001800 	.word	0x40001800

0801716c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 801716c:	b580      	push	{r7, lr}
 801716e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8017170:	4b16      	ldr	r3, [pc, #88]	; (80171cc <_ZL19MX_USART1_UART_Initv+0x60>)
 8017172:	4a17      	ldr	r2, [pc, #92]	; (80171d0 <_ZL19MX_USART1_UART_Initv+0x64>)
 8017174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8017176:	4b15      	ldr	r3, [pc, #84]	; (80171cc <_ZL19MX_USART1_UART_Initv+0x60>)
 8017178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801717c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801717e:	4b13      	ldr	r3, [pc, #76]	; (80171cc <_ZL19MX_USART1_UART_Initv+0x60>)
 8017180:	2200      	movs	r2, #0
 8017182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8017184:	4b11      	ldr	r3, [pc, #68]	; (80171cc <_ZL19MX_USART1_UART_Initv+0x60>)
 8017186:	2200      	movs	r2, #0
 8017188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801718a:	4b10      	ldr	r3, [pc, #64]	; (80171cc <_ZL19MX_USART1_UART_Initv+0x60>)
 801718c:	2200      	movs	r2, #0
 801718e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8017190:	4b0e      	ldr	r3, [pc, #56]	; (80171cc <_ZL19MX_USART1_UART_Initv+0x60>)
 8017192:	220c      	movs	r2, #12
 8017194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017196:	4b0d      	ldr	r3, [pc, #52]	; (80171cc <_ZL19MX_USART1_UART_Initv+0x60>)
 8017198:	2200      	movs	r2, #0
 801719a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801719c:	4b0b      	ldr	r3, [pc, #44]	; (80171cc <_ZL19MX_USART1_UART_Initv+0x60>)
 801719e:	2200      	movs	r2, #0
 80171a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80171a2:	4b0a      	ldr	r3, [pc, #40]	; (80171cc <_ZL19MX_USART1_UART_Initv+0x60>)
 80171a4:	2200      	movs	r2, #0
 80171a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80171a8:	4b08      	ldr	r3, [pc, #32]	; (80171cc <_ZL19MX_USART1_UART_Initv+0x60>)
 80171aa:	2200      	movs	r2, #0
 80171ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80171ae:	4807      	ldr	r0, [pc, #28]	; (80171cc <_ZL19MX_USART1_UART_Initv+0x60>)
 80171b0:	f7f1 ff78 	bl	80090a4 <HAL_UART_Init>
 80171b4:	4603      	mov	r3, r0
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	bf14      	ite	ne
 80171ba:	2301      	movne	r3, #1
 80171bc:	2300      	moveq	r3, #0
 80171be:	b2db      	uxtb	r3, r3
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d001      	beq.n	80171c8 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80171c4:	f000 fa2e 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80171c8:	bf00      	nop
 80171ca:	bd80      	pop	{r7, pc}
 80171cc:	20009924 	.word	0x20009924
 80171d0:	40011000 	.word	0x40011000

080171d4 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80171d8:	4b16      	ldr	r3, [pc, #88]	; (8017234 <_ZL19MX_USART6_UART_Initv+0x60>)
 80171da:	4a17      	ldr	r2, [pc, #92]	; (8017238 <_ZL19MX_USART6_UART_Initv+0x64>)
 80171dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80171de:	4b15      	ldr	r3, [pc, #84]	; (8017234 <_ZL19MX_USART6_UART_Initv+0x60>)
 80171e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80171e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80171e6:	4b13      	ldr	r3, [pc, #76]	; (8017234 <_ZL19MX_USART6_UART_Initv+0x60>)
 80171e8:	2200      	movs	r2, #0
 80171ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80171ec:	4b11      	ldr	r3, [pc, #68]	; (8017234 <_ZL19MX_USART6_UART_Initv+0x60>)
 80171ee:	2200      	movs	r2, #0
 80171f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80171f2:	4b10      	ldr	r3, [pc, #64]	; (8017234 <_ZL19MX_USART6_UART_Initv+0x60>)
 80171f4:	2200      	movs	r2, #0
 80171f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80171f8:	4b0e      	ldr	r3, [pc, #56]	; (8017234 <_ZL19MX_USART6_UART_Initv+0x60>)
 80171fa:	220c      	movs	r2, #12
 80171fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80171fe:	4b0d      	ldr	r3, [pc, #52]	; (8017234 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017200:	2200      	movs	r2, #0
 8017202:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8017204:	4b0b      	ldr	r3, [pc, #44]	; (8017234 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017206:	2200      	movs	r2, #0
 8017208:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801720a:	4b0a      	ldr	r3, [pc, #40]	; (8017234 <_ZL19MX_USART6_UART_Initv+0x60>)
 801720c:	2200      	movs	r2, #0
 801720e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017210:	4b08      	ldr	r3, [pc, #32]	; (8017234 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017212:	2200      	movs	r2, #0
 8017214:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8017216:	4807      	ldr	r0, [pc, #28]	; (8017234 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017218:	f7f1 ff44 	bl	80090a4 <HAL_UART_Init>
 801721c:	4603      	mov	r3, r0
 801721e:	2b00      	cmp	r3, #0
 8017220:	bf14      	ite	ne
 8017222:	2301      	movne	r3, #1
 8017224:	2300      	moveq	r3, #0
 8017226:	b2db      	uxtb	r3, r3
 8017228:	2b00      	cmp	r3, #0
 801722a:	d001      	beq.n	8017230 <_ZL19MX_USART6_UART_Initv+0x5c>
  {
    Error_Handler();
 801722c:	f000 f9fa 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8017230:	bf00      	nop
 8017232:	bd80      	pop	{r7, pc}
 8017234:	200099a4 	.word	0x200099a4
 8017238:	40011400 	.word	0x40011400

0801723c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b090      	sub	sp, #64	; 0x40
 8017240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017246:	2200      	movs	r2, #0
 8017248:	601a      	str	r2, [r3, #0]
 801724a:	605a      	str	r2, [r3, #4]
 801724c:	609a      	str	r2, [r3, #8]
 801724e:	60da      	str	r2, [r3, #12]
 8017250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8017252:	4baf      	ldr	r3, [pc, #700]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017256:	4aae      	ldr	r2, [pc, #696]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017258:	f043 0310 	orr.w	r3, r3, #16
 801725c:	6313      	str	r3, [r2, #48]	; 0x30
 801725e:	4bac      	ldr	r3, [pc, #688]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017262:	f003 0310 	and.w	r3, r3, #16
 8017266:	62bb      	str	r3, [r7, #40]	; 0x28
 8017268:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801726a:	4ba9      	ldr	r3, [pc, #676]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 801726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801726e:	4aa8      	ldr	r2, [pc, #672]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017274:	6313      	str	r3, [r2, #48]	; 0x30
 8017276:	4ba6      	ldr	r3, [pc, #664]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801727a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801727e:	627b      	str	r3, [r7, #36]	; 0x24
 8017280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8017282:	4ba3      	ldr	r3, [pc, #652]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017286:	4aa2      	ldr	r2, [pc, #648]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017288:	f043 0302 	orr.w	r3, r3, #2
 801728c:	6313      	str	r3, [r2, #48]	; 0x30
 801728e:	4ba0      	ldr	r3, [pc, #640]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017292:	f003 0302 	and.w	r3, r3, #2
 8017296:	623b      	str	r3, [r7, #32]
 8017298:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801729a:	4b9d      	ldr	r3, [pc, #628]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 801729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801729e:	4a9c      	ldr	r2, [pc, #624]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 80172a0:	f043 0308 	orr.w	r3, r3, #8
 80172a4:	6313      	str	r3, [r2, #48]	; 0x30
 80172a6:	4b9a      	ldr	r3, [pc, #616]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 80172a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172aa:	f003 0308 	and.w	r3, r3, #8
 80172ae:	61fb      	str	r3, [r7, #28]
 80172b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80172b2:	4b97      	ldr	r3, [pc, #604]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 80172b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172b6:	4a96      	ldr	r2, [pc, #600]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 80172b8:	f043 0304 	orr.w	r3, r3, #4
 80172bc:	6313      	str	r3, [r2, #48]	; 0x30
 80172be:	4b94      	ldr	r3, [pc, #592]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 80172c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172c2:	f003 0304 	and.w	r3, r3, #4
 80172c6:	61bb      	str	r3, [r7, #24]
 80172c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80172ca:	4b91      	ldr	r3, [pc, #580]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 80172cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172ce:	4a90      	ldr	r2, [pc, #576]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 80172d0:	f043 0301 	orr.w	r3, r3, #1
 80172d4:	6313      	str	r3, [r2, #48]	; 0x30
 80172d6:	4b8e      	ldr	r3, [pc, #568]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 80172d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172da:	f003 0301 	and.w	r3, r3, #1
 80172de:	617b      	str	r3, [r7, #20]
 80172e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80172e2:	4b8b      	ldr	r3, [pc, #556]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 80172e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172e6:	4a8a      	ldr	r2, [pc, #552]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 80172e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80172ec:	6313      	str	r3, [r2, #48]	; 0x30
 80172ee:	4b88      	ldr	r3, [pc, #544]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 80172f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80172f6:	613b      	str	r3, [r7, #16]
 80172f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80172fa:	4b85      	ldr	r3, [pc, #532]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 80172fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172fe:	4a84      	ldr	r2, [pc, #528]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017304:	6313      	str	r3, [r2, #48]	; 0x30
 8017306:	4b82      	ldr	r3, [pc, #520]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801730a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801730e:	60fb      	str	r3, [r7, #12]
 8017310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8017312:	4b7f      	ldr	r3, [pc, #508]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017316:	4a7e      	ldr	r2, [pc, #504]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801731c:	6313      	str	r3, [r2, #48]	; 0x30
 801731e:	4b7c      	ldr	r3, [pc, #496]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017326:	60bb      	str	r3, [r7, #8]
 8017328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801732a:	4b79      	ldr	r3, [pc, #484]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 801732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801732e:	4a78      	ldr	r2, [pc, #480]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017330:	f043 0320 	orr.w	r3, r3, #32
 8017334:	6313      	str	r3, [r2, #48]	; 0x30
 8017336:	4b76      	ldr	r3, [pc, #472]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801733a:	f003 0320 	and.w	r3, r3, #32
 801733e:	607b      	str	r3, [r7, #4]
 8017340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8017342:	4b73      	ldr	r3, [pc, #460]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017346:	4a72      	ldr	r2, [pc, #456]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801734c:	6313      	str	r3, [r2, #48]	; 0x30
 801734e:	4b70      	ldr	r3, [pc, #448]	; (8017510 <_ZL12MX_GPIO_Initv+0x2d4>)
 8017350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017356:	603b      	str	r3, [r7, #0]
 8017358:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 801735a:	2201      	movs	r2, #1
 801735c:	2120      	movs	r1, #32
 801735e:	486d      	ldr	r0, [pc, #436]	; (8017514 <_ZL12MX_GPIO_Initv+0x2d8>)
 8017360:	f7eb fa20 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8017364:	2200      	movs	r2, #0
 8017366:	210c      	movs	r1, #12
 8017368:	486b      	ldr	r0, [pc, #428]	; (8017518 <_ZL12MX_GPIO_Initv+0x2dc>)
 801736a:	f7eb fa1b 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 801736e:	2201      	movs	r2, #1
 8017370:	2108      	movs	r1, #8
 8017372:	486a      	ldr	r0, [pc, #424]	; (801751c <_ZL12MX_GPIO_Initv+0x2e0>)
 8017374:	f7eb fa16 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8017378:	2201      	movs	r2, #1
 801737a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801737e:	4866      	ldr	r0, [pc, #408]	; (8017518 <_ZL12MX_GPIO_Initv+0x2dc>)
 8017380:	f7eb fa10 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8017384:	2200      	movs	r2, #0
 8017386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801738a:	4865      	ldr	r0, [pc, #404]	; (8017520 <_ZL12MX_GPIO_Initv+0x2e4>)
 801738c:	f7eb fa0a 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8017390:	2200      	movs	r2, #0
 8017392:	21c8      	movs	r1, #200	; 0xc8
 8017394:	4863      	ldr	r0, [pc, #396]	; (8017524 <_ZL12MX_GPIO_Initv+0x2e8>)
 8017396:	f7eb fa05 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 801739a:	2308      	movs	r3, #8
 801739c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801739e:	2300      	movs	r3, #0
 80173a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173a2:	2300      	movs	r3, #0
 80173a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80173a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80173aa:	4619      	mov	r1, r3
 80173ac:	485e      	ldr	r0, [pc, #376]	; (8017528 <_ZL12MX_GPIO_Initv+0x2ec>)
 80173ae:	f7ea ff2d 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80173b2:	f643 4323 	movw	r3, #15395	; 0x3c23
 80173b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80173b8:	2302      	movs	r3, #2
 80173ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173bc:	2300      	movs	r3, #0
 80173be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80173c0:	2303      	movs	r3, #3
 80173c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80173c4:	230a      	movs	r3, #10
 80173c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80173c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80173cc:	4619      	mov	r1, r3
 80173ce:	4857      	ldr	r0, [pc, #348]	; (801752c <_ZL12MX_GPIO_Initv+0x2f0>)
 80173d0:	f7ea ff1c 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80173d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80173d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80173da:	2302      	movs	r3, #2
 80173dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173de:	2300      	movs	r3, #0
 80173e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80173e2:	2300      	movs	r3, #0
 80173e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80173e6:	2301      	movs	r3, #1
 80173e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80173ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80173ee:	4619      	mov	r1, r3
 80173f0:	484f      	ldr	r0, [pc, #316]	; (8017530 <_ZL12MX_GPIO_Initv+0x2f4>)
 80173f2:	f7ea ff0b 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80173f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80173fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80173fc:	2300      	movs	r3, #0
 80173fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017400:	2300      	movs	r3, #0
 8017402:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8017404:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017408:	4619      	mov	r1, r3
 801740a:	484a      	ldr	r0, [pc, #296]	; (8017534 <_ZL12MX_GPIO_Initv+0x2f8>)
 801740c:	f7ea fefe 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8017410:	2340      	movs	r3, #64	; 0x40
 8017412:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8017414:	4b48      	ldr	r3, [pc, #288]	; (8017538 <_ZL12MX_GPIO_Initv+0x2fc>)
 8017416:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017418:	2300      	movs	r3, #0
 801741a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 801741c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017420:	4619      	mov	r1, r3
 8017422:	483c      	ldr	r0, [pc, #240]	; (8017514 <_ZL12MX_GPIO_Initv+0x2d8>)
 8017424:	f7ea fef2 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8017428:	2320      	movs	r3, #32
 801742a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801742c:	2301      	movs	r3, #1
 801742e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017430:	2300      	movs	r3, #0
 8017432:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017434:	2300      	movs	r3, #0
 8017436:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8017438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801743c:	4619      	mov	r1, r3
 801743e:	4835      	ldr	r0, [pc, #212]	; (8017514 <_ZL12MX_GPIO_Initv+0x2d8>)
 8017440:	f7ea fee4 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8017444:	f241 030c 	movw	r3, #4108	; 0x100c
 8017448:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801744a:	2301      	movs	r3, #1
 801744c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801744e:	2300      	movs	r3, #0
 8017450:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017452:	2300      	movs	r3, #0
 8017454:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8017456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801745a:	4619      	mov	r1, r3
 801745c:	482e      	ldr	r0, [pc, #184]	; (8017518 <_ZL12MX_GPIO_Initv+0x2dc>)
 801745e:	f7ea fed5 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8017462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017466:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017468:	2300      	movs	r3, #0
 801746a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801746c:	2300      	movs	r3, #0
 801746e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8017470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017474:	4619      	mov	r1, r3
 8017476:	4831      	ldr	r0, [pc, #196]	; (801753c <_ZL12MX_GPIO_Initv+0x300>)
 8017478:	f7ea fec8 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 801747c:	2308      	movs	r3, #8
 801747e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017480:	2301      	movs	r3, #1
 8017482:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017484:	2300      	movs	r3, #0
 8017486:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017488:	2300      	movs	r3, #0
 801748a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 801748c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017490:	4619      	mov	r1, r3
 8017492:	4822      	ldr	r0, [pc, #136]	; (801751c <_ZL12MX_GPIO_Initv+0x2e0>)
 8017494:	f7ea feba 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8017498:	2310      	movs	r3, #16
 801749a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801749c:	2300      	movs	r3, #0
 801749e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174a0:	2300      	movs	r3, #0
 80174a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80174a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80174a8:	4619      	mov	r1, r3
 80174aa:	481a      	ldr	r0, [pc, #104]	; (8017514 <_ZL12MX_GPIO_Initv+0x2d8>)
 80174ac:	f7ea feae 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80174b0:	f248 0304 	movw	r3, #32772	; 0x8004
 80174b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80174b6:	2300      	movs	r3, #0
 80174b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174ba:	2300      	movs	r3, #0
 80174bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80174be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80174c2:	4619      	mov	r1, r3
 80174c4:	4816      	ldr	r0, [pc, #88]	; (8017520 <_ZL12MX_GPIO_Initv+0x2e4>)
 80174c6:	f7ea fea1 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80174ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80174ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80174d0:	2301      	movs	r3, #1
 80174d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174d4:	2300      	movs	r3, #0
 80174d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80174d8:	2300      	movs	r3, #0
 80174da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80174dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80174e0:	4619      	mov	r1, r3
 80174e2:	480f      	ldr	r0, [pc, #60]	; (8017520 <_ZL12MX_GPIO_Initv+0x2e4>)
 80174e4:	f7ea fe92 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80174e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80174ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80174ee:	4b12      	ldr	r3, [pc, #72]	; (8017538 <_ZL12MX_GPIO_Initv+0x2fc>)
 80174f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174f2:	2300      	movs	r3, #0
 80174f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80174f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80174fa:	4619      	mov	r1, r3
 80174fc:	4806      	ldr	r0, [pc, #24]	; (8017518 <_ZL12MX_GPIO_Initv+0x2dc>)
 80174fe:	f7ea fe85 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8017502:	2310      	movs	r3, #16
 8017504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017506:	2302      	movs	r3, #2
 8017508:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801750a:	2300      	movs	r3, #0
 801750c:	e018      	b.n	8017540 <_ZL12MX_GPIO_Initv+0x304>
 801750e:	bf00      	nop
 8017510:	40023800 	.word	0x40023800
 8017514:	40020c00 	.word	0x40020c00
 8017518:	40022000 	.word	0x40022000
 801751c:	40022800 	.word	0x40022800
 8017520:	40021c00 	.word	0x40021c00
 8017524:	40021800 	.word	0x40021800
 8017528:	40021000 	.word	0x40021000
 801752c:	40020400 	.word	0x40020400
 8017530:	40020000 	.word	0x40020000
 8017534:	40022400 	.word	0x40022400
 8017538:	10120000 	.word	0x10120000
 801753c:	40020800 	.word	0x40020800
 8017540:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017542:	2303      	movs	r3, #3
 8017544:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8017546:	230a      	movs	r3, #10
 8017548:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 801754a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801754e:	4619      	mov	r1, r3
 8017550:	4820      	ldr	r0, [pc, #128]	; (80175d4 <_ZL12MX_GPIO_Initv+0x398>)
 8017552:	f7ea fe5b 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8017556:	23c8      	movs	r3, #200	; 0xc8
 8017558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801755a:	2301      	movs	r3, #1
 801755c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801755e:	2300      	movs	r3, #0
 8017560:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017562:	2300      	movs	r3, #0
 8017564:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8017566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801756a:	4619      	mov	r1, r3
 801756c:	481a      	ldr	r0, [pc, #104]	; (80175d8 <_ZL12MX_GPIO_Initv+0x39c>)
 801756e:	f7ea fe4d 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8017572:	2305      	movs	r3, #5
 8017574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017576:	2302      	movs	r3, #2
 8017578:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801757a:	2300      	movs	r3, #0
 801757c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801757e:	2303      	movs	r3, #3
 8017580:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8017582:	230a      	movs	r3, #10
 8017584:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801758a:	4619      	mov	r1, r3
 801758c:	4813      	ldr	r0, [pc, #76]	; (80175dc <_ZL12MX_GPIO_Initv+0x3a0>)
 801758e:	f7ea fe3d 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8017592:	2304      	movs	r3, #4
 8017594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017596:	2300      	movs	r3, #0
 8017598:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801759a:	2300      	movs	r3, #0
 801759c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 801759e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80175a2:	4619      	mov	r1, r3
 80175a4:	480c      	ldr	r0, [pc, #48]	; (80175d8 <_ZL12MX_GPIO_Initv+0x39c>)
 80175a6:	f7ea fe31 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80175aa:	2328      	movs	r3, #40	; 0x28
 80175ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80175ae:	2302      	movs	r3, #2
 80175b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80175b2:	2300      	movs	r3, #0
 80175b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80175b6:	2303      	movs	r3, #3
 80175b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80175ba:	230a      	movs	r3, #10
 80175bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80175be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80175c2:	4619      	mov	r1, r3
 80175c4:	4806      	ldr	r0, [pc, #24]	; (80175e0 <_ZL12MX_GPIO_Initv+0x3a4>)
 80175c6:	f7ea fe21 	bl	800220c <HAL_GPIO_Init>

}
 80175ca:	bf00      	nop
 80175cc:	3740      	adds	r7, #64	; 0x40
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}
 80175d2:	bf00      	nop
 80175d4:	40021c00 	.word	0x40021c00
 80175d8:	40021800 	.word	0x40021800
 80175dc:	40020800 	.word	0x40020800
 80175e0:	40020000 	.word	0x40020000

080175e4 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b082      	sub	sp, #8
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for FATFS */
  MX_FATFS_Init();
 80175ec:	f7fe fed6 	bl	801639c <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80175f0:	f001 fa02 	bl	80189f8 <MX_USB_HOST_Init>

/* Graphic application */  
  GRAPHICS_MainTask();
 80175f4:	f7fc fed2 	bl	801439c <_Z17GRAPHICS_MainTaskv>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80175f8:	2001      	movs	r0, #1
 80175fa:	f7f9 fc40 	bl	8010e7e <osDelay>
 80175fe:	e7fb      	b.n	80175f8 <_Z16StartDefaultTaskPKv+0x14>

08017600 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b082      	sub	sp, #8
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	4a04      	ldr	r2, [pc, #16]	; (8017620 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801760e:	4293      	cmp	r3, r2
 8017610:	d101      	bne.n	8017616 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8017612:	f7e8 ffdb 	bl	80005cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8017616:	bf00      	nop
 8017618:	3708      	adds	r7, #8
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}
 801761e:	bf00      	nop
 8017620:	40001000 	.word	0x40001000

08017624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8017624:	b480      	push	{r7}
 8017626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8017628:	bf00      	nop
 801762a:	46bd      	mov	sp, r7
 801762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017630:	4770      	bx	lr

08017632 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8017632:	b580      	push	{r7, lr}
 8017634:	b084      	sub	sp, #16
 8017636:	af00      	add	r7, sp, #0
 8017638:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 801763a:	f7f9 fbe9 	bl	8010e10 <osKernelSysTick>
 801763e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 8017640:	e006      	b.n	8017650 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8017642:	f7fe fe71 	bl	8016328 <BSP_SD_GetCardState>
 8017646:	4603      	mov	r3, r0
 8017648:	2b00      	cmp	r3, #0
 801764a:	d101      	bne.n	8017650 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801764c:	2300      	movs	r3, #0
 801764e:	e009      	b.n	8017664 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8017650:	f7f9 fbde 	bl	8010e10 <osKernelSysTick>
 8017654:	4602      	mov	r2, r0
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	1ad3      	subs	r3, r2, r3
 801765a:	687a      	ldr	r2, [r7, #4]
 801765c:	429a      	cmp	r2, r3
 801765e:	d8f0      	bhi.n	8017642 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8017660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017664:	4618      	mov	r0, r3
 8017666:	3710      	adds	r7, #16
 8017668:	46bd      	mov	sp, r7
 801766a:	bd80      	pop	{r7, pc}

0801766c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b082      	sub	sp, #8
 8017670:	af00      	add	r7, sp, #0
 8017672:	4603      	mov	r3, r0
 8017674:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8017676:	4b0b      	ldr	r3, [pc, #44]	; (80176a4 <SD_CheckStatus+0x38>)
 8017678:	2201      	movs	r2, #1
 801767a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801767c:	f7fe fe54 	bl	8016328 <BSP_SD_GetCardState>
 8017680:	4603      	mov	r3, r0
 8017682:	2b00      	cmp	r3, #0
 8017684:	d107      	bne.n	8017696 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8017686:	4b07      	ldr	r3, [pc, #28]	; (80176a4 <SD_CheckStatus+0x38>)
 8017688:	781b      	ldrb	r3, [r3, #0]
 801768a:	b2db      	uxtb	r3, r3
 801768c:	f023 0301 	bic.w	r3, r3, #1
 8017690:	b2da      	uxtb	r2, r3
 8017692:	4b04      	ldr	r3, [pc, #16]	; (80176a4 <SD_CheckStatus+0x38>)
 8017694:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8017696:	4b03      	ldr	r3, [pc, #12]	; (80176a4 <SD_CheckStatus+0x38>)
 8017698:	781b      	ldrb	r3, [r3, #0]
 801769a:	b2db      	uxtb	r3, r3
}
 801769c:	4618      	mov	r0, r3
 801769e:	3708      	adds	r7, #8
 80176a0:	46bd      	mov	sp, r7
 80176a2:	bd80      	pop	{r7, pc}
 80176a4:	2000003a 	.word	0x2000003a

080176a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b084      	sub	sp, #16
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	4603      	mov	r3, r0
 80176b0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 80176b2:	4b1a      	ldr	r3, [pc, #104]	; (801771c <SD_initialize+0x74>)
 80176b4:	2201      	movs	r2, #1
 80176b6:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 80176b8:	f7f9 fb9e 	bl	8010df8 <osKernelRunning>
 80176bc:	4603      	mov	r3, r0
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d025      	beq.n	801770e <SD_initialize+0x66>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80176c2:	f7fe fdd7 	bl	8016274 <BSP_SD_Init>
 80176c6:	4603      	mov	r3, r0
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d107      	bne.n	80176dc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80176cc:	79fb      	ldrb	r3, [r7, #7]
 80176ce:	4618      	mov	r0, r3
 80176d0:	f7ff ffcc 	bl	801766c <SD_CheckStatus>
 80176d4:	4603      	mov	r3, r0
 80176d6:	461a      	mov	r2, r3
 80176d8:	4b10      	ldr	r3, [pc, #64]	; (801771c <SD_initialize+0x74>)
 80176da:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 80176dc:	4b0f      	ldr	r3, [pc, #60]	; (801771c <SD_initialize+0x74>)
 80176de:	781b      	ldrb	r3, [r3, #0]
 80176e0:	b2db      	uxtb	r3, r3
 80176e2:	2b01      	cmp	r3, #1
 80176e4:	d013      	beq.n	801770e <SD_initialize+0x66>
 80176e6:	4b0e      	ldr	r3, [pc, #56]	; (8017720 <SD_initialize+0x78>)
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d10f      	bne.n	801770e <SD_initialize+0x66>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80176ee:	4a0d      	ldr	r2, [pc, #52]	; (8017724 <SD_initialize+0x7c>)
 80176f0:	f107 0308 	add.w	r3, r7, #8
 80176f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80176f8:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80176fc:	f107 0308 	add.w	r3, r7, #8
 8017700:	2100      	movs	r1, #0
 8017702:	4618      	mov	r0, r3
 8017704:	f7f9 fc78 	bl	8010ff8 <osMessageCreate>
 8017708:	4602      	mov	r2, r0
 801770a:	4b05      	ldr	r3, [pc, #20]	; (8017720 <SD_initialize+0x78>)
 801770c:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 801770e:	4b03      	ldr	r3, [pc, #12]	; (801771c <SD_initialize+0x74>)
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	b2db      	uxtb	r3, r3
}
 8017714:	4618      	mov	r0, r3
 8017716:	3710      	adds	r7, #16
 8017718:	46bd      	mov	sp, r7
 801771a:	bd80      	pop	{r7, pc}
 801771c:	2000003a 	.word	0x2000003a
 8017720:	20009c28 	.word	0x20009c28
 8017724:	08021078 	.word	0x08021078

08017728 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b082      	sub	sp, #8
 801772c:	af00      	add	r7, sp, #0
 801772e:	4603      	mov	r3, r0
 8017730:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8017732:	79fb      	ldrb	r3, [r7, #7]
 8017734:	4618      	mov	r0, r3
 8017736:	f7ff ff99 	bl	801766c <SD_CheckStatus>
 801773a:	4603      	mov	r3, r0
}
 801773c:	4618      	mov	r0, r3
 801773e:	3708      	adds	r7, #8
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}

08017744 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b08e      	sub	sp, #56	; 0x38
 8017748:	af00      	add	r7, sp, #0
 801774a:	61b9      	str	r1, [r7, #24]
 801774c:	617a      	str	r2, [r7, #20]
 801774e:	613b      	str	r3, [r7, #16]
 8017750:	4603      	mov	r3, r0
 8017752:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8017754:	2301      	movs	r3, #1
 8017756:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801775a:	f247 5030 	movw	r0, #30000	; 0x7530
 801775e:	f7ff ff68 	bl	8017632 <SD_CheckStatusWithTimeout>
 8017762:	4603      	mov	r3, r0
 8017764:	2b00      	cmp	r3, #0
 8017766:	da02      	bge.n	801776e <SD_read+0x2a>
  {
    return res;
 8017768:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801776c:	e06c      	b.n	8017848 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801776e:	69bb      	ldr	r3, [r7, #24]
 8017770:	f003 0303 	and.w	r3, r3, #3
 8017774:	2b00      	cmp	r3, #0
 8017776:	d11e      	bne.n	80177b6 <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8017778:	693a      	ldr	r2, [r7, #16]
 801777a:	6979      	ldr	r1, [r7, #20]
 801777c:	69b8      	ldr	r0, [r7, #24]
 801777e:	f7fe fd9f 	bl	80162c0 <BSP_SD_ReadBlocks_DMA>
 8017782:	4603      	mov	r3, r0
 8017784:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 8017788:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801778c:	2b00      	cmp	r3, #0
 801778e:	d159      	bne.n	8017844 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8017790:	4b2f      	ldr	r3, [pc, #188]	; (8017850 <SD_read+0x10c>)
 8017792:	6819      	ldr	r1, [r3, #0]
 8017794:	f107 0320 	add.w	r3, r7, #32
 8017798:	f247 5230 	movw	r2, #30000	; 0x7530
 801779c:	4618      	mov	r0, r3
 801779e:	f7f9 fc7d 	bl	801109c <osMessageGet>
      if (event.status == osEventMessage) {
 80177a2:	6a3b      	ldr	r3, [r7, #32]
 80177a4:	2b10      	cmp	r3, #16
 80177a6:	d14d      	bne.n	8017844 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 80177a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177aa:	2b01      	cmp	r3, #1
 80177ac:	d14a      	bne.n	8017844 <SD_read+0x100>
          res = RES_OK;
 80177ae:	2300      	movs	r3, #0
 80177b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80177b4:	e046      	b.n	8017844 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 80177b6:	2300      	movs	r3, #0
 80177b8:	633b      	str	r3, [r7, #48]	; 0x30
 80177ba:	e032      	b.n	8017822 <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80177bc:	697b      	ldr	r3, [r7, #20]
 80177be:	1c5a      	adds	r2, r3, #1
 80177c0:	617a      	str	r2, [r7, #20]
 80177c2:	2201      	movs	r2, #1
 80177c4:	4619      	mov	r1, r3
 80177c6:	4823      	ldr	r0, [pc, #140]	; (8017854 <SD_read+0x110>)
 80177c8:	f7fe fd7a 	bl	80162c0 <BSP_SD_ReadBlocks_DMA>
 80177cc:	4603      	mov	r3, r0
 80177ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 80177d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d128      	bne.n	801782c <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80177da:	4b1d      	ldr	r3, [pc, #116]	; (8017850 <SD_read+0x10c>)
 80177dc:	6819      	ldr	r1, [r3, #0]
 80177de:	463b      	mov	r3, r7
 80177e0:	f247 5230 	movw	r2, #30000	; 0x7530
 80177e4:	4618      	mov	r0, r3
 80177e6:	f7f9 fc59 	bl	801109c <osMessageGet>
 80177ea:	f107 0320 	add.w	r3, r7, #32
 80177ee:	463a      	mov	r2, r7
 80177f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80177f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 80177f6:	6a3b      	ldr	r3, [r7, #32]
 80177f8:	2b10      	cmp	r3, #16
 80177fa:	d10f      	bne.n	801781c <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 80177fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177fe:	2b01      	cmp	r3, #1
 8017800:	d10c      	bne.n	801781c <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 8017802:	69bb      	ldr	r3, [r7, #24]
 8017804:	4a13      	ldr	r2, [pc, #76]	; (8017854 <SD_read+0x110>)
 8017806:	4618      	mov	r0, r3
 8017808:	4611      	mov	r1, r2
 801780a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801780e:	461a      	mov	r2, r3
 8017810:	f008 fb7e 	bl	801ff10 <memcpy>
            buff += BLOCKSIZE;
 8017814:	69bb      	ldr	r3, [r7, #24]
 8017816:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801781a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 801781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801781e:	3301      	adds	r3, #1
 8017820:	633b      	str	r3, [r7, #48]	; 0x30
 8017822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017824:	693a      	ldr	r2, [r7, #16]
 8017826:	429a      	cmp	r2, r3
 8017828:	d8c8      	bhi.n	80177bc <SD_read+0x78>
 801782a:	e000      	b.n	801782e <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 801782c:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 801782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017830:	693a      	ldr	r2, [r7, #16]
 8017832:	429a      	cmp	r2, r3
 8017834:	d106      	bne.n	8017844 <SD_read+0x100>
 8017836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801783a:	2b00      	cmp	r3, #0
 801783c:	d102      	bne.n	8017844 <SD_read+0x100>
      res = RES_OK;
 801783e:	2300      	movs	r3, #0
 8017840:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 8017844:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 8017848:	4618      	mov	r0, r3
 801784a:	3738      	adds	r7, #56	; 0x38
 801784c:	46bd      	mov	sp, r7
 801784e:	bd80      	pop	{r7, pc}
 8017850:	20009c28 	.word	0x20009c28
 8017854:	20009a28 	.word	0x20009a28

08017858 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b090      	sub	sp, #64	; 0x40
 801785c:	af00      	add	r7, sp, #0
 801785e:	61b9      	str	r1, [r7, #24]
 8017860:	617a      	str	r2, [r7, #20]
 8017862:	613b      	str	r3, [r7, #16]
 8017864:	4603      	mov	r3, r0
 8017866:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 8017868:	2301      	movs	r3, #1
 801786a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801786e:	f247 5030 	movw	r0, #30000	; 0x7530
 8017872:	f7ff fede 	bl	8017632 <SD_CheckStatusWithTimeout>
 8017876:	4603      	mov	r3, r0
 8017878:	2b00      	cmp	r3, #0
 801787a:	da02      	bge.n	8017882 <SD_write+0x2a>
  {
    return res;
 801787c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017880:	e07c      	b.n	801797c <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8017882:	69bb      	ldr	r3, [r7, #24]
 8017884:	f003 0303 	and.w	r3, r3, #3
 8017888:	2b00      	cmp	r3, #0
 801788a:	d12e      	bne.n	80178ea <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801788c:	693a      	ldr	r2, [r7, #16]
 801788e:	6979      	ldr	r1, [r7, #20]
 8017890:	69b8      	ldr	r0, [r7, #24]
 8017892:	f7fe fd2f 	bl	80162f4 <BSP_SD_WriteBlocks_DMA>
 8017896:	4603      	mov	r3, r0
 8017898:	2b00      	cmp	r3, #0
 801789a:	d16d      	bne.n	8017978 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801789c:	4b39      	ldr	r3, [pc, #228]	; (8017984 <SD_write+0x12c>)
 801789e:	6819      	ldr	r1, [r3, #0]
 80178a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80178a4:	f247 5230 	movw	r2, #30000	; 0x7530
 80178a8:	4618      	mov	r0, r3
 80178aa:	f7f9 fbf7 	bl	801109c <osMessageGet>

      if (event.status == osEventMessage)
 80178ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178b0:	2b10      	cmp	r3, #16
 80178b2:	d161      	bne.n	8017978 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 80178b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178b6:	2b02      	cmp	r3, #2
 80178b8:	d15e      	bne.n	8017978 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 80178ba:	f7f9 faa9 	bl	8010e10 <osKernelSysTick>
 80178be:	4602      	mov	r2, r0
 80178c0:	f247 5330 	movw	r3, #30000	; 0x7530
 80178c4:	4413      	add	r3, r2
 80178c6:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 80178c8:	e008      	b.n	80178dc <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80178ca:	f7fe fd2d 	bl	8016328 <BSP_SD_GetCardState>
 80178ce:	4603      	mov	r3, r0
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d103      	bne.n	80178dc <SD_write+0x84>
            {
              res = RES_OK;
 80178d4:	2300      	movs	r3, #0
 80178d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80178da:	e04d      	b.n	8017978 <SD_write+0x120>
          while(timer > osKernelSysTick())
 80178dc:	f7f9 fa98 	bl	8010e10 <osKernelSysTick>
 80178e0:	4602      	mov	r2, r0
 80178e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e4:	4293      	cmp	r3, r2
 80178e6:	d8f0      	bhi.n	80178ca <SD_write+0x72>
 80178e8:	e046      	b.n	8017978 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 80178ea:	2300      	movs	r3, #0
 80178ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80178ee:	e032      	b.n	8017956 <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80178f0:	697b      	ldr	r3, [r7, #20]
 80178f2:	1c5a      	adds	r2, r3, #1
 80178f4:	617a      	str	r2, [r7, #20]
 80178f6:	2201      	movs	r2, #1
 80178f8:	4619      	mov	r1, r3
 80178fa:	4823      	ldr	r0, [pc, #140]	; (8017988 <SD_write+0x130>)
 80178fc:	f7fe fcfa 	bl	80162f4 <BSP_SD_WriteBlocks_DMA>
 8017900:	4603      	mov	r3, r0
 8017902:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 8017906:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801790a:	2b00      	cmp	r3, #0
 801790c:	d128      	bne.n	8017960 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801790e:	4b1d      	ldr	r3, [pc, #116]	; (8017984 <SD_write+0x12c>)
 8017910:	6819      	ldr	r1, [r3, #0]
 8017912:	463b      	mov	r3, r7
 8017914:	f247 5230 	movw	r2, #30000	; 0x7530
 8017918:	4618      	mov	r0, r3
 801791a:	f7f9 fbbf 	bl	801109c <osMessageGet>
 801791e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017922:	463a      	mov	r2, r7
 8017924:	ca07      	ldmia	r2, {r0, r1, r2}
 8017926:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 801792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801792c:	2b10      	cmp	r3, #16
 801792e:	d10f      	bne.n	8017950 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 8017930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017932:	2b02      	cmp	r3, #2
 8017934:	d10c      	bne.n	8017950 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8017936:	69bb      	ldr	r3, [r7, #24]
 8017938:	4a13      	ldr	r2, [pc, #76]	; (8017988 <SD_write+0x130>)
 801793a:	4618      	mov	r0, r3
 801793c:	4611      	mov	r1, r2
 801793e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017942:	461a      	mov	r2, r3
 8017944:	f008 fae4 	bl	801ff10 <memcpy>
            buff += BLOCKSIZE;
 8017948:	69bb      	ldr	r3, [r7, #24]
 801794a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801794e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8017950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017952:	3301      	adds	r3, #1
 8017954:	63bb      	str	r3, [r7, #56]	; 0x38
 8017956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017958:	693a      	ldr	r2, [r7, #16]
 801795a:	429a      	cmp	r2, r3
 801795c:	d8c8      	bhi.n	80178f0 <SD_write+0x98>
 801795e:	e000      	b.n	8017962 <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 8017960:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8017962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017964:	693a      	ldr	r2, [r7, #16]
 8017966:	429a      	cmp	r2, r3
 8017968:	d106      	bne.n	8017978 <SD_write+0x120>
 801796a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801796e:	2b00      	cmp	r3, #0
 8017970:	d102      	bne.n	8017978 <SD_write+0x120>
      res = RES_OK;
 8017972:	2300      	movs	r3, #0
 8017974:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 8017978:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 801797c:	4618      	mov	r0, r3
 801797e:	3740      	adds	r7, #64	; 0x40
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}
 8017984:	20009c28 	.word	0x20009c28
 8017988:	20009a28 	.word	0x20009a28

0801798c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b08c      	sub	sp, #48	; 0x30
 8017990:	af00      	add	r7, sp, #0
 8017992:	4603      	mov	r3, r0
 8017994:	603a      	str	r2, [r7, #0]
 8017996:	71fb      	strb	r3, [r7, #7]
 8017998:	460b      	mov	r3, r1
 801799a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801799c:	2301      	movs	r3, #1
 801799e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80179a2:	4b25      	ldr	r3, [pc, #148]	; (8017a38 <SD_ioctl+0xac>)
 80179a4:	781b      	ldrb	r3, [r3, #0]
 80179a6:	b2db      	uxtb	r3, r3
 80179a8:	f003 0301 	and.w	r3, r3, #1
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d001      	beq.n	80179b4 <SD_ioctl+0x28>
 80179b0:	2303      	movs	r3, #3
 80179b2:	e03c      	b.n	8017a2e <SD_ioctl+0xa2>

  switch (cmd)
 80179b4:	79bb      	ldrb	r3, [r7, #6]
 80179b6:	2b03      	cmp	r3, #3
 80179b8:	d834      	bhi.n	8017a24 <SD_ioctl+0x98>
 80179ba:	a201      	add	r2, pc, #4	; (adr r2, 80179c0 <SD_ioctl+0x34>)
 80179bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179c0:	080179d1 	.word	0x080179d1
 80179c4:	080179d9 	.word	0x080179d9
 80179c8:	080179f1 	.word	0x080179f1
 80179cc:	08017a0b 	.word	0x08017a0b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80179d0:	2300      	movs	r3, #0
 80179d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80179d6:	e028      	b.n	8017a2a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80179d8:	f107 030c 	add.w	r3, r7, #12
 80179dc:	4618      	mov	r0, r3
 80179de:	f7fe fcb3 	bl	8016348 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80179e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80179e8:	2300      	movs	r3, #0
 80179ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80179ee:	e01c      	b.n	8017a2a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80179f0:	f107 030c 	add.w	r3, r7, #12
 80179f4:	4618      	mov	r0, r3
 80179f6:	f7fe fca7 	bl	8016348 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80179fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179fc:	b29a      	uxth	r2, r3
 80179fe:	683b      	ldr	r3, [r7, #0]
 8017a00:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8017a02:	2300      	movs	r3, #0
 8017a04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8017a08:	e00f      	b.n	8017a2a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8017a0a:	f107 030c 	add.w	r3, r7, #12
 8017a0e:	4618      	mov	r0, r3
 8017a10:	f7fe fc9a 	bl	8016348 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8017a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a16:	0a5a      	lsrs	r2, r3, #9
 8017a18:	683b      	ldr	r3, [r7, #0]
 8017a1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8017a22:	e002      	b.n	8017a2a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8017a24:	2304      	movs	r3, #4
 8017a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8017a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8017a2e:	4618      	mov	r0, r3
 8017a30:	3730      	adds	r7, #48	; 0x30
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bd80      	pop	{r7, pc}
 8017a36:	bf00      	nop
 8017a38:	2000003a 	.word	0x2000003a

08017a3c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8017a40:	4b04      	ldr	r3, [pc, #16]	; (8017a54 <BSP_SD_ReadCpltCallback+0x18>)
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	f04f 32ff 	mov.w	r2, #4294967295
 8017a48:	2101      	movs	r1, #1
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f7f9 fae6 	bl	801101c <osMessagePut>
}
 8017a50:	bf00      	nop
 8017a52:	bd80      	pop	{r7, pc}
 8017a54:	20009c28 	.word	0x20009c28

08017a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b082      	sub	sp, #8
 8017a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8017a5e:	4b11      	ldr	r3, [pc, #68]	; (8017aa4 <HAL_MspInit+0x4c>)
 8017a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a62:	4a10      	ldr	r2, [pc, #64]	; (8017aa4 <HAL_MspInit+0x4c>)
 8017a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017a68:	6413      	str	r3, [r2, #64]	; 0x40
 8017a6a:	4b0e      	ldr	r3, [pc, #56]	; (8017aa4 <HAL_MspInit+0x4c>)
 8017a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017a72:	607b      	str	r3, [r7, #4]
 8017a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017a76:	4b0b      	ldr	r3, [pc, #44]	; (8017aa4 <HAL_MspInit+0x4c>)
 8017a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a7a:	4a0a      	ldr	r2, [pc, #40]	; (8017aa4 <HAL_MspInit+0x4c>)
 8017a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017a80:	6453      	str	r3, [r2, #68]	; 0x44
 8017a82:	4b08      	ldr	r3, [pc, #32]	; (8017aa4 <HAL_MspInit+0x4c>)
 8017a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017a8a:	603b      	str	r3, [r7, #0]
 8017a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8017a8e:	2200      	movs	r2, #0
 8017a90:	210f      	movs	r1, #15
 8017a92:	f06f 0001 	mvn.w	r0, #1
 8017a96:	f7e9 f927 	bl	8000ce8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017a9a:	bf00      	nop
 8017a9c:	3708      	adds	r7, #8
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	bd80      	pop	{r7, pc}
 8017aa2:	bf00      	nop
 8017aa4:	40023800 	.word	0x40023800

08017aa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b08a      	sub	sp, #40	; 0x28
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017ab0:	f107 0314 	add.w	r3, r7, #20
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	601a      	str	r2, [r3, #0]
 8017ab8:	605a      	str	r2, [r3, #4]
 8017aba:	609a      	str	r2, [r3, #8]
 8017abc:	60da      	str	r2, [r3, #12]
 8017abe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	4a21      	ldr	r2, [pc, #132]	; (8017b4c <HAL_ADC_MspInit+0xa4>)
 8017ac6:	4293      	cmp	r3, r2
 8017ac8:	d13c      	bne.n	8017b44 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8017aca:	4b21      	ldr	r3, [pc, #132]	; (8017b50 <HAL_ADC_MspInit+0xa8>)
 8017acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ace:	4a20      	ldr	r2, [pc, #128]	; (8017b50 <HAL_ADC_MspInit+0xa8>)
 8017ad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8017ad6:	4b1e      	ldr	r3, [pc, #120]	; (8017b50 <HAL_ADC_MspInit+0xa8>)
 8017ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017ade:	613b      	str	r3, [r7, #16]
 8017ae0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8017ae2:	4b1b      	ldr	r3, [pc, #108]	; (8017b50 <HAL_ADC_MspInit+0xa8>)
 8017ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ae6:	4a1a      	ldr	r2, [pc, #104]	; (8017b50 <HAL_ADC_MspInit+0xa8>)
 8017ae8:	f043 0320 	orr.w	r3, r3, #32
 8017aec:	6313      	str	r3, [r2, #48]	; 0x30
 8017aee:	4b18      	ldr	r3, [pc, #96]	; (8017b50 <HAL_ADC_MspInit+0xa8>)
 8017af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017af2:	f003 0320 	and.w	r3, r3, #32
 8017af6:	60fb      	str	r3, [r7, #12]
 8017af8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017afa:	4b15      	ldr	r3, [pc, #84]	; (8017b50 <HAL_ADC_MspInit+0xa8>)
 8017afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017afe:	4a14      	ldr	r2, [pc, #80]	; (8017b50 <HAL_ADC_MspInit+0xa8>)
 8017b00:	f043 0301 	orr.w	r3, r3, #1
 8017b04:	6313      	str	r3, [r2, #48]	; 0x30
 8017b06:	4b12      	ldr	r3, [pc, #72]	; (8017b50 <HAL_ADC_MspInit+0xa8>)
 8017b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b0a:	f003 0301 	and.w	r3, r3, #1
 8017b0e:	60bb      	str	r3, [r7, #8]
 8017b10:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8017b12:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8017b16:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017b18:	2303      	movs	r3, #3
 8017b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8017b20:	f107 0314 	add.w	r3, r7, #20
 8017b24:	4619      	mov	r1, r3
 8017b26:	480b      	ldr	r0, [pc, #44]	; (8017b54 <HAL_ADC_MspInit+0xac>)
 8017b28:	f7ea fb70 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8017b2c:	2301      	movs	r3, #1
 8017b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017b30:	2303      	movs	r3, #3
 8017b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b34:	2300      	movs	r3, #0
 8017b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8017b38:	f107 0314 	add.w	r3, r7, #20
 8017b3c:	4619      	mov	r1, r3
 8017b3e:	4806      	ldr	r0, [pc, #24]	; (8017b58 <HAL_ADC_MspInit+0xb0>)
 8017b40:	f7ea fb64 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8017b44:	bf00      	nop
 8017b46:	3728      	adds	r7, #40	; 0x28
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	bd80      	pop	{r7, pc}
 8017b4c:	40012200 	.word	0x40012200
 8017b50:	40023800 	.word	0x40023800
 8017b54:	40021400 	.word	0x40021400
 8017b58:	40020000 	.word	0x40020000

08017b5c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8017b5c:	b480      	push	{r7}
 8017b5e:	b085      	sub	sp, #20
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	4a0a      	ldr	r2, [pc, #40]	; (8017b94 <HAL_CRC_MspInit+0x38>)
 8017b6a:	4293      	cmp	r3, r2
 8017b6c:	d10b      	bne.n	8017b86 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8017b6e:	4b0a      	ldr	r3, [pc, #40]	; (8017b98 <HAL_CRC_MspInit+0x3c>)
 8017b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b72:	4a09      	ldr	r2, [pc, #36]	; (8017b98 <HAL_CRC_MspInit+0x3c>)
 8017b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017b78:	6313      	str	r3, [r2, #48]	; 0x30
 8017b7a:	4b07      	ldr	r3, [pc, #28]	; (8017b98 <HAL_CRC_MspInit+0x3c>)
 8017b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017b82:	60fb      	str	r3, [r7, #12]
 8017b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8017b86:	bf00      	nop
 8017b88:	3714      	adds	r7, #20
 8017b8a:	46bd      	mov	sp, r7
 8017b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b90:	4770      	bx	lr
 8017b92:	bf00      	nop
 8017b94:	40023000 	.word	0x40023000
 8017b98:	40023800 	.word	0x40023800

08017b9c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b08e      	sub	sp, #56	; 0x38
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017ba8:	2200      	movs	r2, #0
 8017baa:	601a      	str	r2, [r3, #0]
 8017bac:	605a      	str	r2, [r3, #4]
 8017bae:	609a      	str	r2, [r3, #8]
 8017bb0:	60da      	str	r2, [r3, #12]
 8017bb2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	4a50      	ldr	r2, [pc, #320]	; (8017cfc <HAL_DCMI_MspInit+0x160>)
 8017bba:	4293      	cmp	r3, r2
 8017bbc:	f040 809a 	bne.w	8017cf4 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8017bc0:	4b4f      	ldr	r3, [pc, #316]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bc4:	4a4e      	ldr	r2, [pc, #312]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017bc6:	f043 0301 	orr.w	r3, r3, #1
 8017bca:	6353      	str	r3, [r2, #52]	; 0x34
 8017bcc:	4b4c      	ldr	r3, [pc, #304]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bd0:	f003 0301 	and.w	r3, r3, #1
 8017bd4:	623b      	str	r3, [r7, #32]
 8017bd6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8017bd8:	4b49      	ldr	r3, [pc, #292]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bdc:	4a48      	ldr	r2, [pc, #288]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017bde:	f043 0310 	orr.w	r3, r3, #16
 8017be2:	6313      	str	r3, [r2, #48]	; 0x30
 8017be4:	4b46      	ldr	r3, [pc, #280]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017be8:	f003 0310 	and.w	r3, r3, #16
 8017bec:	61fb      	str	r3, [r7, #28]
 8017bee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017bf0:	4b43      	ldr	r3, [pc, #268]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bf4:	4a42      	ldr	r2, [pc, #264]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017bf6:	f043 0308 	orr.w	r3, r3, #8
 8017bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8017bfc:	4b40      	ldr	r3, [pc, #256]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c00:	f003 0308 	and.w	r3, r3, #8
 8017c04:	61bb      	str	r3, [r7, #24]
 8017c06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8017c08:	4b3d      	ldr	r3, [pc, #244]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c0c:	4a3c      	ldr	r2, [pc, #240]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c12:	6313      	str	r3, [r2, #48]	; 0x30
 8017c14:	4b3a      	ldr	r3, [pc, #232]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017c1c:	617b      	str	r3, [r7, #20]
 8017c1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8017c20:	4b37      	ldr	r3, [pc, #220]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c24:	4a36      	ldr	r2, [pc, #216]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8017c2c:	4b34      	ldr	r3, [pc, #208]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017c34:	613b      	str	r3, [r7, #16]
 8017c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017c38:	4b31      	ldr	r3, [pc, #196]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c3c:	4a30      	ldr	r2, [pc, #192]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017c3e:	f043 0301 	orr.w	r3, r3, #1
 8017c42:	6313      	str	r3, [r2, #48]	; 0x30
 8017c44:	4b2e      	ldr	r3, [pc, #184]	; (8017d00 <HAL_DCMI_MspInit+0x164>)
 8017c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c48:	f003 0301 	and.w	r3, r3, #1
 8017c4c:	60fb      	str	r3, [r7, #12]
 8017c4e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8017c50:	2360      	movs	r3, #96	; 0x60
 8017c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017c54:	2302      	movs	r3, #2
 8017c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c58:	2300      	movs	r3, #0
 8017c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8017c60:	230d      	movs	r3, #13
 8017c62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8017c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017c68:	4619      	mov	r1, r3
 8017c6a:	4826      	ldr	r0, [pc, #152]	; (8017d04 <HAL_DCMI_MspInit+0x168>)
 8017c6c:	f7ea face 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8017c70:	2308      	movs	r3, #8
 8017c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017c74:	2302      	movs	r3, #2
 8017c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c78:	2300      	movs	r3, #0
 8017c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8017c80:	230d      	movs	r3, #13
 8017c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8017c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017c88:	4619      	mov	r1, r3
 8017c8a:	481f      	ldr	r0, [pc, #124]	; (8017d08 <HAL_DCMI_MspInit+0x16c>)
 8017c8c:	f7ea fabe 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8017c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017c96:	2302      	movs	r3, #2
 8017c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8017ca2:	230d      	movs	r3, #13
 8017ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8017ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017caa:	4619      	mov	r1, r3
 8017cac:	4817      	ldr	r0, [pc, #92]	; (8017d0c <HAL_DCMI_MspInit+0x170>)
 8017cae:	f7ea faad 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8017cb2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8017cb6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017cb8:	2302      	movs	r3, #2
 8017cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8017cc4:	230d      	movs	r3, #13
 8017cc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8017cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017ccc:	4619      	mov	r1, r3
 8017cce:	4810      	ldr	r0, [pc, #64]	; (8017d10 <HAL_DCMI_MspInit+0x174>)
 8017cd0:	f7ea fa9c 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8017cd4:	2350      	movs	r3, #80	; 0x50
 8017cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017cd8:	2302      	movs	r3, #2
 8017cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017cdc:	2300      	movs	r3, #0
 8017cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8017ce4:	230d      	movs	r3, #13
 8017ce6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017cec:	4619      	mov	r1, r3
 8017cee:	4809      	ldr	r0, [pc, #36]	; (8017d14 <HAL_DCMI_MspInit+0x178>)
 8017cf0:	f7ea fa8c 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8017cf4:	bf00      	nop
 8017cf6:	3738      	adds	r7, #56	; 0x38
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	bd80      	pop	{r7, pc}
 8017cfc:	50050000 	.word	0x50050000
 8017d00:	40023800 	.word	0x40023800
 8017d04:	40021000 	.word	0x40021000
 8017d08:	40020c00 	.word	0x40020c00
 8017d0c:	40021800 	.word	0x40021800
 8017d10:	40021c00 	.word	0x40021c00
 8017d14:	40020000 	.word	0x40020000

08017d18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b08e      	sub	sp, #56	; 0x38
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017d24:	2200      	movs	r2, #0
 8017d26:	601a      	str	r2, [r3, #0]
 8017d28:	605a      	str	r2, [r3, #4]
 8017d2a:	609a      	str	r2, [r3, #8]
 8017d2c:	60da      	str	r2, [r3, #12]
 8017d2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	4a3f      	ldr	r2, [pc, #252]	; (8017e34 <HAL_ETH_MspInit+0x11c>)
 8017d36:	4293      	cmp	r3, r2
 8017d38:	d178      	bne.n	8017e2c <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8017d3a:	4b3f      	ldr	r3, [pc, #252]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d3e:	4a3e      	ldr	r2, [pc, #248]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017d44:	6313      	str	r3, [r2, #48]	; 0x30
 8017d46:	4b3c      	ldr	r3, [pc, #240]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017d4e:	623b      	str	r3, [r7, #32]
 8017d50:	6a3b      	ldr	r3, [r7, #32]
 8017d52:	4b39      	ldr	r3, [pc, #228]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d56:	4a38      	ldr	r2, [pc, #224]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8017d5e:	4b36      	ldr	r3, [pc, #216]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017d66:	61fb      	str	r3, [r7, #28]
 8017d68:	69fb      	ldr	r3, [r7, #28]
 8017d6a:	4b33      	ldr	r3, [pc, #204]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d6e:	4a32      	ldr	r2, [pc, #200]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017d74:	6313      	str	r3, [r2, #48]	; 0x30
 8017d76:	4b30      	ldr	r3, [pc, #192]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017d7e:	61bb      	str	r3, [r7, #24]
 8017d80:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8017d82:	4b2d      	ldr	r3, [pc, #180]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d86:	4a2c      	ldr	r2, [pc, #176]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8017d8e:	4b2a      	ldr	r3, [pc, #168]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d96:	617b      	str	r3, [r7, #20]
 8017d98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017d9a:	4b27      	ldr	r3, [pc, #156]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d9e:	4a26      	ldr	r2, [pc, #152]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017da0:	f043 0304 	orr.w	r3, r3, #4
 8017da4:	6313      	str	r3, [r2, #48]	; 0x30
 8017da6:	4b24      	ldr	r3, [pc, #144]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017daa:	f003 0304 	and.w	r3, r3, #4
 8017dae:	613b      	str	r3, [r7, #16]
 8017db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017db2:	4b21      	ldr	r3, [pc, #132]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017db6:	4a20      	ldr	r2, [pc, #128]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017db8:	f043 0301 	orr.w	r3, r3, #1
 8017dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8017dbe:	4b1e      	ldr	r3, [pc, #120]	; (8017e38 <HAL_ETH_MspInit+0x120>)
 8017dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dc2:	f003 0301 	and.w	r3, r3, #1
 8017dc6:	60fb      	str	r3, [r7, #12]
 8017dc8:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8017dca:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8017dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017dd0:	2302      	movs	r3, #2
 8017dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017dd8:	2303      	movs	r3, #3
 8017dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8017ddc:	230b      	movs	r3, #11
 8017dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8017de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017de4:	4619      	mov	r1, r3
 8017de6:	4815      	ldr	r0, [pc, #84]	; (8017e3c <HAL_ETH_MspInit+0x124>)
 8017de8:	f7ea fa10 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8017dec:	2332      	movs	r3, #50	; 0x32
 8017dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017df0:	2302      	movs	r3, #2
 8017df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017df4:	2300      	movs	r3, #0
 8017df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017df8:	2303      	movs	r3, #3
 8017dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8017dfc:	230b      	movs	r3, #11
 8017dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017e04:	4619      	mov	r1, r3
 8017e06:	480e      	ldr	r0, [pc, #56]	; (8017e40 <HAL_ETH_MspInit+0x128>)
 8017e08:	f7ea fa00 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8017e0c:	2386      	movs	r3, #134	; 0x86
 8017e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017e10:	2302      	movs	r3, #2
 8017e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e14:	2300      	movs	r3, #0
 8017e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017e18:	2303      	movs	r3, #3
 8017e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8017e1c:	230b      	movs	r3, #11
 8017e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017e24:	4619      	mov	r1, r3
 8017e26:	4807      	ldr	r0, [pc, #28]	; (8017e44 <HAL_ETH_MspInit+0x12c>)
 8017e28:	f7ea f9f0 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8017e2c:	bf00      	nop
 8017e2e:	3738      	adds	r7, #56	; 0x38
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bd80      	pop	{r7, pc}
 8017e34:	40028000 	.word	0x40028000
 8017e38:	40023800 	.word	0x40023800
 8017e3c:	40021800 	.word	0x40021800
 8017e40:	40020800 	.word	0x40020800
 8017e44:	40020000 	.word	0x40020000

08017e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b08c      	sub	sp, #48	; 0x30
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017e50:	f107 031c 	add.w	r3, r7, #28
 8017e54:	2200      	movs	r2, #0
 8017e56:	601a      	str	r2, [r3, #0]
 8017e58:	605a      	str	r2, [r3, #4]
 8017e5a:	609a      	str	r2, [r3, #8]
 8017e5c:	60da      	str	r2, [r3, #12]
 8017e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	4a2f      	ldr	r2, [pc, #188]	; (8017f24 <HAL_I2C_MspInit+0xdc>)
 8017e66:	4293      	cmp	r3, r2
 8017e68:	d129      	bne.n	8017ebe <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017e6a:	4b2f      	ldr	r3, [pc, #188]	; (8017f28 <HAL_I2C_MspInit+0xe0>)
 8017e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e6e:	4a2e      	ldr	r2, [pc, #184]	; (8017f28 <HAL_I2C_MspInit+0xe0>)
 8017e70:	f043 0302 	orr.w	r3, r3, #2
 8017e74:	6313      	str	r3, [r2, #48]	; 0x30
 8017e76:	4b2c      	ldr	r3, [pc, #176]	; (8017f28 <HAL_I2C_MspInit+0xe0>)
 8017e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e7a:	f003 0302 	and.w	r3, r3, #2
 8017e7e:	61bb      	str	r3, [r7, #24]
 8017e80:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8017e82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8017e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8017e88:	2312      	movs	r3, #18
 8017e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017e8c:	2301      	movs	r3, #1
 8017e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017e90:	2300      	movs	r3, #0
 8017e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8017e94:	2304      	movs	r3, #4
 8017e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017e98:	f107 031c 	add.w	r3, r7, #28
 8017e9c:	4619      	mov	r1, r3
 8017e9e:	4823      	ldr	r0, [pc, #140]	; (8017f2c <HAL_I2C_MspInit+0xe4>)
 8017ea0:	f7ea f9b4 	bl	800220c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8017ea4:	4b20      	ldr	r3, [pc, #128]	; (8017f28 <HAL_I2C_MspInit+0xe0>)
 8017ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ea8:	4a1f      	ldr	r2, [pc, #124]	; (8017f28 <HAL_I2C_MspInit+0xe0>)
 8017eaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017eae:	6413      	str	r3, [r2, #64]	; 0x40
 8017eb0:	4b1d      	ldr	r3, [pc, #116]	; (8017f28 <HAL_I2C_MspInit+0xe0>)
 8017eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017eb8:	617b      	str	r3, [r7, #20]
 8017eba:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8017ebc:	e02d      	b.n	8017f1a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	4a1b      	ldr	r2, [pc, #108]	; (8017f30 <HAL_I2C_MspInit+0xe8>)
 8017ec4:	4293      	cmp	r3, r2
 8017ec6:	d128      	bne.n	8017f1a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8017ec8:	4b17      	ldr	r3, [pc, #92]	; (8017f28 <HAL_I2C_MspInit+0xe0>)
 8017eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ecc:	4a16      	ldr	r2, [pc, #88]	; (8017f28 <HAL_I2C_MspInit+0xe0>)
 8017ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8017ed4:	4b14      	ldr	r3, [pc, #80]	; (8017f28 <HAL_I2C_MspInit+0xe0>)
 8017ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017edc:	613b      	str	r3, [r7, #16]
 8017ede:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8017ee0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8017ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8017ee6:	2312      	movs	r3, #18
 8017ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017eea:	2301      	movs	r3, #1
 8017eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017eee:	2303      	movs	r3, #3
 8017ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8017ef2:	2304      	movs	r3, #4
 8017ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8017ef6:	f107 031c 	add.w	r3, r7, #28
 8017efa:	4619      	mov	r1, r3
 8017efc:	480d      	ldr	r0, [pc, #52]	; (8017f34 <HAL_I2C_MspInit+0xec>)
 8017efe:	f7ea f985 	bl	800220c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8017f02:	4b09      	ldr	r3, [pc, #36]	; (8017f28 <HAL_I2C_MspInit+0xe0>)
 8017f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f06:	4a08      	ldr	r2, [pc, #32]	; (8017f28 <HAL_I2C_MspInit+0xe0>)
 8017f08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8017f0e:	4b06      	ldr	r3, [pc, #24]	; (8017f28 <HAL_I2C_MspInit+0xe0>)
 8017f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017f16:	60fb      	str	r3, [r7, #12]
 8017f18:	68fb      	ldr	r3, [r7, #12]
}
 8017f1a:	bf00      	nop
 8017f1c:	3730      	adds	r7, #48	; 0x30
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}
 8017f22:	bf00      	nop
 8017f24:	40005400 	.word	0x40005400
 8017f28:	40023800 	.word	0x40023800
 8017f2c:	40020400 	.word	0x40020400
 8017f30:	40005c00 	.word	0x40005c00
 8017f34:	40021c00 	.word	0x40021c00

08017f38 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b08c      	sub	sp, #48	; 0x30
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f40:	f107 031c 	add.w	r3, r7, #28
 8017f44:	2200      	movs	r2, #0
 8017f46:	601a      	str	r2, [r3, #0]
 8017f48:	605a      	str	r2, [r3, #4]
 8017f4a:	609a      	str	r2, [r3, #8]
 8017f4c:	60da      	str	r2, [r3, #12]
 8017f4e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	4a3b      	ldr	r2, [pc, #236]	; (8018044 <HAL_QSPI_MspInit+0x10c>)
 8017f56:	4293      	cmp	r3, r2
 8017f58:	d170      	bne.n	801803c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8017f5a:	4b3b      	ldr	r3, [pc, #236]	; (8018048 <HAL_QSPI_MspInit+0x110>)
 8017f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f5e:	4a3a      	ldr	r2, [pc, #232]	; (8018048 <HAL_QSPI_MspInit+0x110>)
 8017f60:	f043 0302 	orr.w	r3, r3, #2
 8017f64:	6393      	str	r3, [r2, #56]	; 0x38
 8017f66:	4b38      	ldr	r3, [pc, #224]	; (8018048 <HAL_QSPI_MspInit+0x110>)
 8017f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f6a:	f003 0302 	and.w	r3, r3, #2
 8017f6e:	61bb      	str	r3, [r7, #24]
 8017f70:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8017f72:	4b35      	ldr	r3, [pc, #212]	; (8018048 <HAL_QSPI_MspInit+0x110>)
 8017f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f76:	4a34      	ldr	r2, [pc, #208]	; (8018048 <HAL_QSPI_MspInit+0x110>)
 8017f78:	f043 0310 	orr.w	r3, r3, #16
 8017f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8017f7e:	4b32      	ldr	r3, [pc, #200]	; (8018048 <HAL_QSPI_MspInit+0x110>)
 8017f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f82:	f003 0310 	and.w	r3, r3, #16
 8017f86:	617b      	str	r3, [r7, #20]
 8017f88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017f8a:	4b2f      	ldr	r3, [pc, #188]	; (8018048 <HAL_QSPI_MspInit+0x110>)
 8017f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f8e:	4a2e      	ldr	r2, [pc, #184]	; (8018048 <HAL_QSPI_MspInit+0x110>)
 8017f90:	f043 0302 	orr.w	r3, r3, #2
 8017f94:	6313      	str	r3, [r2, #48]	; 0x30
 8017f96:	4b2c      	ldr	r3, [pc, #176]	; (8018048 <HAL_QSPI_MspInit+0x110>)
 8017f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f9a:	f003 0302 	and.w	r3, r3, #2
 8017f9e:	613b      	str	r3, [r7, #16]
 8017fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017fa2:	4b29      	ldr	r3, [pc, #164]	; (8018048 <HAL_QSPI_MspInit+0x110>)
 8017fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fa6:	4a28      	ldr	r2, [pc, #160]	; (8018048 <HAL_QSPI_MspInit+0x110>)
 8017fa8:	f043 0308 	orr.w	r3, r3, #8
 8017fac:	6313      	str	r3, [r2, #48]	; 0x30
 8017fae:	4b26      	ldr	r3, [pc, #152]	; (8018048 <HAL_QSPI_MspInit+0x110>)
 8017fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fb2:	f003 0308 	and.w	r3, r3, #8
 8017fb6:	60fb      	str	r3, [r7, #12]
 8017fb8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8017fba:	2304      	movs	r3, #4
 8017fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017fbe:	2302      	movs	r3, #2
 8017fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017fc6:	2303      	movs	r3, #3
 8017fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8017fca:	2309      	movs	r3, #9
 8017fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8017fce:	f107 031c 	add.w	r3, r7, #28
 8017fd2:	4619      	mov	r1, r3
 8017fd4:	481d      	ldr	r0, [pc, #116]	; (801804c <HAL_QSPI_MspInit+0x114>)
 8017fd6:	f7ea f919 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8017fda:	2340      	movs	r3, #64	; 0x40
 8017fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017fde:	2302      	movs	r3, #2
 8017fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017fe6:	2303      	movs	r3, #3
 8017fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8017fea:	230a      	movs	r3, #10
 8017fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8017fee:	f107 031c 	add.w	r3, r7, #28
 8017ff2:	4619      	mov	r1, r3
 8017ff4:	4816      	ldr	r0, [pc, #88]	; (8018050 <HAL_QSPI_MspInit+0x118>)
 8017ff6:	f7ea f909 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8017ffa:	2304      	movs	r3, #4
 8017ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017ffe:	2302      	movs	r3, #2
 8018000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018002:	2300      	movs	r3, #0
 8018004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018006:	2303      	movs	r3, #3
 8018008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 801800a:	2309      	movs	r3, #9
 801800c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801800e:	f107 031c 	add.w	r3, r7, #28
 8018012:	4619      	mov	r1, r3
 8018014:	480e      	ldr	r0, [pc, #56]	; (8018050 <HAL_QSPI_MspInit+0x118>)
 8018016:	f7ea f8f9 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 801801a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801801e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018020:	2302      	movs	r3, #2
 8018022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018024:	2300      	movs	r3, #0
 8018026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018028:	2303      	movs	r3, #3
 801802a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 801802c:	2309      	movs	r3, #9
 801802e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8018030:	f107 031c 	add.w	r3, r7, #28
 8018034:	4619      	mov	r1, r3
 8018036:	4807      	ldr	r0, [pc, #28]	; (8018054 <HAL_QSPI_MspInit+0x11c>)
 8018038:	f7ea f8e8 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 801803c:	bf00      	nop
 801803e:	3730      	adds	r7, #48	; 0x30
 8018040:	46bd      	mov	sp, r7
 8018042:	bd80      	pop	{r7, pc}
 8018044:	a0001000 	.word	0xa0001000
 8018048:	40023800 	.word	0x40023800
 801804c:	40021000 	.word	0x40021000
 8018050:	40020400 	.word	0x40020400
 8018054:	40020c00 	.word	0x40020c00

08018058 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8018058:	b480      	push	{r7}
 801805a:	b083      	sub	sp, #12
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	4a07      	ldr	r2, [pc, #28]	; (8018084 <HAL_RTC_MspInit+0x2c>)
 8018066:	4293      	cmp	r3, r2
 8018068:	d105      	bne.n	8018076 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 801806a:	4b07      	ldr	r3, [pc, #28]	; (8018088 <HAL_RTC_MspInit+0x30>)
 801806c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801806e:	4a06      	ldr	r2, [pc, #24]	; (8018088 <HAL_RTC_MspInit+0x30>)
 8018070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018074:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8018076:	bf00      	nop
 8018078:	370c      	adds	r7, #12
 801807a:	46bd      	mov	sp, r7
 801807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018080:	4770      	bx	lr
 8018082:	bf00      	nop
 8018084:	40002800 	.word	0x40002800
 8018088:	40023800 	.word	0x40023800

0801808c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 801808c:	b580      	push	{r7, lr}
 801808e:	b08a      	sub	sp, #40	; 0x28
 8018090:	af00      	add	r7, sp, #0
 8018092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018094:	f107 0314 	add.w	r3, r7, #20
 8018098:	2200      	movs	r2, #0
 801809a:	601a      	str	r2, [r3, #0]
 801809c:	605a      	str	r2, [r3, #4]
 801809e:	609a      	str	r2, [r3, #8]
 80180a0:	60da      	str	r2, [r3, #12]
 80180a2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	4a25      	ldr	r2, [pc, #148]	; (8018140 <HAL_SD_MspInit+0xb4>)
 80180aa:	4293      	cmp	r3, r2
 80180ac:	d144      	bne.n	8018138 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80180ae:	4b25      	ldr	r3, [pc, #148]	; (8018144 <HAL_SD_MspInit+0xb8>)
 80180b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180b2:	4a24      	ldr	r2, [pc, #144]	; (8018144 <HAL_SD_MspInit+0xb8>)
 80180b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80180b8:	6453      	str	r3, [r2, #68]	; 0x44
 80180ba:	4b22      	ldr	r3, [pc, #136]	; (8018144 <HAL_SD_MspInit+0xb8>)
 80180bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80180c2:	613b      	str	r3, [r7, #16]
 80180c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80180c6:	4b1f      	ldr	r3, [pc, #124]	; (8018144 <HAL_SD_MspInit+0xb8>)
 80180c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180ca:	4a1e      	ldr	r2, [pc, #120]	; (8018144 <HAL_SD_MspInit+0xb8>)
 80180cc:	f043 0304 	orr.w	r3, r3, #4
 80180d0:	6313      	str	r3, [r2, #48]	; 0x30
 80180d2:	4b1c      	ldr	r3, [pc, #112]	; (8018144 <HAL_SD_MspInit+0xb8>)
 80180d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180d6:	f003 0304 	and.w	r3, r3, #4
 80180da:	60fb      	str	r3, [r7, #12]
 80180dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80180de:	4b19      	ldr	r3, [pc, #100]	; (8018144 <HAL_SD_MspInit+0xb8>)
 80180e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180e2:	4a18      	ldr	r2, [pc, #96]	; (8018144 <HAL_SD_MspInit+0xb8>)
 80180e4:	f043 0308 	orr.w	r3, r3, #8
 80180e8:	6313      	str	r3, [r2, #48]	; 0x30
 80180ea:	4b16      	ldr	r3, [pc, #88]	; (8018144 <HAL_SD_MspInit+0xb8>)
 80180ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180ee:	f003 0308 	and.w	r3, r3, #8
 80180f2:	60bb      	str	r3, [r7, #8]
 80180f4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 80180f6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80180fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80180fc:	2302      	movs	r3, #2
 80180fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018100:	2300      	movs	r3, #0
 8018102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018104:	2303      	movs	r3, #3
 8018106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8018108:	230c      	movs	r3, #12
 801810a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801810c:	f107 0314 	add.w	r3, r7, #20
 8018110:	4619      	mov	r1, r3
 8018112:	480d      	ldr	r0, [pc, #52]	; (8018148 <HAL_SD_MspInit+0xbc>)
 8018114:	f7ea f87a 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8018118:	2304      	movs	r3, #4
 801811a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801811c:	2302      	movs	r3, #2
 801811e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018120:	2300      	movs	r3, #0
 8018122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018124:	2303      	movs	r3, #3
 8018126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8018128:	230c      	movs	r3, #12
 801812a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 801812c:	f107 0314 	add.w	r3, r7, #20
 8018130:	4619      	mov	r1, r3
 8018132:	4806      	ldr	r0, [pc, #24]	; (801814c <HAL_SD_MspInit+0xc0>)
 8018134:	f7ea f86a 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8018138:	bf00      	nop
 801813a:	3728      	adds	r7, #40	; 0x28
 801813c:	46bd      	mov	sp, r7
 801813e:	bd80      	pop	{r7, pc}
 8018140:	40012c00 	.word	0x40012c00
 8018144:	40023800 	.word	0x40023800
 8018148:	40020800 	.word	0x40020800
 801814c:	40020c00 	.word	0x40020c00

08018150 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b08a      	sub	sp, #40	; 0x28
 8018154:	af00      	add	r7, sp, #0
 8018156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018158:	f107 0314 	add.w	r3, r7, #20
 801815c:	2200      	movs	r2, #0
 801815e:	601a      	str	r2, [r3, #0]
 8018160:	605a      	str	r2, [r3, #4]
 8018162:	609a      	str	r2, [r3, #8]
 8018164:	60da      	str	r2, [r3, #12]
 8018166:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8018170:	d127      	bne.n	80181c2 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8018172:	4b16      	ldr	r3, [pc, #88]	; (80181cc <HAL_SPDIFRX_MspInit+0x7c>)
 8018174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018176:	4a15      	ldr	r2, [pc, #84]	; (80181cc <HAL_SPDIFRX_MspInit+0x7c>)
 8018178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801817c:	6413      	str	r3, [r2, #64]	; 0x40
 801817e:	4b13      	ldr	r3, [pc, #76]	; (80181cc <HAL_SPDIFRX_MspInit+0x7c>)
 8018180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018186:	613b      	str	r3, [r7, #16]
 8018188:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801818a:	4b10      	ldr	r3, [pc, #64]	; (80181cc <HAL_SPDIFRX_MspInit+0x7c>)
 801818c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801818e:	4a0f      	ldr	r2, [pc, #60]	; (80181cc <HAL_SPDIFRX_MspInit+0x7c>)
 8018190:	f043 0308 	orr.w	r3, r3, #8
 8018194:	6313      	str	r3, [r2, #48]	; 0x30
 8018196:	4b0d      	ldr	r3, [pc, #52]	; (80181cc <HAL_SPDIFRX_MspInit+0x7c>)
 8018198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801819a:	f003 0308 	and.w	r3, r3, #8
 801819e:	60fb      	str	r3, [r7, #12]
 80181a0:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80181a2:	2380      	movs	r3, #128	; 0x80
 80181a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80181a6:	2302      	movs	r3, #2
 80181a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181aa:	2300      	movs	r3, #0
 80181ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80181ae:	2300      	movs	r3, #0
 80181b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80181b2:	2308      	movs	r3, #8
 80181b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80181b6:	f107 0314 	add.w	r3, r7, #20
 80181ba:	4619      	mov	r1, r3
 80181bc:	4804      	ldr	r0, [pc, #16]	; (80181d0 <HAL_SPDIFRX_MspInit+0x80>)
 80181be:	f7ea f825 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80181c2:	bf00      	nop
 80181c4:	3728      	adds	r7, #40	; 0x28
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bd80      	pop	{r7, pc}
 80181ca:	bf00      	nop
 80181cc:	40023800 	.word	0x40023800
 80181d0:	40020c00 	.word	0x40020c00

080181d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b08a      	sub	sp, #40	; 0x28
 80181d8:	af00      	add	r7, sp, #0
 80181da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80181dc:	f107 0314 	add.w	r3, r7, #20
 80181e0:	2200      	movs	r2, #0
 80181e2:	601a      	str	r2, [r3, #0]
 80181e4:	605a      	str	r2, [r3, #4]
 80181e6:	609a      	str	r2, [r3, #8]
 80181e8:	60da      	str	r2, [r3, #12]
 80181ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	4a25      	ldr	r2, [pc, #148]	; (8018288 <HAL_SPI_MspInit+0xb4>)
 80181f2:	4293      	cmp	r3, r2
 80181f4:	d144      	bne.n	8018280 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80181f6:	4b25      	ldr	r3, [pc, #148]	; (801828c <HAL_SPI_MspInit+0xb8>)
 80181f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181fa:	4a24      	ldr	r2, [pc, #144]	; (801828c <HAL_SPI_MspInit+0xb8>)
 80181fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018200:	6413      	str	r3, [r2, #64]	; 0x40
 8018202:	4b22      	ldr	r3, [pc, #136]	; (801828c <HAL_SPI_MspInit+0xb8>)
 8018204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801820a:	613b      	str	r3, [r7, #16]
 801820c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801820e:	4b1f      	ldr	r3, [pc, #124]	; (801828c <HAL_SPI_MspInit+0xb8>)
 8018210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018212:	4a1e      	ldr	r2, [pc, #120]	; (801828c <HAL_SPI_MspInit+0xb8>)
 8018214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018218:	6313      	str	r3, [r2, #48]	; 0x30
 801821a:	4b1c      	ldr	r3, [pc, #112]	; (801828c <HAL_SPI_MspInit+0xb8>)
 801821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801821e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018222:	60fb      	str	r3, [r7, #12]
 8018224:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018226:	4b19      	ldr	r3, [pc, #100]	; (801828c <HAL_SPI_MspInit+0xb8>)
 8018228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801822a:	4a18      	ldr	r2, [pc, #96]	; (801828c <HAL_SPI_MspInit+0xb8>)
 801822c:	f043 0302 	orr.w	r3, r3, #2
 8018230:	6313      	str	r3, [r2, #48]	; 0x30
 8018232:	4b16      	ldr	r3, [pc, #88]	; (801828c <HAL_SPI_MspInit+0xb8>)
 8018234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018236:	f003 0302 	and.w	r3, r3, #2
 801823a:	60bb      	str	r3, [r7, #8]
 801823c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 801823e:	2302      	movs	r3, #2
 8018240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018242:	2302      	movs	r3, #2
 8018244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018246:	2300      	movs	r3, #0
 8018248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801824a:	2300      	movs	r3, #0
 801824c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801824e:	2305      	movs	r3, #5
 8018250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8018252:	f107 0314 	add.w	r3, r7, #20
 8018256:	4619      	mov	r1, r3
 8018258:	480d      	ldr	r0, [pc, #52]	; (8018290 <HAL_SPI_MspInit+0xbc>)
 801825a:	f7e9 ffd7 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 801825e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8018262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018264:	2302      	movs	r3, #2
 8018266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018268:	2300      	movs	r3, #0
 801826a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801826c:	2300      	movs	r3, #0
 801826e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8018270:	2305      	movs	r3, #5
 8018272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018274:	f107 0314 	add.w	r3, r7, #20
 8018278:	4619      	mov	r1, r3
 801827a:	4806      	ldr	r0, [pc, #24]	; (8018294 <HAL_SPI_MspInit+0xc0>)
 801827c:	f7e9 ffc6 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8018280:	bf00      	nop
 8018282:	3728      	adds	r7, #40	; 0x28
 8018284:	46bd      	mov	sp, r7
 8018286:	bd80      	pop	{r7, pc}
 8018288:	40003800 	.word	0x40003800
 801828c:	40023800 	.word	0x40023800
 8018290:	40022000 	.word	0x40022000
 8018294:	40020400 	.word	0x40020400

08018298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8018298:	b480      	push	{r7}
 801829a:	b087      	sub	sp, #28
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	4a25      	ldr	r2, [pc, #148]	; (801833c <HAL_TIM_Base_MspInit+0xa4>)
 80182a6:	4293      	cmp	r3, r2
 80182a8:	d10c      	bne.n	80182c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80182aa:	4b25      	ldr	r3, [pc, #148]	; (8018340 <HAL_TIM_Base_MspInit+0xa8>)
 80182ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182ae:	4a24      	ldr	r2, [pc, #144]	; (8018340 <HAL_TIM_Base_MspInit+0xa8>)
 80182b0:	f043 0301 	orr.w	r3, r3, #1
 80182b4:	6453      	str	r3, [r2, #68]	; 0x44
 80182b6:	4b22      	ldr	r3, [pc, #136]	; (8018340 <HAL_TIM_Base_MspInit+0xa8>)
 80182b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182ba:	f003 0301 	and.w	r3, r3, #1
 80182be:	617b      	str	r3, [r7, #20]
 80182c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80182c2:	e034      	b.n	801832e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	4a1e      	ldr	r2, [pc, #120]	; (8018344 <HAL_TIM_Base_MspInit+0xac>)
 80182ca:	4293      	cmp	r3, r2
 80182cc:	d10c      	bne.n	80182e8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80182ce:	4b1c      	ldr	r3, [pc, #112]	; (8018340 <HAL_TIM_Base_MspInit+0xa8>)
 80182d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182d2:	4a1b      	ldr	r2, [pc, #108]	; (8018340 <HAL_TIM_Base_MspInit+0xa8>)
 80182d4:	f043 0302 	orr.w	r3, r3, #2
 80182d8:	6413      	str	r3, [r2, #64]	; 0x40
 80182da:	4b19      	ldr	r3, [pc, #100]	; (8018340 <HAL_TIM_Base_MspInit+0xa8>)
 80182dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182de:	f003 0302 	and.w	r3, r3, #2
 80182e2:	613b      	str	r3, [r7, #16]
 80182e4:	693b      	ldr	r3, [r7, #16]
}
 80182e6:	e022      	b.n	801832e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	4a16      	ldr	r2, [pc, #88]	; (8018348 <HAL_TIM_Base_MspInit+0xb0>)
 80182ee:	4293      	cmp	r3, r2
 80182f0:	d10c      	bne.n	801830c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80182f2:	4b13      	ldr	r3, [pc, #76]	; (8018340 <HAL_TIM_Base_MspInit+0xa8>)
 80182f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182f6:	4a12      	ldr	r2, [pc, #72]	; (8018340 <HAL_TIM_Base_MspInit+0xa8>)
 80182f8:	f043 0308 	orr.w	r3, r3, #8
 80182fc:	6413      	str	r3, [r2, #64]	; 0x40
 80182fe:	4b10      	ldr	r3, [pc, #64]	; (8018340 <HAL_TIM_Base_MspInit+0xa8>)
 8018300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018302:	f003 0308 	and.w	r3, r3, #8
 8018306:	60fb      	str	r3, [r7, #12]
 8018308:	68fb      	ldr	r3, [r7, #12]
}
 801830a:	e010      	b.n	801832e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	4a0e      	ldr	r2, [pc, #56]	; (801834c <HAL_TIM_Base_MspInit+0xb4>)
 8018312:	4293      	cmp	r3, r2
 8018314:	d10b      	bne.n	801832e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8018316:	4b0a      	ldr	r3, [pc, #40]	; (8018340 <HAL_TIM_Base_MspInit+0xa8>)
 8018318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801831a:	4a09      	ldr	r2, [pc, #36]	; (8018340 <HAL_TIM_Base_MspInit+0xa8>)
 801831c:	f043 0302 	orr.w	r3, r3, #2
 8018320:	6453      	str	r3, [r2, #68]	; 0x44
 8018322:	4b07      	ldr	r3, [pc, #28]	; (8018340 <HAL_TIM_Base_MspInit+0xa8>)
 8018324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018326:	f003 0302 	and.w	r3, r3, #2
 801832a:	60bb      	str	r3, [r7, #8]
 801832c:	68bb      	ldr	r3, [r7, #8]
}
 801832e:	bf00      	nop
 8018330:	371c      	adds	r7, #28
 8018332:	46bd      	mov	sp, r7
 8018334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018338:	4770      	bx	lr
 801833a:	bf00      	nop
 801833c:	40010000 	.word	0x40010000
 8018340:	40023800 	.word	0x40023800
 8018344:	40000400 	.word	0x40000400
 8018348:	40000c00 	.word	0x40000c00
 801834c:	40010400 	.word	0x40010400

08018350 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8018350:	b480      	push	{r7}
 8018352:	b085      	sub	sp, #20
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	4a0a      	ldr	r2, [pc, #40]	; (8018388 <HAL_TIM_PWM_MspInit+0x38>)
 801835e:	4293      	cmp	r3, r2
 8018360:	d10b      	bne.n	801837a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8018362:	4b0a      	ldr	r3, [pc, #40]	; (801838c <HAL_TIM_PWM_MspInit+0x3c>)
 8018364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018366:	4a09      	ldr	r2, [pc, #36]	; (801838c <HAL_TIM_PWM_MspInit+0x3c>)
 8018368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801836c:	6413      	str	r3, [r2, #64]	; 0x40
 801836e:	4b07      	ldr	r3, [pc, #28]	; (801838c <HAL_TIM_PWM_MspInit+0x3c>)
 8018370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018376:	60fb      	str	r3, [r7, #12]
 8018378:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 801837a:	bf00      	nop
 801837c:	3714      	adds	r7, #20
 801837e:	46bd      	mov	sp, r7
 8018380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018384:	4770      	bx	lr
 8018386:	bf00      	nop
 8018388:	40001800 	.word	0x40001800
 801838c:	40023800 	.word	0x40023800

08018390 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b08c      	sub	sp, #48	; 0x30
 8018394:	af00      	add	r7, sp, #0
 8018396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018398:	f107 031c 	add.w	r3, r7, #28
 801839c:	2200      	movs	r2, #0
 801839e:	601a      	str	r2, [r3, #0]
 80183a0:	605a      	str	r2, [r3, #4]
 80183a2:	609a      	str	r2, [r3, #8]
 80183a4:	60da      	str	r2, [r3, #12]
 80183a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	4a44      	ldr	r2, [pc, #272]	; (80184c0 <HAL_TIM_MspPostInit+0x130>)
 80183ae:	4293      	cmp	r3, r2
 80183b0:	d11d      	bne.n	80183ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80183b2:	4b44      	ldr	r3, [pc, #272]	; (80184c4 <HAL_TIM_MspPostInit+0x134>)
 80183b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183b6:	4a43      	ldr	r2, [pc, #268]	; (80184c4 <HAL_TIM_MspPostInit+0x134>)
 80183b8:	f043 0301 	orr.w	r3, r3, #1
 80183bc:	6313      	str	r3, [r2, #48]	; 0x30
 80183be:	4b41      	ldr	r3, [pc, #260]	; (80184c4 <HAL_TIM_MspPostInit+0x134>)
 80183c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183c2:	f003 0301 	and.w	r3, r3, #1
 80183c6:	61bb      	str	r3, [r7, #24]
 80183c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80183ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80183ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80183d0:	2302      	movs	r3, #2
 80183d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183d4:	2300      	movs	r3, #0
 80183d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80183d8:	2300      	movs	r3, #0
 80183da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80183dc:	2301      	movs	r3, #1
 80183de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80183e0:	f107 031c 	add.w	r3, r7, #28
 80183e4:	4619      	mov	r1, r3
 80183e6:	4838      	ldr	r0, [pc, #224]	; (80184c8 <HAL_TIM_MspPostInit+0x138>)
 80183e8:	f7e9 ff10 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80183ec:	e064      	b.n	80184b8 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	4a36      	ldr	r2, [pc, #216]	; (80184cc <HAL_TIM_MspPostInit+0x13c>)
 80183f4:	4293      	cmp	r3, r2
 80183f6:	d11c      	bne.n	8018432 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80183f8:	4b32      	ldr	r3, [pc, #200]	; (80184c4 <HAL_TIM_MspPostInit+0x134>)
 80183fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183fc:	4a31      	ldr	r2, [pc, #196]	; (80184c4 <HAL_TIM_MspPostInit+0x134>)
 80183fe:	f043 0302 	orr.w	r3, r3, #2
 8018402:	6313      	str	r3, [r2, #48]	; 0x30
 8018404:	4b2f      	ldr	r3, [pc, #188]	; (80184c4 <HAL_TIM_MspPostInit+0x134>)
 8018406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018408:	f003 0302 	and.w	r3, r3, #2
 801840c:	617b      	str	r3, [r7, #20]
 801840e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8018410:	2310      	movs	r3, #16
 8018412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018414:	2302      	movs	r3, #2
 8018416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018418:	2300      	movs	r3, #0
 801841a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801841c:	2300      	movs	r3, #0
 801841e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8018420:	2302      	movs	r3, #2
 8018422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8018424:	f107 031c 	add.w	r3, r7, #28
 8018428:	4619      	mov	r1, r3
 801842a:	4829      	ldr	r0, [pc, #164]	; (80184d0 <HAL_TIM_MspPostInit+0x140>)
 801842c:	f7e9 feee 	bl	800220c <HAL_GPIO_Init>
}
 8018430:	e042      	b.n	80184b8 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	4a27      	ldr	r2, [pc, #156]	; (80184d4 <HAL_TIM_MspPostInit+0x144>)
 8018438:	4293      	cmp	r3, r2
 801843a:	d11c      	bne.n	8018476 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801843c:	4b21      	ldr	r3, [pc, #132]	; (80184c4 <HAL_TIM_MspPostInit+0x134>)
 801843e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018440:	4a20      	ldr	r2, [pc, #128]	; (80184c4 <HAL_TIM_MspPostInit+0x134>)
 8018442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018446:	6313      	str	r3, [r2, #48]	; 0x30
 8018448:	4b1e      	ldr	r3, [pc, #120]	; (80184c4 <HAL_TIM_MspPostInit+0x134>)
 801844a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801844c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018450:	613b      	str	r3, [r7, #16]
 8018452:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8018454:	2301      	movs	r3, #1
 8018456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018458:	2302      	movs	r3, #2
 801845a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801845c:	2300      	movs	r3, #0
 801845e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018460:	2300      	movs	r3, #0
 8018462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8018464:	2302      	movs	r3, #2
 8018466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8018468:	f107 031c 	add.w	r3, r7, #28
 801846c:	4619      	mov	r1, r3
 801846e:	481a      	ldr	r0, [pc, #104]	; (80184d8 <HAL_TIM_MspPostInit+0x148>)
 8018470:	f7e9 fecc 	bl	800220c <HAL_GPIO_Init>
}
 8018474:	e020      	b.n	80184b8 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	4a18      	ldr	r2, [pc, #96]	; (80184dc <HAL_TIM_MspPostInit+0x14c>)
 801847c:	4293      	cmp	r3, r2
 801847e:	d11b      	bne.n	80184b8 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8018480:	4b10      	ldr	r3, [pc, #64]	; (80184c4 <HAL_TIM_MspPostInit+0x134>)
 8018482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018484:	4a0f      	ldr	r2, [pc, #60]	; (80184c4 <HAL_TIM_MspPostInit+0x134>)
 8018486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801848a:	6313      	str	r3, [r2, #48]	; 0x30
 801848c:	4b0d      	ldr	r3, [pc, #52]	; (80184c4 <HAL_TIM_MspPostInit+0x134>)
 801848e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018494:	60fb      	str	r3, [r7, #12]
 8018496:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8018498:	2340      	movs	r3, #64	; 0x40
 801849a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801849c:	2302      	movs	r3, #2
 801849e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80184a0:	2300      	movs	r3, #0
 80184a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80184a4:	2300      	movs	r3, #0
 80184a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80184a8:	2309      	movs	r3, #9
 80184aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80184ac:	f107 031c 	add.w	r3, r7, #28
 80184b0:	4619      	mov	r1, r3
 80184b2:	480b      	ldr	r0, [pc, #44]	; (80184e0 <HAL_TIM_MspPostInit+0x150>)
 80184b4:	f7e9 feaa 	bl	800220c <HAL_GPIO_Init>
}
 80184b8:	bf00      	nop
 80184ba:	3730      	adds	r7, #48	; 0x30
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}
 80184c0:	40010000 	.word	0x40010000
 80184c4:	40023800 	.word	0x40023800
 80184c8:	40020000 	.word	0x40020000
 80184cc:	40000400 	.word	0x40000400
 80184d0:	40020400 	.word	0x40020400
 80184d4:	40000c00 	.word	0x40000c00
 80184d8:	40022000 	.word	0x40022000
 80184dc:	40001800 	.word	0x40001800
 80184e0:	40021c00 	.word	0x40021c00

080184e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80184e4:	b580      	push	{r7, lr}
 80184e6:	b08c      	sub	sp, #48	; 0x30
 80184e8:	af00      	add	r7, sp, #0
 80184ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80184ec:	f107 031c 	add.w	r3, r7, #28
 80184f0:	2200      	movs	r2, #0
 80184f2:	601a      	str	r2, [r3, #0]
 80184f4:	605a      	str	r2, [r3, #4]
 80184f6:	609a      	str	r2, [r3, #8]
 80184f8:	60da      	str	r2, [r3, #12]
 80184fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	4a3c      	ldr	r2, [pc, #240]	; (80185f4 <HAL_UART_MspInit+0x110>)
 8018502:	4293      	cmp	r3, r2
 8018504:	d145      	bne.n	8018592 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8018506:	4b3c      	ldr	r3, [pc, #240]	; (80185f8 <HAL_UART_MspInit+0x114>)
 8018508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801850a:	4a3b      	ldr	r2, [pc, #236]	; (80185f8 <HAL_UART_MspInit+0x114>)
 801850c:	f043 0310 	orr.w	r3, r3, #16
 8018510:	6453      	str	r3, [r2, #68]	; 0x44
 8018512:	4b39      	ldr	r3, [pc, #228]	; (80185f8 <HAL_UART_MspInit+0x114>)
 8018514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018516:	f003 0310 	and.w	r3, r3, #16
 801851a:	61bb      	str	r3, [r7, #24]
 801851c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801851e:	4b36      	ldr	r3, [pc, #216]	; (80185f8 <HAL_UART_MspInit+0x114>)
 8018520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018522:	4a35      	ldr	r2, [pc, #212]	; (80185f8 <HAL_UART_MspInit+0x114>)
 8018524:	f043 0302 	orr.w	r3, r3, #2
 8018528:	6313      	str	r3, [r2, #48]	; 0x30
 801852a:	4b33      	ldr	r3, [pc, #204]	; (80185f8 <HAL_UART_MspInit+0x114>)
 801852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801852e:	f003 0302 	and.w	r3, r3, #2
 8018532:	617b      	str	r3, [r7, #20]
 8018534:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018536:	4b30      	ldr	r3, [pc, #192]	; (80185f8 <HAL_UART_MspInit+0x114>)
 8018538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801853a:	4a2f      	ldr	r2, [pc, #188]	; (80185f8 <HAL_UART_MspInit+0x114>)
 801853c:	f043 0301 	orr.w	r3, r3, #1
 8018540:	6313      	str	r3, [r2, #48]	; 0x30
 8018542:	4b2d      	ldr	r3, [pc, #180]	; (80185f8 <HAL_UART_MspInit+0x114>)
 8018544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018546:	f003 0301 	and.w	r3, r3, #1
 801854a:	613b      	str	r3, [r7, #16]
 801854c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = Wifi_rx_Pin;
 801854e:	2380      	movs	r3, #128	; 0x80
 8018550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018552:	2302      	movs	r3, #2
 8018554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018556:	2300      	movs	r3, #0
 8018558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801855a:	2303      	movs	r3, #3
 801855c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801855e:	2307      	movs	r3, #7
 8018560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Wifi_rx_GPIO_Port, &GPIO_InitStruct);
 8018562:	f107 031c 	add.w	r3, r7, #28
 8018566:	4619      	mov	r1, r3
 8018568:	4824      	ldr	r0, [pc, #144]	; (80185fc <HAL_UART_MspInit+0x118>)
 801856a:	f7e9 fe4f 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Wifi_tx_Pin;
 801856e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018574:	2302      	movs	r3, #2
 8018576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018578:	2300      	movs	r3, #0
 801857a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801857c:	2303      	movs	r3, #3
 801857e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8018580:	2307      	movs	r3, #7
 8018582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Wifi_tx_GPIO_Port, &GPIO_InitStruct);
 8018584:	f107 031c 	add.w	r3, r7, #28
 8018588:	4619      	mov	r1, r3
 801858a:	481d      	ldr	r0, [pc, #116]	; (8018600 <HAL_UART_MspInit+0x11c>)
 801858c:	f7e9 fe3e 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8018590:	e02c      	b.n	80185ec <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	4a1b      	ldr	r2, [pc, #108]	; (8018604 <HAL_UART_MspInit+0x120>)
 8018598:	4293      	cmp	r3, r2
 801859a:	d127      	bne.n	80185ec <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 801859c:	4b16      	ldr	r3, [pc, #88]	; (80185f8 <HAL_UART_MspInit+0x114>)
 801859e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185a0:	4a15      	ldr	r2, [pc, #84]	; (80185f8 <HAL_UART_MspInit+0x114>)
 80185a2:	f043 0320 	orr.w	r3, r3, #32
 80185a6:	6453      	str	r3, [r2, #68]	; 0x44
 80185a8:	4b13      	ldr	r3, [pc, #76]	; (80185f8 <HAL_UART_MspInit+0x114>)
 80185aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185ac:	f003 0320 	and.w	r3, r3, #32
 80185b0:	60fb      	str	r3, [r7, #12]
 80185b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80185b4:	4b10      	ldr	r3, [pc, #64]	; (80185f8 <HAL_UART_MspInit+0x114>)
 80185b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185b8:	4a0f      	ldr	r2, [pc, #60]	; (80185f8 <HAL_UART_MspInit+0x114>)
 80185ba:	f043 0304 	orr.w	r3, r3, #4
 80185be:	6313      	str	r3, [r2, #48]	; 0x30
 80185c0:	4b0d      	ldr	r3, [pc, #52]	; (80185f8 <HAL_UART_MspInit+0x114>)
 80185c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185c4:	f003 0304 	and.w	r3, r3, #4
 80185c8:	60bb      	str	r3, [r7, #8]
 80185ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = bluetooth_Pin|bluetoothC6_Pin;
 80185cc:	23c0      	movs	r3, #192	; 0xc0
 80185ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80185d0:	2302      	movs	r3, #2
 80185d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80185d4:	2300      	movs	r3, #0
 80185d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80185d8:	2303      	movs	r3, #3
 80185da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80185dc:	2308      	movs	r3, #8
 80185de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80185e0:	f107 031c 	add.w	r3, r7, #28
 80185e4:	4619      	mov	r1, r3
 80185e6:	4808      	ldr	r0, [pc, #32]	; (8018608 <HAL_UART_MspInit+0x124>)
 80185e8:	f7e9 fe10 	bl	800220c <HAL_GPIO_Init>
}
 80185ec:	bf00      	nop
 80185ee:	3730      	adds	r7, #48	; 0x30
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd80      	pop	{r7, pc}
 80185f4:	40011000 	.word	0x40011000
 80185f8:	40023800 	.word	0x40023800
 80185fc:	40020400 	.word	0x40020400
 8018600:	40020000 	.word	0x40020000
 8018604:	40011400 	.word	0x40011400
 8018608:	40020800 	.word	0x40020800

0801860c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b08a      	sub	sp, #40	; 0x28
 8018610:	af00      	add	r7, sp, #0
 8018612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	4a2b      	ldr	r2, [pc, #172]	; (80186c8 <HAL_SAI_MspInit+0xbc>)
 801861a:	4293      	cmp	r3, r2
 801861c:	d124      	bne.n	8018668 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 801861e:	4b2b      	ldr	r3, [pc, #172]	; (80186cc <HAL_SAI_MspInit+0xc0>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d10b      	bne.n	801863e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8018626:	4b2a      	ldr	r3, [pc, #168]	; (80186d0 <HAL_SAI_MspInit+0xc4>)
 8018628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801862a:	4a29      	ldr	r2, [pc, #164]	; (80186d0 <HAL_SAI_MspInit+0xc4>)
 801862c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8018630:	6453      	str	r3, [r2, #68]	; 0x44
 8018632:	4b27      	ldr	r3, [pc, #156]	; (80186d0 <HAL_SAI_MspInit+0xc4>)
 8018634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801863a:	613b      	str	r3, [r7, #16]
 801863c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 801863e:	4b23      	ldr	r3, [pc, #140]	; (80186cc <HAL_SAI_MspInit+0xc0>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	3301      	adds	r3, #1
 8018644:	4a21      	ldr	r2, [pc, #132]	; (80186cc <HAL_SAI_MspInit+0xc0>)
 8018646:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8018648:	23f0      	movs	r3, #240	; 0xf0
 801864a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801864c:	2302      	movs	r3, #2
 801864e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018650:	2300      	movs	r3, #0
 8018652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018654:	2300      	movs	r3, #0
 8018656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8018658:	230a      	movs	r3, #10
 801865a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801865c:	f107 0314 	add.w	r3, r7, #20
 8018660:	4619      	mov	r1, r3
 8018662:	481c      	ldr	r0, [pc, #112]	; (80186d4 <HAL_SAI_MspInit+0xc8>)
 8018664:	f7e9 fdd2 	bl	800220c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	4a1a      	ldr	r2, [pc, #104]	; (80186d8 <HAL_SAI_MspInit+0xcc>)
 801866e:	4293      	cmp	r3, r2
 8018670:	d125      	bne.n	80186be <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8018672:	4b16      	ldr	r3, [pc, #88]	; (80186cc <HAL_SAI_MspInit+0xc0>)
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d10b      	bne.n	8018692 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 801867a:	4b15      	ldr	r3, [pc, #84]	; (80186d0 <HAL_SAI_MspInit+0xc4>)
 801867c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801867e:	4a14      	ldr	r2, [pc, #80]	; (80186d0 <HAL_SAI_MspInit+0xc4>)
 8018680:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8018684:	6453      	str	r3, [r2, #68]	; 0x44
 8018686:	4b12      	ldr	r3, [pc, #72]	; (80186d0 <HAL_SAI_MspInit+0xc4>)
 8018688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801868a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801868e:	60fb      	str	r3, [r7, #12]
 8018690:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8018692:	4b0e      	ldr	r3, [pc, #56]	; (80186cc <HAL_SAI_MspInit+0xc0>)
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	3301      	adds	r3, #1
 8018698:	4a0c      	ldr	r2, [pc, #48]	; (80186cc <HAL_SAI_MspInit+0xc0>)
 801869a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 801869c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80186a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80186a2:	2302      	movs	r3, #2
 80186a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80186a6:	2300      	movs	r3, #0
 80186a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80186aa:	2300      	movs	r3, #0
 80186ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80186ae:	230a      	movs	r3, #10
 80186b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80186b2:	f107 0314 	add.w	r3, r7, #20
 80186b6:	4619      	mov	r1, r3
 80186b8:	4808      	ldr	r0, [pc, #32]	; (80186dc <HAL_SAI_MspInit+0xd0>)
 80186ba:	f7e9 fda7 	bl	800220c <HAL_GPIO_Init>

    }
}
 80186be:	bf00      	nop
 80186c0:	3728      	adds	r7, #40	; 0x28
 80186c2:	46bd      	mov	sp, r7
 80186c4:	bd80      	pop	{r7, pc}
 80186c6:	bf00      	nop
 80186c8:	40015c04 	.word	0x40015c04
 80186cc:	20009c2c 	.word	0x20009c2c
 80186d0:	40023800 	.word	0x40023800
 80186d4:	40022000 	.word	0x40022000
 80186d8:	40015c24 	.word	0x40015c24
 80186dc:	40021800 	.word	0x40021800

080186e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b08c      	sub	sp, #48	; 0x30
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80186e8:	2300      	movs	r3, #0
 80186ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80186ec:	2300      	movs	r3, #0
 80186ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80186f0:	2200      	movs	r2, #0
 80186f2:	6879      	ldr	r1, [r7, #4]
 80186f4:	2036      	movs	r0, #54	; 0x36
 80186f6:	f7e8 faf7 	bl	8000ce8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80186fa:	2036      	movs	r0, #54	; 0x36
 80186fc:	f7e8 fb10 	bl	8000d20 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8018700:	4b1f      	ldr	r3, [pc, #124]	; (8018780 <HAL_InitTick+0xa0>)
 8018702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018704:	4a1e      	ldr	r2, [pc, #120]	; (8018780 <HAL_InitTick+0xa0>)
 8018706:	f043 0310 	orr.w	r3, r3, #16
 801870a:	6413      	str	r3, [r2, #64]	; 0x40
 801870c:	4b1c      	ldr	r3, [pc, #112]	; (8018780 <HAL_InitTick+0xa0>)
 801870e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018710:	f003 0310 	and.w	r3, r3, #16
 8018714:	60fb      	str	r3, [r7, #12]
 8018716:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8018718:	f107 0210 	add.w	r2, r7, #16
 801871c:	f107 0314 	add.w	r3, r7, #20
 8018720:	4611      	mov	r1, r2
 8018722:	4618      	mov	r0, r3
 8018724:	f7ec ff7e 	bl	8005624 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8018728:	f7ec ff54 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 801872c:	4603      	mov	r3, r0
 801872e:	005b      	lsls	r3, r3, #1
 8018730:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8018732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018734:	4a13      	ldr	r2, [pc, #76]	; (8018784 <HAL_InitTick+0xa4>)
 8018736:	fba2 2303 	umull	r2, r3, r2, r3
 801873a:	0c9b      	lsrs	r3, r3, #18
 801873c:	3b01      	subs	r3, #1
 801873e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8018740:	4b11      	ldr	r3, [pc, #68]	; (8018788 <HAL_InitTick+0xa8>)
 8018742:	4a12      	ldr	r2, [pc, #72]	; (801878c <HAL_InitTick+0xac>)
 8018744:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8018746:	4b10      	ldr	r3, [pc, #64]	; (8018788 <HAL_InitTick+0xa8>)
 8018748:	f240 32e7 	movw	r2, #999	; 0x3e7
 801874c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 801874e:	4a0e      	ldr	r2, [pc, #56]	; (8018788 <HAL_InitTick+0xa8>)
 8018750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018752:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8018754:	4b0c      	ldr	r3, [pc, #48]	; (8018788 <HAL_InitTick+0xa8>)
 8018756:	2200      	movs	r2, #0
 8018758:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801875a:	4b0b      	ldr	r3, [pc, #44]	; (8018788 <HAL_InitTick+0xa8>)
 801875c:	2200      	movs	r2, #0
 801875e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8018760:	4809      	ldr	r0, [pc, #36]	; (8018788 <HAL_InitTick+0xa8>)
 8018762:	f7ef fc4b 	bl	8007ffc <HAL_TIM_Base_Init>
 8018766:	4603      	mov	r3, r0
 8018768:	2b00      	cmp	r3, #0
 801876a:	d104      	bne.n	8018776 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 801876c:	4806      	ldr	r0, [pc, #24]	; (8018788 <HAL_InitTick+0xa8>)
 801876e:	f7ef fc9b 	bl	80080a8 <HAL_TIM_Base_Start_IT>
 8018772:	4603      	mov	r3, r0
 8018774:	e000      	b.n	8018778 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8018776:	2301      	movs	r3, #1
}
 8018778:	4618      	mov	r0, r3
 801877a:	3730      	adds	r7, #48	; 0x30
 801877c:	46bd      	mov	sp, r7
 801877e:	bd80      	pop	{r7, pc}
 8018780:	40023800 	.word	0x40023800
 8018784:	431bde83 	.word	0x431bde83
 8018788:	2000a278 	.word	0x2000a278
 801878c:	40001000 	.word	0x40001000

08018790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018790:	b480      	push	{r7}
 8018792:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8018794:	bf00      	nop
 8018796:	46bd      	mov	sp, r7
 8018798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801879c:	4770      	bx	lr

0801879e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801879e:	b480      	push	{r7}
 80187a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80187a2:	e7fe      	b.n	80187a2 <HardFault_Handler+0x4>

080187a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80187a4:	b480      	push	{r7}
 80187a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80187a8:	e7fe      	b.n	80187a8 <MemManage_Handler+0x4>

080187aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80187aa:	b480      	push	{r7}
 80187ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80187ae:	e7fe      	b.n	80187ae <BusFault_Handler+0x4>

080187b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80187b0:	b480      	push	{r7}
 80187b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80187b4:	e7fe      	b.n	80187b4 <UsageFault_Handler+0x4>

080187b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80187b6:	b480      	push	{r7}
 80187b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80187ba:	bf00      	nop
 80187bc:	46bd      	mov	sp, r7
 80187be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c2:	4770      	bx	lr

080187c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80187c4:	b580      	push	{r7, lr}
 80187c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80187c8:	4802      	ldr	r0, [pc, #8]	; (80187d4 <TIM6_DAC_IRQHandler+0x10>)
 80187ca:	f7ef fcc2 	bl	8008152 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80187ce:	bf00      	nop
 80187d0:	bd80      	pop	{r7, pc}
 80187d2:	bf00      	nop
 80187d4:	2000a278 	.word	0x2000a278

080187d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80187dc:	4802      	ldr	r0, [pc, #8]	; (80187e8 <OTG_FS_IRQHandler+0x10>)
 80187de:	f7ea fa73 	bl	8002cc8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80187e2:	bf00      	nop
 80187e4:	bd80      	pop	{r7, pc}
 80187e6:	bf00      	nop
 80187e8:	2000a690 	.word	0x2000a690

080187ec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80187f0:	4802      	ldr	r0, [pc, #8]	; (80187fc <LTDC_IRQHandler+0x10>)
 80187f2:	f7eb fe5b 	bl	80044ac <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80187f6:	bf00      	nop
 80187f8:	bd80      	pop	{r7, pc}
 80187fa:	bf00      	nop
 80187fc:	20009268 	.word	0x20009268

08018800 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8018800:	b580      	push	{r7, lr}
 8018802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8018804:	4802      	ldr	r0, [pc, #8]	; (8018810 <DMA2D_IRQHandler+0x10>)
 8018806:	f7e8 fe56 	bl	80014b6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 801880a:	bf00      	nop
 801880c:	bd80      	pop	{r7, pc}
 801880e:	bf00      	nop
 8018810:	20009310 	.word	0x20009310

08018814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8018814:	b480      	push	{r7}
 8018816:	af00      	add	r7, sp, #0
	return 1;
 8018818:	2301      	movs	r3, #1
}
 801881a:	4618      	mov	r0, r3
 801881c:	46bd      	mov	sp, r7
 801881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018822:	4770      	bx	lr

08018824 <_kill>:

int _kill(int pid, int sig)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b082      	sub	sp, #8
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
 801882c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801882e:	f007 fb23 	bl	801fe78 <__errno>
 8018832:	4602      	mov	r2, r0
 8018834:	2316      	movs	r3, #22
 8018836:	6013      	str	r3, [r2, #0]
	return -1;
 8018838:	f04f 33ff 	mov.w	r3, #4294967295
}
 801883c:	4618      	mov	r0, r3
 801883e:	3708      	adds	r7, #8
 8018840:	46bd      	mov	sp, r7
 8018842:	bd80      	pop	{r7, pc}

08018844 <_exit>:

void _exit (int status)
{
 8018844:	b580      	push	{r7, lr}
 8018846:	b082      	sub	sp, #8
 8018848:	af00      	add	r7, sp, #0
 801884a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801884c:	f04f 31ff 	mov.w	r1, #4294967295
 8018850:	6878      	ldr	r0, [r7, #4]
 8018852:	f7ff ffe7 	bl	8018824 <_kill>
	while (1) {}		/* Make sure we hang here */
 8018856:	e7fe      	b.n	8018856 <_exit+0x12>

08018858 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b086      	sub	sp, #24
 801885c:	af00      	add	r7, sp, #0
 801885e:	60f8      	str	r0, [r7, #12]
 8018860:	60b9      	str	r1, [r7, #8]
 8018862:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018864:	2300      	movs	r3, #0
 8018866:	617b      	str	r3, [r7, #20]
 8018868:	e00a      	b.n	8018880 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801886a:	f3af 8000 	nop.w
 801886e:	4601      	mov	r1, r0
 8018870:	68bb      	ldr	r3, [r7, #8]
 8018872:	1c5a      	adds	r2, r3, #1
 8018874:	60ba      	str	r2, [r7, #8]
 8018876:	b2ca      	uxtb	r2, r1
 8018878:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801887a:	697b      	ldr	r3, [r7, #20]
 801887c:	3301      	adds	r3, #1
 801887e:	617b      	str	r3, [r7, #20]
 8018880:	697a      	ldr	r2, [r7, #20]
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	429a      	cmp	r2, r3
 8018886:	dbf0      	blt.n	801886a <_read+0x12>
	}

return len;
 8018888:	687b      	ldr	r3, [r7, #4]
}
 801888a:	4618      	mov	r0, r3
 801888c:	3718      	adds	r7, #24
 801888e:	46bd      	mov	sp, r7
 8018890:	bd80      	pop	{r7, pc}

08018892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8018892:	b580      	push	{r7, lr}
 8018894:	b086      	sub	sp, #24
 8018896:	af00      	add	r7, sp, #0
 8018898:	60f8      	str	r0, [r7, #12]
 801889a:	60b9      	str	r1, [r7, #8]
 801889c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801889e:	2300      	movs	r3, #0
 80188a0:	617b      	str	r3, [r7, #20]
 80188a2:	e009      	b.n	80188b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80188a4:	68bb      	ldr	r3, [r7, #8]
 80188a6:	1c5a      	adds	r2, r3, #1
 80188a8:	60ba      	str	r2, [r7, #8]
 80188aa:	781b      	ldrb	r3, [r3, #0]
 80188ac:	4618      	mov	r0, r3
 80188ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80188b2:	697b      	ldr	r3, [r7, #20]
 80188b4:	3301      	adds	r3, #1
 80188b6:	617b      	str	r3, [r7, #20]
 80188b8:	697a      	ldr	r2, [r7, #20]
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	429a      	cmp	r2, r3
 80188be:	dbf1      	blt.n	80188a4 <_write+0x12>
	}
	return len;
 80188c0:	687b      	ldr	r3, [r7, #4]
}
 80188c2:	4618      	mov	r0, r3
 80188c4:	3718      	adds	r7, #24
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bd80      	pop	{r7, pc}

080188ca <_close>:

int _close(int file)
{
 80188ca:	b480      	push	{r7}
 80188cc:	b083      	sub	sp, #12
 80188ce:	af00      	add	r7, sp, #0
 80188d0:	6078      	str	r0, [r7, #4]
	return -1;
 80188d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80188d6:	4618      	mov	r0, r3
 80188d8:	370c      	adds	r7, #12
 80188da:	46bd      	mov	sp, r7
 80188dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e0:	4770      	bx	lr

080188e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80188e2:	b480      	push	{r7}
 80188e4:	b083      	sub	sp, #12
 80188e6:	af00      	add	r7, sp, #0
 80188e8:	6078      	str	r0, [r7, #4]
 80188ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80188ec:	683b      	ldr	r3, [r7, #0]
 80188ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80188f2:	605a      	str	r2, [r3, #4]
	return 0;
 80188f4:	2300      	movs	r3, #0
}
 80188f6:	4618      	mov	r0, r3
 80188f8:	370c      	adds	r7, #12
 80188fa:	46bd      	mov	sp, r7
 80188fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018900:	4770      	bx	lr

08018902 <_isatty>:

int _isatty(int file)
{
 8018902:	b480      	push	{r7}
 8018904:	b083      	sub	sp, #12
 8018906:	af00      	add	r7, sp, #0
 8018908:	6078      	str	r0, [r7, #4]
	return 1;
 801890a:	2301      	movs	r3, #1
}
 801890c:	4618      	mov	r0, r3
 801890e:	370c      	adds	r7, #12
 8018910:	46bd      	mov	sp, r7
 8018912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018916:	4770      	bx	lr

08018918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8018918:	b480      	push	{r7}
 801891a:	b085      	sub	sp, #20
 801891c:	af00      	add	r7, sp, #0
 801891e:	60f8      	str	r0, [r7, #12]
 8018920:	60b9      	str	r1, [r7, #8]
 8018922:	607a      	str	r2, [r7, #4]
	return 0;
 8018924:	2300      	movs	r3, #0
}
 8018926:	4618      	mov	r0, r3
 8018928:	3714      	adds	r7, #20
 801892a:	46bd      	mov	sp, r7
 801892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018930:	4770      	bx	lr
	...

08018934 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b084      	sub	sp, #16
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801893c:	4b11      	ldr	r3, [pc, #68]	; (8018984 <_sbrk+0x50>)
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d102      	bne.n	801894a <_sbrk+0x16>
		heap_end = &end;
 8018944:	4b0f      	ldr	r3, [pc, #60]	; (8018984 <_sbrk+0x50>)
 8018946:	4a10      	ldr	r2, [pc, #64]	; (8018988 <_sbrk+0x54>)
 8018948:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801894a:	4b0e      	ldr	r3, [pc, #56]	; (8018984 <_sbrk+0x50>)
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8018950:	4b0c      	ldr	r3, [pc, #48]	; (8018984 <_sbrk+0x50>)
 8018952:	681a      	ldr	r2, [r3, #0]
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	4413      	add	r3, r2
 8018958:	466a      	mov	r2, sp
 801895a:	4293      	cmp	r3, r2
 801895c:	d907      	bls.n	801896e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801895e:	f007 fa8b 	bl	801fe78 <__errno>
 8018962:	4602      	mov	r2, r0
 8018964:	230c      	movs	r3, #12
 8018966:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8018968:	f04f 33ff 	mov.w	r3, #4294967295
 801896c:	e006      	b.n	801897c <_sbrk+0x48>
	}

	heap_end += incr;
 801896e:	4b05      	ldr	r3, [pc, #20]	; (8018984 <_sbrk+0x50>)
 8018970:	681a      	ldr	r2, [r3, #0]
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	4413      	add	r3, r2
 8018976:	4a03      	ldr	r2, [pc, #12]	; (8018984 <_sbrk+0x50>)
 8018978:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801897a:	68fb      	ldr	r3, [r7, #12]
}
 801897c:	4618      	mov	r0, r3
 801897e:	3710      	adds	r7, #16
 8018980:	46bd      	mov	sp, r7
 8018982:	bd80      	pop	{r7, pc}
 8018984:	20009c30 	.word	0x20009c30
 8018988:	2000a958 	.word	0x2000a958

0801898c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801898c:	b480      	push	{r7}
 801898e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018990:	4b15      	ldr	r3, [pc, #84]	; (80189e8 <SystemInit+0x5c>)
 8018992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018996:	4a14      	ldr	r2, [pc, #80]	; (80189e8 <SystemInit+0x5c>)
 8018998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801899c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80189a0:	4b12      	ldr	r3, [pc, #72]	; (80189ec <SystemInit+0x60>)
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	4a11      	ldr	r2, [pc, #68]	; (80189ec <SystemInit+0x60>)
 80189a6:	f043 0301 	orr.w	r3, r3, #1
 80189aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80189ac:	4b0f      	ldr	r3, [pc, #60]	; (80189ec <SystemInit+0x60>)
 80189ae:	2200      	movs	r2, #0
 80189b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80189b2:	4b0e      	ldr	r3, [pc, #56]	; (80189ec <SystemInit+0x60>)
 80189b4:	681a      	ldr	r2, [r3, #0]
 80189b6:	490d      	ldr	r1, [pc, #52]	; (80189ec <SystemInit+0x60>)
 80189b8:	4b0d      	ldr	r3, [pc, #52]	; (80189f0 <SystemInit+0x64>)
 80189ba:	4013      	ands	r3, r2
 80189bc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80189be:	4b0b      	ldr	r3, [pc, #44]	; (80189ec <SystemInit+0x60>)
 80189c0:	4a0c      	ldr	r2, [pc, #48]	; (80189f4 <SystemInit+0x68>)
 80189c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80189c4:	4b09      	ldr	r3, [pc, #36]	; (80189ec <SystemInit+0x60>)
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	4a08      	ldr	r2, [pc, #32]	; (80189ec <SystemInit+0x60>)
 80189ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80189ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80189d0:	4b06      	ldr	r3, [pc, #24]	; (80189ec <SystemInit+0x60>)
 80189d2:	2200      	movs	r2, #0
 80189d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80189d6:	4b04      	ldr	r3, [pc, #16]	; (80189e8 <SystemInit+0x5c>)
 80189d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80189dc:	609a      	str	r2, [r3, #8]
#endif
}
 80189de:	bf00      	nop
 80189e0:	46bd      	mov	sp, r7
 80189e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e6:	4770      	bx	lr
 80189e8:	e000ed00 	.word	0xe000ed00
 80189ec:	40023800 	.word	0x40023800
 80189f0:	fef6ffff 	.word	0xfef6ffff
 80189f4:	24003010 	.word	0x24003010

080189f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80189f8:	b580      	push	{r7, lr}
 80189fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80189fc:	2201      	movs	r2, #1
 80189fe:	490e      	ldr	r1, [pc, #56]	; (8018a38 <MX_USB_HOST_Init+0x40>)
 8018a00:	480e      	ldr	r0, [pc, #56]	; (8018a3c <MX_USB_HOST_Init+0x44>)
 8018a02:	f7f3 f8bf 	bl	800bb84 <USBH_Init>
 8018a06:	4603      	mov	r3, r0
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d001      	beq.n	8018a10 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8018a0c:	f7fe fe0a 	bl	8017624 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8018a10:	490b      	ldr	r1, [pc, #44]	; (8018a40 <MX_USB_HOST_Init+0x48>)
 8018a12:	480a      	ldr	r0, [pc, #40]	; (8018a3c <MX_USB_HOST_Init+0x44>)
 8018a14:	f7f3 f951 	bl	800bcba <USBH_RegisterClass>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d001      	beq.n	8018a22 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8018a1e:	f7fe fe01 	bl	8017624 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8018a22:	4806      	ldr	r0, [pc, #24]	; (8018a3c <MX_USB_HOST_Init+0x44>)
 8018a24:	f7f3 f9d6 	bl	800bdd4 <USBH_Start>
 8018a28:	4603      	mov	r3, r0
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d001      	beq.n	8018a32 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8018a2e:	f7fe fdf9 	bl	8017624 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8018a32:	bf00      	nop
 8018a34:	bd80      	pop	{r7, pc}
 8018a36:	bf00      	nop
 8018a38:	08018a45 	.word	0x08018a45
 8018a3c:	2000a2b8 	.word	0x2000a2b8
 8018a40:	20000004 	.word	0x20000004

08018a44 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8018a44:	b480      	push	{r7}
 8018a46:	b083      	sub	sp, #12
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	6078      	str	r0, [r7, #4]
 8018a4c:	460b      	mov	r3, r1
 8018a4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8018a50:	78fb      	ldrb	r3, [r7, #3]
 8018a52:	3b01      	subs	r3, #1
 8018a54:	2b04      	cmp	r3, #4
 8018a56:	d819      	bhi.n	8018a8c <USBH_UserProcess+0x48>
 8018a58:	a201      	add	r2, pc, #4	; (adr r2, 8018a60 <USBH_UserProcess+0x1c>)
 8018a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a5e:	bf00      	nop
 8018a60:	08018a8d 	.word	0x08018a8d
 8018a64:	08018a7d 	.word	0x08018a7d
 8018a68:	08018a8d 	.word	0x08018a8d
 8018a6c:	08018a85 	.word	0x08018a85
 8018a70:	08018a75 	.word	0x08018a75
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8018a74:	4b09      	ldr	r3, [pc, #36]	; (8018a9c <USBH_UserProcess+0x58>)
 8018a76:	2203      	movs	r2, #3
 8018a78:	701a      	strb	r2, [r3, #0]
  break;
 8018a7a:	e008      	b.n	8018a8e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8018a7c:	4b07      	ldr	r3, [pc, #28]	; (8018a9c <USBH_UserProcess+0x58>)
 8018a7e:	2202      	movs	r2, #2
 8018a80:	701a      	strb	r2, [r3, #0]
  break;
 8018a82:	e004      	b.n	8018a8e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8018a84:	4b05      	ldr	r3, [pc, #20]	; (8018a9c <USBH_UserProcess+0x58>)
 8018a86:	2201      	movs	r2, #1
 8018a88:	701a      	strb	r2, [r3, #0]
  break;
 8018a8a:	e000      	b.n	8018a8e <USBH_UserProcess+0x4a>

  default:
  break;
 8018a8c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8018a8e:	bf00      	nop
 8018a90:	370c      	adds	r7, #12
 8018a92:	46bd      	mov	sp, r7
 8018a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a98:	4770      	bx	lr
 8018a9a:	bf00      	nop
 8018a9c:	20009c34 	.word	0x20009c34

08018aa0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b08a      	sub	sp, #40	; 0x28
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018aa8:	f107 0314 	add.w	r3, r7, #20
 8018aac:	2200      	movs	r2, #0
 8018aae:	601a      	str	r2, [r3, #0]
 8018ab0:	605a      	str	r2, [r3, #4]
 8018ab2:	609a      	str	r2, [r3, #8]
 8018ab4:	60da      	str	r2, [r3, #12]
 8018ab6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018ac0:	d13c      	bne.n	8018b3c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018ac2:	4b20      	ldr	r3, [pc, #128]	; (8018b44 <HAL_HCD_MspInit+0xa4>)
 8018ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ac6:	4a1f      	ldr	r2, [pc, #124]	; (8018b44 <HAL_HCD_MspInit+0xa4>)
 8018ac8:	f043 0301 	orr.w	r3, r3, #1
 8018acc:	6313      	str	r3, [r2, #48]	; 0x30
 8018ace:	4b1d      	ldr	r3, [pc, #116]	; (8018b44 <HAL_HCD_MspInit+0xa4>)
 8018ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ad2:	f003 0301 	and.w	r3, r3, #1
 8018ad6:	613b      	str	r3, [r7, #16]
 8018ad8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8018ada:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8018ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018ae0:	2302      	movs	r3, #2
 8018ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018ae8:	2303      	movs	r3, #3
 8018aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018aec:	230a      	movs	r3, #10
 8018aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018af0:	f107 0314 	add.w	r3, r7, #20
 8018af4:	4619      	mov	r1, r3
 8018af6:	4814      	ldr	r0, [pc, #80]	; (8018b48 <HAL_HCD_MspInit+0xa8>)
 8018af8:	f7e9 fb88 	bl	800220c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018afc:	4b11      	ldr	r3, [pc, #68]	; (8018b44 <HAL_HCD_MspInit+0xa4>)
 8018afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b00:	4a10      	ldr	r2, [pc, #64]	; (8018b44 <HAL_HCD_MspInit+0xa4>)
 8018b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018b06:	6353      	str	r3, [r2, #52]	; 0x34
 8018b08:	4b0e      	ldr	r3, [pc, #56]	; (8018b44 <HAL_HCD_MspInit+0xa4>)
 8018b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018b10:	60fb      	str	r3, [r7, #12]
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	4b0b      	ldr	r3, [pc, #44]	; (8018b44 <HAL_HCD_MspInit+0xa4>)
 8018b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b18:	4a0a      	ldr	r2, [pc, #40]	; (8018b44 <HAL_HCD_MspInit+0xa4>)
 8018b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018b1e:	6453      	str	r3, [r2, #68]	; 0x44
 8018b20:	4b08      	ldr	r3, [pc, #32]	; (8018b44 <HAL_HCD_MspInit+0xa4>)
 8018b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018b28:	60bb      	str	r3, [r7, #8]
 8018b2a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018b2c:	2200      	movs	r2, #0
 8018b2e:	2105      	movs	r1, #5
 8018b30:	2043      	movs	r0, #67	; 0x43
 8018b32:	f7e8 f8d9 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018b36:	2043      	movs	r0, #67	; 0x43
 8018b38:	f7e8 f8f2 	bl	8000d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018b3c:	bf00      	nop
 8018b3e:	3728      	adds	r7, #40	; 0x28
 8018b40:	46bd      	mov	sp, r7
 8018b42:	bd80      	pop	{r7, pc}
 8018b44:	40023800 	.word	0x40023800
 8018b48:	40020000 	.word	0x40020000

08018b4c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b082      	sub	sp, #8
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	f7f3 fc8d 	bl	800c47a <USBH_LL_IncTimer>
}
 8018b60:	bf00      	nop
 8018b62:	3708      	adds	r7, #8
 8018b64:	46bd      	mov	sp, r7
 8018b66:	bd80      	pop	{r7, pc}

08018b68 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	b082      	sub	sp, #8
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018b76:	4618      	mov	r0, r3
 8018b78:	f7f3 fcd2 	bl	800c520 <USBH_LL_Connect>
}
 8018b7c:	bf00      	nop
 8018b7e:	3708      	adds	r7, #8
 8018b80:	46bd      	mov	sp, r7
 8018b82:	bd80      	pop	{r7, pc}

08018b84 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b082      	sub	sp, #8
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018b92:	4618      	mov	r0, r3
 8018b94:	f7f3 fcf8 	bl	800c588 <USBH_LL_Disconnect>
}
 8018b98:	bf00      	nop
 8018b9a:	3708      	adds	r7, #8
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	bd80      	pop	{r7, pc}

08018ba0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b082      	sub	sp, #8
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	6078      	str	r0, [r7, #4]
 8018ba8:	460b      	mov	r3, r1
 8018baa:	70fb      	strb	r3, [r7, #3]
 8018bac:	4613      	mov	r3, r2
 8018bae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	f7f3 fd36 	bl	800c628 <USBH_LL_NotifyURBChange>
#endif
}
 8018bbc:	bf00      	nop
 8018bbe:	3708      	adds	r7, #8
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}

08018bc4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b082      	sub	sp, #8
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	f7f3 fc7b 	bl	800c4ce <USBH_LL_PortEnabled>
} 
 8018bd8:	bf00      	nop
 8018bda:	3708      	adds	r7, #8
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}

08018be0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b082      	sub	sp, #8
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018bee:	4618      	mov	r0, r3
 8018bf0:	f7f3 fc7b 	bl	800c4ea <USBH_LL_PortDisabled>
} 
 8018bf4:	bf00      	nop
 8018bf6:	3708      	adds	r7, #8
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}

08018bfc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b082      	sub	sp, #8
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8018c0a:	2b01      	cmp	r3, #1
 8018c0c:	d12a      	bne.n	8018c64 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8018c0e:	4a18      	ldr	r2, [pc, #96]	; (8018c70 <USBH_LL_Init+0x74>)
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	4a15      	ldr	r2, [pc, #84]	; (8018c70 <USBH_LL_Init+0x74>)
 8018c1a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018c1e:	4b14      	ldr	r3, [pc, #80]	; (8018c70 <USBH_LL_Init+0x74>)
 8018c20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018c24:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8018c26:	4b12      	ldr	r3, [pc, #72]	; (8018c70 <USBH_LL_Init+0x74>)
 8018c28:	2208      	movs	r2, #8
 8018c2a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8018c2c:	4b10      	ldr	r3, [pc, #64]	; (8018c70 <USBH_LL_Init+0x74>)
 8018c2e:	2203      	movs	r2, #3
 8018c30:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018c32:	4b0f      	ldr	r3, [pc, #60]	; (8018c70 <USBH_LL_Init+0x74>)
 8018c34:	2200      	movs	r2, #0
 8018c36:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8018c38:	4b0d      	ldr	r3, [pc, #52]	; (8018c70 <USBH_LL_Init+0x74>)
 8018c3a:	2202      	movs	r2, #2
 8018c3c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018c3e:	4b0c      	ldr	r3, [pc, #48]	; (8018c70 <USBH_LL_Init+0x74>)
 8018c40:	2200      	movs	r2, #0
 8018c42:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8018c44:	480a      	ldr	r0, [pc, #40]	; (8018c70 <USBH_LL_Init+0x74>)
 8018c46:	f7e9 fdc6 	bl	80027d6 <HAL_HCD_Init>
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d001      	beq.n	8018c54 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8018c50:	f7fe fce8 	bl	8017624 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8018c54:	4806      	ldr	r0, [pc, #24]	; (8018c70 <USBH_LL_Init+0x74>)
 8018c56:	f7ea f9b5 	bl	8002fc4 <HAL_HCD_GetCurrentFrame>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	4619      	mov	r1, r3
 8018c5e:	6878      	ldr	r0, [r7, #4]
 8018c60:	f7f3 fbfc 	bl	800c45c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8018c64:	2300      	movs	r3, #0
}
 8018c66:	4618      	mov	r0, r3
 8018c68:	3708      	adds	r7, #8
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	bd80      	pop	{r7, pc}
 8018c6e:	bf00      	nop
 8018c70:	2000a690 	.word	0x2000a690

08018c74 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b084      	sub	sp, #16
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018c80:	2300      	movs	r3, #0
 8018c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	f7ea f922 	bl	8002ed4 <HAL_HCD_Start>
 8018c90:	4603      	mov	r3, r0
 8018c92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018c94:	7bfb      	ldrb	r3, [r7, #15]
 8018c96:	4618      	mov	r0, r3
 8018c98:	f000 f95c 	bl	8018f54 <USBH_Get_USB_Status>
 8018c9c:	4603      	mov	r3, r0
 8018c9e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	3710      	adds	r7, #16
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	bd80      	pop	{r7, pc}

08018caa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8018caa:	b580      	push	{r7, lr}
 8018cac:	b084      	sub	sp, #16
 8018cae:	af00      	add	r7, sp, #0
 8018cb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f7ea f92a 	bl	8002f1a <HAL_HCD_Stop>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018cca:	7bfb      	ldrb	r3, [r7, #15]
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f000 f941 	bl	8018f54 <USBH_Get_USB_Status>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8018cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8018cd8:	4618      	mov	r0, r3
 8018cda:	3710      	adds	r7, #16
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	bd80      	pop	{r7, pc}

08018ce0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b084      	sub	sp, #16
 8018ce4:	af00      	add	r7, sp, #0
 8018ce6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8018ce8:	2301      	movs	r3, #1
 8018cea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7ea f974 	bl	8002fe0 <HAL_HCD_GetCurrentSpeed>
 8018cf8:	4603      	mov	r3, r0
 8018cfa:	2b01      	cmp	r3, #1
 8018cfc:	d007      	beq.n	8018d0e <USBH_LL_GetSpeed+0x2e>
 8018cfe:	2b01      	cmp	r3, #1
 8018d00:	d302      	bcc.n	8018d08 <USBH_LL_GetSpeed+0x28>
 8018d02:	2b02      	cmp	r3, #2
 8018d04:	d006      	beq.n	8018d14 <USBH_LL_GetSpeed+0x34>
 8018d06:	e008      	b.n	8018d1a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8018d08:	2300      	movs	r3, #0
 8018d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8018d0c:	e008      	b.n	8018d20 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8018d0e:	2301      	movs	r3, #1
 8018d10:	73fb      	strb	r3, [r7, #15]
    break;
 8018d12:	e005      	b.n	8018d20 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8018d14:	2302      	movs	r3, #2
 8018d16:	73fb      	strb	r3, [r7, #15]
    break;
 8018d18:	e002      	b.n	8018d20 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8018d1a:	2301      	movs	r3, #1
 8018d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8018d1e:	bf00      	nop
  }
  return  speed;
 8018d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d22:	4618      	mov	r0, r3
 8018d24:	3710      	adds	r7, #16
 8018d26:	46bd      	mov	sp, r7
 8018d28:	bd80      	pop	{r7, pc}

08018d2a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8018d2a:	b580      	push	{r7, lr}
 8018d2c:	b084      	sub	sp, #16
 8018d2e:	af00      	add	r7, sp, #0
 8018d30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d32:	2300      	movs	r3, #0
 8018d34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018d36:	2300      	movs	r3, #0
 8018d38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018d40:	4618      	mov	r0, r3
 8018d42:	f7ea f907 	bl	8002f54 <HAL_HCD_ResetPort>
 8018d46:	4603      	mov	r3, r0
 8018d48:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8018d4a:	7bfb      	ldrb	r3, [r7, #15]
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	f000 f901 	bl	8018f54 <USBH_Get_USB_Status>
 8018d52:	4603      	mov	r3, r0
 8018d54:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3710      	adds	r7, #16
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}

08018d60 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b082      	sub	sp, #8
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	6078      	str	r0, [r7, #4]
 8018d68:	460b      	mov	r3, r1
 8018d6a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018d72:	78fa      	ldrb	r2, [r7, #3]
 8018d74:	4611      	mov	r1, r2
 8018d76:	4618      	mov	r0, r3
 8018d78:	f7ea f90f 	bl	8002f9a <HAL_HCD_HC_GetXferCount>
 8018d7c:	4603      	mov	r3, r0
}
 8018d7e:	4618      	mov	r0, r3
 8018d80:	3708      	adds	r7, #8
 8018d82:	46bd      	mov	sp, r7
 8018d84:	bd80      	pop	{r7, pc}

08018d86 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8018d86:	b590      	push	{r4, r7, lr}
 8018d88:	b089      	sub	sp, #36	; 0x24
 8018d8a:	af04      	add	r7, sp, #16
 8018d8c:	6078      	str	r0, [r7, #4]
 8018d8e:	4608      	mov	r0, r1
 8018d90:	4611      	mov	r1, r2
 8018d92:	461a      	mov	r2, r3
 8018d94:	4603      	mov	r3, r0
 8018d96:	70fb      	strb	r3, [r7, #3]
 8018d98:	460b      	mov	r3, r1
 8018d9a:	70bb      	strb	r3, [r7, #2]
 8018d9c:	4613      	mov	r3, r2
 8018d9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018da0:	2300      	movs	r3, #0
 8018da2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018da4:	2300      	movs	r3, #0
 8018da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8018dae:	787c      	ldrb	r4, [r7, #1]
 8018db0:	78ba      	ldrb	r2, [r7, #2]
 8018db2:	78f9      	ldrb	r1, [r7, #3]
 8018db4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018db6:	9302      	str	r3, [sp, #8]
 8018db8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018dbc:	9301      	str	r3, [sp, #4]
 8018dbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018dc2:	9300      	str	r3, [sp, #0]
 8018dc4:	4623      	mov	r3, r4
 8018dc6:	f7e9 fd5c 	bl	8002882 <HAL_HCD_HC_Init>
 8018dca:	4603      	mov	r3, r0
 8018dcc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8018dce:	7bfb      	ldrb	r3, [r7, #15]
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	f000 f8bf 	bl	8018f54 <USBH_Get_USB_Status>
 8018dd6:	4603      	mov	r3, r0
 8018dd8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018dda:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	3714      	adds	r7, #20
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd90      	pop	{r4, r7, pc}

08018de4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b084      	sub	sp, #16
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	460b      	mov	r3, r1
 8018dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018df0:	2300      	movs	r3, #0
 8018df2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018df4:	2300      	movs	r3, #0
 8018df6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018dfe:	78fa      	ldrb	r2, [r7, #3]
 8018e00:	4611      	mov	r1, r2
 8018e02:	4618      	mov	r0, r3
 8018e04:	f7e9 fdd5 	bl	80029b2 <HAL_HCD_HC_Halt>
 8018e08:	4603      	mov	r3, r0
 8018e0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018e0c:	7bfb      	ldrb	r3, [r7, #15]
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f000 f8a0 	bl	8018f54 <USBH_Get_USB_Status>
 8018e14:	4603      	mov	r3, r0
 8018e16:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	3710      	adds	r7, #16
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}

08018e22 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8018e22:	b590      	push	{r4, r7, lr}
 8018e24:	b089      	sub	sp, #36	; 0x24
 8018e26:	af04      	add	r7, sp, #16
 8018e28:	6078      	str	r0, [r7, #4]
 8018e2a:	4608      	mov	r0, r1
 8018e2c:	4611      	mov	r1, r2
 8018e2e:	461a      	mov	r2, r3
 8018e30:	4603      	mov	r3, r0
 8018e32:	70fb      	strb	r3, [r7, #3]
 8018e34:	460b      	mov	r3, r1
 8018e36:	70bb      	strb	r3, [r7, #2]
 8018e38:	4613      	mov	r3, r2
 8018e3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018e40:	2300      	movs	r3, #0
 8018e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8018e4a:	787c      	ldrb	r4, [r7, #1]
 8018e4c:	78ba      	ldrb	r2, [r7, #2]
 8018e4e:	78f9      	ldrb	r1, [r7, #3]
 8018e50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018e54:	9303      	str	r3, [sp, #12]
 8018e56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018e58:	9302      	str	r3, [sp, #8]
 8018e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e5c:	9301      	str	r3, [sp, #4]
 8018e5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018e62:	9300      	str	r3, [sp, #0]
 8018e64:	4623      	mov	r3, r4
 8018e66:	f7e9 fdc7 	bl	80029f8 <HAL_HCD_HC_SubmitRequest>
 8018e6a:	4603      	mov	r3, r0
 8018e6c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8018e6e:	7bfb      	ldrb	r3, [r7, #15]
 8018e70:	4618      	mov	r0, r3
 8018e72:	f000 f86f 	bl	8018f54 <USBH_Get_USB_Status>
 8018e76:	4603      	mov	r3, r0
 8018e78:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	3714      	adds	r7, #20
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bd90      	pop	{r4, r7, pc}

08018e84 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b082      	sub	sp, #8
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
 8018e8c:	460b      	mov	r3, r1
 8018e8e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018e96:	78fa      	ldrb	r2, [r7, #3]
 8018e98:	4611      	mov	r1, r2
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f7ea f868 	bl	8002f70 <HAL_HCD_HC_GetURBState>
 8018ea0:	4603      	mov	r3, r0
}
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	3708      	adds	r7, #8
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bd80      	pop	{r7, pc}

08018eaa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8018eaa:	b580      	push	{r7, lr}
 8018eac:	b082      	sub	sp, #8
 8018eae:	af00      	add	r7, sp, #0
 8018eb0:	6078      	str	r0, [r7, #4]
 8018eb2:	460b      	mov	r3, r1
 8018eb4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8018ebc:	2b01      	cmp	r3, #1
 8018ebe:	d103      	bne.n	8018ec8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8018ec0:	78fb      	ldrb	r3, [r7, #3]
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f000 f872 	bl	8018fac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8018ec8:	20c8      	movs	r0, #200	; 0xc8
 8018eca:	f7e7 fb9f 	bl	800060c <HAL_Delay>
  return USBH_OK;
 8018ece:	2300      	movs	r3, #0
}
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	3708      	adds	r7, #8
 8018ed4:	46bd      	mov	sp, r7
 8018ed6:	bd80      	pop	{r7, pc}

08018ed8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8018ed8:	b480      	push	{r7}
 8018eda:	b085      	sub	sp, #20
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	6078      	str	r0, [r7, #4]
 8018ee0:	460b      	mov	r3, r1
 8018ee2:	70fb      	strb	r3, [r7, #3]
 8018ee4:	4613      	mov	r3, r2
 8018ee6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018eee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8018ef0:	78fa      	ldrb	r2, [r7, #3]
 8018ef2:	68f9      	ldr	r1, [r7, #12]
 8018ef4:	4613      	mov	r3, r2
 8018ef6:	009b      	lsls	r3, r3, #2
 8018ef8:	4413      	add	r3, r2
 8018efa:	00db      	lsls	r3, r3, #3
 8018efc:	440b      	add	r3, r1
 8018efe:	333b      	adds	r3, #59	; 0x3b
 8018f00:	781b      	ldrb	r3, [r3, #0]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d00a      	beq.n	8018f1c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8018f06:	78fa      	ldrb	r2, [r7, #3]
 8018f08:	68f9      	ldr	r1, [r7, #12]
 8018f0a:	4613      	mov	r3, r2
 8018f0c:	009b      	lsls	r3, r3, #2
 8018f0e:	4413      	add	r3, r2
 8018f10:	00db      	lsls	r3, r3, #3
 8018f12:	440b      	add	r3, r1
 8018f14:	3350      	adds	r3, #80	; 0x50
 8018f16:	78ba      	ldrb	r2, [r7, #2]
 8018f18:	701a      	strb	r2, [r3, #0]
 8018f1a:	e009      	b.n	8018f30 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8018f1c:	78fa      	ldrb	r2, [r7, #3]
 8018f1e:	68f9      	ldr	r1, [r7, #12]
 8018f20:	4613      	mov	r3, r2
 8018f22:	009b      	lsls	r3, r3, #2
 8018f24:	4413      	add	r3, r2
 8018f26:	00db      	lsls	r3, r3, #3
 8018f28:	440b      	add	r3, r1
 8018f2a:	3351      	adds	r3, #81	; 0x51
 8018f2c:	78ba      	ldrb	r2, [r7, #2]
 8018f2e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8018f30:	2300      	movs	r3, #0
}
 8018f32:	4618      	mov	r0, r3
 8018f34:	3714      	adds	r7, #20
 8018f36:	46bd      	mov	sp, r7
 8018f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f3c:	4770      	bx	lr

08018f3e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8018f3e:	b580      	push	{r7, lr}
 8018f40:	b082      	sub	sp, #8
 8018f42:	af00      	add	r7, sp, #0
 8018f44:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8018f46:	6878      	ldr	r0, [r7, #4]
 8018f48:	f7e7 fb60 	bl	800060c <HAL_Delay>
}
 8018f4c:	bf00      	nop
 8018f4e:	3708      	adds	r7, #8
 8018f50:	46bd      	mov	sp, r7
 8018f52:	bd80      	pop	{r7, pc}

08018f54 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018f54:	b480      	push	{r7}
 8018f56:	b085      	sub	sp, #20
 8018f58:	af00      	add	r7, sp, #0
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018f5e:	2300      	movs	r3, #0
 8018f60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018f62:	79fb      	ldrb	r3, [r7, #7]
 8018f64:	2b03      	cmp	r3, #3
 8018f66:	d817      	bhi.n	8018f98 <USBH_Get_USB_Status+0x44>
 8018f68:	a201      	add	r2, pc, #4	; (adr r2, 8018f70 <USBH_Get_USB_Status+0x1c>)
 8018f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f6e:	bf00      	nop
 8018f70:	08018f81 	.word	0x08018f81
 8018f74:	08018f87 	.word	0x08018f87
 8018f78:	08018f8d 	.word	0x08018f8d
 8018f7c:	08018f93 	.word	0x08018f93
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8018f80:	2300      	movs	r3, #0
 8018f82:	73fb      	strb	r3, [r7, #15]
    break;
 8018f84:	e00b      	b.n	8018f9e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8018f86:	2302      	movs	r3, #2
 8018f88:	73fb      	strb	r3, [r7, #15]
    break;
 8018f8a:	e008      	b.n	8018f9e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8018f8c:	2301      	movs	r3, #1
 8018f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8018f90:	e005      	b.n	8018f9e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8018f92:	2302      	movs	r3, #2
 8018f94:	73fb      	strb	r3, [r7, #15]
    break;
 8018f96:	e002      	b.n	8018f9e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8018f98:	2302      	movs	r3, #2
 8018f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8018f9c:	bf00      	nop
  }
  return usb_status;
 8018f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	3714      	adds	r7, #20
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018faa:	4770      	bx	lr

08018fac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b084      	sub	sp, #16
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	4603      	mov	r3, r0
 8018fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8018fb6:	79fb      	ldrb	r3, [r7, #7]
 8018fb8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8018fba:	79fb      	ldrb	r3, [r7, #7]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d102      	bne.n	8018fc6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8018fc0:	2301      	movs	r3, #1
 8018fc2:	73fb      	strb	r3, [r7, #15]
 8018fc4:	e001      	b.n	8018fca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8018fca:	7bfb      	ldrb	r3, [r7, #15]
 8018fcc:	461a      	mov	r2, r3
 8018fce:	2120      	movs	r1, #32
 8018fd0:	4803      	ldr	r0, [pc, #12]	; (8018fe0 <MX_DriverVbusFS+0x34>)
 8018fd2:	f7e9 fbe7 	bl	80027a4 <HAL_GPIO_WritePin>
}
 8018fd6:	bf00      	nop
 8018fd8:	3710      	adds	r7, #16
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	bd80      	pop	{r7, pc}
 8018fde:	bf00      	nop
 8018fe0:	40020c00 	.word	0x40020c00

08018fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8018fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801901c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8018fe8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8018fea:	e003      	b.n	8018ff4 <LoopCopyDataInit>

08018fec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8018fec:	4b0c      	ldr	r3, [pc, #48]	; (8019020 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8018fee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8018ff0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8018ff2:	3104      	adds	r1, #4

08018ff4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8018ff4:	480b      	ldr	r0, [pc, #44]	; (8019024 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8018ff6:	4b0c      	ldr	r3, [pc, #48]	; (8019028 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8018ff8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8018ffa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8018ffc:	d3f6      	bcc.n	8018fec <CopyDataInit>
  ldr  r2, =_sbss
 8018ffe:	4a0b      	ldr	r2, [pc, #44]	; (801902c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8019000:	e002      	b.n	8019008 <LoopFillZerobss>

08019002 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8019002:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8019004:	f842 3b04 	str.w	r3, [r2], #4

08019008 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8019008:	4b09      	ldr	r3, [pc, #36]	; (8019030 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801900a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801900c:	d3f9      	bcc.n	8019002 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801900e:	f7ff fcbd 	bl	801898c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019012:	f006 ff49 	bl	801fea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019016:	f7fd f9e9 	bl	80163ec <main>
  bx  lr    
 801901a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801901c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8019020:	080fa7c0 	.word	0x080fa7c0
  ldr  r0, =_sdata
 8019024:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8019028:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 801902c:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 8019030:	2000a958 	.word	0x2000a958

08019034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019034:	e7fe      	b.n	8019034 <ADC_IRQHandler>

08019036 <_ZN23ApplicationFontProvider7getFontEt>:
extern touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId fontId)
{
 8019036:	b580      	push	{r7, lr}
 8019038:	b082      	sub	sp, #8
 801903a:	af00      	add	r7, sp, #0
 801903c:	6078      	str	r0, [r7, #4]
 801903e:	460b      	mov	r3, r1
 8019040:	807b      	strh	r3, [r7, #2]
    switch (fontId)
 8019042:	887b      	ldrh	r3, [r7, #2]
 8019044:	2b01      	cmp	r3, #1
 8019046:	d007      	beq.n	8019058 <_ZN23ApplicationFontProvider7getFontEt+0x22>
 8019048:	2b02      	cmp	r3, #2
 801904a:	d009      	beq.n	8019060 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 801904c:	2b00      	cmp	r3, #0
 801904e:	d10b      	bne.n	8019068 <_ZN23ApplicationFontProvider7getFontEt+0x32>
    {
    case Typography::DEFAULT:
        return &(getFont_verdana_20_4bpp());
 8019050:	f000 f898 	bl	8019184 <_Z23getFont_verdana_20_4bppv>
 8019054:	4603      	mov	r3, r0
 8019056:	e008      	b.n	801906a <_ZN23ApplicationFontProvider7getFontEt+0x34>
    case Typography::LARGE:
        return &(getFont_verdana_40_4bpp());
 8019058:	f000 f8d2 	bl	8019200 <_Z23getFont_verdana_40_4bppv>
 801905c:	4603      	mov	r3, r0
 801905e:	e004      	b.n	801906a <_ZN23ApplicationFontProvider7getFontEt+0x34>
    case Typography::SMALL:
        return &(getFont_verdana_10_4bpp());
 8019060:	f000 f852 	bl	8019108 <_Z23getFont_verdana_10_4bppv>
 8019064:	4603      	mov	r3, r0
 8019066:	e000      	b.n	801906a <_ZN23ApplicationFontProvider7getFontEt+0x34>
    default:
        return 0;
 8019068:	2300      	movs	r3, #0
    }
}
 801906a:	4618      	mov	r0, r3
 801906c:	3708      	adds	r7, #8
 801906e:	46bd      	mov	sp, r7
 8019070:	bd80      	pop	{r7, pc}
	...

08019074 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8019074:	b480      	push	{r7}
 8019076:	b083      	sub	sp, #12
 8019078:	af00      	add	r7, sp, #0
 801907a:	6078      	str	r0, [r7, #4]
 801907c:	4a04      	ldr	r2, [pc, #16]	; (8019090 <_ZN8touchgfx4FontD1Ev+0x1c>)
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	601a      	str	r2, [r3, #0]
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	4618      	mov	r0, r3
 8019086:	370c      	adds	r7, #12
 8019088:	46bd      	mov	sp, r7
 801908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801908e:	4770      	bx	lr
 8019090:	08023140 	.word	0x08023140

08019094 <_ZN8touchgfx4FontD0Ev>:
 8019094:	b580      	push	{r7, lr}
 8019096:	b082      	sub	sp, #8
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]
 801909c:	6878      	ldr	r0, [r7, #4]
 801909e:	f7ff ffe9 	bl	8019074 <_ZN8touchgfx4FontD1Ev>
 80190a2:	2110      	movs	r1, #16
 80190a4:	6878      	ldr	r0, [r7, #4]
 80190a6:	f006 fea6 	bl	801fdf6 <_ZdlPvj>
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	4618      	mov	r0, r3
 80190ae:	3708      	adds	r7, #8
 80190b0:	46bd      	mov	sp, r7
 80190b2:	bd80      	pop	{r7, pc}

080190b4 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b082      	sub	sp, #8
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	6078      	str	r0, [r7, #4]
 80190bc:	4a05      	ldr	r2, [pc, #20]	; (80190d4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	601a      	str	r2, [r3, #0]
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	4618      	mov	r0, r3
 80190c6:	f7ff ffd5 	bl	8019074 <_ZN8touchgfx4FontD1Ev>
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	4618      	mov	r0, r3
 80190ce:	3708      	adds	r7, #8
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}
 80190d4:	080231f4 	.word	0x080231f4

080190d8 <_ZN8touchgfx9ConstFontD0Ev>:
 80190d8:	b580      	push	{r7, lr}
 80190da:	b082      	sub	sp, #8
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
 80190e0:	6878      	ldr	r0, [r7, #4]
 80190e2:	f7ff ffe7 	bl	80190b4 <_ZN8touchgfx9ConstFontD1Ev>
 80190e6:	2118      	movs	r1, #24
 80190e8:	6878      	ldr	r0, [r7, #4]
 80190ea:	f006 fe84 	bl	801fdf6 <_ZdlPvj>
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	4618      	mov	r0, r3
 80190f2:	3708      	adds	r7, #8
 80190f4:	46bd      	mov	sp, r7
 80190f6:	bd80      	pop	{r7, pc}

080190f8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_10_4bpp()
{
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0);
 80190f8:	b580      	push	{r7, lr}
 80190fa:	af00      	add	r7, sp, #0
 80190fc:	4801      	ldr	r0, [pc, #4]	; (8019104 <__tcf_0+0xc>)
 80190fe:	f000 f8b5 	bl	801926c <_ZN8touchgfx17InternalFlashFontD1Ev>
 8019102:	bd80      	pop	{r7, pc}
 8019104:	20009c38 	.word	0x20009c38

08019108 <_Z23getFont_verdana_10_4bppv>:
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b088      	sub	sp, #32
 801910c:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0);
 801910e:	4b13      	ldr	r3, [pc, #76]	; (801915c <_Z23getFont_verdana_10_4bppv+0x54>)
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	f003 0301 	and.w	r3, r3, #1
 8019116:	2b00      	cmp	r3, #0
 8019118:	d11b      	bne.n	8019152 <_Z23getFont_verdana_10_4bppv+0x4a>
 801911a:	2300      	movs	r3, #0
 801911c:	9307      	str	r3, [sp, #28]
 801911e:	2300      	movs	r3, #0
 8019120:	9306      	str	r3, [sp, #24]
 8019122:	4b0f      	ldr	r3, [pc, #60]	; (8019160 <_Z23getFont_verdana_10_4bppv+0x58>)
 8019124:	9305      	str	r3, [sp, #20]
 8019126:	4b0f      	ldr	r3, [pc, #60]	; (8019164 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8019128:	9304      	str	r3, [sp, #16]
 801912a:	2300      	movs	r3, #0
 801912c:	9303      	str	r3, [sp, #12]
 801912e:	2300      	movs	r3, #0
 8019130:	9302      	str	r3, [sp, #8]
 8019132:	2304      	movs	r3, #4
 8019134:	9301      	str	r3, [sp, #4]
 8019136:	2300      	movs	r3, #0
 8019138:	9300      	str	r3, [sp, #0]
 801913a:	230a      	movs	r3, #10
 801913c:	2200      	movs	r2, #0
 801913e:	490a      	ldr	r1, [pc, #40]	; (8019168 <_Z23getFont_verdana_10_4bppv+0x60>)
 8019140:	480a      	ldr	r0, [pc, #40]	; (801916c <_Z23getFont_verdana_10_4bppv+0x64>)
 8019142:	f004 fc23 	bl	801d98c <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8019146:	4b05      	ldr	r3, [pc, #20]	; (801915c <_Z23getFont_verdana_10_4bppv+0x54>)
 8019148:	2201      	movs	r2, #1
 801914a:	601a      	str	r2, [r3, #0]
 801914c:	4808      	ldr	r0, [pc, #32]	; (8019170 <_Z23getFont_verdana_10_4bppv+0x68>)
 801914e:	f006 fe8d 	bl	801fe6c <atexit>
    return verdana_10_4bpp;
 8019152:	4b06      	ldr	r3, [pc, #24]	; (801916c <_Z23getFont_verdana_10_4bppv+0x64>)
}
 8019154:	4618      	mov	r0, r3
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}
 801915a:	bf00      	nop
 801915c:	20009c58 	.word	0x20009c58
 8019160:	08023864 	.word	0x08023864
 8019164:	08023858 	.word	0x08023858
 8019168:	08023870 	.word	0x08023870
 801916c:	20009c38 	.word	0x20009c38
 8019170:	080190f9 	.word	0x080190f9

08019174 <__tcf_1>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_20_4bpp()
{
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 0, 20, 0, 4, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0);
 8019174:	b580      	push	{r7, lr}
 8019176:	af00      	add	r7, sp, #0
 8019178:	4801      	ldr	r0, [pc, #4]	; (8019180 <__tcf_1+0xc>)
 801917a:	f000 f877 	bl	801926c <_ZN8touchgfx17InternalFlashFontD1Ev>
 801917e:	bd80      	pop	{r7, pc}
 8019180:	20009c5c 	.word	0x20009c5c

08019184 <_Z23getFont_verdana_20_4bppv>:
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b088      	sub	sp, #32
 8019188:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 0, 20, 0, 4, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0);
 801918a:	4b13      	ldr	r3, [pc, #76]	; (80191d8 <_Z23getFont_verdana_20_4bppv+0x54>)
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	f003 0301 	and.w	r3, r3, #1
 8019192:	2b00      	cmp	r3, #0
 8019194:	d11b      	bne.n	80191ce <_Z23getFont_verdana_20_4bppv+0x4a>
 8019196:	2300      	movs	r3, #0
 8019198:	9307      	str	r3, [sp, #28]
 801919a:	2300      	movs	r3, #0
 801919c:	9306      	str	r3, [sp, #24]
 801919e:	4b0f      	ldr	r3, [pc, #60]	; (80191dc <_Z23getFont_verdana_20_4bppv+0x58>)
 80191a0:	9305      	str	r3, [sp, #20]
 80191a2:	4b0f      	ldr	r3, [pc, #60]	; (80191e0 <_Z23getFont_verdana_20_4bppv+0x5c>)
 80191a4:	9304      	str	r3, [sp, #16]
 80191a6:	2300      	movs	r3, #0
 80191a8:	9303      	str	r3, [sp, #12]
 80191aa:	2300      	movs	r3, #0
 80191ac:	9302      	str	r3, [sp, #8]
 80191ae:	2304      	movs	r3, #4
 80191b0:	9301      	str	r3, [sp, #4]
 80191b2:	2300      	movs	r3, #0
 80191b4:	9300      	str	r3, [sp, #0]
 80191b6:	2314      	movs	r3, #20
 80191b8:	2200      	movs	r2, #0
 80191ba:	490a      	ldr	r1, [pc, #40]	; (80191e4 <_Z23getFont_verdana_20_4bppv+0x60>)
 80191bc:	480a      	ldr	r0, [pc, #40]	; (80191e8 <_Z23getFont_verdana_20_4bppv+0x64>)
 80191be:	f004 fbe5 	bl	801d98c <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 80191c2:	4b05      	ldr	r3, [pc, #20]	; (80191d8 <_Z23getFont_verdana_20_4bppv+0x54>)
 80191c4:	2201      	movs	r2, #1
 80191c6:	601a      	str	r2, [r3, #0]
 80191c8:	4808      	ldr	r0, [pc, #32]	; (80191ec <_Z23getFont_verdana_20_4bppv+0x68>)
 80191ca:	f006 fe4f 	bl	801fe6c <atexit>
    return verdana_20_4bpp;
 80191ce:	4b06      	ldr	r3, [pc, #24]	; (80191e8 <_Z23getFont_verdana_20_4bppv+0x64>)
}
 80191d0:	4618      	mov	r0, r3
 80191d2:	46bd      	mov	sp, r7
 80191d4:	bd80      	pop	{r7, pc}
 80191d6:	bf00      	nop
 80191d8:	20009c7c 	.word	0x20009c7c
 80191dc:	08023868 	.word	0x08023868
 80191e0:	0802385c 	.word	0x0802385c
 80191e4:	08023880 	.word	0x08023880
 80191e8:	20009c5c 	.word	0x20009c5c
 80191ec:	08019175 	.word	0x08019175

080191f0 <__tcf_2>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_40_4bpp()
{
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 80191f0:	b580      	push	{r7, lr}
 80191f2:	af00      	add	r7, sp, #0
 80191f4:	4801      	ldr	r0, [pc, #4]	; (80191fc <__tcf_2+0xc>)
 80191f6:	f000 f839 	bl	801926c <_ZN8touchgfx17InternalFlashFontD1Ev>
 80191fa:	bd80      	pop	{r7, pc}
 80191fc:	20009c80 	.word	0x20009c80

08019200 <_Z23getFont_verdana_40_4bppv>:
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b088      	sub	sp, #32
 8019204:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 8019206:	4b13      	ldr	r3, [pc, #76]	; (8019254 <_Z23getFont_verdana_40_4bppv+0x54>)
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	f003 0301 	and.w	r3, r3, #1
 801920e:	2b00      	cmp	r3, #0
 8019210:	d11b      	bne.n	801924a <_Z23getFont_verdana_40_4bppv+0x4a>
 8019212:	2300      	movs	r3, #0
 8019214:	9307      	str	r3, [sp, #28]
 8019216:	2300      	movs	r3, #0
 8019218:	9306      	str	r3, [sp, #24]
 801921a:	4b0f      	ldr	r3, [pc, #60]	; (8019258 <_Z23getFont_verdana_40_4bppv+0x58>)
 801921c:	9305      	str	r3, [sp, #20]
 801921e:	4b0f      	ldr	r3, [pc, #60]	; (801925c <_Z23getFont_verdana_40_4bppv+0x5c>)
 8019220:	9304      	str	r3, [sp, #16]
 8019222:	2300      	movs	r3, #0
 8019224:	9303      	str	r3, [sp, #12]
 8019226:	2300      	movs	r3, #0
 8019228:	9302      	str	r3, [sp, #8]
 801922a:	2304      	movs	r3, #4
 801922c:	9301      	str	r3, [sp, #4]
 801922e:	2300      	movs	r3, #0
 8019230:	9300      	str	r3, [sp, #0]
 8019232:	2328      	movs	r3, #40	; 0x28
 8019234:	2200      	movs	r2, #0
 8019236:	490a      	ldr	r1, [pc, #40]	; (8019260 <_Z23getFont_verdana_40_4bppv+0x60>)
 8019238:	480a      	ldr	r0, [pc, #40]	; (8019264 <_Z23getFont_verdana_40_4bppv+0x64>)
 801923a:	f004 fba7 	bl	801d98c <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801923e:	4b05      	ldr	r3, [pc, #20]	; (8019254 <_Z23getFont_verdana_40_4bppv+0x54>)
 8019240:	2201      	movs	r2, #1
 8019242:	601a      	str	r2, [r3, #0]
 8019244:	4808      	ldr	r0, [pc, #32]	; (8019268 <_Z23getFont_verdana_40_4bppv+0x68>)
 8019246:	f006 fe11 	bl	801fe6c <atexit>
    return verdana_40_4bpp;
 801924a:	4b06      	ldr	r3, [pc, #24]	; (8019264 <_Z23getFont_verdana_40_4bppv+0x64>)
}
 801924c:	4618      	mov	r0, r3
 801924e:	46bd      	mov	sp, r7
 8019250:	bd80      	pop	{r7, pc}
 8019252:	bf00      	nop
 8019254:	20009ca0 	.word	0x20009ca0
 8019258:	0802386c 	.word	0x0802386c
 801925c:	08023860 	.word	0x08023860
 8019260:	08023890 	.word	0x08023890
 8019264:	20009c80 	.word	0x20009c80
 8019268:	080191f1 	.word	0x080191f1

0801926c <_ZN8touchgfx17InternalFlashFontD1Ev>:
 *        An InternalFlashFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class InternalFlashFont : public ConstFont
 801926c:	b580      	push	{r7, lr}
 801926e:	b082      	sub	sp, #8
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
 8019274:	4a05      	ldr	r2, [pc, #20]	; (801928c <_ZN8touchgfx17InternalFlashFontD1Ev+0x20>)
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	601a      	str	r2, [r3, #0]
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	4618      	mov	r0, r3
 801927e:	f7ff ff19 	bl	80190b4 <_ZN8touchgfx9ConstFontD1Ev>
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	4618      	mov	r0, r3
 8019286:	3708      	adds	r7, #8
 8019288:	46bd      	mov	sp, r7
 801928a:	bd80      	pop	{r7, pc}
 801928c:	08023288 	.word	0x08023288

08019290 <_ZN8touchgfx17InternalFlashFontD0Ev>:
 8019290:	b580      	push	{r7, lr}
 8019292:	b082      	sub	sp, #8
 8019294:	af00      	add	r7, sp, #0
 8019296:	6078      	str	r0, [r7, #4]
 8019298:	6878      	ldr	r0, [r7, #4]
 801929a:	f7ff ffe7 	bl	801926c <_ZN8touchgfx17InternalFlashFontD1Ev>
 801929e:	2120      	movs	r1, #32
 80192a0:	6878      	ldr	r0, [r7, #4]
 80192a2:	f006 fda8 	bl	801fdf6 <_ZdlPvj>
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	4618      	mov	r0, r3
 80192aa:	3708      	adds	r7, #8
 80192ac:	46bd      	mov	sp, r7
 80192ae:	bd80      	pop	{r7, pc}

080192b0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80192b0:	b480      	push	{r7}
 80192b2:	b083      	sub	sp, #12
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	6078      	str	r0, [r7, #4]
 80192b8:	6039      	str	r1, [r7, #0]
 80192ba:	683b      	ldr	r3, [r7, #0]
 80192bc:	4618      	mov	r0, r3
 80192be:	370c      	adds	r7, #12
 80192c0:	46bd      	mov	sp, r7
 80192c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c6:	4770      	bx	lr

080192c8 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 80192c8:	b480      	push	{r7}
 80192ca:	b083      	sub	sp, #12
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 80192d0:	4a07      	ldr	r2, [pc, #28]	; (80192f0 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	601a      	str	r2, [r3, #0]
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	2200      	movs	r2, #0
 80192da:	605a      	str	r2, [r3, #4]
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	2200      	movs	r2, #0
 80192e0:	721a      	strb	r2, [r3, #8]
    {
    }
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	4618      	mov	r0, r3
 80192e6:	370c      	adds	r7, #12
 80192e8:	46bd      	mov	sp, r7
 80192ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ee:	4770      	bx	lr
 80192f0:	08021ee0 	.word	0x08021ee0

080192f4 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 80192f4:	b480      	push	{r7}
 80192f6:	b083      	sub	sp, #12
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
    {
 80192fc:	4a04      	ldr	r2, [pc, #16]	; (8019310 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	601a      	str	r2, [r3, #0]
    }
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	4618      	mov	r0, r3
 8019306:	370c      	adds	r7, #12
 8019308:	46bd      	mov	sp, r7
 801930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930e:	4770      	bx	lr
 8019310:	08021ee0 	.word	0x08021ee0

08019314 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8019314:	b580      	push	{r7, lr}
 8019316:	b082      	sub	sp, #8
 8019318:	af00      	add	r7, sp, #0
 801931a:	6078      	str	r0, [r7, #4]
    }
 801931c:	6878      	ldr	r0, [r7, #4]
 801931e:	f7ff ffe9 	bl	80192f4 <_ZN8touchgfx10TransitionD1Ev>
 8019322:	210c      	movs	r1, #12
 8019324:	6878      	ldr	r0, [r7, #4]
 8019326:	f006 fd66 	bl	801fdf6 <_ZdlPvj>
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	4618      	mov	r0, r3
 801932e:	3708      	adds	r7, #8
 8019330:	46bd      	mov	sp, r7
 8019332:	bd80      	pop	{r7, pc}

08019334 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8019334:	b480      	push	{r7}
 8019336:	b083      	sub	sp, #12
 8019338:	af00      	add	r7, sp, #0
 801933a:	6078      	str	r0, [r7, #4]
 801933c:	bf00      	nop
 801933e:	370c      	adds	r7, #12
 8019340:	46bd      	mov	sp, r7
 8019342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019346:	4770      	bx	lr

08019348 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8019348:	b480      	push	{r7}
 801934a:	b083      	sub	sp, #12
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
 8019350:	bf00      	nop
 8019352:	370c      	adds	r7, #12
 8019354:	46bd      	mov	sp, r7
 8019356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801935a:	4770      	bx	lr

0801935c <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 801935c:	b480      	push	{r7}
 801935e:	b083      	sub	sp, #12
 8019360:	af00      	add	r7, sp, #0
 8019362:	6078      	str	r0, [r7, #4]
 8019364:	bf00      	nop
 8019366:	370c      	adds	r7, #12
 8019368:	46bd      	mov	sp, r7
 801936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801936e:	4770      	bx	lr

08019370 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8019370:	b480      	push	{r7}
 8019372:	b083      	sub	sp, #12
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]
 8019378:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	683a      	ldr	r2, [r7, #0]
 801937e:	605a      	str	r2, [r3, #4]
    }
 8019380:	bf00      	nop
 8019382:	370c      	adds	r7, #12
 8019384:	46bd      	mov	sp, r7
 8019386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938a:	4770      	bx	lr

0801938c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication() :
 801938c:	b580      	push	{r7, lr}
 801938e:	b082      	sub	sp, #8
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
        pendingScreenTransitionCallback(0)
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	4618      	mov	r0, r3
 8019398:	f003 fa5e 	bl	801c858 <_ZN8touchgfx11ApplicationC1Ev>
 801939c:	4a09      	ldr	r2, [pc, #36]	; (80193c4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	601a      	str	r2, [r3, #0]
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	2200      	movs	r2, #0
 80193a6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	2200      	movs	r2, #0
 80193ae:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        instance = this;
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	4a04      	ldr	r2, [pc, #16]	; (80193c8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80193b6:	6013      	str	r3, [r2, #0]
    }
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	4618      	mov	r0, r3
 80193bc:	3708      	adds	r7, #8
 80193be:	46bd      	mov	sp, r7
 80193c0:	bd80      	pop	{r7, pc}
 80193c2:	bf00      	nop
 80193c4:	08021adc 	.word	0x08021adc
 80193c8:	20009d30 	.word	0x20009d30

080193cc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 80193cc:	b580      	push	{r7, lr}
 80193ce:	b084      	sub	sp, #16
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	60f8      	str	r0, [r7, #12]
 80193d4:	60b9      	str	r1, [r7, #8]
 80193d6:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 80193d8:	f003 f9d4 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 80193dc:	4603      	mov	r3, r0
 80193de:	4618      	mov	r0, r3
 80193e0:	f003 fa1d 	bl	801c81e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d008      	beq.n	80193fe <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	681a      	ldr	r2, [r3, #0]
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	330c      	adds	r3, #12
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	4610      	mov	r0, r2
 80193fc:	4798      	blx	r3
    }
    if (*currentTrans)
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d007      	beq.n	8019416 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	681a      	ldr	r2, [r3, #0]
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	4610      	mov	r0, r2
 8019414:	4798      	blx	r3
    }
    if (*currentScreen)
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d008      	beq.n	8019430 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	681a      	ldr	r2, [r3, #0]
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	3314      	adds	r3, #20
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	4610      	mov	r0, r2
 801942e:	4798      	blx	r3
    }
    if (*currentPresenter)
 8019430:	68bb      	ldr	r3, [r7, #8]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d008      	beq.n	801944a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8019438:	68bb      	ldr	r3, [r7, #8]
 801943a:	681a      	ldr	r2, [r3, #0]
 801943c:	68bb      	ldr	r3, [r7, #8]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	3304      	adds	r3, #4
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	4610      	mov	r0, r2
 8019448:	4798      	blx	r3
    }
    if (*currentScreen)
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d007      	beq.n	8019462 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	681a      	ldr	r2, [r3, #0]
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	4610      	mov	r0, r2
 8019460:	4798      	blx	r3
    }
    if (*currentPresenter)
 8019462:	68bb      	ldr	r3, [r7, #8]
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d008      	beq.n	801947c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 801946a:	68bb      	ldr	r3, [r7, #8]
 801946c:	681a      	ldr	r2, [r3, #0]
 801946e:	68bb      	ldr	r3, [r7, #8]
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	3308      	adds	r3, #8
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	4610      	mov	r0, r2
 801947a:	4798      	blx	r3
    }
}
 801947c:	bf00      	nop
 801947e:	3710      	adds	r7, #16
 8019480:	46bd      	mov	sp, r7
 8019482:	bd80      	pop	{r7, pc}

08019484 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8019484:	b580      	push	{r7, lr}
 8019486:	b084      	sub	sp, #16
 8019488:	af00      	add	r7, sp, #0
 801948a:	60f8      	str	r0, [r7, #12]
 801948c:	60b9      	str	r1, [r7, #8]
 801948e:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	330c      	adds	r3, #12
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	68f8      	ldr	r0, [r7, #12]
 801949a:	4798      	blx	r3
    newPresenter->activate();
 801949c:	68bb      	ldr	r3, [r7, #8]
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	68b8      	ldr	r0, [r7, #8]
 80194a4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80194a6:	6879      	ldr	r1, [r7, #4]
 80194a8:	68f8      	ldr	r0, [r7, #12]
 80194aa:	f004 f9bb 	bl	801d824 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	3310      	adds	r3, #16
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	6878      	ldr	r0, [r7, #4]
 80194b8:	4798      	blx	r3

    Application::getInstance()->draw();
 80194ba:	f003 f963 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 80194be:	4602      	mov	r2, r0
 80194c0:	6813      	ldr	r3, [r2, #0]
 80194c2:	3328      	adds	r3, #40	; 0x28
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	4610      	mov	r0, r2
 80194c8:	4798      	blx	r3
}
 80194ca:	bf00      	nop
 80194cc:	3710      	adds	r7, #16
 80194ce:	46bd      	mov	sp, r7
 80194d0:	bd80      	pop	{r7, pc}

080194d2 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 80194d2:	b480      	push	{r7}
 80194d4:	b083      	sub	sp, #12
 80194d6:	af00      	add	r7, sp, #0
 80194d8:	6078      	str	r0, [r7, #4]
 80194da:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	683a      	ldr	r2, [r7, #0]
 80194e0:	601a      	str	r2, [r3, #0]
    }
 80194e2:	bf00      	nop
 80194e4:	370c      	adds	r7, #12
 80194e6:	46bd      	mov	sp, r7
 80194e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ec:	4770      	bx	lr
	...

080194f0 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b082      	sub	sp, #8
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	6078      	str	r0, [r7, #4]
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	4618      	mov	r0, r3
 80194fc:	f7ff fee4 	bl	80192c8 <_ZN8touchgfx10TransitionC1Ev>
 8019500:	4a03      	ldr	r2, [pc, #12]	; (8019510 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	601a      	str	r2, [r3, #0]
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	4618      	mov	r0, r3
 801950a:	3708      	adds	r7, #8
 801950c:	46bd      	mov	sp, r7
 801950e:	bd80      	pop	{r7, pc}
 8019510:	08021ec0 	.word	0x08021ec0

08019514 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8019514:	b580      	push	{r7, lr}
 8019516:	b082      	sub	sp, #8
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
 801951c:	4a05      	ldr	r2, [pc, #20]	; (8019534 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	601a      	str	r2, [r3, #0]
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	4618      	mov	r0, r3
 8019526:	f7ff fee5 	bl	80192f4 <_ZN8touchgfx10TransitionD1Ev>
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	4618      	mov	r0, r3
 801952e:	3708      	adds	r7, #8
 8019530:	46bd      	mov	sp, r7
 8019532:	bd80      	pop	{r7, pc}
 8019534:	08021ec0 	.word	0x08021ec0

08019538 <_ZN8touchgfx12NoTransitionD0Ev>:
 8019538:	b580      	push	{r7, lr}
 801953a:	b082      	sub	sp, #8
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
 8019540:	6878      	ldr	r0, [r7, #4]
 8019542:	f7ff ffe7 	bl	8019514 <_ZN8touchgfx12NoTransitionD1Ev>
 8019546:	210c      	movs	r1, #12
 8019548:	6878      	ldr	r0, [r7, #4]
 801954a:	f006 fc54 	bl	801fdf6 <_ZdlPvj>
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	4618      	mov	r0, r3
 8019552:	3708      	adds	r7, #8
 8019554:	46bd      	mov	sp, r7
 8019556:	bd80      	pop	{r7, pc}

08019558 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8019558:	b480      	push	{r7}
 801955a:	b083      	sub	sp, #12
 801955c:	af00      	add	r7, sp, #0
 801955e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	2201      	movs	r2, #1
 8019564:	721a      	strb	r2, [r3, #8]
    }
 8019566:	bf00      	nop
 8019568:	370c      	adds	r7, #12
 801956a:	46bd      	mov	sp, r7
 801956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019570:	4770      	bx	lr

08019572 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8019572:	b480      	push	{r7}
 8019574:	b083      	sub	sp, #12
 8019576:	af00      	add	r7, sp, #0
 8019578:	6078      	str	r0, [r7, #4]
 801957a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	683a      	ldr	r2, [r7, #0]
 8019580:	605a      	str	r2, [r3, #4]
    }
 8019582:	bf00      	nop
 8019584:	370c      	adds	r7, #12
 8019586:	46bd      	mov	sp, r7
 8019588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801958c:	4770      	bx	lr
	...

08019590 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/mainmenu_screen/mainMenuPresenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8019590:	b580      	push	{r7, lr}
 8019592:	b084      	sub	sp, #16
 8019594:	af00      	add	r7, sp, #0
 8019596:	60f8      	str	r0, [r7, #12]
 8019598:	60b9      	str	r1, [r7, #8]
 801959a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	4618      	mov	r0, r3
 80195a0:	f7ff fef4 	bl	801938c <_ZN8touchgfx14MVPApplicationC1Ev>
 80195a4:	4a0a      	ldr	r2, [pc, #40]	; (80195d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>)
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	601a      	str	r2, [r3, #0]
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80195b0:	4618      	mov	r0, r3
 80195b2:	f000 f8d3 	bl	801975c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	687a      	ldr	r2, [r7, #4]
 80195ba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	68ba      	ldr	r2, [r7, #8]
 80195c2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{

}
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	4618      	mov	r0, r3
 80195ca:	3710      	adds	r7, #16
 80195cc:	46bd      	mov	sp, r7
 80195ce:	bd80      	pop	{r7, pc}
 80195d0:	08021a88 	.word	0x08021a88

080195d4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80195d4:	b480      	push	{r7}
 80195d6:	b083      	sub	sp, #12
 80195d8:	af00      	add	r7, sp, #0
 80195da:	6078      	str	r0, [r7, #4]
 80195dc:	6039      	str	r1, [r7, #0]
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	4618      	mov	r0, r3
 80195e2:	370c      	adds	r7, #12
 80195e4:	46bd      	mov	sp, r7
 80195e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ea:	4770      	bx	lr

080195ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b082      	sub	sp, #8
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
 80195f4:	6039      	str	r1, [r7, #0]
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	683a      	ldr	r2, [r7, #0]
 80195fa:	4611      	mov	r1, r2
 80195fc:	4618      	mov	r0, r3
 80195fe:	f7ff ffe9 	bl	80195d4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8019602:	683b      	ldr	r3, [r7, #0]
 8019604:	685a      	ldr	r2, [r3, #4]
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	605a      	str	r2, [r3, #4]
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	683a      	ldr	r2, [r7, #0]
 801960e:	3308      	adds	r3, #8
 8019610:	3208      	adds	r2, #8
 8019612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019616:	e883 0003 	stmia.w	r3, {r0, r1}
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	4618      	mov	r0, r3
 801961e:	3708      	adds	r7, #8
 8019620:	46bd      	mov	sp, r7
 8019622:	bd80      	pop	{r7, pc}

08019624 <_ZN23FrontendApplicationBase35gotoStartUpScreenScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// StartUpScreen

void FrontendApplicationBase::gotoStartUpScreenScreenNoTransition()
{
 8019624:	b590      	push	{r4, r7, lr}
 8019626:	b089      	sub	sp, #36	; 0x24
 8019628:	af00      	add	r7, sp, #0
 801962a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoStartUpScreenScreenNoTransitionImpl);
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8019632:	4b10      	ldr	r3, [pc, #64]	; (8019674 <_ZN23FrontendApplicationBase35gotoStartUpScreenScreenNoTransitionEv+0x50>)
 8019634:	61bb      	str	r3, [r7, #24]
 8019636:	2300      	movs	r3, #0
 8019638:	61fb      	str	r3, [r7, #28]
 801963a:	f107 0008 	add.w	r0, r7, #8
 801963e:	f107 0318 	add.w	r3, r7, #24
 8019642:	cb0c      	ldmia	r3, {r2, r3}
 8019644:	6879      	ldr	r1, [r7, #4]
 8019646:	f000 f8a5 	bl	8019794 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801964a:	f107 0308 	add.w	r3, r7, #8
 801964e:	4619      	mov	r1, r3
 8019650:	4620      	mov	r0, r4
 8019652:	f7ff ffcb 	bl	80195ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8019656:	f107 0308 	add.w	r3, r7, #8
 801965a:	4618      	mov	r0, r3
 801965c:	f7fb f898 	bl	8014790 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801966c:	bf00      	nop
 801966e:	3724      	adds	r7, #36	; 0x24
 8019670:	46bd      	mov	sp, r7
 8019672:	bd90      	pop	{r4, r7, pc}
 8019674:	08019679 	.word	0x08019679

08019678 <_ZN23FrontendApplicationBase39gotoStartUpScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoStartUpScreenScreenNoTransitionImpl()
{
 8019678:	b580      	push	{r7, lr}
 801967a:	b084      	sub	sp, #16
 801967c:	af02      	add	r7, sp, #8
 801967e:	6078      	str	r0, [r7, #4]
    makeTransition<StartUpScreenView, StartUpScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801968c:	461a      	mov	r2, r3
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8019694:	9300      	str	r3, [sp, #0]
 8019696:	4b04      	ldr	r3, [pc, #16]	; (80196a8 <_ZN23FrontendApplicationBase39gotoStartUpScreenScreenNoTransitionImplEv+0x30>)
 8019698:	4804      	ldr	r0, [pc, #16]	; (80196ac <_ZN23FrontendApplicationBase39gotoStartUpScreenScreenNoTransitionImplEv+0x34>)
 801969a:	f000 f89b 	bl	80197d4 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801969e:	bf00      	nop
 80196a0:	3708      	adds	r7, #8
 80196a2:	46bd      	mov	sp, r7
 80196a4:	bd80      	pop	{r7, pc}
 80196a6:	bf00      	nop
 80196a8:	20009d2c 	.word	0x20009d2c
 80196ac:	20009d28 	.word	0x20009d28

080196b0 <_ZN23FrontendApplicationBase37gotomainMenuScreenCoverTransitionEastEv>:

// mainMenu

void FrontendApplicationBase::gotomainMenuScreenCoverTransitionEast()
{
 80196b0:	b590      	push	{r4, r7, lr}
 80196b2:	b089      	sub	sp, #36	; 0x24
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainMenuScreenCoverTransitionEastImpl);
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	f503 749c 	add.w	r4, r3, #312	; 0x138
 80196be:	4b10      	ldr	r3, [pc, #64]	; (8019700 <_ZN23FrontendApplicationBase37gotomainMenuScreenCoverTransitionEastEv+0x50>)
 80196c0:	61bb      	str	r3, [r7, #24]
 80196c2:	2300      	movs	r3, #0
 80196c4:	61fb      	str	r3, [r7, #28]
 80196c6:	f107 0008 	add.w	r0, r7, #8
 80196ca:	f107 0318 	add.w	r3, r7, #24
 80196ce:	cb0c      	ldmia	r3, {r2, r3}
 80196d0:	6879      	ldr	r1, [r7, #4]
 80196d2:	f000 f85f 	bl	8019794 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80196d6:	f107 0308 	add.w	r3, r7, #8
 80196da:	4619      	mov	r1, r3
 80196dc:	4620      	mov	r0, r4
 80196de:	f7ff ff85 	bl	80195ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80196e2:	f107 0308 	add.w	r3, r7, #8
 80196e6:	4618      	mov	r0, r3
 80196e8:	f7fb f852 	bl	8014790 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80196f8:	bf00      	nop
 80196fa:	3724      	adds	r7, #36	; 0x24
 80196fc:	46bd      	mov	sp, r7
 80196fe:	bd90      	pop	{r4, r7, pc}
 8019700:	08019705 	.word	0x08019705

08019704 <_ZN23FrontendApplicationBase41gotomainMenuScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotomainMenuScreenCoverTransitionEastImpl()
{
 8019704:	b580      	push	{r7, lr}
 8019706:	b084      	sub	sp, #16
 8019708:	af02      	add	r7, sp, #8
 801970a:	6078      	str	r0, [r7, #4]
    makeTransition<mainMenuView, mainMenuPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8019718:	461a      	mov	r2, r3
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8019720:	9300      	str	r3, [sp, #0]
 8019722:	4b04      	ldr	r3, [pc, #16]	; (8019734 <_ZN23FrontendApplicationBase41gotomainMenuScreenCoverTransitionEastImplEv+0x30>)
 8019724:	4804      	ldr	r0, [pc, #16]	; (8019738 <_ZN23FrontendApplicationBase41gotomainMenuScreenCoverTransitionEastImplEv+0x34>)
 8019726:	f000 f90d 	bl	8019944 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801972a:	bf00      	nop
 801972c:	3708      	adds	r7, #8
 801972e:	46bd      	mov	sp, r7
 8019730:	bd80      	pop	{r7, pc}
 8019732:	bf00      	nop
 8019734:	20009d2c 	.word	0x20009d2c
 8019738:	20009d28 	.word	0x20009d28

0801973c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801973c:	b480      	push	{r7}
 801973e:	b083      	sub	sp, #12
 8019740:	af00      	add	r7, sp, #0
 8019742:	6078      	str	r0, [r7, #4]
 8019744:	4a04      	ldr	r2, [pc, #16]	; (8019758 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	601a      	str	r2, [r3, #0]
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	4618      	mov	r0, r3
 801974e:	370c      	adds	r7, #12
 8019750:	46bd      	mov	sp, r7
 8019752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019756:	4770      	bx	lr
 8019758:	08021b18 	.word	0x08021b18

0801975c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback() : pobject(0), pmemfun_0(0) { }
 801975c:	b580      	push	{r7, lr}
 801975e:	b082      	sub	sp, #8
 8019760:	af00      	add	r7, sp, #0
 8019762:	6078      	str	r0, [r7, #4]
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	4618      	mov	r0, r3
 8019768:	f7ff ffe8 	bl	801973c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801976c:	4a08      	ldr	r2, [pc, #32]	; (8019790 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	601a      	str	r2, [r3, #0]
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	2200      	movs	r2, #0
 8019776:	605a      	str	r2, [r3, #4]
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	2200      	movs	r2, #0
 801977c:	609a      	str	r2, [r3, #8]
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	2200      	movs	r2, #0
 8019782:	60da      	str	r2, [r3, #12]
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	4618      	mov	r0, r3
 8019788:	3708      	adds	r7, #8
 801978a:	46bd      	mov	sp, r7
 801978c:	bd80      	pop	{r7, pc}
 801978e:	bf00      	nop
 8019790:	08021ac4 	.word	0x08021ac4

08019794 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8019794:	b580      	push	{r7, lr}
 8019796:	b084      	sub	sp, #16
 8019798:	af00      	add	r7, sp, #0
 801979a:	60f8      	str	r0, [r7, #12]
 801979c:	60b9      	str	r1, [r7, #8]
 801979e:	4639      	mov	r1, r7
 80197a0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	4618      	mov	r0, r3
 80197a8:	f7ff ffc8 	bl	801973c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80197ac:	4a08      	ldr	r2, [pc, #32]	; (80197d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	68ba      	ldr	r2, [r7, #8]
 80197b6:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	3308      	adds	r3, #8
 80197bc:	463a      	mov	r2, r7
 80197be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80197c2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	4618      	mov	r0, r3
 80197ca:	3710      	adds	r7, #16
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bd80      	pop	{r7, pc}
 80197d0:	08021ac4 	.word	0x08021ac4

080197d4 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80197d4:	b590      	push	{r4, r7, lr}
 80197d6:	b089      	sub	sp, #36	; 0x24
 80197d8:	af00      	add	r7, sp, #0
 80197da:	60f8      	str	r0, [r7, #12]
 80197dc:	60b9      	str	r1, [r7, #8]
 80197de:	607a      	str	r2, [r7, #4]
 80197e0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	689a      	ldr	r2, [r3, #8]
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	689b      	ldr	r3, [r3, #8]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	3320      	adds	r3, #32
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	4610      	mov	r0, r2
 80197f2:	4798      	blx	r3
 80197f4:	4603      	mov	r3, r0
 80197f6:	2b93      	cmp	r3, #147	; 0x93
 80197f8:	d805      	bhi.n	8019806 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 80197fa:	4b4d      	ldr	r3, [pc, #308]	; (8019930 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 80197fc:	4a4d      	ldr	r2, [pc, #308]	; (8019934 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 80197fe:	21c2      	movs	r1, #194	; 0xc2
 8019800:	484d      	ldr	r0, [pc, #308]	; (8019938 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8019802:	f006 fb15 	bl	801fe30 <__assert_func>
 8019806:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	685a      	ldr	r2, [r3, #4]
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	685b      	ldr	r3, [r3, #4]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	3320      	adds	r3, #32
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	4610      	mov	r0, r2
 8019818:	4798      	blx	r3
 801981a:	4603      	mov	r3, r0
 801981c:	2b0f      	cmp	r3, #15
 801981e:	d805      	bhi.n	801982c <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8019820:	4b46      	ldr	r3, [pc, #280]	; (801993c <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8019822:	4a44      	ldr	r2, [pc, #272]	; (8019934 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8019824:	21c3      	movs	r1, #195	; 0xc3
 8019826:	4844      	ldr	r0, [pc, #272]	; (8019938 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8019828:	f006 fb02 	bl	801fe30 <__assert_func>
 801982c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	68da      	ldr	r2, [r3, #12]
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	68db      	ldr	r3, [r3, #12]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	3320      	adds	r3, #32
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	4610      	mov	r0, r2
 801983e:	4798      	blx	r3
 8019840:	4603      	mov	r3, r0
 8019842:	2b0b      	cmp	r3, #11
 8019844:	d805      	bhi.n	8019852 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8019846:	4b3e      	ldr	r3, [pc, #248]	; (8019940 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8019848:	4a3a      	ldr	r2, [pc, #232]	; (8019934 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 801984a:	21c4      	movs	r1, #196	; 0xc4
 801984c:	483a      	ldr	r0, [pc, #232]	; (8019938 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801984e:	f006 faef 	bl	801fe30 <__assert_func>
 8019852:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8019854:	683a      	ldr	r2, [r7, #0]
 8019856:	68b9      	ldr	r1, [r7, #8]
 8019858:	68f8      	ldr	r0, [r7, #12]
 801985a:	f7ff fdb7 	bl	80193cc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	68db      	ldr	r3, [r3, #12]
 8019862:	2100      	movs	r1, #0
 8019864:	4618      	mov	r0, r3
 8019866:	f000 f929 	bl	8019abc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801986a:	4603      	mov	r3, r0
 801986c:	4619      	mov	r1, r3
 801986e:	200c      	movs	r0, #12
 8019870:	f7ff fd1e 	bl	80192b0 <_ZnwjPv>
 8019874:	4604      	mov	r4, r0
 8019876:	2c00      	cmp	r4, #0
 8019878:	d004      	beq.n	8019884 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
 801987a:	4620      	mov	r0, r4
 801987c:	f7ff fe38 	bl	80194f0 <_ZN8touchgfx12NoTransitionC1Ev>
 8019880:	4623      	mov	r3, r4
 8019882:	e000      	b.n	8019886 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8019884:	4623      	mov	r3, r4
 8019886:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	689b      	ldr	r3, [r3, #8]
 801988c:	2100      	movs	r1, #0
 801988e:	4618      	mov	r0, r3
 8019890:	f000 f927 	bl	8019ae2 <_ZN8touchgfx17AbstractPartition2atI17StartUpScreenViewEERT_t>
 8019894:	4603      	mov	r3, r0
 8019896:	4619      	mov	r1, r3
 8019898:	2094      	movs	r0, #148	; 0x94
 801989a:	f7ff fd09 	bl	80192b0 <_ZnwjPv>
 801989e:	4604      	mov	r4, r0
 80198a0:	2c00      	cmp	r4, #0
 80198a2:	d004      	beq.n	80198ae <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xda>
 80198a4:	4620      	mov	r0, r4
 80198a6:	f001 ff79 	bl	801b79c <_ZN17StartUpScreenViewC1Ev>
 80198aa:	4623      	mov	r3, r4
 80198ac:	e000      	b.n	80198b0 <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 80198ae:	4623      	mov	r3, r4
 80198b0:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	685b      	ldr	r3, [r3, #4]
 80198b6:	2100      	movs	r1, #0
 80198b8:	4618      	mov	r0, r3
 80198ba:	f000 f925 	bl	8019b08 <_ZN8touchgfx17AbstractPartition2atI22StartUpScreenPresenterEERT_t>
 80198be:	4603      	mov	r3, r0
 80198c0:	4619      	mov	r1, r3
 80198c2:	2010      	movs	r0, #16
 80198c4:	f7ff fcf4 	bl	80192b0 <_ZnwjPv>
 80198c8:	4604      	mov	r4, r0
 80198ca:	2c00      	cmp	r4, #0
 80198cc:	d005      	beq.n	80198da <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x106>
 80198ce:	69b9      	ldr	r1, [r7, #24]
 80198d0:	4620      	mov	r0, r4
 80198d2:	f001 ff0d 	bl	801b6f0 <_ZN22StartUpScreenPresenterC1ER17StartUpScreenView>
 80198d6:	4623      	mov	r3, r4
 80198d8:	e000      	b.n	80198dc <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 80198da:	4623      	mov	r3, r4
 80198dc:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80198de:	683b      	ldr	r3, [r7, #0]
 80198e0:	69fa      	ldr	r2, [r7, #28]
 80198e2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80198e4:	68bb      	ldr	r3, [r7, #8]
 80198e6:	697a      	ldr	r2, [r7, #20]
 80198e8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	69ba      	ldr	r2, [r7, #24]
 80198ee:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80198f0:	697b      	ldr	r3, [r7, #20]
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d002      	beq.n	80198fc <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>
 80198f6:	697b      	ldr	r3, [r7, #20]
 80198f8:	3304      	adds	r3, #4
 80198fa:	e000      	b.n	80198fe <_ZN8touchgfx14makeTransitionI17StartUpScreenView22StartUpScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 80198fc:	2300      	movs	r3, #0
 80198fe:	4619      	mov	r1, r3
 8019900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019902:	f7ff fde6 	bl	80194d2 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8019906:	697b      	ldr	r3, [r7, #20]
 8019908:	3304      	adds	r3, #4
 801990a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801990c:	4618      	mov	r0, r3
 801990e:	f7ff fe30 	bl	8019572 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8019912:	69bb      	ldr	r3, [r7, #24]
 8019914:	6979      	ldr	r1, [r7, #20]
 8019916:	4618      	mov	r0, r3
 8019918:	f000 f909 	bl	8019b2e <_ZN8touchgfx4ViewI22StartUpScreenPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801991c:	69fa      	ldr	r2, [r7, #28]
 801991e:	6979      	ldr	r1, [r7, #20]
 8019920:	69b8      	ldr	r0, [r7, #24]
 8019922:	f7ff fdaf 	bl	8019484 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8019926:	697b      	ldr	r3, [r7, #20]
}
 8019928:	4618      	mov	r0, r3
 801992a:	3724      	adds	r7, #36	; 0x24
 801992c:	46bd      	mov	sp, r7
 801992e:	bd90      	pop	{r4, r7, pc}
 8019930:	08021080 	.word	0x08021080
 8019934:	08021ef8 	.word	0x08021ef8
 8019938:	08021110 	.word	0x08021110
 801993c:	08021160 	.word	0x08021160
 8019940:	08021204 	.word	0x08021204

08019944 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8019944:	b590      	push	{r4, r7, lr}
 8019946:	b089      	sub	sp, #36	; 0x24
 8019948:	af00      	add	r7, sp, #0
 801994a:	60f8      	str	r0, [r7, #12]
 801994c:	60b9      	str	r1, [r7, #8]
 801994e:	607a      	str	r2, [r7, #4]
 8019950:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	689a      	ldr	r2, [r3, #8]
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	689b      	ldr	r3, [r3, #8]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	3320      	adds	r3, #32
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	4610      	mov	r0, r2
 8019962:	4798      	blx	r3
 8019964:	4603      	mov	r3, r0
 8019966:	f5b3 7f4b 	cmp.w	r3, #812	; 0x32c
 801996a:	d205      	bcs.n	8019978 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801996c:	4b4e      	ldr	r3, [pc, #312]	; (8019aa8 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801996e:	4a4f      	ldr	r2, [pc, #316]	; (8019aac <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8019970:	21c2      	movs	r1, #194	; 0xc2
 8019972:	484f      	ldr	r0, [pc, #316]	; (8019ab0 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8019974:	f006 fa5c 	bl	801fe30 <__assert_func>
 8019978:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	685a      	ldr	r2, [r3, #4]
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	685b      	ldr	r3, [r3, #4]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	3320      	adds	r3, #32
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	4610      	mov	r0, r2
 801998a:	4798      	blx	r3
 801998c:	4603      	mov	r3, r0
 801998e:	2b0f      	cmp	r3, #15
 8019990:	d805      	bhi.n	801999e <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8019992:	4b48      	ldr	r3, [pc, #288]	; (8019ab4 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8019994:	4a45      	ldr	r2, [pc, #276]	; (8019aac <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8019996:	21c3      	movs	r1, #195	; 0xc3
 8019998:	4845      	ldr	r0, [pc, #276]	; (8019ab0 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801999a:	f006 fa49 	bl	801fe30 <__assert_func>
 801999e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	68da      	ldr	r2, [r3, #12]
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	68db      	ldr	r3, [r3, #12]
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	3320      	adds	r3, #32
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	4610      	mov	r0, r2
 80199b0:	4798      	blx	r3
 80199b2:	4603      	mov	r3, r0
 80199b4:	2b4f      	cmp	r3, #79	; 0x4f
 80199b6:	d805      	bhi.n	80199c4 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80199b8:	4b3f      	ldr	r3, [pc, #252]	; (8019ab8 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 80199ba:	4a3c      	ldr	r2, [pc, #240]	; (8019aac <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80199bc:	21c4      	movs	r1, #196	; 0xc4
 80199be:	483c      	ldr	r0, [pc, #240]	; (8019ab0 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80199c0:	f006 fa36 	bl	801fe30 <__assert_func>
 80199c4:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80199c6:	683a      	ldr	r2, [r7, #0]
 80199c8:	68b9      	ldr	r1, [r7, #8]
 80199ca:	68f8      	ldr	r0, [r7, #12]
 80199cc:	f7ff fcfe 	bl	80193cc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	68db      	ldr	r3, [r3, #12]
 80199d4:	2100      	movs	r1, #0
 80199d6:	4618      	mov	r0, r3
 80199d8:	f000 f8b7 	bl	8019b4a <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 80199dc:	4603      	mov	r3, r0
 80199de:	4619      	mov	r1, r3
 80199e0:	2050      	movs	r0, #80	; 0x50
 80199e2:	f7ff fc65 	bl	80192b0 <_ZnwjPv>
 80199e6:	4604      	mov	r4, r0
 80199e8:	2c00      	cmp	r4, #0
 80199ea:	d005      	beq.n	80199f8 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 80199ec:	2114      	movs	r1, #20
 80199ee:	4620      	mov	r0, r4
 80199f0:	f000 f8e0 	bl	8019bb4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 80199f4:	4623      	mov	r3, r4
 80199f6:	e000      	b.n	80199fa <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 80199f8:	4623      	mov	r3, r4
 80199fa:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	689b      	ldr	r3, [r3, #8]
 8019a00:	2100      	movs	r1, #0
 8019a02:	4618      	mov	r0, r3
 8019a04:	f000 f954 	bl	8019cb0 <_ZN8touchgfx17AbstractPartition2atI12mainMenuViewEERT_t>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	4619      	mov	r1, r3
 8019a0c:	f44f 704b 	mov.w	r0, #812	; 0x32c
 8019a10:	f7ff fc4e 	bl	80192b0 <_ZnwjPv>
 8019a14:	4604      	mov	r4, r0
 8019a16:	2c00      	cmp	r4, #0
 8019a18:	d004      	beq.n	8019a24 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 8019a1a:	4620      	mov	r0, r4
 8019a1c:	f001 fdf2 	bl	801b604 <_ZN12mainMenuViewC1Ev>
 8019a20:	4623      	mov	r3, r4
 8019a22:	e000      	b.n	8019a26 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8019a24:	4623      	mov	r3, r4
 8019a26:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	685b      	ldr	r3, [r3, #4]
 8019a2c:	2100      	movs	r1, #0
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f000 f951 	bl	8019cd6 <_ZN8touchgfx17AbstractPartition2atI17mainMenuPresenterEERT_t>
 8019a34:	4603      	mov	r3, r0
 8019a36:	4619      	mov	r1, r3
 8019a38:	2010      	movs	r0, #16
 8019a3a:	f7ff fc39 	bl	80192b0 <_ZnwjPv>
 8019a3e:	4604      	mov	r4, r0
 8019a40:	2c00      	cmp	r4, #0
 8019a42:	d005      	beq.n	8019a50 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8019a44:	69b9      	ldr	r1, [r7, #24]
 8019a46:	4620      	mov	r0, r4
 8019a48:	f001 fd84 	bl	801b554 <_ZN17mainMenuPresenterC1ER12mainMenuView>
 8019a4c:	4623      	mov	r3, r4
 8019a4e:	e000      	b.n	8019a52 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 8019a50:	4623      	mov	r3, r4
 8019a52:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8019a54:	683b      	ldr	r3, [r7, #0]
 8019a56:	69fa      	ldr	r2, [r7, #28]
 8019a58:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8019a5a:	68bb      	ldr	r3, [r7, #8]
 8019a5c:	697a      	ldr	r2, [r7, #20]
 8019a5e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	69ba      	ldr	r2, [r7, #24]
 8019a64:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8019a66:	697b      	ldr	r3, [r7, #20]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d002      	beq.n	8019a72 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8019a6c:	697b      	ldr	r3, [r7, #20]
 8019a6e:	3304      	adds	r3, #4
 8019a70:	e000      	b.n	8019a74 <_ZN8touchgfx14makeTransitionI12mainMenuView17mainMenuPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8019a72:	2300      	movs	r3, #0
 8019a74:	4619      	mov	r1, r3
 8019a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a78:	f7ff fd2b 	bl	80194d2 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8019a7c:	697b      	ldr	r3, [r7, #20]
 8019a7e:	3304      	adds	r3, #4
 8019a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019a82:	4618      	mov	r0, r3
 8019a84:	f7ff fd75 	bl	8019572 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8019a88:	69bb      	ldr	r3, [r7, #24]
 8019a8a:	6979      	ldr	r1, [r7, #20]
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f000 f935 	bl	8019cfc <_ZN8touchgfx4ViewI17mainMenuPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8019a92:	69fa      	ldr	r2, [r7, #28]
 8019a94:	6979      	ldr	r1, [r7, #20]
 8019a96:	69b8      	ldr	r0, [r7, #24]
 8019a98:	f7ff fcf4 	bl	8019484 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8019a9c:	697b      	ldr	r3, [r7, #20]
}
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	3724      	adds	r7, #36	; 0x24
 8019aa2:	46bd      	mov	sp, r7
 8019aa4:	bd90      	pop	{r4, r7, pc}
 8019aa6:	bf00      	nop
 8019aa8:	08021080 	.word	0x08021080
 8019aac:	08022008 	.word	0x08022008
 8019ab0:	08021110 	.word	0x08021110
 8019ab4:	08021160 	.word	0x08021160
 8019ab8:	08021204 	.word	0x08021204

08019abc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b082      	sub	sp, #8
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	6078      	str	r0, [r7, #4]
 8019ac4:	460b      	mov	r3, r1
 8019ac6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	3324      	adds	r3, #36	; 0x24
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	887a      	ldrh	r2, [r7, #2]
 8019ad2:	4611      	mov	r1, r2
 8019ad4:	6878      	ldr	r0, [r7, #4]
 8019ad6:	4798      	blx	r3
 8019ad8:	4603      	mov	r3, r0
    }
 8019ada:	4618      	mov	r0, r3
 8019adc:	3708      	adds	r7, #8
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}

08019ae2 <_ZN8touchgfx17AbstractPartition2atI17StartUpScreenViewEERT_t>:
    T& at(const uint16_t index)
 8019ae2:	b580      	push	{r7, lr}
 8019ae4:	b082      	sub	sp, #8
 8019ae6:	af00      	add	r7, sp, #0
 8019ae8:	6078      	str	r0, [r7, #4]
 8019aea:	460b      	mov	r3, r1
 8019aec:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	3324      	adds	r3, #36	; 0x24
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	887a      	ldrh	r2, [r7, #2]
 8019af8:	4611      	mov	r1, r2
 8019afa:	6878      	ldr	r0, [r7, #4]
 8019afc:	4798      	blx	r3
 8019afe:	4603      	mov	r3, r0
    }
 8019b00:	4618      	mov	r0, r3
 8019b02:	3708      	adds	r7, #8
 8019b04:	46bd      	mov	sp, r7
 8019b06:	bd80      	pop	{r7, pc}

08019b08 <_ZN8touchgfx17AbstractPartition2atI22StartUpScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b082      	sub	sp, #8
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	6078      	str	r0, [r7, #4]
 8019b10:	460b      	mov	r3, r1
 8019b12:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	3324      	adds	r3, #36	; 0x24
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	887a      	ldrh	r2, [r7, #2]
 8019b1e:	4611      	mov	r1, r2
 8019b20:	6878      	ldr	r0, [r7, #4]
 8019b22:	4798      	blx	r3
 8019b24:	4603      	mov	r3, r0
    }
 8019b26:	4618      	mov	r0, r3
 8019b28:	3708      	adds	r7, #8
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	bd80      	pop	{r7, pc}

08019b2e <_ZN8touchgfx4ViewI22StartUpScreenPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8019b2e:	b480      	push	{r7}
 8019b30:	b083      	sub	sp, #12
 8019b32:	af00      	add	r7, sp, #0
 8019b34:	6078      	str	r0, [r7, #4]
 8019b36:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	683a      	ldr	r2, [r7, #0]
 8019b3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8019b3e:	bf00      	nop
 8019b40:	370c      	adds	r7, #12
 8019b42:	46bd      	mov	sp, r7
 8019b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b48:	4770      	bx	lr

08019b4a <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8019b4a:	b580      	push	{r7, lr}
 8019b4c:	b082      	sub	sp, #8
 8019b4e:	af00      	add	r7, sp, #0
 8019b50:	6078      	str	r0, [r7, #4]
 8019b52:	460b      	mov	r3, r1
 8019b54:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	3324      	adds	r3, #36	; 0x24
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	887a      	ldrh	r2, [r7, #2]
 8019b60:	4611      	mov	r1, r2
 8019b62:	6878      	ldr	r0, [r7, #4]
 8019b64:	4798      	blx	r3
 8019b66:	4603      	mov	r3, r0
    }
 8019b68:	4618      	mov	r0, r3
 8019b6a:	3708      	adds	r7, #8
 8019b6c:	46bd      	mov	sp, r7
 8019b6e:	bd80      	pop	{r7, pc}

08019b70 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b082      	sub	sp, #8
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
 8019b78:	4a05      	ldr	r2, [pc, #20]	; (8019b90 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	601a      	str	r2, [r3, #0]
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	4618      	mov	r0, r3
 8019b82:	f7f4 fa6d 	bl	800e060 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	4618      	mov	r0, r3
 8019b8a:	3708      	adds	r7, #8
 8019b8c:	46bd      	mov	sp, r7
 8019b8e:	bd80      	pop	{r7, pc}
 8019b90:	08021ea8 	.word	0x08021ea8

08019b94 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8019b94:	b580      	push	{r7, lr}
 8019b96:	b082      	sub	sp, #8
 8019b98:	af00      	add	r7, sp, #0
 8019b9a:	6078      	str	r0, [r7, #4]
 8019b9c:	6878      	ldr	r0, [r7, #4]
 8019b9e:	f7ff ffe7 	bl	8019b70 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8019ba2:	2110      	movs	r1, #16
 8019ba4:	6878      	ldr	r0, [r7, #4]
 8019ba6:	f006 f926 	bl	801fdf6 <_ZdlPvj>
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	4618      	mov	r0, r3
 8019bae:	3708      	adds	r7, #8
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	bd80      	pop	{r7, pc}

08019bb4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 8019bb4:	b590      	push	{r4, r7, lr}
 8019bb6:	b087      	sub	sp, #28
 8019bb8:	af02      	add	r7, sp, #8
 8019bba:	6078      	str	r0, [r7, #4]
 8019bbc:	460b      	mov	r3, r1
 8019bbe:	70fb      	strb	r3, [r7, #3]
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          movedToPos(0),
          solid()
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	f7ff fb80 	bl	80192c8 <_ZN8touchgfx10TransitionC1Ev>
 8019bc8:	4a35      	ldr	r2, [pc, #212]	; (8019ca0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xec>)
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	601a      	str	r2, [r3, #0]
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	f103 040c 	add.w	r4, r3, #12
 8019bd4:	4a33      	ldr	r2, [pc, #204]	; (8019ca4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf0>)
 8019bd6:	f107 0308 	add.w	r3, r7, #8
 8019bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019bde:	e883 0003 	stmia.w	r3, {r0, r1}
 8019be2:	f107 0308 	add.w	r3, r7, #8
 8019be6:	cb0c      	ldmia	r3, {r2, r3}
 8019be8:	6879      	ldr	r1, [r7, #4]
 8019bea:	4620      	mov	r0, r4
 8019bec:	f000 f8c6 	bl	8019d7c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	2202      	movs	r2, #2
 8019bf4:	771a      	strb	r2, [r3, #28]
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	78fa      	ldrb	r2, [r7, #3]
 8019bfa:	775a      	strb	r2, [r3, #29]
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	2200      	movs	r2, #0
 8019c00:	779a      	strb	r2, [r3, #30]
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	2200      	movs	r2, #0
 8019c06:	845a      	strh	r2, [r3, #34]	; 0x22
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	2200      	movs	r2, #0
 8019c0c:	849a      	strh	r2, [r3, #36]	; 0x24
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	3328      	adds	r3, #40	; 0x28
 8019c12:	4618      	mov	r0, r3
 8019c14:	f000 f8d2 	bl	8019dbc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (direction)
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	7f1b      	ldrb	r3, [r3, #28]
 8019c1c:	2b03      	cmp	r3, #3
 8019c1e:	d827      	bhi.n	8019c70 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xbc>
 8019c20:	a201      	add	r2, pc, #4	; (adr r2, 8019c28 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x74>)
 8019c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c26:	bf00      	nop
 8019c28:	08019c55 	.word	0x08019c55
 8019c2c:	08019c61 	.word	0x08019c61
 8019c30:	08019c39 	.word	0x08019c39
 8019c34:	08019c49 	.word	0x08019c49
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 8019c38:	4b1b      	ldr	r3, [pc, #108]	; (8019ca8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf4>)
 8019c3a:	881b      	ldrh	r3, [r3, #0]
 8019c3c:	425b      	negs	r3, r3
 8019c3e:	b29b      	uxth	r3, r3
 8019c40:	b21a      	sxth	r2, r3
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	841a      	strh	r2, [r3, #32]
            break;
 8019c46:	e017      	b.n	8019c78 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc4>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 8019c48:	4b17      	ldr	r3, [pc, #92]	; (8019ca8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf4>)
 8019c4a:	881b      	ldrh	r3, [r3, #0]
 8019c4c:	b21a      	sxth	r2, r3
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	841a      	strh	r2, [r3, #32]
            break;
 8019c52:	e011      	b.n	8019c78 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc4>
        case NORTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 8019c54:	4b15      	ldr	r3, [pc, #84]	; (8019cac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf8>)
 8019c56:	881b      	ldrh	r3, [r3, #0]
 8019c58:	b21a      	sxth	r2, r3
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	841a      	strh	r2, [r3, #32]
            break;
 8019c5e:	e00b      	b.n	8019c78 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc4>
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
 8019c60:	4b12      	ldr	r3, [pc, #72]	; (8019cac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf8>)
 8019c62:	881b      	ldrh	r3, [r3, #0]
 8019c64:	425b      	negs	r3, r3
 8019c66:	b29b      	uxth	r3, r3
 8019c68:	b21a      	sxth	r2, r3
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	841a      	strh	r2, [r3, #32]
            break;
 8019c6e:	e003      	b.n	8019c78 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc4>
        default:
            done = true;
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	2201      	movs	r2, #1
 8019c74:	721a      	strb	r2, [r3, #8]
            // Nothing to do here
            break;
 8019c76:	bf00      	nop
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8019c7e:	4b0a      	ldr	r3, [pc, #40]	; (8019ca8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf4>)
 8019c80:	881b      	ldrh	r3, [r3, #0]
 8019c82:	b21a      	sxth	r2, r3
 8019c84:	4b09      	ldr	r3, [pc, #36]	; (8019cac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf8>)
 8019c86:	881b      	ldrh	r3, [r3, #0]
 8019c88:	b21b      	sxth	r3, r3
 8019c8a:	9300      	str	r3, [sp, #0]
 8019c8c:	4613      	mov	r3, r2
 8019c8e:	2200      	movs	r2, #0
 8019c90:	2100      	movs	r1, #0
 8019c92:	f7f3 fdc5 	bl	800d820 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	4618      	mov	r0, r3
 8019c9a:	3714      	adds	r7, #20
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	bd90      	pop	{r4, r7, pc}
 8019ca0:	08021e14 	.word	0x08021e14
 8019ca4:	080212a8 	.word	0x080212a8
 8019ca8:	20009cc8 	.word	0x20009cc8
 8019cac:	20009cca 	.word	0x20009cca

08019cb0 <_ZN8touchgfx17AbstractPartition2atI12mainMenuViewEERT_t>:
    T& at(const uint16_t index)
 8019cb0:	b580      	push	{r7, lr}
 8019cb2:	b082      	sub	sp, #8
 8019cb4:	af00      	add	r7, sp, #0
 8019cb6:	6078      	str	r0, [r7, #4]
 8019cb8:	460b      	mov	r3, r1
 8019cba:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	3324      	adds	r3, #36	; 0x24
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	887a      	ldrh	r2, [r7, #2]
 8019cc6:	4611      	mov	r1, r2
 8019cc8:	6878      	ldr	r0, [r7, #4]
 8019cca:	4798      	blx	r3
 8019ccc:	4603      	mov	r3, r0
    }
 8019cce:	4618      	mov	r0, r3
 8019cd0:	3708      	adds	r7, #8
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	bd80      	pop	{r7, pc}

08019cd6 <_ZN8touchgfx17AbstractPartition2atI17mainMenuPresenterEERT_t>:
    T& at(const uint16_t index)
 8019cd6:	b580      	push	{r7, lr}
 8019cd8:	b082      	sub	sp, #8
 8019cda:	af00      	add	r7, sp, #0
 8019cdc:	6078      	str	r0, [r7, #4]
 8019cde:	460b      	mov	r3, r1
 8019ce0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	3324      	adds	r3, #36	; 0x24
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	887a      	ldrh	r2, [r7, #2]
 8019cec:	4611      	mov	r1, r2
 8019cee:	6878      	ldr	r0, [r7, #4]
 8019cf0:	4798      	blx	r3
 8019cf2:	4603      	mov	r3, r0
    }
 8019cf4:	4618      	mov	r0, r3
 8019cf6:	3708      	adds	r7, #8
 8019cf8:	46bd      	mov	sp, r7
 8019cfa:	bd80      	pop	{r7, pc}

08019cfc <_ZN8touchgfx4ViewI17mainMenuPresenterE4bindERS1_>:
    void bind(T& presenter)
 8019cfc:	b480      	push	{r7}
 8019cfe:	b083      	sub	sp, #12
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	6078      	str	r0, [r7, #4]
 8019d04:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	683a      	ldr	r2, [r7, #0]
 8019d0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8019d0c:	bf00      	nop
 8019d0e:	370c      	adds	r7, #12
 8019d10:	46bd      	mov	sp, r7
 8019d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d16:	4770      	bx	lr

08019d18 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b082      	sub	sp, #8
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
 8019d20:	6039      	str	r1, [r7, #0]
    {
        switch (direction)
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	7f1b      	ldrb	r3, [r3, #28]
 8019d26:	2b03      	cmp	r3, #3
 8019d28:	d820      	bhi.n	8019d6c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x54>
 8019d2a:	a201      	add	r2, pc, #4	; (adr r2, 8019d30 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x18>)
 8019d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d30:	08019d57 	.word	0x08019d57
 8019d34:	08019d57 	.word	0x08019d57
 8019d38:	08019d41 	.word	0x08019d41
 8019d3c:	08019d41 	.word	0x08019d41
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8019d40:	683b      	ldr	r3, [r7, #0]
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	3354      	adds	r3, #84	; 0x54
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	687a      	ldr	r2, [r7, #4]
 8019d4a:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 8019d4e:	2200      	movs	r2, #0
 8019d50:	6838      	ldr	r0, [r7, #0]
 8019d52:	4798      	blx	r3
            break;
 8019d54:	e00e      	b.n	8019d74 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8019d56:	683b      	ldr	r3, [r7, #0]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	3354      	adds	r3, #84	; 0x54
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	687a      	ldr	r2, [r7, #4]
 8019d60:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8019d64:	2100      	movs	r1, #0
 8019d66:	6838      	ldr	r0, [r7, #0]
 8019d68:	4798      	blx	r3
            break;
 8019d6a:	e003      	b.n	8019d74 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	2201      	movs	r2, #1
 8019d70:	721a      	strb	r2, [r3, #8]
            break;
 8019d72:	bf00      	nop
        }
    }
 8019d74:	bf00      	nop
 8019d76:	3708      	adds	r7, #8
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	bd80      	pop	{r7, pc}

08019d7c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8019d7c:	b580      	push	{r7, lr}
 8019d7e:	b084      	sub	sp, #16
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	60f8      	str	r0, [r7, #12]
 8019d84:	60b9      	str	r1, [r7, #8]
 8019d86:	4639      	mov	r1, r7
 8019d88:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	4618      	mov	r0, r3
 8019d90:	f7f4 f956 	bl	800e040 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8019d94:	4a08      	ldr	r2, [pc, #32]	; (8019db8 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	68ba      	ldr	r2, [r7, #8]
 8019d9e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	3308      	adds	r3, #8
 8019da4:	463a      	mov	r2, r7
 8019da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019daa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	4618      	mov	r0, r3
 8019db2:	3710      	adds	r7, #16
 8019db4:	46bd      	mov	sp, r7
 8019db6:	bd80      	pop	{r7, pc}
 8019db8:	08021ea8 	.word	0x08021ea8

08019dbc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
        FullSolidRect() : Widget()
 8019dbc:	b580      	push	{r7, lr}
 8019dbe:	b082      	sub	sp, #8
 8019dc0:	af00      	add	r7, sp, #0
 8019dc2:	6078      	str	r0, [r7, #4]
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f7f4 fa20 	bl	800e20c <_ZN8touchgfx6WidgetC1Ev>
 8019dcc:	4a03      	ldr	r2, [pc, #12]	; (8019ddc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	601a      	str	r2, [r3, #0]
        {}
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	3708      	adds	r7, #8
 8019dd8:	46bd      	mov	sp, r7
 8019dda:	bd80      	pop	{r7, pc}
 8019ddc:	08021e3c 	.word	0x08021e3c

08019de0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
        virtual ~FullSolidRect() {}
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b082      	sub	sp, #8
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	6078      	str	r0, [r7, #4]
 8019de8:	4a05      	ldr	r2, [pc, #20]	; (8019e00 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	601a      	str	r2, [r3, #0]
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	4618      	mov	r0, r3
 8019df2:	f7f4 fa1d 	bl	800e230 <_ZN8touchgfx6WidgetD1Ev>
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	4618      	mov	r0, r3
 8019dfa:	3708      	adds	r7, #8
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	bd80      	pop	{r7, pc}
 8019e00:	08021e3c 	.word	0x08021e3c

08019e04 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b082      	sub	sp, #8
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
 8019e0c:	6878      	ldr	r0, [r7, #4]
 8019e0e:	f7ff ffe7 	bl	8019de0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 8019e12:	2128      	movs	r1, #40	; 0x28
 8019e14:	6878      	ldr	r0, [r7, #4]
 8019e16:	f005 ffee 	bl	801fdf6 <_ZdlPvj>
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	3708      	adds	r7, #8
 8019e20:	46bd      	mov	sp, r7
 8019e22:	bd80      	pop	{r7, pc}

08019e24 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~CoverTransition()
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b082      	sub	sp, #8
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	6078      	str	r0, [r7, #4]
    }
 8019e2c:	4a0a      	ldr	r2, [pc, #40]	; (8019e58 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	601a      	str	r2, [r3, #0]
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	3328      	adds	r3, #40	; 0x28
 8019e36:	4618      	mov	r0, r3
 8019e38:	f7ff ffd2 	bl	8019de0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	330c      	adds	r3, #12
 8019e40:	4618      	mov	r0, r3
 8019e42:	f7ff fe95 	bl	8019b70 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f7ff fa53 	bl	80192f4 <_ZN8touchgfx10TransitionD1Ev>
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	4618      	mov	r0, r3
 8019e52:	3708      	adds	r7, #8
 8019e54:	46bd      	mov	sp, r7
 8019e56:	bd80      	pop	{r7, pc}
 8019e58:	08021e14 	.word	0x08021e14

08019e5c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~CoverTransition()
 8019e5c:	b580      	push	{r7, lr}
 8019e5e:	b082      	sub	sp, #8
 8019e60:	af00      	add	r7, sp, #0
 8019e62:	6078      	str	r0, [r7, #4]
    }
 8019e64:	6878      	ldr	r0, [r7, #4]
 8019e66:	f7ff ffdd 	bl	8019e24 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 8019e6a:	2150      	movs	r1, #80	; 0x50
 8019e6c:	6878      	ldr	r0, [r7, #4]
 8019e6e:	f005 ffc2 	bl	801fdf6 <_ZdlPvj>
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	4618      	mov	r0, r3
 8019e76:	3708      	adds	r7, #8
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	bd80      	pop	{r7, pc}

08019e7c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8019e7c:	b590      	push	{r4, r7, lr}
 8019e7e:	b08b      	sub	sp, #44	; 0x2c
 8019e80:	af02      	add	r7, sp, #8
 8019e82:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	4618      	mov	r0, r3
 8019e88:	f7ff fa54 	bl	8019334 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	7f9b      	ldrb	r3, [r3, #30]
 8019e90:	3301      	adds	r3, #1
 8019e92:	b2da      	uxtb	r2, r3
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	779a      	strb	r2, [r3, #30]
        if (animationCounter <= animationSteps)
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	7f9a      	ldrb	r2, [r3, #30]
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	7f5b      	ldrb	r3, [r3, #29]
 8019ea0:	429a      	cmp	r2, r3
 8019ea2:	d82b      	bhi.n	8019efc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	7f9b      	ldrb	r3, [r3, #30]
 8019ea8:	b298      	uxth	r0, r3
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	7f5b      	ldrb	r3, [r3, #29]
 8019eb4:	b29b      	uxth	r3, r3
 8019eb6:	2100      	movs	r1, #0
 8019eb8:	f003 fd24 	bl	801d904 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8019ebc:	4603      	mov	r3, r0
 8019ebe:	461a      	mov	r2, r3
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	845a      	strh	r2, [r3, #34]	; 0x22
            if (calculatedValue % 2)
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8019eca:	b29b      	uxth	r3, r3
 8019ecc:	f003 0301 	and.w	r3, r3, #1
 8019ed0:	b29b      	uxth	r3, r3
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d019      	beq.n	8019f0a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8019edc:	b29b      	uxth	r3, r3
 8019ede:	687a      	ldr	r2, [r7, #4]
 8019ee0:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8019ee4:	2a00      	cmp	r2, #0
 8019ee6:	dd01      	ble.n	8019eec <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 8019ee8:	2201      	movs	r2, #1
 8019eea:	e001      	b.n	8019ef0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 8019eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ef0:	4413      	add	r3, r2
 8019ef2:	b29b      	uxth	r3, r3
 8019ef4:	b21a      	sxth	r2, r3
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	845a      	strh	r2, [r3, #34]	; 0x22
 8019efa:	e006      	b.n	8019f0a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            done = true;
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	2201      	movs	r2, #1
 8019f00:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	2200      	movs	r2, #0
 8019f06:	779a      	strb	r2, [r3, #30]
            return;
 8019f08:	e0c0      	b.n	801a08c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x210>
        calculatedValue -= movedToPos;
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8019f10:	b29a      	uxth	r2, r3
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8019f18:	b29b      	uxth	r3, r3
 8019f1a:	1ad3      	subs	r3, r2, r3
 8019f1c:	b29b      	uxth	r3, r3
 8019f1e:	b21a      	sxth	r2, r3
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	845a      	strh	r2, [r3, #34]	; 0x22
        movedToPos += calculatedValue;
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8019f2a:	b29a      	uxth	r2, r3
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8019f32:	b29b      	uxth	r3, r3
 8019f34:	4413      	add	r3, r2
 8019f36:	b29b      	uxth	r3, r3
 8019f38:	b21a      	sxth	r2, r3
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	849a      	strh	r2, [r3, #36]	; 0x24
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	7f9b      	ldrb	r3, [r3, #30]
 8019f42:	2b01      	cmp	r3, #1
 8019f44:	f040 8097 	bne.w	801a076 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
 8019f48:	4b52      	ldr	r3, [pc, #328]	; (801a094 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x218>)
 8019f4a:	781b      	ldrb	r3, [r3, #0]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	f000 8092 	beq.w	801a076 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
            Rect rect;
 8019f52:	f107 0314 	add.w	r3, r7, #20
 8019f56:	4618      	mov	r0, r3
 8019f58:	f7f4 f8a2 	bl	800e0a0 <_ZN8touchgfx4RectC1Ev>
            switch (direction)
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	7f1b      	ldrb	r3, [r3, #28]
 8019f60:	2b03      	cmp	r3, #3
 8019f62:	d85b      	bhi.n	801a01c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a0>
 8019f64:	a201      	add	r2, pc, #4	; (adr r2, 8019f6c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xf0>)
 8019f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f6a:	bf00      	nop
 8019f6c:	08019fcd 	.word	0x08019fcd
 8019f70:	08019ff7 	.word	0x08019ff7
 8019f74:	08019f7d 	.word	0x08019f7d
 8019f78:	08019fa3 	.word	0x08019fa3
                rect.x = 0;
 8019f7c:	2300      	movs	r3, #0
 8019f7e:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8019f80:	2300      	movs	r3, #0
 8019f82:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8019f8a:	b29a      	uxth	r2, r3
 8019f8c:	4b42      	ldr	r3, [pc, #264]	; (801a098 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8019f8e:	881b      	ldrh	r3, [r3, #0]
 8019f90:	4413      	add	r3, r2
 8019f92:	b29b      	uxth	r3, r3
 8019f94:	b21b      	sxth	r3, r3
 8019f96:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 8019f98:	4b40      	ldr	r3, [pc, #256]	; (801a09c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8019f9a:	881b      	ldrh	r3, [r3, #0]
 8019f9c:	b21b      	sxth	r3, r3
 8019f9e:	837b      	strh	r3, [r7, #26]
                break;
 8019fa0:	e03d      	b.n	801a01e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = calculatedValue;
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8019fa8:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8019faa:	2300      	movs	r3, #0
 8019fac:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH - calculatedValue;
 8019fae:	4b3a      	ldr	r3, [pc, #232]	; (801a098 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8019fb0:	881a      	ldrh	r2, [r3, #0]
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8019fb8:	b29b      	uxth	r3, r3
 8019fba:	1ad3      	subs	r3, r2, r3
 8019fbc:	b29b      	uxth	r3, r3
 8019fbe:	b21b      	sxth	r3, r3
 8019fc0:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 8019fc2:	4b36      	ldr	r3, [pc, #216]	; (801a09c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8019fc4:	881b      	ldrh	r3, [r3, #0]
 8019fc6:	b21b      	sxth	r3, r3
 8019fc8:	837b      	strh	r3, [r7, #26]
                break;
 8019fca:	e028      	b.n	801a01e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 8019fcc:	2300      	movs	r3, #0
 8019fce:	82bb      	strh	r3, [r7, #20]
                rect.y = calculatedValue;
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8019fd6:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 8019fd8:	4b2f      	ldr	r3, [pc, #188]	; (801a098 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8019fda:	881b      	ldrh	r3, [r3, #0]
 8019fdc:	b21b      	sxth	r3, r3
 8019fde:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT - calculatedValue;
 8019fe0:	4b2e      	ldr	r3, [pc, #184]	; (801a09c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8019fe2:	881a      	ldrh	r2, [r3, #0]
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8019fea:	b29b      	uxth	r3, r3
 8019fec:	1ad3      	subs	r3, r2, r3
 8019fee:	b29b      	uxth	r3, r3
 8019ff0:	b21b      	sxth	r3, r3
 8019ff2:	837b      	strh	r3, [r7, #26]
                break;
 8019ff4:	e013      	b.n	801a01e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 8019ffe:	4b26      	ldr	r3, [pc, #152]	; (801a098 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 801a000:	881b      	ldrh	r3, [r3, #0]
 801a002:	b21b      	sxth	r3, r3
 801a004:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT + calculatedValue;
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801a00c:	b29a      	uxth	r2, r3
 801a00e:	4b23      	ldr	r3, [pc, #140]	; (801a09c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 801a010:	881b      	ldrh	r3, [r3, #0]
 801a012:	4413      	add	r3, r2
 801a014:	b29b      	uxth	r3, r3
 801a016:	b21b      	sxth	r3, r3
 801a018:	837b      	strh	r3, [r7, #26]
                break;
 801a01a:	e000      	b.n	801a01e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                break;
 801a01c:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 801a01e:	f7f4 fa7f 	bl	800e520 <_ZN8touchgfx3HAL11getInstanceEv>
 801a022:	4602      	mov	r2, r0
 801a024:	6813      	ldr	r3, [r2, #0]
 801a026:	3328      	adds	r3, #40	; 0x28
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	4610      	mov	r0, r2
 801a02c:	4798      	blx	r3
 801a02e:	61f8      	str	r0, [r7, #28]
            Rect source;
 801a030:	f107 030c 	add.w	r3, r7, #12
 801a034:	4618      	mov	r0, r3
 801a036:	f7f4 f833 	bl	800e0a0 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 801a03a:	2300      	movs	r3, #0
 801a03c:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 801a03e:	2300      	movs	r3, #0
 801a040:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 801a042:	4b15      	ldr	r3, [pc, #84]	; (801a098 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 801a044:	881b      	ldrh	r3, [r3, #0]
 801a046:	b21b      	sxth	r3, r3
 801a048:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 801a04a:	4b14      	ldr	r3, [pc, #80]	; (801a09c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 801a04c:	881b      	ldrh	r3, [r3, #0]
 801a04e:	b21b      	sxth	r3, r3
 801a050:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 801a052:	f7f4 fa65 	bl	800e520 <_ZN8touchgfx3HAL11getInstanceEv>
 801a056:	f7f4 faed 	bl	800e634 <_ZN8touchgfx3HAL3lcdEv>
 801a05a:	6803      	ldr	r3, [r0, #0]
 801a05c:	3310      	adds	r3, #16
 801a05e:	681c      	ldr	r4, [r3, #0]
 801a060:	f107 0114 	add.w	r1, r7, #20
 801a064:	f107 020c 	add.w	r2, r7, #12
 801a068:	2300      	movs	r3, #0
 801a06a:	9301      	str	r3, [sp, #4]
 801a06c:	23ff      	movs	r3, #255	; 0xff
 801a06e:	9300      	str	r3, [sp, #0]
 801a070:	460b      	mov	r3, r1
 801a072:	69f9      	ldr	r1, [r7, #28]
 801a074:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	6858      	ldr	r0, [r3, #4]
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	685b      	ldr	r3, [r3, #4]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	337c      	adds	r3, #124	; 0x7c
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	687a      	ldr	r2, [r7, #4]
 801a086:	320c      	adds	r2, #12
 801a088:	4611      	mov	r1, r2
 801a08a:	4798      	blx	r3
    }
 801a08c:	3724      	adds	r7, #36	; 0x24
 801a08e:	46bd      	mov	sp, r7
 801a090:	bd90      	pop	{r4, r7, pc}
 801a092:	bf00      	nop
 801a094:	20009cd2 	.word	0x20009cd2
 801a098:	20009cc8 	.word	0x20009cc8
 801a09c:	20009cca 	.word	0x20009cca

0801a0a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b082      	sub	sp, #8
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	6858      	ldr	r0, [r3, #4]
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	685b      	ldr	r3, [r3, #4]
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	3368      	adds	r3, #104	; 0x68
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	687a      	ldr	r2, [r7, #4]
 801a0b8:	3228      	adds	r2, #40	; 0x28
 801a0ba:	4611      	mov	r1, r2
 801a0bc:	4798      	blx	r3
    }
 801a0be:	bf00      	nop
 801a0c0:	3708      	adds	r7, #8
 801a0c2:	46bd      	mov	sp, r7
 801a0c4:	bd80      	pop	{r7, pc}
	...

0801a0c8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 801a0c8:	b580      	push	{r7, lr}
 801a0ca:	b088      	sub	sp, #32
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
        Transition::init();
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	f7ff f942 	bl	801935c <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 801a0d8:	4a16      	ldr	r2, [pc, #88]	; (801a134 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x6c>)
 801a0da:	f107 0318 	add.w	r3, r7, #24
 801a0de:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a0e2:	e883 0003 	stmia.w	r3, {r0, r1}
 801a0e6:	f107 0008 	add.w	r0, r7, #8
 801a0ea:	f107 0318 	add.w	r3, r7, #24
 801a0ee:	cb0c      	ldmia	r3, {r2, r3}
 801a0f0:	6879      	ldr	r1, [r7, #4]
 801a0f2:	f7ff fe43 	bl	8019d7c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	685a      	ldr	r2, [r3, #4]
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	685b      	ldr	r3, [r3, #4]
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	337c      	adds	r3, #124	; 0x7c
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	f107 0108 	add.w	r1, r7, #8
 801a108:	4610      	mov	r0, r2
 801a10a:	4798      	blx	r3
        screenContainer->add(solid);
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	6858      	ldr	r0, [r3, #4]
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	685b      	ldr	r3, [r3, #4]
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	3364      	adds	r3, #100	; 0x64
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	687a      	ldr	r2, [r7, #4]
 801a11c:	3228      	adds	r2, #40	; 0x28
 801a11e:	4611      	mov	r1, r2
 801a120:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 801a122:	f107 0308 	add.w	r3, r7, #8
 801a126:	4618      	mov	r0, r3
 801a128:	f7ff fd22 	bl	8019b70 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 801a12c:	bf00      	nop
 801a12e:	3720      	adds	r7, #32
 801a130:	46bd      	mov	sp, r7
 801a132:	bd80      	pop	{r7, pc}
 801a134:	080212b0 	.word	0x080212b0

0801a138 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 801a138:	b580      	push	{r7, lr}
 801a13a:	b082      	sub	sp, #8
 801a13c:	af00      	add	r7, sp, #0
 801a13e:	6078      	str	r0, [r7, #4]
 801a140:	6039      	str	r1, [r7, #0]
        switch (direction)
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	7f1b      	ldrb	r3, [r3, #28]
 801a146:	2b03      	cmp	r3, #3
 801a148:	d83a      	bhi.n	801a1c0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x88>
 801a14a:	a201      	add	r2, pc, #4	; (adr r2, 801a150 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x18>)
 801a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a150:	0801a191 	.word	0x0801a191
 801a154:	0801a1ab 	.word	0x0801a1ab
 801a158:	0801a161 	.word	0x0801a161
 801a15c:	0801a177 	.word	0x0801a177
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 801a160:	683b      	ldr	r3, [r7, #0]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	3354      	adds	r3, #84	; 0x54
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	4a18      	ldr	r2, [pc, #96]	; (801a1cc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 801a16a:	8812      	ldrh	r2, [r2, #0]
 801a16c:	b211      	sxth	r1, r2
 801a16e:	2200      	movs	r2, #0
 801a170:	6838      	ldr	r0, [r7, #0]
 801a172:	4798      	blx	r3
            break;
 801a174:	e025      	b.n	801a1c2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 801a176:	683b      	ldr	r3, [r7, #0]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	3354      	adds	r3, #84	; 0x54
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	4a13      	ldr	r2, [pc, #76]	; (801a1cc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 801a180:	8812      	ldrh	r2, [r2, #0]
 801a182:	4252      	negs	r2, r2
 801a184:	b292      	uxth	r2, r2
 801a186:	b211      	sxth	r1, r2
 801a188:	2200      	movs	r2, #0
 801a18a:	6838      	ldr	r0, [r7, #0]
 801a18c:	4798      	blx	r3
            break;
 801a18e:	e018      	b.n	801a1c2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 801a190:	683b      	ldr	r3, [r7, #0]
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	3354      	adds	r3, #84	; 0x54
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	4a0d      	ldr	r2, [pc, #52]	; (801a1d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801a19a:	8812      	ldrh	r2, [r2, #0]
 801a19c:	4252      	negs	r2, r2
 801a19e:	b292      	uxth	r2, r2
 801a1a0:	b212      	sxth	r2, r2
 801a1a2:	2100      	movs	r1, #0
 801a1a4:	6838      	ldr	r0, [r7, #0]
 801a1a6:	4798      	blx	r3
            break;
 801a1a8:	e00b      	b.n	801a1c2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 801a1aa:	683b      	ldr	r3, [r7, #0]
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	3354      	adds	r3, #84	; 0x54
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	4a07      	ldr	r2, [pc, #28]	; (801a1d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801a1b4:	8812      	ldrh	r2, [r2, #0]
 801a1b6:	b212      	sxth	r2, r2
 801a1b8:	2100      	movs	r1, #0
 801a1ba:	6838      	ldr	r0, [r7, #0]
 801a1bc:	4798      	blx	r3
            break;
 801a1be:	e000      	b.n	801a1c2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            break;
 801a1c0:	bf00      	nop
    }
 801a1c2:	bf00      	nop
 801a1c4:	3708      	adds	r7, #8
 801a1c6:	46bd      	mov	sp, r7
 801a1c8:	bd80      	pop	{r7, pc}
 801a1ca:	bf00      	nop
 801a1cc:	20009cc8 	.word	0x20009cc8
 801a1d0:	20009cca 	.word	0x20009cca

0801a1d4 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const { }
 801a1d4:	b480      	push	{r7}
 801a1d6:	b083      	sub	sp, #12
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	6078      	str	r0, [r7, #4]
 801a1dc:	6039      	str	r1, [r7, #0]
 801a1de:	bf00      	nop
 801a1e0:	370c      	adds	r7, #12
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e8:	4770      	bx	lr
	...

0801a1ec <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 801a1ec:	b580      	push	{r7, lr}
 801a1ee:	b084      	sub	sp, #16
 801a1f0:	af02      	add	r7, sp, #8
 801a1f2:	6078      	str	r0, [r7, #4]
 801a1f4:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 801a1f6:	4b08      	ldr	r3, [pc, #32]	; (801a218 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x2c>)
 801a1f8:	881b      	ldrh	r3, [r3, #0]
 801a1fa:	b21a      	sxth	r2, r3
 801a1fc:	4b07      	ldr	r3, [pc, #28]	; (801a21c <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x30>)
 801a1fe:	881b      	ldrh	r3, [r3, #0]
 801a200:	b21b      	sxth	r3, r3
 801a202:	9300      	str	r3, [sp, #0]
 801a204:	4613      	mov	r3, r2
 801a206:	2200      	movs	r2, #0
 801a208:	2100      	movs	r1, #0
 801a20a:	6878      	ldr	r0, [r7, #4]
 801a20c:	f7f3 f8fc 	bl	800d408 <_ZN8touchgfx4RectC1Essss>
        }
 801a210:	6878      	ldr	r0, [r7, #4]
 801a212:	3708      	adds	r7, #8
 801a214:	46bd      	mov	sp, r7
 801a216:	bd80      	pop	{r7, pc}
 801a218:	20009cc8 	.word	0x20009cc8
 801a21c:	20009cca 	.word	0x20009cca

0801a220 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 801a220:	b580      	push	{r7, lr}
 801a222:	b082      	sub	sp, #8
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]
 801a228:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	685b      	ldr	r3, [r3, #4]
 801a22e:	687a      	ldr	r2, [r7, #4]
 801a230:	68d2      	ldr	r2, [r2, #12]
 801a232:	1052      	asrs	r2, r2, #1
 801a234:	1898      	adds	r0, r3, r2
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	68db      	ldr	r3, [r3, #12]
 801a23a:	f003 0301 	and.w	r3, r3, #1
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d102      	bne.n	801a248 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	689b      	ldr	r3, [r3, #8]
 801a246:	e00a      	b.n	801a25e <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	685b      	ldr	r3, [r3, #4]
 801a24c:	687a      	ldr	r2, [r7, #4]
 801a24e:	68d2      	ldr	r2, [r2, #12]
 801a250:	1052      	asrs	r2, r2, #1
 801a252:	4413      	add	r3, r2
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	687a      	ldr	r2, [r7, #4]
 801a258:	6892      	ldr	r2, [r2, #8]
 801a25a:	4413      	add	r3, r2
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	6839      	ldr	r1, [r7, #0]
 801a260:	4798      	blx	r3
    }
 801a262:	bf00      	nop
 801a264:	3708      	adds	r7, #8
 801a266:	46bd      	mov	sp, r7
 801a268:	bd80      	pop	{r7, pc}

0801a26a <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 801a26a:	b480      	push	{r7}
 801a26c:	b083      	sub	sp, #12
 801a26e:	af00      	add	r7, sp, #0
 801a270:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	685b      	ldr	r3, [r3, #4]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d010      	beq.n	801a29c <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	689b      	ldr	r3, [r3, #8]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d107      	bne.n	801a292 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	68db      	ldr	r3, [r3, #12]
 801a286:	f003 0301 	and.w	r3, r3, #1
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d101      	bne.n	801a292 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801a28e:	2301      	movs	r3, #1
 801a290:	e000      	b.n	801a294 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801a292:	2300      	movs	r3, #0
 801a294:	2b01      	cmp	r3, #1
 801a296:	d001      	beq.n	801a29c <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 801a298:	2301      	movs	r3, #1
 801a29a:	e000      	b.n	801a29e <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 801a29c:	2300      	movs	r3, #0
    }
 801a29e:	4618      	mov	r0, r3
 801a2a0:	370c      	adds	r7, #12
 801a2a2:	46bd      	mov	sp, r7
 801a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2a8:	4770      	bx	lr
	...

0801a2ac <_ZN31menuImageContainerSelectionBaseD1Ev>:

class menuImageContainerSelectionBase : public touchgfx::Container
{
public:
    menuImageContainerSelectionBase();
    virtual ~menuImageContainerSelectionBase() {}
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b082      	sub	sp, #8
 801a2b0:	af00      	add	r7, sp, #0
 801a2b2:	6078      	str	r0, [r7, #4]
 801a2b4:	4a08      	ldr	r2, [pc, #32]	; (801a2d8 <_ZN31menuImageContainerSelectionBaseD1Ev+0x2c>)
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	601a      	str	r2, [r3, #0]
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	332c      	adds	r3, #44	; 0x2c
 801a2be:	4618      	mov	r0, r3
 801a2c0:	f7f4 f828 	bl	800e314 <_ZN8touchgfx5ImageD1Ev>
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	f7f3 fbbe 	bl	800da48 <_ZN8touchgfx9ContainerD1Ev>
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	4618      	mov	r0, r3
 801a2d0:	3708      	adds	r7, #8
 801a2d2:	46bd      	mov	sp, r7
 801a2d4:	bd80      	pop	{r7, pc}
 801a2d6:	bf00      	nop
 801a2d8:	08022134 	.word	0x08022134

0801a2dc <_ZN31menuImageContainerSelectionBaseD0Ev>:
 801a2dc:	b580      	push	{r7, lr}
 801a2de:	b082      	sub	sp, #8
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	6078      	str	r0, [r7, #4]
 801a2e4:	6878      	ldr	r0, [r7, #4]
 801a2e6:	f7ff ffe1 	bl	801a2ac <_ZN31menuImageContainerSelectionBaseD1Ev>
 801a2ea:	2158      	movs	r1, #88	; 0x58
 801a2ec:	6878      	ldr	r0, [r7, #4]
 801a2ee:	f005 fd82 	bl	801fdf6 <_ZdlPvj>
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	4618      	mov	r0, r3
 801a2f6:	3708      	adds	r7, #8
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	bd80      	pop	{r7, pc}

0801a2fc <_ZN31menuImageContainerSelectionBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/menuImageContainerSelectionBase.hpp>
#include "BitmapDatabase.hpp"

menuImageContainerSelectionBase::menuImageContainerSelectionBase()
 801a2fc:	b590      	push	{r4, r7, lr}
 801a2fe:	b085      	sub	sp, #20
 801a300:	af00      	add	r7, sp, #0
 801a302:	6078      	str	r0, [r7, #4]
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	4618      	mov	r0, r3
 801a308:	f7f3 ff6a 	bl	800e1e0 <_ZN8touchgfx9ContainerC1Ev>
 801a30c:	4a1f      	ldr	r2, [pc, #124]	; (801a38c <_ZN31menuImageContainerSelectionBaseC1Ev+0x90>)
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	601a      	str	r2, [r3, #0]
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a318:	f107 0308 	add.w	r3, r7, #8
 801a31c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a320:	4618      	mov	r0, r3
 801a322:	f7f3 fed4 	bl	800e0ce <_ZN8touchgfx6BitmapC1Et>
 801a326:	f107 0308 	add.w	r3, r7, #8
 801a32a:	4619      	mov	r1, r3
 801a32c:	4620      	mov	r0, r4
 801a32e:	f7f3 ffcf 	bl	800e2d0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{
    setWidth(100);
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	2164      	movs	r1, #100	; 0x64
 801a336:	4618      	mov	r0, r3
 801a338:	f7f3 faf5 	bl	800d926 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(75);
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	214b      	movs	r1, #75	; 0x4b
 801a340:	4618      	mov	r0, r3
 801a342:	f7f3 faff 	bl	800d944 <_ZN8touchgfx8Drawable9setHeightEs>

    image.setXY(26, 14);
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	332c      	adds	r3, #44	; 0x2c
 801a34a:	220e      	movs	r2, #14
 801a34c:	211a      	movs	r1, #26
 801a34e:	4618      	mov	r0, r3
 801a350:	f7f3 facb 	bl	800d8ea <_ZN8touchgfx8Drawable5setXYEss>
    image.setBitmap(Bitmap(BITMAP_ALERT_ID));
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a35a:	f107 030c 	add.w	r3, r7, #12
 801a35e:	2101      	movs	r1, #1
 801a360:	4618      	mov	r0, r3
 801a362:	f7f3 feb4 	bl	800e0ce <_ZN8touchgfx6BitmapC1Et>
 801a366:	f107 030c 	add.w	r3, r7, #12
 801a36a:	4619      	mov	r1, r3
 801a36c:	4620      	mov	r0, r4
 801a36e:	f7f5 fff6 	bl	801035e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(image);
 801a372:	687a      	ldr	r2, [r7, #4]
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	332c      	adds	r3, #44	; 0x2c
 801a378:	4619      	mov	r1, r3
 801a37a:	4610      	mov	r0, r2
 801a37c:	f7f3 fbb4 	bl	800dae8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	4618      	mov	r0, r3
 801a384:	3714      	adds	r7, #20
 801a386:	46bd      	mov	sp, r7
 801a388:	bd90      	pop	{r4, r7, pc}
 801a38a:	bf00      	nop
 801a38c:	08022134 	.word	0x08022134

0801a390 <_ZN31menuImageContainerSelectionBase10initializeEv>:

void menuImageContainerSelectionBase::initialize()
{
 801a390:	b480      	push	{r7}
 801a392:	b083      	sub	sp, #12
 801a394:	af00      	add	r7, sp, #0
 801a396:	6078      	str	r0, [r7, #4]
	
}
 801a398:	bf00      	nop
 801a39a:	370c      	adds	r7, #12
 801a39c:	46bd      	mov	sp, r7
 801a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a2:	4770      	bx	lr

0801a3a4 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801a3a4:	b580      	push	{r7, lr}
 801a3a6:	b082      	sub	sp, #8
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	6078      	str	r0, [r7, #4]
 801a3ac:	4a06      	ldr	r2, [pc, #24]	; (801a3c8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	601a      	str	r2, [r3, #0]
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	3304      	adds	r3, #4
 801a3b6:	4618      	mov	r0, r3
 801a3b8:	f7f3 fb46 	bl	800da48 <_ZN8touchgfx9ContainerD1Ev>
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	4618      	mov	r0, r3
 801a3c0:	3708      	adds	r7, #8
 801a3c2:	46bd      	mov	sp, r7
 801a3c4:	bd80      	pop	{r7, pc}
 801a3c6:	bf00      	nop
 801a3c8:	08023254 	.word	0x08023254

0801a3cc <_ZN8touchgfx6ScreenD0Ev>:
 801a3cc:	b580      	push	{r7, lr}
 801a3ce:	b082      	sub	sp, #8
 801a3d0:	af00      	add	r7, sp, #0
 801a3d2:	6078      	str	r0, [r7, #4]
 801a3d4:	6878      	ldr	r0, [r7, #4]
 801a3d6:	f7ff ffe5 	bl	801a3a4 <_ZN8touchgfx6ScreenD1Ev>
 801a3da:	213c      	movs	r1, #60	; 0x3c
 801a3dc:	6878      	ldr	r0, [r7, #4]
 801a3de:	f005 fd0a 	bl	801fdf6 <_ZdlPvj>
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	4618      	mov	r0, r3
 801a3e6:	3708      	adds	r7, #8
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	bd80      	pop	{r7, pc}

0801a3ec <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 801a3ec:	b480      	push	{r7}
 801a3ee:	b083      	sub	sp, #12
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
 801a3f4:	bf00      	nop
 801a3f6:	370c      	adds	r7, #12
 801a3f8:	46bd      	mov	sp, r7
 801a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3fe:	4770      	bx	lr

0801a400 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 801a400:	b480      	push	{r7}
 801a402:	b083      	sub	sp, #12
 801a404:	af00      	add	r7, sp, #0
 801a406:	6078      	str	r0, [r7, #4]
 801a408:	bf00      	nop
 801a40a:	370c      	adds	r7, #12
 801a40c:	46bd      	mov	sp, r7
 801a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a412:	4770      	bx	lr

0801a414 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801a414:	b480      	push	{r7}
 801a416:	b083      	sub	sp, #12
 801a418:	af00      	add	r7, sp, #0
 801a41a:	6078      	str	r0, [r7, #4]
 801a41c:	bf00      	nop
 801a41e:	370c      	adds	r7, #12
 801a420:	46bd      	mov	sp, r7
 801a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a426:	4770      	bx	lr

0801a428 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 801a428:	b480      	push	{r7}
 801a42a:	b083      	sub	sp, #12
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	6078      	str	r0, [r7, #4]
    {
    }
 801a430:	bf00      	nop
 801a432:	370c      	adds	r7, #12
 801a434:	46bd      	mov	sp, r7
 801a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a43a:	4770      	bx	lr

0801a43c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801a43c:	b480      	push	{r7}
 801a43e:	b083      	sub	sp, #12
 801a440:	af00      	add	r7, sp, #0
 801a442:	6078      	str	r0, [r7, #4]
 801a444:	460b      	mov	r3, r1
 801a446:	70fb      	strb	r3, [r7, #3]
    {
    }
 801a448:	bf00      	nop
 801a44a:	370c      	adds	r7, #12
 801a44c:	46bd      	mov	sp, r7
 801a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a452:	4770      	bx	lr

0801a454 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801a454:	b580      	push	{r7, lr}
 801a456:	b082      	sub	sp, #8
 801a458:	af00      	add	r7, sp, #0
 801a45a:	6078      	str	r0, [r7, #4]
 801a45c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	3304      	adds	r3, #4
 801a462:	6839      	ldr	r1, [r7, #0]
 801a464:	4618      	mov	r0, r3
 801a466:	f7f3 fb3f 	bl	800dae8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801a46a:	bf00      	nop
 801a46c:	3708      	adds	r7, #8
 801a46e:	46bd      	mov	sp, r7
 801a470:	bd80      	pop	{r7, pc}
	...

0801a474 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>:
    virtual ~DrawableListItemsInterface()
 801a474:	b480      	push	{r7}
 801a476:	b083      	sub	sp, #12
 801a478:	af00      	add	r7, sp, #0
 801a47a:	6078      	str	r0, [r7, #4]
    {
 801a47c:	4a04      	ldr	r2, [pc, #16]	; (801a490 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev+0x1c>)
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	601a      	str	r2, [r3, #0]
    }
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	4618      	mov	r0, r3
 801a486:	370c      	adds	r7, #12
 801a488:	46bd      	mov	sp, r7
 801a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a48e:	4770      	bx	lr
 801a490:	0802227c 	.word	0x0802227c

0801a494 <_ZN8touchgfx26DrawableListItemsInterfaceD0Ev>:
    virtual ~DrawableListItemsInterface()
 801a494:	b580      	push	{r7, lr}
 801a496:	b082      	sub	sp, #8
 801a498:	af00      	add	r7, sp, #0
 801a49a:	6078      	str	r0, [r7, #4]
    }
 801a49c:	6878      	ldr	r0, [r7, #4]
 801a49e:	f7ff ffe9 	bl	801a474 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 801a4a2:	2104      	movs	r1, #4
 801a4a4:	6878      	ldr	r0, [r7, #4]
 801a4a6:	f005 fca6 	bl	801fdf6 <_ZdlPvj>
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	3708      	adds	r7, #8
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	bd80      	pop	{r7, pc}

0801a4b4 <_ZN8touchgfx4ViewI17mainMenuPresenterED1Ev>:
class View : public Screen
 801a4b4:	b580      	push	{r7, lr}
 801a4b6:	b082      	sub	sp, #8
 801a4b8:	af00      	add	r7, sp, #0
 801a4ba:	6078      	str	r0, [r7, #4]
 801a4bc:	4a05      	ldr	r2, [pc, #20]	; (801a4d4 <_ZN8touchgfx4ViewI17mainMenuPresenterED1Ev+0x20>)
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	601a      	str	r2, [r3, #0]
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	f7ff ff6d 	bl	801a3a4 <_ZN8touchgfx6ScreenD1Ev>
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	4618      	mov	r0, r3
 801a4ce:	3708      	adds	r7, #8
 801a4d0:	46bd      	mov	sp, r7
 801a4d2:	bd80      	pop	{r7, pc}
 801a4d4:	08022248 	.word	0x08022248

0801a4d8 <_ZN8touchgfx4ViewI17mainMenuPresenterED0Ev>:
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b082      	sub	sp, #8
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	6078      	str	r0, [r7, #4]
 801a4e0:	6878      	ldr	r0, [r7, #4]
 801a4e2:	f7ff ffe7 	bl	801a4b4 <_ZN8touchgfx4ViewI17mainMenuPresenterED1Ev>
 801a4e6:	2140      	movs	r1, #64	; 0x40
 801a4e8:	6878      	ldr	r0, [r7, #4]
 801a4ea:	f005 fc84 	bl	801fdf6 <_ZdlPvj>
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	3708      	adds	r7, #8
 801a4f4:	46bd      	mov	sp, r7
 801a4f6:	bd80      	pop	{r7, pc}

0801a4f8 <_ZN16mainMenuViewBaseD1Ev>:

class mainMenuViewBase : public touchgfx::View<mainMenuPresenter>
{
public:
    mainMenuViewBase();
    virtual ~mainMenuViewBase() {}
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b082      	sub	sp, #8
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
 801a500:	4a13      	ldr	r2, [pc, #76]	; (801a550 <_ZN16mainMenuViewBaseD1Ev+0x58>)
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	601a      	str	r2, [r3, #0]
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 801a50c:	4618      	mov	r0, r3
 801a50e:	f000 fa7b 	bl	801aa08 <_ZN8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801a518:	4618      	mov	r0, r3
 801a51a:	f000 f97d 	bl	801a818 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EED1Ev>
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	339c      	adds	r3, #156	; 0x9c
 801a522:	4618      	mov	r0, r3
 801a524:	f7f5 fada 	bl	800fadc <_ZN8touchgfx10ScrollListD1Ev>
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	3370      	adds	r3, #112	; 0x70
 801a52c:	4618      	mov	r0, r3
 801a52e:	f7f3 fef1 	bl	800e314 <_ZN8touchgfx5ImageD1Ev>
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	3340      	adds	r3, #64	; 0x40
 801a536:	4618      	mov	r0, r3
 801a538:	f7f4 f82e 	bl	800e598 <_ZN8touchgfx10TiledImageD1Ev>
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	4618      	mov	r0, r3
 801a540:	f7ff ffb8 	bl	801a4b4 <_ZN8touchgfx4ViewI17mainMenuPresenterED1Ev>
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	4618      	mov	r0, r3
 801a548:	3708      	adds	r7, #8
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bd80      	pop	{r7, pc}
 801a54e:	bf00      	nop
 801a550:	080221c8 	.word	0x080221c8

0801a554 <_ZN16mainMenuViewBaseD0Ev>:
 801a554:	b580      	push	{r7, lr}
 801a556:	b082      	sub	sp, #8
 801a558:	af00      	add	r7, sp, #0
 801a55a:	6078      	str	r0, [r7, #4]
 801a55c:	6878      	ldr	r0, [r7, #4]
 801a55e:	f7ff ffcb 	bl	801a4f8 <_ZN16mainMenuViewBaseD1Ev>
 801a562:	f44f 714b 	mov.w	r1, #812	; 0x32c
 801a566:	6878      	ldr	r0, [r7, #4]
 801a568:	f005 fc45 	bl	801fdf6 <_ZdlPvj>
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	4618      	mov	r0, r3
 801a570:	3708      	adds	r7, #8
 801a572:	46bd      	mov	sp, r7
 801a574:	bd80      	pop	{r7, pc}

0801a576 <_ZN16mainMenuViewBase24MainMenuScrollUpdateItemER27menuImageContainerSelections>:

    virtual void setupScreen();

    virtual void MainMenuScrollUpdateItem(menuImageContainerSelection& item, int16_t itemIndex)
 801a576:	b480      	push	{r7}
 801a578:	b085      	sub	sp, #20
 801a57a:	af00      	add	r7, sp, #0
 801a57c:	60f8      	str	r0, [r7, #12]
 801a57e:	60b9      	str	r1, [r7, #8]
 801a580:	4613      	mov	r3, r2
 801a582:	80fb      	strh	r3, [r7, #6]
    {
        // Override and implement this function in mainMenu
    }
 801a584:	bf00      	nop
 801a586:	3714      	adds	r7, #20
 801a588:	46bd      	mov	sp, r7
 801a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a58e:	4770      	bx	lr

0801a590 <_ZN16mainMenuViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/mainmenu_screen/mainMenuViewBase.hpp>
#include "BitmapDatabase.hpp"

mainMenuViewBase::mainMenuViewBase() :
 801a590:	b590      	push	{r4, r7, lr}
 801a592:	b08b      	sub	sp, #44	; 0x2c
 801a594:	af02      	add	r7, sp, #8
 801a596:	6078      	str	r0, [r7, #4]
    updateItemCallback(this, &mainMenuViewBase::updateItemCallbackHandler)
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	4618      	mov	r0, r3
 801a59c:	f000 f972 	bl	801a884 <_ZN8touchgfx4ViewI17mainMenuPresenterEC1Ev>
 801a5a0:	4a6d      	ldr	r2, [pc, #436]	; (801a758 <_ZN16mainMenuViewBaseC1Ev+0x1c8>)
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	601a      	str	r2, [r3, #0]
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801a5ac:	f107 0308 	add.w	r3, r7, #8
 801a5b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	f7f3 fd8a 	bl	800e0ce <_ZN8touchgfx6BitmapC1Et>
 801a5ba:	f107 0308 	add.w	r3, r7, #8
 801a5be:	4619      	mov	r1, r3
 801a5c0:	4620      	mov	r0, r4
 801a5c2:	f7f3 ffcf 	bl	800e564 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801a5cc:	f107 030c 	add.w	r3, r7, #12
 801a5d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a5d4:	4618      	mov	r0, r3
 801a5d6:	f7f3 fd7a 	bl	800e0ce <_ZN8touchgfx6BitmapC1Et>
 801a5da:	f107 030c 	add.w	r3, r7, #12
 801a5de:	4619      	mov	r1, r3
 801a5e0:	4620      	mov	r0, r4
 801a5e2:	f7f3 fe75 	bl	800e2d0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	339c      	adds	r3, #156	; 0x9c
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	f7f5 fa98 	bl	800fb20 <_ZN8touchgfx10ScrollListC1Ev>
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801a5f6:	4618      	mov	r0, r3
 801a5f8:	f000 f96a 	bl	801a8d0 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EEC1Ev>
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 801a602:	4b56      	ldr	r3, [pc, #344]	; (801a75c <_ZN16mainMenuViewBaseC1Ev+0x1cc>)
 801a604:	613b      	str	r3, [r7, #16]
 801a606:	2300      	movs	r3, #0
 801a608:	617b      	str	r3, [r7, #20]
 801a60a:	f107 0310 	add.w	r3, r7, #16
 801a60e:	cb0c      	ldmia	r3, {r2, r3}
 801a610:	6879      	ldr	r1, [r7, #4]
 801a612:	f000 f98b 	bl	801a92c <_ZN8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>
{
    tiledImage1.setBitmap(Bitmap(BITMAP_BLUE_TEXTURES_IRONGRIP_ID));
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801a61c:	f107 0318 	add.w	r3, r7, #24
 801a620:	2102      	movs	r1, #2
 801a622:	4618      	mov	r0, r3
 801a624:	f7f3 fd53 	bl	800e0ce <_ZN8touchgfx6BitmapC1Et>
 801a628:	f107 0318 	add.w	r3, r7, #24
 801a62c:	4619      	mov	r1, r3
 801a62e:	4620      	mov	r0, r4
 801a630:	f7f5 ff3f 	bl	80104b2 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    tiledImage1.setPosition(0, 0, 480, 272);
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801a63a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801a63e:	9300      	str	r3, [sp, #0]
 801a640:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801a644:	2200      	movs	r2, #0
 801a646:	2100      	movs	r1, #0
 801a648:	f7f3 f8ea 	bl	800d820 <_ZN8touchgfx8Drawable11setPositionEssss>
    tiledImage1.setOffset(0, 0);
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	3340      	adds	r3, #64	; 0x40
 801a650:	2200      	movs	r2, #0
 801a652:	2100      	movs	r1, #0
 801a654:	4618      	mov	r0, r3
 801a656:	f7f5 ff46 	bl	80104e6 <_ZN8touchgfx10TiledImage9setOffsetEss>

    background.setXY(40, 15);
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	3370      	adds	r3, #112	; 0x70
 801a65e:	220f      	movs	r2, #15
 801a660:	2128      	movs	r1, #40	; 0x28
 801a662:	4618      	mov	r0, r3
 801a664:	f7f3 f941 	bl	800d8ea <_ZN8touchgfx8Drawable5setXYEss>
    background.setBitmap(Bitmap(BITMAP_SCROLLBG_ID));
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801a66e:	f107 031c 	add.w	r3, r7, #28
 801a672:	210d      	movs	r1, #13
 801a674:	4618      	mov	r0, r3
 801a676:	f7f3 fd2a 	bl	800e0ce <_ZN8touchgfx6BitmapC1Et>
 801a67a:	f107 031c 	add.w	r3, r7, #28
 801a67e:	4619      	mov	r1, r3
 801a680:	4620      	mov	r0, r4
 801a682:	f7f5 fe6c 	bl	801035e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    MainMenuScroll.setPosition(40, 15, 400, 75);
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 801a68c:	234b      	movs	r3, #75	; 0x4b
 801a68e:	9300      	str	r3, [sp, #0]
 801a690:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801a694:	220f      	movs	r2, #15
 801a696:	2128      	movs	r1, #40	; 0x28
 801a698:	f7f3 f8c2 	bl	800d820 <_ZN8touchgfx8Drawable11setPositionEssss>
    MainMenuScroll.setHorizontal(true);
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	339c      	adds	r3, #156	; 0x9c
 801a6a0:	2101      	movs	r1, #1
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	f7f4 fdd4 	bl	800f250 <_ZN8touchgfx10ScrollBase13setHorizontalEb>
    MainMenuScroll.setCircular(true);
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	339c      	adds	r3, #156	; 0x9c
 801a6ac:	2101      	movs	r1, #1
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	f7f4 fdfa 	bl	800f2a8 <_ZN8touchgfx10ScrollBase11setCircularEb>
    MainMenuScroll.setEasingEquation(EasingEquations::cubicEaseOut);
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	339c      	adds	r3, #156	; 0x9c
 801a6b8:	4929      	ldr	r1, [pc, #164]	; (801a760 <_ZN16mainMenuViewBaseC1Ev+0x1d0>)
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	f7f4 fea4 	bl	800f408 <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>
    MainMenuScroll.setSwipeAcceleration(10);
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	339c      	adds	r3, #156	; 0x9c
 801a6c4:	210a      	movs	r1, #10
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	f7f4 fead 	bl	800f426 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>
    MainMenuScroll.setDragAcceleration(10);
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	339c      	adds	r3, #156	; 0x9c
 801a6d0:	210a      	movs	r1, #10
 801a6d2:	4618      	mov	r0, r3
 801a6d4:	f7f4 feb7 	bl	800f446 <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>
    MainMenuScroll.setNumberOfItems(10);
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	339c      	adds	r3, #156	; 0x9c
 801a6dc:	210a      	movs	r1, #10
 801a6de:	4618      	mov	r0, r3
 801a6e0:	f7f4 fe3c 	bl	800f35c <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>
    MainMenuScroll.setPadding(0, 0);
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	339c      	adds	r3, #156	; 0x9c
 801a6e8:	2200      	movs	r2, #0
 801a6ea:	2100      	movs	r1, #0
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	f7f5 fa5e 	bl	800fbae <_ZN8touchgfx10ScrollList10setPaddingEss>
    MainMenuScroll.setSnapping(false);
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	339c      	adds	r3, #156	; 0x9c
 801a6f6:	2100      	movs	r1, #0
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	f7f5 fa83 	bl	800fc04 <_ZN8touchgfx10ScrollList11setSnappingEb>
    MainMenuScroll.setDrawableSize(100, 0);
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	339c      	adds	r3, #156	; 0x9c
 801a702:	2200      	movs	r2, #0
 801a704:	2164      	movs	r1, #100	; 0x64
 801a706:	4618      	mov	r0, r3
 801a708:	f7f4 fded 	bl	800f2e6 <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>
    MainMenuScroll.setDrawables(MainMenuScrollListItems, updateItemCallback);
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 801a71e:	461a      	mov	r2, r3
 801a720:	f7f5 fa1c 	bl	800fb5c <_ZN8touchgfx10ScrollList12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>

    add(tiledImage1);
 801a724:	687a      	ldr	r2, [r7, #4]
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	3340      	adds	r3, #64	; 0x40
 801a72a:	4619      	mov	r1, r3
 801a72c:	4610      	mov	r0, r2
 801a72e:	f7ff fe91 	bl	801a454 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(background);
 801a732:	687a      	ldr	r2, [r7, #4]
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	3370      	adds	r3, #112	; 0x70
 801a738:	4619      	mov	r1, r3
 801a73a:	4610      	mov	r0, r2
 801a73c:	f7ff fe8a 	bl	801a454 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MainMenuScroll);
 801a740:	687a      	ldr	r2, [r7, #4]
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	339c      	adds	r3, #156	; 0x9c
 801a746:	4619      	mov	r1, r3
 801a748:	4610      	mov	r0, r2
 801a74a:	f7ff fe83 	bl	801a454 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	4618      	mov	r0, r3
 801a752:	3724      	adds	r7, #36	; 0x24
 801a754:	46bd      	mov	sp, r7
 801a756:	bd90      	pop	{r4, r7, pc}
 801a758:	080221c8 	.word	0x080221c8
 801a75c:	0801a7c5 	.word	0x0801a7c5
 801a760:	0801d905 	.word	0x0801d905

0801a764 <_ZN16mainMenuViewBase11setupScreenEv>:

void mainMenuViewBase::setupScreen()
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b084      	sub	sp, #16
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
    MainMenuScroll.initialize();
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	339c      	adds	r3, #156	; 0x9c
 801a770:	4618      	mov	r0, r3
 801a772:	f7f4 fc9e 	bl	800f0b2 <_ZN8touchgfx10ScrollBase10initializeEv>
    for (int i = 0; i < MainMenuScrollListItems.getNumberOfDrawables(); i++)
 801a776:	2300      	movs	r3, #0
 801a778:	60fb      	str	r3, [r7, #12]
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801a780:	4618      	mov	r0, r3
 801a782:	f000 f8f3 	bl	801a96c <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EE20getNumberOfDrawablesEv>
 801a786:	4603      	mov	r3, r0
 801a788:	461a      	mov	r2, r3
 801a78a:	68fb      	ldr	r3, [r7, #12]
 801a78c:	4293      	cmp	r3, r2
 801a78e:	bfb4      	ite	lt
 801a790:	2301      	movlt	r3, #1
 801a792:	2300      	movge	r3, #0
 801a794:	b2db      	uxtb	r3, r3
 801a796:	2b00      	cmp	r3, #0
 801a798:	d010      	beq.n	801a7bc <_ZN16mainMenuViewBase11setupScreenEv+0x58>
    {
        MainMenuScrollListItems[i].initialize();
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801a7a0:	68f9      	ldr	r1, [r7, #12]
 801a7a2:	4618      	mov	r0, r3
 801a7a4:	f000 f8ee 	bl	801a984 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EEixEi>
 801a7a8:	4602      	mov	r2, r0
 801a7aa:	6813      	ldr	r3, [r2, #0]
 801a7ac:	3388      	adds	r3, #136	; 0x88
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	4610      	mov	r0, r2
 801a7b2:	4798      	blx	r3
    for (int i = 0; i < MainMenuScrollListItems.getNumberOfDrawables(); i++)
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	3301      	adds	r3, #1
 801a7b8:	60fb      	str	r3, [r7, #12]
 801a7ba:	e7de      	b.n	801a77a <_ZN16mainMenuViewBase11setupScreenEv+0x16>
    }
}
 801a7bc:	bf00      	nop
 801a7be:	3710      	adds	r7, #16
 801a7c0:	46bd      	mov	sp, r7
 801a7c2:	bd80      	pop	{r7, pc}

0801a7c4 <_ZN16mainMenuViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss>:

void mainMenuViewBase::updateItemCallbackHandler(DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	b086      	sub	sp, #24
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	60f8      	str	r0, [r7, #12]
 801a7cc:	60b9      	str	r1, [r7, #8]
 801a7ce:	4611      	mov	r1, r2
 801a7d0:	461a      	mov	r2, r3
 801a7d2:	460b      	mov	r3, r1
 801a7d4:	80fb      	strh	r3, [r7, #6]
 801a7d6:	4613      	mov	r3, r2
 801a7d8:	80bb      	strh	r3, [r7, #4]
    if (items == &MainMenuScrollListItems)
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801a7e0:	68ba      	ldr	r2, [r7, #8]
 801a7e2:	429a      	cmp	r2, r3
 801a7e4:	d114      	bne.n	801a810 <_ZN16mainMenuViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss+0x4c>
    {
        Drawable* d = items->getDrawable(containerIndex);
 801a7e6:	68bb      	ldr	r3, [r7, #8]
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	3308      	adds	r3, #8
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801a7f2:	4611      	mov	r1, r2
 801a7f4:	68b8      	ldr	r0, [r7, #8]
 801a7f6:	4798      	blx	r3
 801a7f8:	6178      	str	r0, [r7, #20]
        menuImageContainerSelection* cc = (menuImageContainerSelection*)d;
 801a7fa:	697b      	ldr	r3, [r7, #20]
 801a7fc:	613b      	str	r3, [r7, #16]
        MainMenuScrollUpdateItem(*cc, itemIndex);
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	332c      	adds	r3, #44	; 0x2c
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801a80a:	6939      	ldr	r1, [r7, #16]
 801a80c:	68f8      	ldr	r0, [r7, #12]
 801a80e:	4798      	blx	r3
    }
}
 801a810:	bf00      	nop
 801a812:	3718      	adds	r7, #24
 801a814:	46bd      	mov	sp, r7
 801a816:	bd80      	pop	{r7, pc}

0801a818 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EED1Ev>:
    virtual ~DrawableListItems()
 801a818:	b590      	push	{r4, r7, lr}
 801a81a:	b083      	sub	sp, #12
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	6078      	str	r0, [r7, #4]
    }
 801a820:	4a0e      	ldr	r2, [pc, #56]	; (801a85c <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EED1Ev+0x44>)
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	601a      	str	r2, [r3, #0]
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	3304      	adds	r3, #4
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d00d      	beq.n	801a84a <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EED1Ev+0x32>
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	3304      	adds	r3, #4
 801a832:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	3304      	adds	r3, #4
 801a83a:	429c      	cmp	r4, r3
 801a83c:	d005      	beq.n	801a84a <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EED1Ev+0x32>
 801a83e:	3c58      	subs	r4, #88	; 0x58
 801a840:	6823      	ldr	r3, [r4, #0]
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	4620      	mov	r0, r4
 801a846:	4798      	blx	r3
 801a848:	e7f5      	b.n	801a836 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EED1Ev+0x1e>
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	4618      	mov	r0, r3
 801a84e:	f7ff fe11 	bl	801a474 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	4618      	mov	r0, r3
 801a856:	370c      	adds	r7, #12
 801a858:	46bd      	mov	sp, r7
 801a85a:	bd90      	pop	{r4, r7, pc}
 801a85c:	08022230 	.word	0x08022230

0801a860 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EED0Ev>:
    virtual ~DrawableListItems()
 801a860:	b580      	push	{r7, lr}
 801a862:	b082      	sub	sp, #8
 801a864:	af00      	add	r7, sp, #0
 801a866:	6078      	str	r0, [r7, #4]
    }
 801a868:	6878      	ldr	r0, [r7, #4]
 801a86a:	f7ff ffd5 	bl	801a818 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EED1Ev>
 801a86e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801a872:	6878      	ldr	r0, [r7, #4]
 801a874:	f005 fabf 	bl	801fdf6 <_ZdlPvj>
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	4618      	mov	r0, r3
 801a87c:	3708      	adds	r7, #8
 801a87e:	46bd      	mov	sp, r7
 801a880:	bd80      	pop	{r7, pc}
	...

0801a884 <_ZN8touchgfx4ViewI17mainMenuPresenterEC1Ev>:
    View() : presenter(0)
 801a884:	b580      	push	{r7, lr}
 801a886:	b082      	sub	sp, #8
 801a888:	af00      	add	r7, sp, #0
 801a88a:	6078      	str	r0, [r7, #4]
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	4618      	mov	r0, r3
 801a890:	f002 fe4a 	bl	801d528 <_ZN8touchgfx6ScreenC1Ev>
 801a894:	4a05      	ldr	r2, [pc, #20]	; (801a8ac <_ZN8touchgfx4ViewI17mainMenuPresenterEC1Ev+0x28>)
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	601a      	str	r2, [r3, #0]
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	2200      	movs	r2, #0
 801a89e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	4618      	mov	r0, r3
 801a8a4:	3708      	adds	r7, #8
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	bd80      	pop	{r7, pc}
 801a8aa:	bf00      	nop
 801a8ac:	08022248 	.word	0x08022248

0801a8b0 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>:
class DrawableListItemsInterface
 801a8b0:	b480      	push	{r7}
 801a8b2:	b083      	sub	sp, #12
 801a8b4:	af00      	add	r7, sp, #0
 801a8b6:	6078      	str	r0, [r7, #4]
 801a8b8:	4a04      	ldr	r2, [pc, #16]	; (801a8cc <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev+0x1c>)
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	601a      	str	r2, [r3, #0]
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	370c      	adds	r7, #12
 801a8c4:	46bd      	mov	sp, r7
 801a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8ca:	4770      	bx	lr
 801a8cc:	0802227c 	.word	0x0802227c

0801a8d0 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EEC1Ev>:
    DrawableListItems()
 801a8d0:	b5b0      	push	{r4, r5, r7, lr}
 801a8d2:	b082      	sub	sp, #8
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	6078      	str	r0, [r7, #4]
        : DrawableListItemsInterface()
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	4618      	mov	r0, r3
 801a8dc:	f7ff ffe8 	bl	801a8b0 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>
 801a8e0:	4a09      	ldr	r2, [pc, #36]	; (801a908 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EEC1Ev+0x38>)
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	601a      	str	r2, [r3, #0]
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	3304      	adds	r3, #4
 801a8ea:	2404      	movs	r4, #4
 801a8ec:	461d      	mov	r5, r3
 801a8ee:	2c00      	cmp	r4, #0
 801a8f0:	db05      	blt.n	801a8fe <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EEC1Ev+0x2e>
 801a8f2:	4628      	mov	r0, r5
 801a8f4:	f000 fd64 	bl	801b3c0 <_ZN27menuImageContainerSelectionC1Ev>
 801a8f8:	3558      	adds	r5, #88	; 0x58
 801a8fa:	3c01      	subs	r4, #1
 801a8fc:	e7f7      	b.n	801a8ee <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EEC1Ev+0x1e>
    }
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	4618      	mov	r0, r3
 801a902:	3708      	adds	r7, #8
 801a904:	46bd      	mov	sp, r7
 801a906:	bdb0      	pop	{r4, r5, r7, pc}
 801a908:	08022230 	.word	0x08022230

0801a90c <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>:
class GenericCallback
 801a90c:	b480      	push	{r7}
 801a90e:	b083      	sub	sp, #12
 801a910:	af00      	add	r7, sp, #0
 801a912:	6078      	str	r0, [r7, #4]
 801a914:	4a04      	ldr	r2, [pc, #16]	; (801a928 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev+0x1c>)
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	601a      	str	r2, [r3, #0]
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	4618      	mov	r0, r3
 801a91e:	370c      	adds	r7, #12
 801a920:	46bd      	mov	sp, r7
 801a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a926:	4770      	bx	lr
 801a928:	08022218 	.word	0x08022218

0801a92c <_ZN8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_3)(T1, T2, T3))
 801a92c:	b580      	push	{r7, lr}
 801a92e:	b084      	sub	sp, #16
 801a930:	af00      	add	r7, sp, #0
 801a932:	60f8      	str	r0, [r7, #12]
 801a934:	60b9      	str	r1, [r7, #8]
 801a936:	4639      	mov	r1, r7
 801a938:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	4618      	mov	r0, r3
 801a940:	f7ff ffe4 	bl	801a90c <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>
 801a944:	4a08      	ldr	r2, [pc, #32]	; (801a968 <_ZN8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE+0x3c>)
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	68ba      	ldr	r2, [r7, #8]
 801a94e:	605a      	str	r2, [r3, #4]
        this->pmemfun_3 = pmemfun_3;
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	3308      	adds	r3, #8
 801a954:	463a      	mov	r2, r7
 801a956:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a95a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	4618      	mov	r0, r3
 801a962:	3710      	adds	r7, #16
 801a964:	46bd      	mov	sp, r7
 801a966:	bd80      	pop	{r7, pc}
 801a968:	08022200 	.word	0x08022200

0801a96c <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EE20getNumberOfDrawablesEv>:
    virtual int16_t getNumberOfDrawables()
 801a96c:	b480      	push	{r7}
 801a96e:	b083      	sub	sp, #12
 801a970:	af00      	add	r7, sp, #0
 801a972:	6078      	str	r0, [r7, #4]
        return SIZE;
 801a974:	2305      	movs	r3, #5
    }
 801a976:	4618      	mov	r0, r3
 801a978:	370c      	adds	r7, #12
 801a97a:	46bd      	mov	sp, r7
 801a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a980:	4770      	bx	lr
	...

0801a984 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EEixEi>:
    TYPE& operator[](int index)
 801a984:	b580      	push	{r7, lr}
 801a986:	b082      	sub	sp, #8
 801a988:	af00      	add	r7, sp, #0
 801a98a:	6078      	str	r0, [r7, #4]
 801a98c:	6039      	str	r1, [r7, #0]
        assert(index >= 0 && index < SIZE);
 801a98e:	683b      	ldr	r3, [r7, #0]
 801a990:	2b00      	cmp	r3, #0
 801a992:	db02      	blt.n	801a99a <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EEixEi+0x16>
 801a994:	683b      	ldr	r3, [r7, #0]
 801a996:	2b04      	cmp	r3, #4
 801a998:	dd05      	ble.n	801a9a6 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EEixEi+0x22>
 801a99a:	4b08      	ldr	r3, [pc, #32]	; (801a9bc <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EEixEi+0x38>)
 801a99c:	4a08      	ldr	r2, [pc, #32]	; (801a9c0 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EEixEi+0x3c>)
 801a99e:	2198      	movs	r1, #152	; 0x98
 801a9a0:	4808      	ldr	r0, [pc, #32]	; (801a9c4 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EEixEi+0x40>)
 801a9a2:	f005 fa45 	bl	801fe30 <__assert_func>
        return element[index];
 801a9a6:	683b      	ldr	r3, [r7, #0]
 801a9a8:	2258      	movs	r2, #88	; 0x58
 801a9aa:	fb02 f303 	mul.w	r3, r2, r3
 801a9ae:	687a      	ldr	r2, [r7, #4]
 801a9b0:	4413      	add	r3, r2
 801a9b2:	3304      	adds	r3, #4
    }
 801a9b4:	4618      	mov	r0, r3
 801a9b6:	3708      	adds	r7, #8
 801a9b8:	46bd      	mov	sp, r7
 801a9ba:	bd80      	pop	{r7, pc}
 801a9bc:	080212b8 	.word	0x080212b8
 801a9c0:	0802232c 	.word	0x0802232c
 801a9c4:	080212d4 	.word	0x080212d4

0801a9c8 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>:
    virtual ~GenericCallback()
 801a9c8:	b480      	push	{r7}
 801a9ca:	b083      	sub	sp, #12
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	6078      	str	r0, [r7, #4]
    }
 801a9d0:	4a04      	ldr	r2, [pc, #16]	; (801a9e4 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev+0x1c>)
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	601a      	str	r2, [r3, #0]
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	4618      	mov	r0, r3
 801a9da:	370c      	adds	r7, #12
 801a9dc:	46bd      	mov	sp, r7
 801a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9e2:	4770      	bx	lr
 801a9e4:	08022218 	.word	0x08022218

0801a9e8 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED0Ev>:
    virtual ~GenericCallback()
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	b082      	sub	sp, #8
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	6078      	str	r0, [r7, #4]
    }
 801a9f0:	6878      	ldr	r0, [r7, #4]
 801a9f2:	f7ff ffe9 	bl	801a9c8 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 801a9f6:	2104      	movs	r1, #4
 801a9f8:	6878      	ldr	r0, [r7, #4]
 801a9fa:	f005 f9fc 	bl	801fdf6 <_ZdlPvj>
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	4618      	mov	r0, r3
 801aa02:	3708      	adds	r7, #8
 801aa04:	46bd      	mov	sp, r7
 801aa06:	bd80      	pop	{r7, pc}

0801aa08 <_ZN8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>:
struct Callback : public GenericCallback<T1, T2, T3>
 801aa08:	b580      	push	{r7, lr}
 801aa0a:	b082      	sub	sp, #8
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
 801aa10:	4a05      	ldr	r2, [pc, #20]	; (801aa28 <_ZN8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssED1Ev+0x20>)
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	601a      	str	r2, [r3, #0]
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	4618      	mov	r0, r3
 801aa1a:	f7ff ffd5 	bl	801a9c8 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	4618      	mov	r0, r3
 801aa22:	3708      	adds	r7, #8
 801aa24:	46bd      	mov	sp, r7
 801aa26:	bd80      	pop	{r7, pc}
 801aa28:	08022200 	.word	0x08022200

0801aa2c <_ZN8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssED0Ev>:
 801aa2c:	b580      	push	{r7, lr}
 801aa2e:	b082      	sub	sp, #8
 801aa30:	af00      	add	r7, sp, #0
 801aa32:	6078      	str	r0, [r7, #4]
 801aa34:	6878      	ldr	r0, [r7, #4]
 801aa36:	f7ff ffe7 	bl	801aa08 <_ZN8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 801aa3a:	2110      	movs	r1, #16
 801aa3c:	6878      	ldr	r0, [r7, #4]
 801aa3e:	f005 f9da 	bl	801fdf6 <_ZdlPvj>
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	4618      	mov	r0, r3
 801aa46:	3708      	adds	r7, #8
 801aa48:	46bd      	mov	sp, r7
 801aa4a:	bd80      	pop	{r7, pc}

0801aa4c <_ZN8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss>:
    virtual void execute(T1 t1, T2 t2, T3 t3)
 801aa4c:	b590      	push	{r4, r7, lr}
 801aa4e:	b085      	sub	sp, #20
 801aa50:	af00      	add	r7, sp, #0
 801aa52:	60f8      	str	r0, [r7, #12]
 801aa54:	60b9      	str	r1, [r7, #8]
 801aa56:	4611      	mov	r1, r2
 801aa58:	461a      	mov	r2, r3
 801aa5a:	460b      	mov	r3, r1
 801aa5c:	80fb      	strh	r3, [r7, #6]
 801aa5e:	4613      	mov	r3, r2
 801aa60:	80bb      	strh	r3, [r7, #4]
        (pobject->*pmemfun_3)(t1, t2, t3);
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	685b      	ldr	r3, [r3, #4]
 801aa66:	68fa      	ldr	r2, [r7, #12]
 801aa68:	68d2      	ldr	r2, [r2, #12]
 801aa6a:	1052      	asrs	r2, r2, #1
 801aa6c:	1898      	adds	r0, r3, r2
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	68db      	ldr	r3, [r3, #12]
 801aa72:	f003 0301 	and.w	r3, r3, #1
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d102      	bne.n	801aa80 <_ZN8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x34>
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	689c      	ldr	r4, [r3, #8]
 801aa7e:	e00a      	b.n	801aa96 <_ZN8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x4a>
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	685b      	ldr	r3, [r3, #4]
 801aa84:	68fa      	ldr	r2, [r7, #12]
 801aa86:	68d2      	ldr	r2, [r2, #12]
 801aa88:	1052      	asrs	r2, r2, #1
 801aa8a:	4413      	add	r3, r2
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	68fa      	ldr	r2, [r7, #12]
 801aa90:	6892      	ldr	r2, [r2, #8]
 801aa92:	4413      	add	r3, r2
 801aa94:	681c      	ldr	r4, [r3, #0]
 801aa96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801aa9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801aa9e:	68b9      	ldr	r1, [r7, #8]
 801aaa0:	47a0      	blx	r4
    }
 801aaa2:	bf00      	nop
 801aaa4:	3714      	adds	r7, #20
 801aaa6:	46bd      	mov	sp, r7
 801aaa8:	bd90      	pop	{r4, r7, pc}

0801aaaa <_ZNK8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv>:
    virtual bool isValid() const
 801aaaa:	b480      	push	{r7}
 801aaac:	b083      	sub	sp, #12
 801aaae:	af00      	add	r7, sp, #0
 801aab0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_3 != 0);
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	685b      	ldr	r3, [r3, #4]
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d010      	beq.n	801aadc <_ZNK8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	689b      	ldr	r3, [r3, #8]
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d107      	bne.n	801aad2 <_ZNK8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	68db      	ldr	r3, [r3, #12]
 801aac6:	f003 0301 	and.w	r3, r3, #1
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d101      	bne.n	801aad2 <_ZNK8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 801aace:	2301      	movs	r3, #1
 801aad0:	e000      	b.n	801aad4 <_ZNK8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x2a>
 801aad2:	2300      	movs	r3, #0
 801aad4:	2b01      	cmp	r3, #1
 801aad6:	d001      	beq.n	801aadc <_ZNK8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 801aad8:	2301      	movs	r3, #1
 801aada:	e000      	b.n	801aade <_ZNK8touchgfx8CallbackI16mainMenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x34>
 801aadc:	2300      	movs	r3, #0
    }
 801aade:	4618      	mov	r0, r3
 801aae0:	370c      	adds	r7, #12
 801aae2:	46bd      	mov	sp, r7
 801aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aae8:	4770      	bx	lr
	...

0801aaec <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EE11getDrawableEs>:
    virtual Drawable* getDrawable(int16_t index)
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b082      	sub	sp, #8
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	6078      	str	r0, [r7, #4]
 801aaf4:	460b      	mov	r3, r1
 801aaf6:	807b      	strh	r3, [r7, #2]
        assert(index >= 0 && index < SIZE);
 801aaf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	db03      	blt.n	801ab08 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EE11getDrawableEs+0x1c>
 801ab00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ab04:	2b04      	cmp	r3, #4
 801ab06:	dd05      	ble.n	801ab14 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EE11getDrawableEs+0x28>
 801ab08:	4b08      	ldr	r3, [pc, #32]	; (801ab2c <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EE11getDrawableEs+0x40>)
 801ab0a:	4a09      	ldr	r2, [pc, #36]	; (801ab30 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EE11getDrawableEs+0x44>)
 801ab0c:	2187      	movs	r1, #135	; 0x87
 801ab0e:	4809      	ldr	r0, [pc, #36]	; (801ab34 <_ZN8touchgfx17DrawableListItemsI27menuImageContainerSelectionLi5EE11getDrawableEs+0x48>)
 801ab10:	f005 f98e 	bl	801fe30 <__assert_func>
        return &element[index];
 801ab14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ab18:	2258      	movs	r2, #88	; 0x58
 801ab1a:	fb02 f303 	mul.w	r3, r2, r3
 801ab1e:	687a      	ldr	r2, [r7, #4]
 801ab20:	4413      	add	r3, r2
 801ab22:	3304      	adds	r3, #4
    }
 801ab24:	4618      	mov	r0, r3
 801ab26:	3708      	adds	r7, #8
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	bd80      	pop	{r7, pc}
 801ab2c:	080212b8 	.word	0x080212b8
 801ab30:	0802228c 	.word	0x0802228c
 801ab34:	080212d4 	.word	0x080212d4

0801ab38 <_ZN8touchgfx4ViewI22StartUpScreenPresenterED1Ev>:
class View : public Screen
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b082      	sub	sp, #8
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
 801ab40:	4a05      	ldr	r2, [pc, #20]	; (801ab58 <_ZN8touchgfx4ViewI22StartUpScreenPresenterED1Ev+0x20>)
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	601a      	str	r2, [r3, #0]
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	4618      	mov	r0, r3
 801ab4a:	f7ff fc2b 	bl	801a3a4 <_ZN8touchgfx6ScreenD1Ev>
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	4618      	mov	r0, r3
 801ab52:	3708      	adds	r7, #8
 801ab54:	46bd      	mov	sp, r7
 801ab56:	bd80      	pop	{r7, pc}
 801ab58:	08022490 	.word	0x08022490

0801ab5c <_ZN8touchgfx4ViewI22StartUpScreenPresenterED0Ev>:
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	b082      	sub	sp, #8
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
 801ab64:	6878      	ldr	r0, [r7, #4]
 801ab66:	f7ff ffe7 	bl	801ab38 <_ZN8touchgfx4ViewI22StartUpScreenPresenterED1Ev>
 801ab6a:	2140      	movs	r1, #64	; 0x40
 801ab6c:	6878      	ldr	r0, [r7, #4]
 801ab6e:	f005 f942 	bl	801fdf6 <_ZdlPvj>
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	4618      	mov	r0, r3
 801ab76:	3708      	adds	r7, #8
 801ab78:	46bd      	mov	sp, r7
 801ab7a:	bd80      	pop	{r7, pc}

0801ab7c <_ZN21StartUpScreenViewBaseD1Ev>:

class StartUpScreenViewBase : public touchgfx::View<StartUpScreenPresenter>
{
public:
    StartUpScreenViewBase();
    virtual ~StartUpScreenViewBase() {}
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b082      	sub	sp, #8
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	6078      	str	r0, [r7, #4]
 801ab84:	4a0a      	ldr	r2, [pc, #40]	; (801abb0 <_ZN21StartUpScreenViewBaseD1Ev+0x34>)
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	601a      	str	r2, [r3, #0]
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	3384      	adds	r3, #132	; 0x84
 801ab8e:	4618      	mov	r0, r3
 801ab90:	f000 fa74 	bl	801b07c <_ZN8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev>
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	3340      	adds	r3, #64	; 0x40
 801ab98:	4618      	mov	r0, r3
 801ab9a:	f000 f8cf 	bl	801ad3c <_ZN8touchgfx12FadeAnimatorINS_5ImageEED1Ev>
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	4618      	mov	r0, r3
 801aba2:	f7ff ffc9 	bl	801ab38 <_ZN8touchgfx4ViewI22StartUpScreenPresenterED1Ev>
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	4618      	mov	r0, r3
 801abaa:	3708      	adds	r7, #8
 801abac:	46bd      	mov	sp, r7
 801abae:	bd80      	pop	{r7, pc}
 801abb0:	080223ac 	.word	0x080223ac

0801abb4 <_ZN21StartUpScreenViewBaseD0Ev>:
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b082      	sub	sp, #8
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
 801abbc:	6878      	ldr	r0, [r7, #4]
 801abbe:	f7ff ffdd 	bl	801ab7c <_ZN21StartUpScreenViewBaseD1Ev>
 801abc2:	2194      	movs	r1, #148	; 0x94
 801abc4:	6878      	ldr	r0, [r7, #4]
 801abc6:	f005 f916 	bl	801fdf6 <_ZdlPvj>
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	4618      	mov	r0, r3
 801abce:	3708      	adds	r7, #8
 801abd0:	46bd      	mov	sp, r7
 801abd2:	bd80      	pop	{r7, pc}

0801abd4 <_ZN21StartUpScreenViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void handleTickEvent();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b082      	sub	sp, #8
 801abd8:	af00      	add	r7, sp, #0
 801abda:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(Application::getInstance());
 801abdc:	f001 fdd2 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 801abe0:	4603      	mov	r3, r0
    }
 801abe2:	4618      	mov	r0, r3
 801abe4:	3708      	adds	r7, #8
 801abe6:	46bd      	mov	sp, r7
 801abe8:	bd80      	pop	{r7, pc}
	...

0801abec <_ZN21StartUpScreenViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/startupscreen_screen/StartUpScreenViewBase.hpp>
#include "BitmapDatabase.hpp"

StartUpScreenViewBase::StartUpScreenViewBase() :
 801abec:	b590      	push	{r4, r7, lr}
 801abee:	b087      	sub	sp, #28
 801abf0:	af00      	add	r7, sp, #0
 801abf2:	6078      	str	r0, [r7, #4]
    waitForMainScreenCounter(0),
    interaction1EndedCallback(this, &StartUpScreenViewBase::interaction1EndedCallbackHandler)
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	4618      	mov	r0, r3
 801abf8:	f000 f8c2 	bl	801ad80 <_ZN8touchgfx4ViewI22StartUpScreenPresenterEC1Ev>
 801abfc:	4a1e      	ldr	r2, [pc, #120]	; (801ac78 <_ZN21StartUpScreenViewBaseC1Ev+0x8c>)
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	601a      	str	r2, [r3, #0]
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	3340      	adds	r3, #64	; 0x40
 801ac06:	4618      	mov	r0, r3
 801ac08:	f000 f8d0 	bl	801adac <_ZN8touchgfx12FadeAnimatorINS_5ImageEEC1Ev>
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	2200      	movs	r2, #0
 801ac10:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	f103 0084 	add.w	r0, r3, #132	; 0x84
 801ac1a:	4b18      	ldr	r3, [pc, #96]	; (801ac7c <_ZN21StartUpScreenViewBaseC1Ev+0x90>)
 801ac1c:	60fb      	str	r3, [r7, #12]
 801ac1e:	2300      	movs	r3, #0
 801ac20:	613b      	str	r3, [r7, #16]
 801ac22:	f107 030c 	add.w	r3, r7, #12
 801ac26:	cb0c      	ldmia	r3, {r2, r3}
 801ac28:	6879      	ldr	r1, [r7, #4]
 801ac2a:	f000 f8f9 	bl	801ae20 <_ZN8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvEC1EPS1_MS1_FvS6_E>
{
    image.setXY(-78, -9);
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	3340      	adds	r3, #64	; 0x40
 801ac32:	f06f 0208 	mvn.w	r2, #8
 801ac36:	f06f 014d 	mvn.w	r1, #77	; 0x4d
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	f7f2 fe55 	bl	800d8ea <_ZN8touchgfx8Drawable5setXYEss>
    image.setBitmap(Bitmap(BITMAP_SMALL_SPLASH_ID));
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801ac46:	f107 0314 	add.w	r3, r7, #20
 801ac4a:	2100      	movs	r1, #0
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	f7f3 fa3e 	bl	800e0ce <_ZN8touchgfx6BitmapC1Et>
 801ac52:	f107 0314 	add.w	r3, r7, #20
 801ac56:	4619      	mov	r1, r3
 801ac58:	4620      	mov	r0, r4
 801ac5a:	f7f5 fb80 	bl	801035e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(image);
 801ac5e:	687a      	ldr	r2, [r7, #4]
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	3340      	adds	r3, #64	; 0x40
 801ac64:	4619      	mov	r1, r3
 801ac66:	4610      	mov	r0, r2
 801ac68:	f7ff fbf4 	bl	801a454 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	4618      	mov	r0, r3
 801ac70:	371c      	adds	r7, #28
 801ac72:	46bd      	mov	sp, r7
 801ac74:	bd90      	pop	{r4, r7, pc}
 801ac76:	bf00      	nop
 801ac78:	080223ac 	.word	0x080223ac
 801ac7c:	0801ad1d 	.word	0x0801ad1d

0801ac80 <_ZN21StartUpScreenViewBase11setupScreenEv>:

void StartUpScreenViewBase::setupScreen()
{
 801ac80:	b480      	push	{r7}
 801ac82:	b083      	sub	sp, #12
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]

}
 801ac88:	bf00      	nop
 801ac8a:	370c      	adds	r7, #12
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac92:	4770      	bx	lr

0801ac94 <_ZN21StartUpScreenViewBase15handleTickEventEv>:

//Handles delays
void StartUpScreenViewBase::handleTickEvent()
{
 801ac94:	b580      	push	{r7, lr}
 801ac96:	b082      	sub	sp, #8
 801ac98:	af00      	add	r7, sp, #0
 801ac9a:	6078      	str	r0, [r7, #4]
    View::handleTickEvent();
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	4618      	mov	r0, r3
 801aca0:	f7ff fbc2 	bl	801a428 <_ZN8touchgfx6Screen15handleTickEventEv>
    if(waitForMainScreenCounter > 0)
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d022      	beq.n	801acf4 <_ZN21StartUpScreenViewBase15handleTickEventEv+0x60>
    {
        waitForMainScreenCounter--;
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 801acb4:	3b01      	subs	r3, #1
 801acb6:	b29a      	uxth	r2, r3
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
        if(waitForMainScreenCounter == 0)
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d115      	bne.n	801acf4 <_ZN21StartUpScreenViewBase15handleTickEventEv+0x60>
        {
            //Interaction1
            //When waitForMainScreen completed fade image
            //Fade image to alpha:0 with CubicIn easing in 1000 ms (60 Ticks)
            image.clearFadeAnimationEndedAction();
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	3340      	adds	r3, #64	; 0x40
 801accc:	4618      	mov	r0, r3
 801acce:	f000 f8c7 	bl	801ae60 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE29clearFadeAnimationEndedActionEv>
            image.startFadeAnimation(0, 60, EasingEquations::cubicEaseIn);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801acd8:	4b08      	ldr	r3, [pc, #32]	; (801acfc <_ZN21StartUpScreenViewBase15handleTickEventEv+0x68>)
 801acda:	223c      	movs	r2, #60	; 0x3c
 801acdc:	2100      	movs	r1, #0
 801acde:	f000 f8cc 	bl	801ae7a <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>
            image.setFadeAnimationEndedAction(interaction1EndedCallback);
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	3384      	adds	r3, #132	; 0x84
 801acec:	4619      	mov	r1, r3
 801acee:	4610      	mov	r0, r2
 801acf0:	f000 f904 	bl	801aefc <_ZN8touchgfx12FadeAnimatorINS_5ImageEE27setFadeAnimationEndedActionERNS_15GenericCallbackIRKS2_vvEE>
        }
    }
}
 801acf4:	bf00      	nop
 801acf6:	3708      	adds	r7, #8
 801acf8:	46bd      	mov	sp, r7
 801acfa:	bd80      	pop	{r7, pc}
 801acfc:	0801d8bd 	.word	0x0801d8bd

0801ad00 <_ZN21StartUpScreenViewBase15afterTransitionEv>:

//Called when the screen is done with transition/load
void StartUpScreenViewBase::afterTransition()
{
 801ad00:	b480      	push	{r7}
 801ad02:	b083      	sub	sp, #12
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	6078      	str	r0, [r7, #4]
    //waitForMainScreen
    //When screen is entered delay
    //Delay for 2000 ms (120 Ticks)
    waitForMainScreenCounter = WAITFORMAINSCREEN_DURATION;
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	2278      	movs	r2, #120	; 0x78
 801ad0c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 801ad10:	bf00      	nop
 801ad12:	370c      	adds	r7, #12
 801ad14:	46bd      	mov	sp, r7
 801ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad1a:	4770      	bx	lr

0801ad1c <_ZN21StartUpScreenViewBase32interaction1EndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5ImageEEE>:

void StartUpScreenViewBase::interaction1EndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Image>& comp)
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b082      	sub	sp, #8
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
 801ad24:	6039      	str	r1, [r7, #0]
    //Interaction2
    //When Interaction1 completed change screen to mainMenu
    //Go to mainMenu with screen transition towards East
    application().gotomainMenuScreenCoverTransitionEast();
 801ad26:	6878      	ldr	r0, [r7, #4]
 801ad28:	f7ff ff54 	bl	801abd4 <_ZN21StartUpScreenViewBase11applicationEv>
 801ad2c:	4603      	mov	r3, r0
 801ad2e:	4618      	mov	r0, r3
 801ad30:	f7fe fcbe 	bl	80196b0 <_ZN23FrontendApplicationBase37gotomainMenuScreenCoverTransitionEastEv>
}
 801ad34:	bf00      	nop
 801ad36:	3708      	adds	r7, #8
 801ad38:	46bd      	mov	sp, r7
 801ad3a:	bd80      	pop	{r7, pc}

0801ad3c <_ZN8touchgfx12FadeAnimatorINS_5ImageEED1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor. Destroys the FadeAnimator.
     */
    virtual ~FadeAnimator()
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	b082      	sub	sp, #8
 801ad40:	af00      	add	r7, sp, #0
 801ad42:	6078      	str	r0, [r7, #4]
    {
    }
 801ad44:	4a05      	ldr	r2, [pc, #20]	; (801ad5c <_ZN8touchgfx12FadeAnimatorINS_5ImageEED1Ev+0x20>)
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	601a      	str	r2, [r3, #0]
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	f7f3 fae1 	bl	800e314 <_ZN8touchgfx5ImageD1Ev>
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	4618      	mov	r0, r3
 801ad56:	3708      	adds	r7, #8
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	bd80      	pop	{r7, pc}
 801ad5c:	08022410 	.word	0x08022410

0801ad60 <_ZN8touchgfx12FadeAnimatorINS_5ImageEED0Ev>:
    virtual ~FadeAnimator()
 801ad60:	b580      	push	{r7, lr}
 801ad62:	b082      	sub	sp, #8
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	6078      	str	r0, [r7, #4]
    }
 801ad68:	6878      	ldr	r0, [r7, #4]
 801ad6a:	f7ff ffe7 	bl	801ad3c <_ZN8touchgfx12FadeAnimatorINS_5ImageEED1Ev>
 801ad6e:	2140      	movs	r1, #64	; 0x40
 801ad70:	6878      	ldr	r0, [r7, #4]
 801ad72:	f005 f840 	bl	801fdf6 <_ZdlPvj>
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	4618      	mov	r0, r3
 801ad7a:	3708      	adds	r7, #8
 801ad7c:	46bd      	mov	sp, r7
 801ad7e:	bd80      	pop	{r7, pc}

0801ad80 <_ZN8touchgfx4ViewI22StartUpScreenPresenterEC1Ev>:
    View() : presenter(0)
 801ad80:	b580      	push	{r7, lr}
 801ad82:	b082      	sub	sp, #8
 801ad84:	af00      	add	r7, sp, #0
 801ad86:	6078      	str	r0, [r7, #4]
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	f002 fbcc 	bl	801d528 <_ZN8touchgfx6ScreenC1Ev>
 801ad90:	4a05      	ldr	r2, [pc, #20]	; (801ada8 <_ZN8touchgfx4ViewI22StartUpScreenPresenterEC1Ev+0x28>)
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	601a      	str	r2, [r3, #0]
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	2200      	movs	r2, #0
 801ad9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	4618      	mov	r0, r3
 801ada0:	3708      	adds	r7, #8
 801ada2:	46bd      	mov	sp, r7
 801ada4:	bd80      	pop	{r7, pc}
 801ada6:	bf00      	nop
 801ada8:	08022490 	.word	0x08022490

0801adac <_ZN8touchgfx12FadeAnimatorINS_5ImageEEC1Ev>:
    FadeAnimator() :
 801adac:	b590      	push	{r4, r7, lr}
 801adae:	b085      	sub	sp, #20
 801adb0:	af00      	add	r7, sp, #0
 801adb2:	6078      	str	r0, [r7, #4]
        fadeAnimationEndedCallback(0)
 801adb4:	687c      	ldr	r4, [r7, #4]
 801adb6:	f107 030c 	add.w	r3, r7, #12
 801adba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801adbe:	4618      	mov	r0, r3
 801adc0:	f7f3 f985 	bl	800e0ce <_ZN8touchgfx6BitmapC1Et>
 801adc4:	f107 030c 	add.w	r3, r7, #12
 801adc8:	4619      	mov	r1, r3
 801adca:	4620      	mov	r0, r4
 801adcc:	f7f3 fa80 	bl	800e2d0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801add0:	4a0a      	ldr	r2, [pc, #40]	; (801adfc <_ZN8touchgfx12FadeAnimatorINS_5ImageEEC1Ev+0x50>)
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	601a      	str	r2, [r3, #0]
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	2200      	movs	r2, #0
 801adda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	2200      	movs	r2, #0
 801ade2:	859a      	strh	r2, [r3, #44]	; 0x2c
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	2200      	movs	r2, #0
 801ade8:	85da      	strh	r2, [r3, #46]	; 0x2e
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	2200      	movs	r2, #0
 801adee:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	4618      	mov	r0, r3
 801adf4:	3714      	adds	r7, #20
 801adf6:	46bd      	mov	sp, r7
 801adf8:	bd90      	pop	{r4, r7, pc}
 801adfa:	bf00      	nop
 801adfc:	08022410 	.word	0x08022410

0801ae00 <_ZN8touchgfx15GenericCallbackIRKNS_12FadeAnimatorINS_5ImageEEEvvEC1Ev>:
class GenericCallback<T1, void, void>
 801ae00:	b480      	push	{r7}
 801ae02:	b083      	sub	sp, #12
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
 801ae08:	4a04      	ldr	r2, [pc, #16]	; (801ae1c <_ZN8touchgfx15GenericCallbackIRKNS_12FadeAnimatorINS_5ImageEEEvvEC1Ev+0x1c>)
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	601a      	str	r2, [r3, #0]
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	4618      	mov	r0, r3
 801ae12:	370c      	adds	r7, #12
 801ae14:	46bd      	mov	sp, r7
 801ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae1a:	4770      	bx	lr
 801ae1c:	080223f8 	.word	0x080223f8

0801ae20 <_ZN8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvEC1EPS1_MS1_FvS6_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b084      	sub	sp, #16
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	60f8      	str	r0, [r7, #12]
 801ae28:	60b9      	str	r1, [r7, #8]
 801ae2a:	4639      	mov	r1, r7
 801ae2c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	4618      	mov	r0, r3
 801ae34:	f7ff ffe4 	bl	801ae00 <_ZN8touchgfx15GenericCallbackIRKNS_12FadeAnimatorINS_5ImageEEEvvEC1Ev>
 801ae38:	4a08      	ldr	r2, [pc, #32]	; (801ae5c <_ZN8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvEC1EPS1_MS1_FvS6_E+0x3c>)
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801ae3e:	68fb      	ldr	r3, [r7, #12]
 801ae40:	68ba      	ldr	r2, [r7, #8]
 801ae42:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	3308      	adds	r3, #8
 801ae48:	463a      	mov	r2, r7
 801ae4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ae4e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	4618      	mov	r0, r3
 801ae56:	3710      	adds	r7, #16
 801ae58:	46bd      	mov	sp, r7
 801ae5a:	bd80      	pop	{r7, pc}
 801ae5c:	080223e0 	.word	0x080223e0

0801ae60 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE29clearFadeAnimationEndedActionEv>:
     *        Clears the fade animation ended action previously set by
     *        setFadeAnimationEndedAction.
     *
     * @see setFadeAnimationEndedAction
     */
    void clearFadeAnimationEndedAction()
 801ae60:	b480      	push	{r7}
 801ae62:	b083      	sub	sp, #12
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	6078      	str	r0, [r7, #4]
    {
        fadeAnimationEndedCallback = 0;
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	2200      	movs	r2, #0
 801ae6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801ae6e:	bf00      	nop
 801ae70:	370c      	adds	r7, #12
 801ae72:	46bd      	mov	sp, r7
 801ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae78:	4770      	bx	lr

0801ae7a <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>:
     * @param duration                 The duration of the animation measured in ticks.
     * @param alphaProgressionEquation The equation that describes the development of the alpha
     *                                 value during the animation. Default =
     *                                 EasingEquations::linearEaseNone.
     */
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 801ae7a:	b580      	push	{r7, lr}
 801ae7c:	b084      	sub	sp, #16
 801ae7e:	af00      	add	r7, sp, #0
 801ae80:	60f8      	str	r0, [r7, #12]
 801ae82:	607b      	str	r3, [r7, #4]
 801ae84:	460b      	mov	r3, r1
 801ae86:	72fb      	strb	r3, [r7, #11]
 801ae88:	4613      	mov	r3, r2
 801ae8a:	813b      	strh	r3, [r7, #8]
    {
        if (!fadeAnimationRunning)
 801ae8c:	68fb      	ldr	r3, [r7, #12]
 801ae8e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801ae92:	f083 0301 	eor.w	r3, r3, #1
 801ae96:	b2db      	uxtb	r3, r3
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d007      	beq.n	801aeac <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE+0x32>
        {
            Application::getInstance()->registerTimerWidget(this);
 801ae9c:	f001 fc72 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 801aea0:	4602      	mov	r2, r0
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	4619      	mov	r1, r3
 801aea6:	4610      	mov	r0, r2
 801aea8:	f001 fc72 	bl	801c790 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        }

        fadeAnimationCounter = 0;
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	2200      	movs	r2, #0
 801aeb0:	859a      	strh	r2, [r3, #44]	; 0x2c
        fadeAnimationStartAlpha = T::getAlpha();
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	4618      	mov	r0, r3
 801aeb6:	f7f3 fba1 	bl	800e5fc <_ZNK8touchgfx5Image8getAlphaEv>
 801aeba:	4603      	mov	r3, r0
 801aebc:	b21a      	sxth	r2, r3
 801aebe:	68fb      	ldr	r3, [r7, #12]
 801aec0:	865a      	strh	r2, [r3, #50]	; 0x32
        fadeAnimationEndAlpha = endAlpha;
 801aec2:	7afb      	ldrb	r3, [r7, #11]
 801aec4:	b21a      	sxth	r2, r3
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	869a      	strh	r2, [r3, #52]	; 0x34
        fadeAnimationDuration = duration;
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	893a      	ldrh	r2, [r7, #8]
 801aece:	861a      	strh	r2, [r3, #48]	; 0x30
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	687a      	ldr	r2, [r7, #4]
 801aed4:	639a      	str	r2, [r3, #56]	; 0x38

        fadeAnimationRunning = true;
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	2201      	movs	r2, #1
 801aeda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 801aede:	68fb      	ldr	r3, [r7, #12]
 801aee0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d106      	bne.n	801aef4 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE+0x7a>
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d102      	bne.n	801aef4 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE+0x7a>
        {
            nextFadeAnimationStep(); // Set end alpha and shut down
 801aeee:	68f8      	ldr	r0, [r7, #12]
 801aef0:	f000 f832 	bl	801af58 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>
        }
    }
 801aef4:	bf00      	nop
 801aef6:	3710      	adds	r7, #16
 801aef8:	46bd      	mov	sp, r7
 801aefa:	bd80      	pop	{r7, pc}

0801aefc <_ZN8touchgfx12FadeAnimatorINS_5ImageEE27setFadeAnimationEndedActionERNS_15GenericCallbackIRKS2_vvEE>:
    void setFadeAnimationEndedAction(GenericCallback<const FadeAnimator<T>& >& callback)
 801aefc:	b480      	push	{r7}
 801aefe:	b083      	sub	sp, #12
 801af00:	af00      	add	r7, sp, #0
 801af02:	6078      	str	r0, [r7, #4]
 801af04:	6039      	str	r1, [r7, #0]
        fadeAnimationEndedCallback = &callback;
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	683a      	ldr	r2, [r7, #0]
 801af0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801af0c:	bf00      	nop
 801af0e:	370c      	adds	r7, #12
 801af10:	46bd      	mov	sp, r7
 801af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af16:	4770      	bx	lr

0801af18 <_ZN8touchgfx15GenericCallbackIRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev>:
    virtual ~GenericCallback()
 801af18:	b480      	push	{r7}
 801af1a:	b083      	sub	sp, #12
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	6078      	str	r0, [r7, #4]
    }
 801af20:	4a04      	ldr	r2, [pc, #16]	; (801af34 <_ZN8touchgfx15GenericCallbackIRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev+0x1c>)
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	601a      	str	r2, [r3, #0]
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	4618      	mov	r0, r3
 801af2a:	370c      	adds	r7, #12
 801af2c:	46bd      	mov	sp, r7
 801af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af32:	4770      	bx	lr
 801af34:	080223f8 	.word	0x080223f8

0801af38 <_ZN8touchgfx15GenericCallbackIRKNS_12FadeAnimatorINS_5ImageEEEvvED0Ev>:
    virtual ~GenericCallback()
 801af38:	b580      	push	{r7, lr}
 801af3a:	b082      	sub	sp, #8
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
    }
 801af40:	6878      	ldr	r0, [r7, #4]
 801af42:	f7ff ffe9 	bl	801af18 <_ZN8touchgfx15GenericCallbackIRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev>
 801af46:	2104      	movs	r1, #4
 801af48:	6878      	ldr	r0, [r7, #4]
 801af4a:	f004 ff54 	bl	801fdf6 <_ZdlPvj>
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	4618      	mov	r0, r3
 801af52:	3708      	adds	r7, #8
 801af54:	46bd      	mov	sp, r7
 801af56:	bd80      	pop	{r7, pc}

0801af58 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>:
     *
     * @brief Execute next step in fade animation.
     *
     *        Execute next step in fade animation and stop the timer if necessary.
     */
    void nextFadeAnimationStep()
 801af58:	b590      	push	{r4, r7, lr}
 801af5a:	b085      	sub	sp, #20
 801af5c:	af00      	add	r7, sp, #0
 801af5e:	6078      	str	r0, [r7, #4]
    {
        if (fadeAnimationRunning)
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801af66:	2b00      	cmp	r3, #0
 801af68:	f000 8083 	beq.w	801b072 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x11a>
        {
            if (fadeAnimationCounter < fadeAnimationDelay)
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801af74:	429a      	cmp	r2, r3
 801af76:	d206      	bcs.n	801af86 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x2e>
            {
                // Just wait for the delay time to pass
                fadeAnimationCounter++;
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801af7c:	3301      	adds	r3, #1
 801af7e:	b29a      	uxth	r2, r3
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	859a      	strh	r2, [r3, #44]	; 0x2c
                        fadeAnimationEndedCallback->execute(*this);
                    }
                }
            }
        }
    }
 801af84:	e075      	b.n	801b072 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x11a>
                if (fadeAnimationCounter <= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801af8a:	461a      	mov	r2, r3
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801af90:	4619      	mov	r1, r3
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801af96:	440b      	add	r3, r1
 801af98:	429a      	cmp	r2, r3
 801af9a:	d831      	bhi.n	801b000 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0xa8>
                    uint32_t actualAnimationCounter = fadeAnimationCounter - fadeAnimationDelay;
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801afa0:	461a      	mov	r2, r3
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801afa6:	1ad3      	subs	r3, r2, r3
 801afa8:	60fb      	str	r3, [r7, #12]
                    int16_t deltaAlpha = (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	b298      	uxth	r0, r3
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801afb8:	b29a      	uxth	r2, r3
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 801afc0:	b29b      	uxth	r3, r3
 801afc2:	1ad3      	subs	r3, r2, r3
 801afc4:	b29b      	uxth	r3, r3
 801afc6:	b21a      	sxth	r2, r3
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801afcc:	2100      	movs	r1, #0
 801afce:	47a0      	blx	r4
 801afd0:	4603      	mov	r3, r0
 801afd2:	817b      	strh	r3, [r7, #10]
                    T::setAlpha(fadeAnimationStartAlpha + deltaAlpha);
 801afd4:	6878      	ldr	r0, [r7, #4]
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 801afdc:	b2da      	uxtb	r2, r3
 801afde:	897b      	ldrh	r3, [r7, #10]
 801afe0:	b2db      	uxtb	r3, r3
 801afe2:	4413      	add	r3, r2
 801afe4:	b2db      	uxtb	r3, r3
 801afe6:	4619      	mov	r1, r3
 801afe8:	f7f3 faf8 	bl	800e5dc <_ZN8touchgfx5Image8setAlphaEh>
                    T::invalidate();
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	4618      	mov	r0, r3
 801aff0:	f001 ffb5 	bl	801cf5e <_ZNK8touchgfx8Drawable10invalidateEv>
                    fadeAnimationCounter++;
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801aff8:	3301      	adds	r3, #1
 801affa:	b29a      	uxth	r2, r3
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	859a      	strh	r2, [r3, #44]	; 0x2c
                if (fadeAnimationCounter > (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801b004:	461a      	mov	r2, r3
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801b00a:	4619      	mov	r1, r3
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b010:	440b      	add	r3, r1
 801b012:	429a      	cmp	r2, r3
 801b014:	d92d      	bls.n	801b072 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x11a>
                    fadeAnimationRunning = false;
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	2200      	movs	r2, #0
 801b01a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                    fadeAnimationDuration = 0;
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	2200      	movs	r2, #0
 801b022:	861a      	strh	r2, [r3, #48]	; 0x30
                    Application::getInstance()->unregisterTimerWidget(this);
 801b024:	f001 fbae 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 801b028:	4602      	mov	r2, r0
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	4619      	mov	r1, r3
 801b02e:	4610      	mov	r0, r2
 801b030:	f001 fbde 	bl	801c7f0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d00d      	beq.n	801b058 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x100>
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	330c      	adds	r3, #12
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	4610      	mov	r0, r2
 801b04c:	4798      	blx	r3
 801b04e:	4603      	mov	r3, r0
 801b050:	2b00      	cmp	r3, #0
 801b052:	d001      	beq.n	801b058 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x100>
 801b054:	2301      	movs	r3, #1
 801b056:	e000      	b.n	801b05a <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x102>
 801b058:	2300      	movs	r3, #0
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d009      	beq.n	801b072 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x11a>
                        fadeAnimationEndedCallback->execute(*this);
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	3308      	adds	r3, #8
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	6879      	ldr	r1, [r7, #4]
 801b06e:	4610      	mov	r0, r2
 801b070:	4798      	blx	r3
    }
 801b072:	bf00      	nop
 801b074:	3714      	adds	r7, #20
 801b076:	46bd      	mov	sp, r7
 801b078:	bd90      	pop	{r4, r7, pc}
	...

0801b07c <_ZN8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801b07c:	b580      	push	{r7, lr}
 801b07e:	b082      	sub	sp, #8
 801b080:	af00      	add	r7, sp, #0
 801b082:	6078      	str	r0, [r7, #4]
 801b084:	4a05      	ldr	r2, [pc, #20]	; (801b09c <_ZN8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev+0x20>)
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	601a      	str	r2, [r3, #0]
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	4618      	mov	r0, r3
 801b08e:	f7ff ff43 	bl	801af18 <_ZN8touchgfx15GenericCallbackIRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev>
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	4618      	mov	r0, r3
 801b096:	3708      	adds	r7, #8
 801b098:	46bd      	mov	sp, r7
 801b09a:	bd80      	pop	{r7, pc}
 801b09c:	080223e0 	.word	0x080223e0

0801b0a0 <_ZN8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED0Ev>:
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b082      	sub	sp, #8
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	6078      	str	r0, [r7, #4]
 801b0a8:	6878      	ldr	r0, [r7, #4]
 801b0aa:	f7ff ffe7 	bl	801b07c <_ZN8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev>
 801b0ae:	2110      	movs	r1, #16
 801b0b0:	6878      	ldr	r0, [r7, #4]
 801b0b2:	f004 fea0 	bl	801fdf6 <_ZdlPvj>
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	4618      	mov	r0, r3
 801b0ba:	3708      	adds	r7, #8
 801b0bc:	46bd      	mov	sp, r7
 801b0be:	bd80      	pop	{r7, pc}

0801b0c0 <_ZN8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 801b0c0:	b580      	push	{r7, lr}
 801b0c2:	b082      	sub	sp, #8
 801b0c4:	af00      	add	r7, sp, #0
 801b0c6:	6078      	str	r0, [r7, #4]
 801b0c8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	685b      	ldr	r3, [r3, #4]
 801b0ce:	687a      	ldr	r2, [r7, #4]
 801b0d0:	68d2      	ldr	r2, [r2, #12]
 801b0d2:	1052      	asrs	r2, r2, #1
 801b0d4:	1898      	adds	r0, r3, r2
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	68db      	ldr	r3, [r3, #12]
 801b0da:	f003 0301 	and.w	r3, r3, #1
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d102      	bne.n	801b0e8 <_ZN8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7executeES6_+0x28>
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	689b      	ldr	r3, [r3, #8]
 801b0e6:	e00a      	b.n	801b0fe <_ZN8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7executeES6_+0x3e>
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	685b      	ldr	r3, [r3, #4]
 801b0ec:	687a      	ldr	r2, [r7, #4]
 801b0ee:	68d2      	ldr	r2, [r2, #12]
 801b0f0:	1052      	asrs	r2, r2, #1
 801b0f2:	4413      	add	r3, r2
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	687a      	ldr	r2, [r7, #4]
 801b0f8:	6892      	ldr	r2, [r2, #8]
 801b0fa:	4413      	add	r3, r2
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	6839      	ldr	r1, [r7, #0]
 801b100:	4798      	blx	r3
    }
 801b102:	bf00      	nop
 801b104:	3708      	adds	r7, #8
 801b106:	46bd      	mov	sp, r7
 801b108:	bd80      	pop	{r7, pc}

0801b10a <_ZNK8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv>:
    virtual bool isValid() const
 801b10a:	b480      	push	{r7}
 801b10c:	b083      	sub	sp, #12
 801b10e:	af00      	add	r7, sp, #0
 801b110:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	685b      	ldr	r3, [r3, #4]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d010      	beq.n	801b13c <_ZNK8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x32>
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	689b      	ldr	r3, [r3, #8]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d107      	bne.n	801b132 <_ZNK8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x28>
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	68db      	ldr	r3, [r3, #12]
 801b126:	f003 0301 	and.w	r3, r3, #1
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d101      	bne.n	801b132 <_ZNK8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x28>
 801b12e:	2301      	movs	r3, #1
 801b130:	e000      	b.n	801b134 <_ZNK8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x2a>
 801b132:	2300      	movs	r3, #0
 801b134:	2b01      	cmp	r3, #1
 801b136:	d001      	beq.n	801b13c <_ZNK8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x32>
 801b138:	2301      	movs	r3, #1
 801b13a:	e000      	b.n	801b13e <_ZNK8touchgfx8CallbackI21StartUpScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x34>
 801b13c:	2300      	movs	r3, #0
    }
 801b13e:	4618      	mov	r0, r3
 801b140:	370c      	adds	r7, #12
 801b142:	46bd      	mov	sp, r7
 801b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b148:	4770      	bx	lr

0801b14a <_ZN8touchgfx12FadeAnimatorINS_5ImageEE15handleTickEventEv>:
    virtual void handleTickEvent()
 801b14a:	b580      	push	{r7, lr}
 801b14c:	b082      	sub	sp, #8
 801b14e:	af00      	add	r7, sp, #0
 801b150:	6078      	str	r0, [r7, #4]
        T::handleTickEvent();
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	4618      	mov	r0, r3
 801b156:	f7f2 fc2f 	bl	800d9b8 <_ZN8touchgfx8Drawable15handleTickEventEv>
        nextFadeAnimationStep();
 801b15a:	6878      	ldr	r0, [r7, #4]
 801b15c:	f7ff fefc 	bl	801af58 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>
    }
 801b160:	bf00      	nop
 801b162:	3708      	adds	r7, #8
 801b164:	46bd      	mov	sp, r7
 801b166:	bd80      	pop	{r7, pc}

0801b168 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21setFadeAnimationDelayEt>:
    virtual void setFadeAnimationDelay(uint16_t delay)
 801b168:	b480      	push	{r7}
 801b16a:	b083      	sub	sp, #12
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	6078      	str	r0, [r7, #4]
 801b170:	460b      	mov	r3, r1
 801b172:	807b      	strh	r3, [r7, #2]
        fadeAnimationDelay = delay;
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	887a      	ldrh	r2, [r7, #2]
 801b178:	85da      	strh	r2, [r3, #46]	; 0x2e
    }
 801b17a:	bf00      	nop
 801b17c:	370c      	adds	r7, #12
 801b17e:	46bd      	mov	sp, r7
 801b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b184:	4770      	bx	lr

0801b186 <_ZNK8touchgfx12FadeAnimatorINS_5ImageEE21getFadeAnimationDelayEv>:
    virtual uint16_t getFadeAnimationDelay() const
 801b186:	b480      	push	{r7}
 801b188:	b083      	sub	sp, #12
 801b18a:	af00      	add	r7, sp, #0
 801b18c:	6078      	str	r0, [r7, #4]
        return fadeAnimationDelay;
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    }
 801b192:	4618      	mov	r0, r3
 801b194:	370c      	adds	r7, #12
 801b196:	46bd      	mov	sp, r7
 801b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b19c:	4770      	bx	lr

0801b19e <_ZNK8touchgfx12FadeAnimatorINS_5ImageEE9isRunningEv>:
    virtual bool isRunning() const
 801b19e:	b580      	push	{r7, lr}
 801b1a0:	b082      	sub	sp, #8
 801b1a2:	af00      	add	r7, sp, #0
 801b1a4:	6078      	str	r0, [r7, #4]
        return isFadeAnimationRunning();
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	3374      	adds	r3, #116	; 0x74
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	6878      	ldr	r0, [r7, #4]
 801b1b0:	4798      	blx	r3
 801b1b2:	4603      	mov	r3, r0
    }
 801b1b4:	4618      	mov	r0, r3
 801b1b6:	3708      	adds	r7, #8
 801b1b8:	46bd      	mov	sp, r7
 801b1ba:	bd80      	pop	{r7, pc}

0801b1bc <_ZNK8touchgfx12FadeAnimatorINS_5ImageEE22isFadeAnimationRunningEv>:
    virtual bool isFadeAnimationRunning() const
 801b1bc:	b480      	push	{r7}
 801b1be:	b083      	sub	sp, #12
 801b1c0:	af00      	add	r7, sp, #0
 801b1c2:	6078      	str	r0, [r7, #4]
        return fadeAnimationRunning;
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    }
 801b1ca:	4618      	mov	r0, r3
 801b1cc:	370c      	adds	r7, #12
 801b1ce:	46bd      	mov	sp, r7
 801b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d4:	4770      	bx	lr
	...

0801b1d8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801b1d8:	b480      	push	{r7}
 801b1da:	af00      	add	r7, sp, #0
    return bitmap_database;
 801b1dc:	4b02      	ldr	r3, [pc, #8]	; (801b1e8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801b1de:	4618      	mov	r0, r3
 801b1e0:	46bd      	mov	sp, r7
 801b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1e6:	4770      	bx	lr
 801b1e8:	080224bc 	.word	0x080224bc

0801b1ec <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
 801b1ec:	b480      	push	{r7}
 801b1ee:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801b1f0:	2313      	movs	r3, #19
}
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	46bd      	mov	sp, r7
 801b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1fa:	4770      	bx	lr

0801b1fc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801b1fc:	b480      	push	{r7}
 801b1fe:	b085      	sub	sp, #20
 801b200:	af00      	add	r7, sp, #0
 801b202:	60f8      	str	r0, [r7, #12]
 801b204:	60b9      	str	r1, [r7, #8]
 801b206:	4613      	mov	r3, r2
 801b208:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801b20a:	4a07      	ldr	r2, [pc, #28]	; (801b228 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	6013      	str	r3, [r2, #0]
        fonts = f;
 801b210:	4a06      	ldr	r2, [pc, #24]	; (801b22c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801b212:	68bb      	ldr	r3, [r7, #8]
 801b214:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801b216:	4a06      	ldr	r2, [pc, #24]	; (801b230 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 801b218:	88fb      	ldrh	r3, [r7, #6]
 801b21a:	8013      	strh	r3, [r2, #0]
    }
 801b21c:	bf00      	nop
 801b21e:	3714      	adds	r7, #20
 801b220:	46bd      	mov	sp, r7
 801b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b226:	4770      	bx	lr
 801b228:	20009d34 	.word	0x20009d34
 801b22c:	20009d3c 	.word	0x20009d3c
 801b230:	20009d38 	.word	0x20009d38

0801b234 <_ZN8touchgfx5Texts11setLanguageEt>:

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 801b234:	b5b0      	push	{r4, r5, r7, lr}
 801b236:	b082      	sub	sp, #8
 801b238:	af00      	add	r7, sp, #0
 801b23a:	4603      	mov	r3, r0
 801b23c:	80fb      	strh	r3, [r7, #6]
    currentLanguage = id;
 801b23e:	4a0d      	ldr	r2, [pc, #52]	; (801b274 <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 801b240:	88fb      	ldrh	r3, [r7, #6]
 801b242:	8013      	strh	r3, [r2, #0]
    currentLanguagePtr = languagesArray[currentLanguage];
 801b244:	2200      	movs	r2, #0
 801b246:	4b0c      	ldr	r3, [pc, #48]	; (801b278 <_ZN8touchgfx5Texts11setLanguageEt+0x44>)
 801b248:	601a      	str	r2, [r3, #0]

    touchgfx::TypedText::registerTypedTextDatabase(TypedTextDatabase::getInstance(currentLanguage),
 801b24a:	4b0a      	ldr	r3, [pc, #40]	; (801b274 <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 801b24c:	881b      	ldrh	r3, [r3, #0]
 801b24e:	4618      	mov	r0, r3
 801b250:	f000 f834 	bl	801b2bc <_ZN17TypedTextDatabase11getInstanceEt>
 801b254:	4604      	mov	r4, r0
 801b256:	f000 f847 	bl	801b2e8 <_ZN17TypedTextDatabase8getFontsEv>
 801b25a:	4605      	mov	r5, r0
 801b25c:	f000 f83c 	bl	801b2d8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801b260:	4603      	mov	r3, r0
 801b262:	461a      	mov	r2, r3
 801b264:	4629      	mov	r1, r5
 801b266:	4620      	mov	r0, r4
 801b268:	f7ff ffc8 	bl	801b1fc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
                                                   TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
}
 801b26c:	bf00      	nop
 801b26e:	3708      	adds	r7, #8
 801b270:	46bd      	mov	sp, r7
 801b272:	bdb0      	pop	{r4, r5, r7, pc}
 801b274:	20009cb4 	.word	0x20009cb4
 801b278:	20009cb8 	.word	0x20009cb8

0801b27c <_Z41__static_initialization_and_destruction_0ii>:
 801b27c:	b480      	push	{r7}
 801b27e:	b083      	sub	sp, #12
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]
 801b284:	6039      	str	r1, [r7, #0]
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	2b01      	cmp	r3, #1
 801b28a:	d107      	bne.n	801b29c <_Z41__static_initialization_and_destruction_0ii+0x20>
 801b28c:	683b      	ldr	r3, [r7, #0]
 801b28e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b292:	4293      	cmp	r3, r2
 801b294:	d102      	bne.n	801b29c <_Z41__static_initialization_and_destruction_0ii+0x20>
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];
 801b296:	2200      	movs	r2, #0
 801b298:	4b03      	ldr	r3, [pc, #12]	; (801b2a8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 801b29a:	601a      	str	r2, [r3, #0]
}
 801b29c:	bf00      	nop
 801b29e:	370c      	adds	r7, #12
 801b2a0:	46bd      	mov	sp, r7
 801b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2a6:	4770      	bx	lr
 801b2a8:	20009cb8 	.word	0x20009cb8

0801b2ac <_GLOBAL__sub_I__ZN8touchgfx4Font22getStringWidthFunctionE>:
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	af00      	add	r7, sp, #0
 801b2b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b2b4:	2001      	movs	r0, #1
 801b2b6:	f7ff ffe1 	bl	801b27c <_Z41__static_initialization_and_destruction_0ii>
 801b2ba:	bd80      	pop	{r7, pc}

0801b2bc <_ZN17TypedTextDatabase11getInstanceEt>:
};

namespace TypedTextDatabase
{
const touchgfx::TypedText::TypedTextData* getInstance(touchgfx::LanguageId id)
{
 801b2bc:	b480      	push	{r7}
 801b2be:	b083      	sub	sp, #12
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	4603      	mov	r3, r0
 801b2c4:	80fb      	strh	r3, [r7, #6]
    return typedTextDatabaseArray[id];
 801b2c6:	4b03      	ldr	r3, [pc, #12]	; (801b2d4 <_ZN17TypedTextDatabase11getInstanceEt+0x18>)
}
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	370c      	adds	r7, #12
 801b2cc:	46bd      	mov	sp, r7
 801b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d2:	4770      	bx	lr
 801b2d4:	080fa798 	.word	0x080fa798

0801b2d8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801b2d8:	b480      	push	{r7}
 801b2da:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 801b2dc:	2301      	movs	r3, #1
}
 801b2de:	4618      	mov	r0, r3
 801b2e0:	46bd      	mov	sp, r7
 801b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2e6:	4770      	bx	lr

0801b2e8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font* const* getFonts()
{
 801b2e8:	b480      	push	{r7}
 801b2ea:	af00      	add	r7, sp, #0
    return _fonts;
 801b2ec:	4b02      	ldr	r3, [pc, #8]	; (801b2f8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801b2ee:	4618      	mov	r0, r3
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2f6:	4770      	bx	lr
 801b2f8:	20009cbc 	.word	0x20009cbc

0801b2fc <_Z41__static_initialization_and_destruction_0ii>:
}
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b082      	sub	sp, #8
 801b300:	af00      	add	r7, sp, #0
 801b302:	6078      	str	r0, [r7, #4]
 801b304:	6039      	str	r1, [r7, #0]
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	2b01      	cmp	r3, #1
 801b30a:	d113      	bne.n	801b334 <_Z41__static_initialization_and_destruction_0ii+0x38>
 801b30c:	683b      	ldr	r3, [r7, #0]
 801b30e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b312:	4293      	cmp	r3, r2
 801b314:	d10e      	bne.n	801b334 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801b316:	f7fd ff35 	bl	8019184 <_Z23getFont_verdana_20_4bppv>
 801b31a:	4602      	mov	r2, r0
};
 801b31c:	4b07      	ldr	r3, [pc, #28]	; (801b33c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801b31e:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 801b320:	f7fd ff6e 	bl	8019200 <_Z23getFont_verdana_40_4bppv>
 801b324:	4602      	mov	r2, r0
};
 801b326:	4b05      	ldr	r3, [pc, #20]	; (801b33c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801b328:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 801b32a:	f7fd feed 	bl	8019108 <_Z23getFont_verdana_10_4bppv>
 801b32e:	4602      	mov	r2, r0
};
 801b330:	4b02      	ldr	r3, [pc, #8]	; (801b33c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801b332:	609a      	str	r2, [r3, #8]
}
 801b334:	bf00      	nop
 801b336:	3708      	adds	r7, #8
 801b338:	46bd      	mov	sp, r7
 801b33a:	bd80      	pop	{r7, pc}
 801b33c:	20009cbc 	.word	0x20009cbc

0801b340 <_GLOBAL__sub_I__ZN17TypedTextDatabase11getInstanceEt>:
 801b340:	b580      	push	{r7, lr}
 801b342:	af00      	add	r7, sp, #0
 801b344:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b348:	2001      	movs	r0, #1
 801b34a:	f7ff ffd7 	bl	801b2fc <_Z41__static_initialization_and_destruction_0ii>
 801b34e:	bd80      	pop	{r7, pc}

0801b350 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801b350:	b580      	push	{r7, lr}
 801b352:	b084      	sub	sp, #16
 801b354:	af00      	add	r7, sp, #0
 801b356:	60f8      	str	r0, [r7, #12]
 801b358:	60b9      	str	r1, [r7, #8]
 801b35a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801b35c:	68fb      	ldr	r3, [r7, #12]
 801b35e:	687a      	ldr	r2, [r7, #4]
 801b360:	68b9      	ldr	r1, [r7, #8]
 801b362:	4618      	mov	r0, r3
 801b364:	f7fe f914 	bl	8019590 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801b368:	4a03      	ldr	r2, [pc, #12]	; (801b378 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	601a      	str	r2, [r3, #0]
{
}
 801b36e:	68fb      	ldr	r3, [r7, #12]
 801b370:	4618      	mov	r0, r3
 801b372:	3710      	adds	r7, #16
 801b374:	46bd      	mov	sp, r7
 801b376:	bd80      	pop	{r7, pc}
 801b378:	08021a4c 	.word	0x08021a4c

0801b37c <_ZN27menuImageContainerSelectionD1Ev>:

class menuImageContainerSelection : public menuImageContainerSelectionBase
{
public:
    menuImageContainerSelection();
    virtual ~menuImageContainerSelection() {}
 801b37c:	b580      	push	{r7, lr}
 801b37e:	b082      	sub	sp, #8
 801b380:	af00      	add	r7, sp, #0
 801b382:	6078      	str	r0, [r7, #4]
 801b384:	4a05      	ldr	r2, [pc, #20]	; (801b39c <_ZN27menuImageContainerSelectionD1Ev+0x20>)
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	601a      	str	r2, [r3, #0]
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	4618      	mov	r0, r3
 801b38e:	f7fe ff8d 	bl	801a2ac <_ZN31menuImageContainerSelectionBaseD1Ev>
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	4618      	mov	r0, r3
 801b396:	3708      	adds	r7, #8
 801b398:	46bd      	mov	sp, r7
 801b39a:	bd80      	pop	{r7, pc}
 801b39c:	08022640 	.word	0x08022640

0801b3a0 <_ZN27menuImageContainerSelectionD0Ev>:
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b082      	sub	sp, #8
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
 801b3a8:	6878      	ldr	r0, [r7, #4]
 801b3aa:	f7ff ffe7 	bl	801b37c <_ZN27menuImageContainerSelectionD1Ev>
 801b3ae:	2158      	movs	r1, #88	; 0x58
 801b3b0:	6878      	ldr	r0, [r7, #4]
 801b3b2:	f004 fd20 	bl	801fdf6 <_ZdlPvj>
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	3708      	adds	r7, #8
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	bd80      	pop	{r7, pc}

0801b3c0 <_ZN27menuImageContainerSelectionC1Ev>:
#include <gui/containers/menuImageContainerSelection.hpp>

menuImageContainerSelection::menuImageContainerSelection()
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	b082      	sub	sp, #8
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	f7fe ff96 	bl	801a2fc <_ZN31menuImageContainerSelectionBaseC1Ev>
 801b3d0:	4a03      	ldr	r2, [pc, #12]	; (801b3e0 <_ZN27menuImageContainerSelectionC1Ev+0x20>)
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	601a      	str	r2, [r3, #0]
{

}
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	4618      	mov	r0, r3
 801b3da:	3708      	adds	r7, #8
 801b3dc:	46bd      	mov	sp, r7
 801b3de:	bd80      	pop	{r7, pc}
 801b3e0:	08022640 	.word	0x08022640

0801b3e4 <_ZN27menuImageContainerSelection10initializeEv>:

void menuImageContainerSelection::initialize()
{
 801b3e4:	b580      	push	{r7, lr}
 801b3e6:	b082      	sub	sp, #8
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	6078      	str	r0, [r7, #4]
    menuImageContainerSelectionBase::initialize();
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	f7fe ffce 	bl	801a390 <_ZN31menuImageContainerSelectionBase10initializeEv>
}
 801b3f4:	bf00      	nop
 801b3f6:	3708      	adds	r7, #8
 801b3f8:	46bd      	mov	sp, r7
 801b3fa:	bd80      	pop	{r7, pc}

0801b3fc <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801b3fc:	b480      	push	{r7}
 801b3fe:	b083      	sub	sp, #12
 801b400:	af00      	add	r7, sp, #0
 801b402:	6078      	str	r0, [r7, #4]
    {
    }
 801b404:	bf00      	nop
 801b406:	370c      	adds	r7, #12
 801b408:	46bd      	mov	sp, r7
 801b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b40e:	4770      	bx	lr

0801b410 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 801b410:	b480      	push	{r7}
 801b412:	b083      	sub	sp, #12
 801b414:	af00      	add	r7, sp, #0
 801b416:	6078      	str	r0, [r7, #4]
    {
    }
 801b418:	bf00      	nop
 801b41a:	370c      	adds	r7, #12
 801b41c:	46bd      	mov	sp, r7
 801b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b422:	4770      	bx	lr

0801b424 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 801b424:	b480      	push	{r7}
 801b426:	b083      	sub	sp, #12
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
    {
 801b42c:	4a04      	ldr	r2, [pc, #16]	; (801b440 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	601a      	str	r2, [r3, #0]
    }
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	4618      	mov	r0, r3
 801b436:	370c      	adds	r7, #12
 801b438:	46bd      	mov	sp, r7
 801b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b43e:	4770      	bx	lr
 801b440:	0802270c 	.word	0x0802270c

0801b444 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801b444:	b580      	push	{r7, lr}
 801b446:	b082      	sub	sp, #8
 801b448:	af00      	add	r7, sp, #0
 801b44a:	6078      	str	r0, [r7, #4]
    }
 801b44c:	6878      	ldr	r0, [r7, #4]
 801b44e:	f7ff ffe9 	bl	801b424 <_ZN8touchgfx9PresenterD1Ev>
 801b452:	2104      	movs	r1, #4
 801b454:	6878      	ldr	r0, [r7, #4]
 801b456:	f004 fcce 	bl	801fdf6 <_ZdlPvj>
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	4618      	mov	r0, r3
 801b45e:	3708      	adds	r7, #8
 801b460:	46bd      	mov	sp, r7
 801b462:	bd80      	pop	{r7, pc}

0801b464 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 801b464:	b480      	push	{r7}
 801b466:	b083      	sub	sp, #12
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
    {
 801b46c:	4a04      	ldr	r2, [pc, #16]	; (801b480 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	601a      	str	r2, [r3, #0]
    }
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	4618      	mov	r0, r3
 801b476:	370c      	adds	r7, #12
 801b478:	46bd      	mov	sp, r7
 801b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b47e:	4770      	bx	lr
 801b480:	0802270c 	.word	0x0802270c

0801b484 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801b484:	b480      	push	{r7}
 801b486:	b083      	sub	sp, #12
 801b488:	af00      	add	r7, sp, #0
 801b48a:	6078      	str	r0, [r7, #4]
 801b48c:	4a06      	ldr	r2, [pc, #24]	; (801b4a8 <_ZN13ModelListenerC1Ev+0x24>)
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	601a      	str	r2, [r3, #0]
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	2200      	movs	r2, #0
 801b496:	605a      	str	r2, [r3, #4]
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	4618      	mov	r0, r3
 801b49c:	370c      	adds	r7, #12
 801b49e:	46bd      	mov	sp, r7
 801b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4a4:	4770      	bx	lr
 801b4a6:	bf00      	nop
 801b4a8:	080226fc 	.word	0x080226fc

0801b4ac <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 801b4ac:	b480      	push	{r7}
 801b4ae:	b083      	sub	sp, #12
 801b4b0:	af00      	add	r7, sp, #0
 801b4b2:	6078      	str	r0, [r7, #4]
 801b4b4:	4a04      	ldr	r2, [pc, #16]	; (801b4c8 <_ZN13ModelListenerD1Ev+0x1c>)
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	601a      	str	r2, [r3, #0]
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	4618      	mov	r0, r3
 801b4be:	370c      	adds	r7, #12
 801b4c0:	46bd      	mov	sp, r7
 801b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4c6:	4770      	bx	lr
 801b4c8:	080226fc 	.word	0x080226fc

0801b4cc <_ZN13ModelListenerD0Ev>:
 801b4cc:	b580      	push	{r7, lr}
 801b4ce:	b082      	sub	sp, #8
 801b4d0:	af00      	add	r7, sp, #0
 801b4d2:	6078      	str	r0, [r7, #4]
 801b4d4:	6878      	ldr	r0, [r7, #4]
 801b4d6:	f7ff ffe9 	bl	801b4ac <_ZN13ModelListenerD1Ev>
 801b4da:	2108      	movs	r1, #8
 801b4dc:	6878      	ldr	r0, [r7, #4]
 801b4de:	f004 fc8a 	bl	801fdf6 <_ZdlPvj>
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	3708      	adds	r7, #8
 801b4e8:	46bd      	mov	sp, r7
 801b4ea:	bd80      	pop	{r7, pc}

0801b4ec <_ZN17mainMenuPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainMenuPresenter() {};
 801b4ec:	b580      	push	{r7, lr}
 801b4ee:	b082      	sub	sp, #8
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
 801b4f4:	4a09      	ldr	r2, [pc, #36]	; (801b51c <_ZN17mainMenuPresenterD1Ev+0x30>)
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	601a      	str	r2, [r3, #0]
 801b4fa:	4a09      	ldr	r2, [pc, #36]	; (801b520 <_ZN17mainMenuPresenterD1Ev+0x34>)
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	605a      	str	r2, [r3, #4]
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	3304      	adds	r3, #4
 801b504:	4618      	mov	r0, r3
 801b506:	f7ff ffd1 	bl	801b4ac <_ZN13ModelListenerD1Ev>
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	4618      	mov	r0, r3
 801b50e:	f7ff ff89 	bl	801b424 <_ZN8touchgfx9PresenterD1Ev>
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	4618      	mov	r0, r3
 801b516:	3708      	adds	r7, #8
 801b518:	46bd      	mov	sp, r7
 801b51a:	bd80      	pop	{r7, pc}
 801b51c:	080226d4 	.word	0x080226d4
 801b520:	080226ec 	.word	0x080226ec

0801b524 <_ZThn4_N17mainMenuPresenterD1Ev>:
 801b524:	f1a0 0004 	sub.w	r0, r0, #4
 801b528:	e7e0      	b.n	801b4ec <_ZN17mainMenuPresenterD1Ev>
 801b52a:	bf00      	nop

0801b52c <_ZN17mainMenuPresenterD0Ev>:
 801b52c:	b580      	push	{r7, lr}
 801b52e:	b082      	sub	sp, #8
 801b530:	af00      	add	r7, sp, #0
 801b532:	6078      	str	r0, [r7, #4]
 801b534:	6878      	ldr	r0, [r7, #4]
 801b536:	f7ff ffd9 	bl	801b4ec <_ZN17mainMenuPresenterD1Ev>
 801b53a:	2110      	movs	r1, #16
 801b53c:	6878      	ldr	r0, [r7, #4]
 801b53e:	f004 fc5a 	bl	801fdf6 <_ZdlPvj>
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	4618      	mov	r0, r3
 801b546:	3708      	adds	r7, #8
 801b548:	46bd      	mov	sp, r7
 801b54a:	bd80      	pop	{r7, pc}

0801b54c <_ZThn4_N17mainMenuPresenterD0Ev>:
 801b54c:	f1a0 0004 	sub.w	r0, r0, #4
 801b550:	e7ec      	b.n	801b52c <_ZN17mainMenuPresenterD0Ev>
	...

0801b554 <_ZN17mainMenuPresenterC1ER12mainMenuView>:
#include <gui/mainmenu_screen/mainMenuView.hpp>
#include <gui/mainmenu_screen/mainMenuPresenter.hpp>

mainMenuPresenter::mainMenuPresenter(mainMenuView& v)
 801b554:	b580      	push	{r7, lr}
 801b556:	b082      	sub	sp, #8
 801b558:	af00      	add	r7, sp, #0
 801b55a:	6078      	str	r0, [r7, #4]
 801b55c:	6039      	str	r1, [r7, #0]
    : view(v)
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	4618      	mov	r0, r3
 801b562:	f7ff ff7f 	bl	801b464 <_ZN8touchgfx9PresenterC1Ev>
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	3304      	adds	r3, #4
 801b56a:	4618      	mov	r0, r3
 801b56c:	f7ff ff8a 	bl	801b484 <_ZN13ModelListenerC1Ev>
 801b570:	4a06      	ldr	r2, [pc, #24]	; (801b58c <_ZN17mainMenuPresenterC1ER12mainMenuView+0x38>)
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	601a      	str	r2, [r3, #0]
 801b576:	4a06      	ldr	r2, [pc, #24]	; (801b590 <_ZN17mainMenuPresenterC1ER12mainMenuView+0x3c>)
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	605a      	str	r2, [r3, #4]
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	683a      	ldr	r2, [r7, #0]
 801b580:	60da      	str	r2, [r3, #12]
{
}
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	4618      	mov	r0, r3
 801b586:	3708      	adds	r7, #8
 801b588:	46bd      	mov	sp, r7
 801b58a:	bd80      	pop	{r7, pc}
 801b58c:	080226d4 	.word	0x080226d4
 801b590:	080226ec 	.word	0x080226ec

0801b594 <_ZN17mainMenuPresenter8activateEv>:

void mainMenuPresenter::activate()
{
 801b594:	b480      	push	{r7}
 801b596:	b083      	sub	sp, #12
 801b598:	af00      	add	r7, sp, #0
 801b59a:	6078      	str	r0, [r7, #4]

}
 801b59c:	bf00      	nop
 801b59e:	370c      	adds	r7, #12
 801b5a0:	46bd      	mov	sp, r7
 801b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5a6:	4770      	bx	lr

0801b5a8 <_ZN17mainMenuPresenter10deactivateEv>:

void mainMenuPresenter::deactivate()
{
 801b5a8:	b480      	push	{r7}
 801b5aa:	b083      	sub	sp, #12
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	6078      	str	r0, [r7, #4]

}
 801b5b0:	bf00      	nop
 801b5b2:	370c      	adds	r7, #12
 801b5b4:	46bd      	mov	sp, r7
 801b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ba:	4770      	bx	lr

0801b5bc <_ZN12mainMenuViewD1Ev>:

class mainMenuView : public mainMenuViewBase
{
public:
    mainMenuView();
    virtual ~mainMenuView() {}
 801b5bc:	b580      	push	{r7, lr}
 801b5be:	b082      	sub	sp, #8
 801b5c0:	af00      	add	r7, sp, #0
 801b5c2:	6078      	str	r0, [r7, #4]
 801b5c4:	4a05      	ldr	r2, [pc, #20]	; (801b5dc <_ZN12mainMenuViewD1Ev+0x20>)
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	601a      	str	r2, [r3, #0]
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	4618      	mov	r0, r3
 801b5ce:	f7fe ff93 	bl	801a4f8 <_ZN16mainMenuViewBaseD1Ev>
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	4618      	mov	r0, r3
 801b5d6:	3708      	adds	r7, #8
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bd80      	pop	{r7, pc}
 801b5dc:	08022724 	.word	0x08022724

0801b5e0 <_ZN12mainMenuViewD0Ev>:
 801b5e0:	b580      	push	{r7, lr}
 801b5e2:	b082      	sub	sp, #8
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	6078      	str	r0, [r7, #4]
 801b5e8:	6878      	ldr	r0, [r7, #4]
 801b5ea:	f7ff ffe7 	bl	801b5bc <_ZN12mainMenuViewD1Ev>
 801b5ee:	f44f 714b 	mov.w	r1, #812	; 0x32c
 801b5f2:	6878      	ldr	r0, [r7, #4]
 801b5f4:	f004 fbff 	bl	801fdf6 <_ZdlPvj>
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	3708      	adds	r7, #8
 801b5fe:	46bd      	mov	sp, r7
 801b600:	bd80      	pop	{r7, pc}
	...

0801b604 <_ZN12mainMenuViewC1Ev>:
#include <gui/mainmenu_screen/mainMenuView.hpp>

mainMenuView::mainMenuView()
 801b604:	b580      	push	{r7, lr}
 801b606:	b082      	sub	sp, #8
 801b608:	af00      	add	r7, sp, #0
 801b60a:	6078      	str	r0, [r7, #4]
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	4618      	mov	r0, r3
 801b610:	f7fe ffbe 	bl	801a590 <_ZN16mainMenuViewBaseC1Ev>
 801b614:	4a03      	ldr	r2, [pc, #12]	; (801b624 <_ZN12mainMenuViewC1Ev+0x20>)
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	601a      	str	r2, [r3, #0]
{

}
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	4618      	mov	r0, r3
 801b61e:	3708      	adds	r7, #8
 801b620:	46bd      	mov	sp, r7
 801b622:	bd80      	pop	{r7, pc}
 801b624:	08022724 	.word	0x08022724

0801b628 <_ZN12mainMenuView11setupScreenEv>:

void mainMenuView::setupScreen()
{
 801b628:	b580      	push	{r7, lr}
 801b62a:	b082      	sub	sp, #8
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	6078      	str	r0, [r7, #4]
    mainMenuViewBase::setupScreen();
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	4618      	mov	r0, r3
 801b634:	f7ff f896 	bl	801a764 <_ZN16mainMenuViewBase11setupScreenEv>
}
 801b638:	bf00      	nop
 801b63a:	3708      	adds	r7, #8
 801b63c:	46bd      	mov	sp, r7
 801b63e:	bd80      	pop	{r7, pc}

0801b640 <_ZN12mainMenuView14tearDownScreenEv>:

void mainMenuView::tearDownScreen()
{
 801b640:	b580      	push	{r7, lr}
 801b642:	b082      	sub	sp, #8
 801b644:	af00      	add	r7, sp, #0
 801b646:	6078      	str	r0, [r7, #4]
    mainMenuViewBase::tearDownScreen();
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	4618      	mov	r0, r3
 801b64c:	f7fe fee2 	bl	801a414 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801b650:	bf00      	nop
 801b652:	3708      	adds	r7, #8
 801b654:	46bd      	mov	sp, r7
 801b656:	bd80      	pop	{r7, pc}

0801b658 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801b658:	b480      	push	{r7}
 801b65a:	b083      	sub	sp, #12
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	6078      	str	r0, [r7, #4]
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	2200      	movs	r2, #0
 801b664:	601a      	str	r2, [r3, #0]
{
}
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	4618      	mov	r0, r3
 801b66a:	370c      	adds	r7, #12
 801b66c:	46bd      	mov	sp, r7
 801b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b672:	4770      	bx	lr

0801b674 <_ZN5Model4tickEv>:

void Model::tick()
{
 801b674:	b480      	push	{r7}
 801b676:	b083      	sub	sp, #12
 801b678:	af00      	add	r7, sp, #0
 801b67a:	6078      	str	r0, [r7, #4]
}
 801b67c:	bf00      	nop
 801b67e:	370c      	adds	r7, #12
 801b680:	46bd      	mov	sp, r7
 801b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b686:	4770      	bx	lr

0801b688 <_ZN22StartUpScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~StartUpScreenPresenter() {};
 801b688:	b580      	push	{r7, lr}
 801b68a:	b082      	sub	sp, #8
 801b68c:	af00      	add	r7, sp, #0
 801b68e:	6078      	str	r0, [r7, #4]
 801b690:	4a09      	ldr	r2, [pc, #36]	; (801b6b8 <_ZN22StartUpScreenPresenterD1Ev+0x30>)
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	601a      	str	r2, [r3, #0]
 801b696:	4a09      	ldr	r2, [pc, #36]	; (801b6bc <_ZN22StartUpScreenPresenterD1Ev+0x34>)
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	605a      	str	r2, [r3, #4]
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	3304      	adds	r3, #4
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	f7ff ff03 	bl	801b4ac <_ZN13ModelListenerD1Ev>
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	f7ff febb 	bl	801b424 <_ZN8touchgfx9PresenterD1Ev>
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	3708      	adds	r7, #8
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	bd80      	pop	{r7, pc}
 801b6b8:	0802275c 	.word	0x0802275c
 801b6bc:	08022774 	.word	0x08022774

0801b6c0 <_ZThn4_N22StartUpScreenPresenterD1Ev>:
 801b6c0:	f1a0 0004 	sub.w	r0, r0, #4
 801b6c4:	e7e0      	b.n	801b688 <_ZN22StartUpScreenPresenterD1Ev>
 801b6c6:	bf00      	nop

0801b6c8 <_ZN22StartUpScreenPresenterD0Ev>:
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	b082      	sub	sp, #8
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	6078      	str	r0, [r7, #4]
 801b6d0:	6878      	ldr	r0, [r7, #4]
 801b6d2:	f7ff ffd9 	bl	801b688 <_ZN22StartUpScreenPresenterD1Ev>
 801b6d6:	2110      	movs	r1, #16
 801b6d8:	6878      	ldr	r0, [r7, #4]
 801b6da:	f004 fb8c 	bl	801fdf6 <_ZdlPvj>
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	4618      	mov	r0, r3
 801b6e2:	3708      	adds	r7, #8
 801b6e4:	46bd      	mov	sp, r7
 801b6e6:	bd80      	pop	{r7, pc}

0801b6e8 <_ZThn4_N22StartUpScreenPresenterD0Ev>:
 801b6e8:	f1a0 0004 	sub.w	r0, r0, #4
 801b6ec:	e7ec      	b.n	801b6c8 <_ZN22StartUpScreenPresenterD0Ev>
	...

0801b6f0 <_ZN22StartUpScreenPresenterC1ER17StartUpScreenView>:
#include <gui/startupscreen_screen/StartUpScreenView.hpp>
#include <gui/startupscreen_screen/StartUpScreenPresenter.hpp>

StartUpScreenPresenter::StartUpScreenPresenter(StartUpScreenView& v)
 801b6f0:	b580      	push	{r7, lr}
 801b6f2:	b082      	sub	sp, #8
 801b6f4:	af00      	add	r7, sp, #0
 801b6f6:	6078      	str	r0, [r7, #4]
 801b6f8:	6039      	str	r1, [r7, #0]
    : view(v)
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	f7ff feb1 	bl	801b464 <_ZN8touchgfx9PresenterC1Ev>
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	3304      	adds	r3, #4
 801b706:	4618      	mov	r0, r3
 801b708:	f7ff febc 	bl	801b484 <_ZN13ModelListenerC1Ev>
 801b70c:	4a06      	ldr	r2, [pc, #24]	; (801b728 <_ZN22StartUpScreenPresenterC1ER17StartUpScreenView+0x38>)
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	601a      	str	r2, [r3, #0]
 801b712:	4a06      	ldr	r2, [pc, #24]	; (801b72c <_ZN22StartUpScreenPresenterC1ER17StartUpScreenView+0x3c>)
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	605a      	str	r2, [r3, #4]
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	683a      	ldr	r2, [r7, #0]
 801b71c:	60da      	str	r2, [r3, #12]
{
}
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	4618      	mov	r0, r3
 801b722:	3708      	adds	r7, #8
 801b724:	46bd      	mov	sp, r7
 801b726:	bd80      	pop	{r7, pc}
 801b728:	0802275c 	.word	0x0802275c
 801b72c:	08022774 	.word	0x08022774

0801b730 <_ZN22StartUpScreenPresenter8activateEv>:

void StartUpScreenPresenter::activate()
{
 801b730:	b480      	push	{r7}
 801b732:	b083      	sub	sp, #12
 801b734:	af00      	add	r7, sp, #0
 801b736:	6078      	str	r0, [r7, #4]

}
 801b738:	bf00      	nop
 801b73a:	370c      	adds	r7, #12
 801b73c:	46bd      	mov	sp, r7
 801b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b742:	4770      	bx	lr

0801b744 <_ZN22StartUpScreenPresenter10deactivateEv>:

void StartUpScreenPresenter::deactivate()
{
 801b744:	b480      	push	{r7}
 801b746:	b083      	sub	sp, #12
 801b748:	af00      	add	r7, sp, #0
 801b74a:	6078      	str	r0, [r7, #4]

}
 801b74c:	bf00      	nop
 801b74e:	370c      	adds	r7, #12
 801b750:	46bd      	mov	sp, r7
 801b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b756:	4770      	bx	lr

0801b758 <_ZN17StartUpScreenViewD1Ev>:

class StartUpScreenView : public StartUpScreenViewBase
{
public:
    StartUpScreenView();
    virtual ~StartUpScreenView() {}
 801b758:	b580      	push	{r7, lr}
 801b75a:	b082      	sub	sp, #8
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	6078      	str	r0, [r7, #4]
 801b760:	4a05      	ldr	r2, [pc, #20]	; (801b778 <_ZN17StartUpScreenViewD1Ev+0x20>)
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	601a      	str	r2, [r3, #0]
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	4618      	mov	r0, r3
 801b76a:	f7ff fa07 	bl	801ab7c <_ZN21StartUpScreenViewBaseD1Ev>
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	4618      	mov	r0, r3
 801b772:	3708      	adds	r7, #8
 801b774:	46bd      	mov	sp, r7
 801b776:	bd80      	pop	{r7, pc}
 801b778:	08022784 	.word	0x08022784

0801b77c <_ZN17StartUpScreenViewD0Ev>:
 801b77c:	b580      	push	{r7, lr}
 801b77e:	b082      	sub	sp, #8
 801b780:	af00      	add	r7, sp, #0
 801b782:	6078      	str	r0, [r7, #4]
 801b784:	6878      	ldr	r0, [r7, #4]
 801b786:	f7ff ffe7 	bl	801b758 <_ZN17StartUpScreenViewD1Ev>
 801b78a:	2194      	movs	r1, #148	; 0x94
 801b78c:	6878      	ldr	r0, [r7, #4]
 801b78e:	f004 fb32 	bl	801fdf6 <_ZdlPvj>
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	4618      	mov	r0, r3
 801b796:	3708      	adds	r7, #8
 801b798:	46bd      	mov	sp, r7
 801b79a:	bd80      	pop	{r7, pc}

0801b79c <_ZN17StartUpScreenViewC1Ev>:
#include <gui/startupscreen_screen/StartUpScreenView.hpp>

StartUpScreenView::StartUpScreenView()
 801b79c:	b580      	push	{r7, lr}
 801b79e:	b082      	sub	sp, #8
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	6078      	str	r0, [r7, #4]
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	4618      	mov	r0, r3
 801b7a8:	f7ff fa20 	bl	801abec <_ZN21StartUpScreenViewBaseC1Ev>
 801b7ac:	4a03      	ldr	r2, [pc, #12]	; (801b7bc <_ZN17StartUpScreenViewC1Ev+0x20>)
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	601a      	str	r2, [r3, #0]
{

}
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	3708      	adds	r7, #8
 801b7b8:	46bd      	mov	sp, r7
 801b7ba:	bd80      	pop	{r7, pc}
 801b7bc:	08022784 	.word	0x08022784

0801b7c0 <_ZN17StartUpScreenView11setupScreenEv>:

void StartUpScreenView::setupScreen()
{
 801b7c0:	b580      	push	{r7, lr}
 801b7c2:	b082      	sub	sp, #8
 801b7c4:	af00      	add	r7, sp, #0
 801b7c6:	6078      	str	r0, [r7, #4]
    StartUpScreenViewBase::setupScreen();
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	4618      	mov	r0, r3
 801b7cc:	f7ff fa58 	bl	801ac80 <_ZN21StartUpScreenViewBase11setupScreenEv>
}
 801b7d0:	bf00      	nop
 801b7d2:	3708      	adds	r7, #8
 801b7d4:	46bd      	mov	sp, r7
 801b7d6:	bd80      	pop	{r7, pc}

0801b7d8 <_ZN17StartUpScreenView14tearDownScreenEv>:

void StartUpScreenView::tearDownScreen()
{
 801b7d8:	b580      	push	{r7, lr}
 801b7da:	b082      	sub	sp, #8
 801b7dc:	af00      	add	r7, sp, #0
 801b7de:	6078      	str	r0, [r7, #4]
    StartUpScreenViewBase::tearDownScreen();
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	4618      	mov	r0, r3
 801b7e4:	f7fe fe16 	bl	801a414 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801b7e8:	bf00      	nop
 801b7ea:	3708      	adds	r7, #8
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	bd80      	pop	{r7, pc}

0801b7f0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801b7f0:	8880      	ldrh	r0, [r0, #4]
 801b7f2:	4770      	bx	lr

0801b7f4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	8083      	strh	r3, [r0, #4]
 801b7f8:	4770      	bx	lr
	...

0801b7fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7fe:	6803      	ldr	r3, [r0, #0]
 801b800:	460e      	mov	r6, r1
 801b802:	2100      	movs	r1, #0
 801b804:	4604      	mov	r4, r0
 801b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b808:	4798      	blx	r3
 801b80a:	4605      	mov	r5, r0
 801b80c:	6823      	ldr	r3, [r4, #0]
 801b80e:	4620      	mov	r0, r4
 801b810:	1b75      	subs	r5, r6, r5
 801b812:	6a1b      	ldr	r3, [r3, #32]
 801b814:	b2ad      	uxth	r5, r5
 801b816:	4798      	blx	r3
 801b818:	88a3      	ldrh	r3, [r4, #4]
 801b81a:	fbb5 f0f0 	udiv	r0, r5, r0
 801b81e:	4298      	cmp	r0, r3
 801b820:	b285      	uxth	r5, r0
 801b822:	db05      	blt.n	801b830 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 801b824:	4b0e      	ldr	r3, [pc, #56]	; (801b860 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801b826:	211e      	movs	r1, #30
 801b828:	4a0e      	ldr	r2, [pc, #56]	; (801b864 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801b82a:	480f      	ldr	r0, [pc, #60]	; (801b868 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801b82c:	f004 fb00 	bl	801fe30 <__assert_func>
 801b830:	6823      	ldr	r3, [r4, #0]
 801b832:	2100      	movs	r1, #0
 801b834:	4620      	mov	r0, r4
 801b836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b838:	4798      	blx	r3
 801b83a:	4607      	mov	r7, r0
 801b83c:	6823      	ldr	r3, [r4, #0]
 801b83e:	4620      	mov	r0, r4
 801b840:	1bf6      	subs	r6, r6, r7
 801b842:	6a1b      	ldr	r3, [r3, #32]
 801b844:	b2b6      	uxth	r6, r6
 801b846:	4798      	blx	r3
 801b848:	fbb6 f3f0 	udiv	r3, r6, r0
 801b84c:	fb03 6610 	mls	r6, r3, r0, r6
 801b850:	b11e      	cbz	r6, 801b85a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 801b852:	4b06      	ldr	r3, [pc, #24]	; (801b86c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 801b854:	211f      	movs	r1, #31
 801b856:	4a03      	ldr	r2, [pc, #12]	; (801b864 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801b858:	e7e7      	b.n	801b82a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 801b85a:	4628      	mov	r0, r5
 801b85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b85e:	bf00      	nop
 801b860:	080227b0 	.word	0x080227b0
 801b864:	0802291e 	.word	0x0802291e
 801b868:	080227c5 	.word	0x080227c5
 801b86c:	080227f3 	.word	0x080227f3

0801b870 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801b870:	b538      	push	{r3, r4, r5, lr}
 801b872:	6803      	ldr	r3, [r0, #0]
 801b874:	460d      	mov	r5, r1
 801b876:	4604      	mov	r4, r0
 801b878:	6a1b      	ldr	r3, [r3, #32]
 801b87a:	4798      	blx	r3
 801b87c:	4285      	cmp	r5, r0
 801b87e:	d905      	bls.n	801b88c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801b880:	4b0c      	ldr	r3, [pc, #48]	; (801b8b4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801b882:	212f      	movs	r1, #47	; 0x2f
 801b884:	4a0c      	ldr	r2, [pc, #48]	; (801b8b8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801b886:	480d      	ldr	r0, [pc, #52]	; (801b8bc <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801b888:	f004 fad2 	bl	801fe30 <__assert_func>
 801b88c:	6823      	ldr	r3, [r4, #0]
 801b88e:	4620      	mov	r0, r4
 801b890:	88a5      	ldrh	r5, [r4, #4]
 801b892:	69db      	ldr	r3, [r3, #28]
 801b894:	4798      	blx	r3
 801b896:	4285      	cmp	r5, r0
 801b898:	db03      	blt.n	801b8a2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801b89a:	4b09      	ldr	r3, [pc, #36]	; (801b8c0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801b89c:	2130      	movs	r1, #48	; 0x30
 801b89e:	4a06      	ldr	r2, [pc, #24]	; (801b8b8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801b8a0:	e7f1      	b.n	801b886 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801b8a2:	6823      	ldr	r3, [r4, #0]
 801b8a4:	4620      	mov	r0, r4
 801b8a6:	88a1      	ldrh	r1, [r4, #4]
 801b8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8aa:	4798      	blx	r3
 801b8ac:	88a3      	ldrh	r3, [r4, #4]
 801b8ae:	3301      	adds	r3, #1
 801b8b0:	80a3      	strh	r3, [r4, #4]
 801b8b2:	bd38      	pop	{r3, r4, r5, pc}
 801b8b4:	0802286d 	.word	0x0802286d
 801b8b8:	08022961 	.word	0x08022961
 801b8bc:	080227c5 	.word	0x080227c5
 801b8c0:	08022884 	.word	0x08022884

0801b8c4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801b8c4:	b570      	push	{r4, r5, r6, lr}
 801b8c6:	6803      	ldr	r3, [r0, #0]
 801b8c8:	4616      	mov	r6, r2
 801b8ca:	4604      	mov	r4, r0
 801b8cc:	460d      	mov	r5, r1
 801b8ce:	6a1b      	ldr	r3, [r3, #32]
 801b8d0:	4798      	blx	r3
 801b8d2:	4286      	cmp	r6, r0
 801b8d4:	d905      	bls.n	801b8e2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801b8d6:	4b06      	ldr	r3, [pc, #24]	; (801b8f0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801b8d8:	2139      	movs	r1, #57	; 0x39
 801b8da:	4a06      	ldr	r2, [pc, #24]	; (801b8f4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801b8dc:	4806      	ldr	r0, [pc, #24]	; (801b8f8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801b8de:	f004 faa7 	bl	801fe30 <__assert_func>
 801b8e2:	6823      	ldr	r3, [r4, #0]
 801b8e4:	4629      	mov	r1, r5
 801b8e6:	4620      	mov	r0, r4
 801b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b8ee:	4718      	bx	r3
 801b8f0:	0802286d 	.word	0x0802286d
 801b8f4:	080228d4 	.word	0x080228d4
 801b8f8:	080227c5 	.word	0x080227c5

0801b8fc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801b8fc:	4770      	bx	lr
	...

0801b900 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801b900:	4a02      	ldr	r2, [pc, #8]	; (801b90c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801b902:	6002      	str	r2, [r0, #0]
 801b904:	2200      	movs	r2, #0
 801b906:	8082      	strh	r2, [r0, #4]
 801b908:	4770      	bx	lr
 801b90a:	bf00      	nop
 801b90c:	080228a8 	.word	0x080228a8

0801b910 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801b910:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b914:	4770      	bx	lr

0801b916 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801b916:	2301      	movs	r3, #1
 801b918:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801b91c:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801b920:	4770      	bx	lr

0801b922 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801b922:	2301      	movs	r3, #1
 801b924:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801b928:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801b92c:	4770      	bx	lr

0801b92e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801b92e:	6843      	ldr	r3, [r0, #4]
 801b930:	2201      	movs	r2, #1
 801b932:	725a      	strb	r2, [r3, #9]
 801b934:	6840      	ldr	r0, [r0, #4]
 801b936:	6803      	ldr	r3, [r0, #0]
 801b938:	691b      	ldr	r3, [r3, #16]
 801b93a:	4718      	bx	r3

0801b93c <_ZN8touchgfx3HAL8flushDMAEv>:
 801b93c:	6840      	ldr	r0, [r0, #4]
 801b93e:	6803      	ldr	r3, [r0, #0]
 801b940:	689b      	ldr	r3, [r3, #8]
 801b942:	4718      	bx	r3

0801b944 <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 801b944:	4770      	bx	lr

0801b946 <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 801b946:	4608      	mov	r0, r1
 801b948:	4770      	bx	lr

0801b94a <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 801b94a:	4770      	bx	lr

0801b94c <_ZN8touchgfx3HAL10beginFrameEv>:
 801b94c:	4b04      	ldr	r3, [pc, #16]	; (801b960 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801b94e:	781b      	ldrb	r3, [r3, #0]
 801b950:	b123      	cbz	r3, 801b95c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801b952:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
 801b956:	f080 0001 	eor.w	r0, r0, #1
 801b95a:	4770      	bx	lr
 801b95c:	2001      	movs	r0, #1
 801b95e:	4770      	bx	lr
 801b960:	20009cd2 	.word	0x20009cd2

0801b964 <_ZN8touchgfx3HAL8endFrameEv>:
 801b964:	b510      	push	{r4, lr}
 801b966:	4604      	mov	r4, r0
 801b968:	6840      	ldr	r0, [r0, #4]
 801b96a:	6803      	ldr	r3, [r0, #0]
 801b96c:	689b      	ldr	r3, [r3, #8]
 801b96e:	4798      	blx	r3
 801b970:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801b974:	b113      	cbz	r3, 801b97c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801b976:	2301      	movs	r3, #1
 801b978:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801b97c:	bd10      	pop	{r4, pc}

0801b97e <_ZN8touchgfx3HAL9taskEntryEv>:
 801b97e:	b508      	push	{r3, lr}
 801b980:	6803      	ldr	r3, [r0, #0]
 801b982:	4604      	mov	r4, r0
 801b984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b986:	4798      	blx	r3
 801b988:	6823      	ldr	r3, [r4, #0]
 801b98a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801b98c:	4620      	mov	r0, r4
 801b98e:	4798      	blx	r3
 801b990:	f7f5 f956 	bl	8010c40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801b994:	6823      	ldr	r3, [r4, #0]
 801b996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b998:	e7f8      	b.n	801b98c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801b99c <_ZN8touchgfx3HAL4tickEv>:
 801b99c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b99e:	6803      	ldr	r3, [r0, #0]
 801b9a0:	4604      	mov	r4, r0
 801b9a2:	4d5d      	ldr	r5, [pc, #372]	; (801bb18 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801b9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b9a8:	4798      	blx	r3
 801b9aa:	2800      	cmp	r0, #0
 801b9ac:	f000 8092 	beq.w	801bad4 <_ZN8touchgfx3HAL4tickEv+0x138>
 801b9b0:	2001      	movs	r0, #1
 801b9b2:	2600      	movs	r6, #0
 801b9b4:	f7f9 f840 	bl	8014a38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801b9b8:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 801b9bc:	f884 6047 	strb.w	r6, [r4, #71]	; 0x47
 801b9c0:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801b9c4:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 801b9c8:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
 801b9cc:	b133      	cbz	r3, 801b9dc <_ZN8touchgfx3HAL4tickEv+0x40>
 801b9ce:	6823      	ldr	r3, [r4, #0]
 801b9d0:	4620      	mov	r0, r4
 801b9d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b9d6:	4798      	blx	r3
 801b9d8:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
 801b9dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801b9e0:	2601      	movs	r6, #1
 801b9e2:	6862      	ldr	r2, [r4, #4]
 801b9e4:	f083 0301 	eor.w	r3, r3, #1
 801b9e8:	702e      	strb	r6, [r5, #0]
 801b9ea:	7253      	strb	r3, [r2, #9]
 801b9ec:	f000 feca 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 801b9f0:	6803      	ldr	r3, [r0, #0]
 801b9f2:	4631      	mov	r1, r6
 801b9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9f6:	4798      	blx	r3
 801b9f8:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801b9fc:	b90b      	cbnz	r3, 801ba02 <_ZN8touchgfx3HAL4tickEv+0x66>
 801b9fe:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
 801ba02:	f000 febf 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 801ba06:	6803      	ldr	r3, [r0, #0]
 801ba08:	695b      	ldr	r3, [r3, #20]
 801ba0a:	4798      	blx	r3
 801ba0c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801ba0e:	6803      	ldr	r3, [r0, #0]
 801ba10:	691b      	ldr	r3, [r3, #16]
 801ba12:	4798      	blx	r3
 801ba14:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801ba18:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 801ba1c:	3b01      	subs	r3, #1
 801ba1e:	b2db      	uxtb	r3, r3
 801ba20:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801ba24:	b10a      	cbz	r2, 801ba2a <_ZN8touchgfx3HAL4tickEv+0x8e>
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d1eb      	bne.n	801ba02 <_ZN8touchgfx3HAL4tickEv+0x66>
 801ba2a:	4a3c      	ldr	r2, [pc, #240]	; (801bb1c <_ZN8touchgfx3HAL4tickEv+0x180>)
 801ba2c:	f994 1054 	ldrsb.w	r1, [r4, #84]	; 0x54
 801ba30:	7813      	ldrb	r3, [r2, #0]
 801ba32:	3301      	adds	r3, #1
 801ba34:	b25b      	sxtb	r3, r3
 801ba36:	4299      	cmp	r1, r3
 801ba38:	7013      	strb	r3, [r2, #0]
 801ba3a:	dc10      	bgt.n	801ba5e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	68e0      	ldr	r0, [r4, #12]
 801ba40:	a902      	add	r1, sp, #8
 801ba42:	7013      	strb	r3, [r2, #0]
 801ba44:	aa03      	add	r2, sp, #12
 801ba46:	6803      	ldr	r3, [r0, #0]
 801ba48:	68db      	ldr	r3, [r3, #12]
 801ba4a:	4798      	blx	r3
 801ba4c:	6823      	ldr	r3, [r4, #0]
 801ba4e:	2800      	cmp	r0, #0
 801ba50:	d04c      	beq.n	801baec <_ZN8touchgfx3HAL4tickEv+0x150>
 801ba52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ba56:	4620      	mov	r0, r4
 801ba58:	9a03      	ldr	r2, [sp, #12]
 801ba5a:	9902      	ldr	r1, [sp, #8]
 801ba5c:	4798      	blx	r3
 801ba5e:	2300      	movs	r3, #0
 801ba60:	6960      	ldr	r0, [r4, #20]
 801ba62:	f88d 3007 	strb.w	r3, [sp, #7]
 801ba66:	b130      	cbz	r0, 801ba76 <_ZN8touchgfx3HAL4tickEv+0xda>
 801ba68:	6803      	ldr	r3, [r0, #0]
 801ba6a:	f10d 0107 	add.w	r1, sp, #7
 801ba6e:	68db      	ldr	r3, [r3, #12]
 801ba70:	4798      	blx	r3
 801ba72:	2800      	cmp	r0, #0
 801ba74:	d149      	bne.n	801bb0a <_ZN8touchgfx3HAL4tickEv+0x16e>
 801ba76:	f104 0018 	add.w	r0, r4, #24
 801ba7a:	f004 f90f 	bl	801fc9c <_ZN8touchgfx8Gestures4tickEv>
 801ba7e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801ba82:	b30b      	cbz	r3, 801bac8 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801ba84:	6920      	ldr	r0, [r4, #16]
 801ba86:	6803      	ldr	r3, [r0, #0]
 801ba88:	691b      	ldr	r3, [r3, #16]
 801ba8a:	4798      	blx	r3
 801ba8c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801ba8e:	4606      	mov	r6, r0
 801ba90:	b903      	cbnz	r3, 801ba94 <_ZN8touchgfx3HAL4tickEv+0xf8>
 801ba92:	6620      	str	r0, [r4, #96]	; 0x60
 801ba94:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801ba96:	4a22      	ldr	r2, [pc, #136]	; (801bb20 <_ZN8touchgfx3HAL4tickEv+0x184>)
 801ba98:	1af3      	subs	r3, r6, r3
 801ba9a:	4293      	cmp	r3, r2
 801ba9c:	d914      	bls.n	801bac8 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801ba9e:	6920      	ldr	r0, [r4, #16]
 801baa0:	6803      	ldr	r3, [r0, #0]
 801baa2:	699b      	ldr	r3, [r3, #24]
 801baa4:	4798      	blx	r3
 801baa6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801baa8:	2264      	movs	r2, #100	; 0x64
 801baaa:	1af3      	subs	r3, r6, r3
 801baac:	fbb3 f3f2 	udiv	r3, r3, r2
 801bab0:	fbb0 f0f3 	udiv	r0, r0, r3
 801bab4:	2800      	cmp	r0, #0
 801bab6:	dc1e      	bgt.n	801baf6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801bab8:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 801babc:	6920      	ldr	r0, [r4, #16]
 801babe:	2100      	movs	r1, #0
 801bac0:	6803      	ldr	r3, [r0, #0]
 801bac2:	69db      	ldr	r3, [r3, #28]
 801bac4:	4798      	blx	r3
 801bac6:	6626      	str	r6, [r4, #96]	; 0x60
 801bac8:	f000 fe5c 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 801bacc:	6803      	ldr	r3, [r0, #0]
 801bace:	2100      	movs	r1, #0
 801bad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bad2:	4798      	blx	r3
 801bad4:	6823      	ldr	r3, [r4, #0]
 801bad6:	4620      	mov	r0, r4
 801bad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801badc:	4798      	blx	r3
 801bade:	2001      	movs	r0, #1
 801bae0:	f7f8 ffb5 	bl	8014a4e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801bae4:	2300      	movs	r3, #0
 801bae6:	702b      	strb	r3, [r5, #0]
 801bae8:	b004      	add	sp, #16
 801baea:	bd70      	pop	{r4, r5, r6, pc}
 801baec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801baf0:	4620      	mov	r0, r4
 801baf2:	4798      	blx	r3
 801baf4:	e7b3      	b.n	801ba5e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801baf6:	2863      	cmp	r0, #99	; 0x63
 801baf8:	bfcb      	itete	gt
 801bafa:	2300      	movgt	r3, #0
 801bafc:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801bb00:	f884 3055 	strbgt.w	r3, [r4, #85]	; 0x55
 801bb04:	f884 0055 	strble.w	r0, [r4, #85]	; 0x55
 801bb08:	e7d8      	b.n	801babc <_ZN8touchgfx3HAL4tickEv+0x120>
 801bb0a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801bb0c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801bb10:	6803      	ldr	r3, [r0, #0]
 801bb12:	68db      	ldr	r3, [r3, #12]
 801bb14:	4798      	blx	r3
 801bb16:	e7ae      	b.n	801ba76 <_ZN8touchgfx3HAL4tickEv+0xda>
 801bb18:	20009cd8 	.word	0x20009cd8
 801bb1c:	20009cd9 	.word	0x20009cd9
 801bb20:	05f5e100 	.word	0x05f5e100

0801bb24 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801bb24:	f7f5 b824 	b.w	8010b70 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801bb28 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801bb28:	6481      	str	r1, [r0, #72]	; 0x48
 801bb2a:	3018      	adds	r0, #24
 801bb2c:	f004 b8b4 	b.w	801fc98 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801bb30 <_ZN8touchgfx3HAL5touchEll>:
 801bb30:	b530      	push	{r4, r5, lr}
 801bb32:	b085      	sub	sp, #20
 801bb34:	4604      	mov	r4, r0
 801bb36:	a802      	add	r0, sp, #8
 801bb38:	9102      	str	r1, [sp, #8]
 801bb3a:	9203      	str	r2, [sp, #12]
 801bb3c:	f000 fc52 	bl	801c3e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801bb40:	a903      	add	r1, sp, #12
 801bb42:	a802      	add	r0, sp, #8
 801bb44:	f000 fc9c 	bl	801c480 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801bb48:	f894 105b 	ldrb.w	r1, [r4, #91]	; 0x5b
 801bb4c:	9d02      	ldr	r5, [sp, #8]
 801bb4e:	f104 0018 	add.w	r0, r4, #24
 801bb52:	9b03      	ldr	r3, [sp, #12]
 801bb54:	b179      	cbz	r1, 801bb76 <_ZN8touchgfx3HAL5touchEll+0x46>
 801bb56:	b29b      	uxth	r3, r3
 801bb58:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 801bb5c:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 801bb60:	9300      	str	r3, [sp, #0]
 801bb62:	b2ab      	uxth	r3, r5
 801bb64:	f004 f8a8 	bl	801fcb8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801bb68:	b118      	cbz	r0, 801bb72 <_ZN8touchgfx3HAL5touchEll+0x42>
 801bb6a:	9b02      	ldr	r3, [sp, #8]
 801bb6c:	64e3      	str	r3, [r4, #76]	; 0x4c
 801bb6e:	9b03      	ldr	r3, [sp, #12]
 801bb70:	6523      	str	r3, [r4, #80]	; 0x50
 801bb72:	b005      	add	sp, #20
 801bb74:	bd30      	pop	{r4, r5, pc}
 801bb76:	b29b      	uxth	r3, r3
 801bb78:	b2aa      	uxth	r2, r5
 801bb7a:	f004 f8e1 	bl	801fd40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801bb7e:	2301      	movs	r3, #1
 801bb80:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801bb84:	e7f1      	b.n	801bb6a <_ZN8touchgfx3HAL5touchEll+0x3a>

0801bb86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801bb86:	b530      	push	{r4, r5, lr}
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d04e      	beq.n	801bc2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801bb8c:	ea81 0002 	eor.w	r0, r1, r2
 801bb90:	07c0      	lsls	r0, r0, #31
 801bb92:	d508      	bpl.n	801bba6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801bb94:	3a01      	subs	r2, #1
 801bb96:	440b      	add	r3, r1
 801bb98:	4299      	cmp	r1, r3
 801bb9a:	d046      	beq.n	801bc2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801bb9c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801bba0:	f801 0b01 	strb.w	r0, [r1], #1
 801bba4:	e7f8      	b.n	801bb98 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801bba6:	07d5      	lsls	r5, r2, #31
 801bba8:	bf42      	ittt	mi
 801bbaa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801bbae:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801bbb2:	f801 0b01 	strbmi.w	r0, [r1], #1
 801bbb6:	2b01      	cmp	r3, #1
 801bbb8:	d915      	bls.n	801bbe6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801bbba:	ea81 0002 	eor.w	r0, r1, r2
 801bbbe:	0784      	lsls	r4, r0, #30
 801bbc0:	d01f      	beq.n	801bc02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 801bbc2:	1e95      	subs	r5, r2, #2
 801bbc4:	460c      	mov	r4, r1
 801bbc6:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 801bbca:	f824 0b02 	strh.w	r0, [r4], #2
 801bbce:	1b18      	subs	r0, r3, r4
 801bbd0:	4408      	add	r0, r1
 801bbd2:	2801      	cmp	r0, #1
 801bbd4:	d8f7      	bhi.n	801bbc6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 801bbd6:	1e98      	subs	r0, r3, #2
 801bbd8:	f003 0301 	and.w	r3, r3, #1
 801bbdc:	f020 0001 	bic.w	r0, r0, #1
 801bbe0:	3002      	adds	r0, #2
 801bbe2:	4401      	add	r1, r0
 801bbe4:	4402      	add	r2, r0
 801bbe6:	3a01      	subs	r2, #1
 801bbe8:	440b      	add	r3, r1
 801bbea:	4299      	cmp	r1, r3
 801bbec:	d01d      	beq.n	801bc2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801bbee:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801bbf2:	f801 0b01 	strb.w	r0, [r1], #1
 801bbf6:	e7f8      	b.n	801bbea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 801bbf8:	f855 4f04 	ldr.w	r4, [r5, #4]!
 801bbfc:	f840 4b04 	str.w	r4, [r0], #4
 801bc00:	e008      	b.n	801bc14 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801bc02:	0790      	lsls	r0, r2, #30
 801bc04:	d004      	beq.n	801bc10 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 801bc06:	f832 0b02 	ldrh.w	r0, [r2], #2
 801bc0a:	3b02      	subs	r3, #2
 801bc0c:	f821 0b02 	strh.w	r0, [r1], #2
 801bc10:	1f15      	subs	r5, r2, #4
 801bc12:	4608      	mov	r0, r1
 801bc14:	1a1c      	subs	r4, r3, r0
 801bc16:	440c      	add	r4, r1
 801bc18:	2c03      	cmp	r4, #3
 801bc1a:	d8ed      	bhi.n	801bbf8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 801bc1c:	f023 0003 	bic.w	r0, r3, #3
 801bc20:	f003 0303 	and.w	r3, r3, #3
 801bc24:	4402      	add	r2, r0
 801bc26:	4401      	add	r1, r0
 801bc28:	e7dd      	b.n	801bbe6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801bc2a:	2001      	movs	r0, #1
 801bc2c:	bd30      	pop	{r4, r5, pc}

0801bc2e <_ZN8touchgfx3HAL7noTouchEv>:
 801bc2e:	b510      	push	{r4, lr}
 801bc30:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
 801bc34:	4604      	mov	r4, r0
 801bc36:	b153      	cbz	r3, 801bc4e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801bc38:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801bc3c:	2101      	movs	r1, #1
 801bc3e:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 801bc42:	3018      	adds	r0, #24
 801bc44:	f004 f87c 	bl	801fd40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801bc48:	2300      	movs	r3, #0
 801bc4a:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801bc4e:	bd10      	pop	{r4, pc}

0801bc50 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801bc50:	4b07      	ldr	r3, [pc, #28]	; (801bc70 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801bc52:	b510      	push	{r4, lr}
 801bc54:	781b      	ldrb	r3, [r3, #0]
 801bc56:	4604      	mov	r4, r0
 801bc58:	b12b      	cbz	r3, 801bc66 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 801bc5a:	6803      	ldr	r3, [r0, #0]
 801bc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc5e:	4798      	blx	r3
 801bc60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bc62:	4283      	cmp	r3, r0
 801bc64:	d001      	beq.n	801bc6a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801bc66:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801bc68:	bd10      	pop	{r4, pc}
 801bc6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801bc6c:	bd10      	pop	{r4, pc}
 801bc6e:	bf00      	nop
 801bc70:	20009cd2 	.word	0x20009cd2

0801bc74 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801bc74:	4b0a      	ldr	r3, [pc, #40]	; (801bca0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 801bc76:	b510      	push	{r4, lr}
 801bc78:	781b      	ldrb	r3, [r3, #0]
 801bc7a:	4604      	mov	r4, r0
 801bc7c:	b12b      	cbz	r3, 801bc8a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 801bc7e:	f7f4 ff59 	bl	8010b34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801bc82:	4620      	mov	r0, r4
 801bc84:	f7ff ffe4 	bl	801bc50 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801bc88:	bd10      	pop	{r4, pc}
 801bc8a:	6840      	ldr	r0, [r0, #4]
 801bc8c:	f000 fb3e 	bl	801c30c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801bc90:	2800      	cmp	r0, #0
 801bc92:	d0f4      	beq.n	801bc7e <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801bc94:	6862      	ldr	r2, [r4, #4]
 801bc96:	7a53      	ldrb	r3, [r2, #9]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d0fc      	beq.n	801bc96 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801bc9c:	e7ef      	b.n	801bc7e <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801bc9e:	bf00      	nop
 801bca0:	20009cd2 	.word	0x20009cd2

0801bca4 <_ZN8touchgfx3HAL10initializeEv>:
 801bca4:	b510      	push	{r4, lr}
 801bca6:	4604      	mov	r4, r0
 801bca8:	f7f4 ff16 	bl	8010ad8 <_ZN8touchgfx10OSWrappers10initializeEv>
 801bcac:	6860      	ldr	r0, [r4, #4]
 801bcae:	6803      	ldr	r3, [r0, #0]
 801bcb0:	68db      	ldr	r3, [r3, #12]
 801bcb2:	4798      	blx	r3
 801bcb4:	68e0      	ldr	r0, [r4, #12]
 801bcb6:	6803      	ldr	r3, [r0, #0]
 801bcb8:	689b      	ldr	r3, [r3, #8]
 801bcba:	4798      	blx	r3
 801bcbc:	6823      	ldr	r3, [r4, #0]
 801bcbe:	4620      	mov	r0, r4
 801bcc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bcc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcc6:	4718      	bx	r3

0801bcc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcca:	461d      	mov	r5, r3
 801bccc:	4b0b      	ldr	r3, [pc, #44]	; (801bcfc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801bcce:	4617      	mov	r7, r2
 801bcd0:	460e      	mov	r6, r1
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	6898      	ldr	r0, [r3, #8]
 801bcd6:	6803      	ldr	r3, [r0, #0]
 801bcd8:	6a1b      	ldr	r3, [r3, #32]
 801bcda:	4798      	blx	r3
 801bcdc:	4b08      	ldr	r3, [pc, #32]	; (801bd00 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x38>)
 801bcde:	2810      	cmp	r0, #16
 801bce0:	bf15      	itete	ne
 801bce2:	881c      	ldrhne	r4, [r3, #0]
 801bce4:	8818      	ldrheq	r0, [r3, #0]
 801bce6:	fb07 6204 	mlane	r2, r7, r4, r6
 801bcea:	fb07 6200 	mlaeq	r2, r7, r0, r6
 801bcee:	bf16      	itet	ne
 801bcf0:	eb02 0242 	addne.w	r2, r2, r2, lsl #1
 801bcf4:	eb05 0042 	addeq.w	r0, r5, r2, lsl #1
 801bcf8:	18a8      	addne	r0, r5, r2
 801bcfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcfc:	20009cd4 	.word	0x20009cd4
 801bd00:	20009cce 	.word	0x20009cce

0801bd04 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801bd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd08:	b088      	sub	sp, #32
 801bd0a:	4698      	mov	r8, r3
 801bd0c:	4617      	mov	r7, r2
 801bd0e:	2200      	movs	r2, #0
 801bd10:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801bd14:	4604      	mov	r4, r0
 801bd16:	9206      	str	r2, [sp, #24]
 801bd18:	2bff      	cmp	r3, #255	; 0xff
 801bd1a:	f88d 301c 	strb.w	r3, [sp, #28]
 801bd1e:	4b1d      	ldr	r3, [pc, #116]	; (801bd94 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x90>)
 801bd20:	bf0c      	ite	eq
 801bd22:	2201      	moveq	r2, #1
 801bd24:	2204      	movne	r2, #4
 801bd26:	881b      	ldrh	r3, [r3, #0]
 801bd28:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801bd2c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801bd30:	9201      	str	r2, [sp, #4]
 801bd32:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801bd36:	9102      	str	r1, [sp, #8]
 801bd38:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bd3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bd40:	f8ad 6010 	strh.w	r6, [sp, #16]
 801bd44:	f8ad 5012 	strh.w	r5, [sp, #18]
 801bd48:	f7ff ff82 	bl	801bc50 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801bd4c:	4642      	mov	r2, r8
 801bd4e:	4603      	mov	r3, r0
 801bd50:	4639      	mov	r1, r7
 801bd52:	4620      	mov	r0, r4
 801bd54:	f7ff ffb8 	bl	801bcc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801bd58:	9003      	str	r0, [sp, #12]
 801bd5a:	b106      	cbz	r6, 801bd5e <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x5a>
 801bd5c:	b935      	cbnz	r5, 801bd6c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x68>
 801bd5e:	4b0e      	ldr	r3, [pc, #56]	; (801bd98 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x94>)
 801bd60:	f240 1143 	movw	r1, #323	; 0x143
 801bd64:	4a0d      	ldr	r2, [pc, #52]	; (801bd9c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801bd66:	480e      	ldr	r0, [pc, #56]	; (801bda0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x9c>)
 801bd68:	f004 f862 	bl	801fe30 <__assert_func>
 801bd6c:	6823      	ldr	r3, [r4, #0]
 801bd6e:	4620      	mov	r0, r4
 801bd70:	9d01      	ldr	r5, [sp, #4]
 801bd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd74:	4798      	blx	r3
 801bd76:	4228      	tst	r0, r5
 801bd78:	d104      	bne.n	801bd84 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x80>
 801bd7a:	4b0a      	ldr	r3, [pc, #40]	; (801bda4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0xa0>)
 801bd7c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801bd80:	4a06      	ldr	r2, [pc, #24]	; (801bd9c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801bd82:	e7f0      	b.n	801bd66 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x62>
 801bd84:	6860      	ldr	r0, [r4, #4]
 801bd86:	a901      	add	r1, sp, #4
 801bd88:	6803      	ldr	r3, [r0, #0]
 801bd8a:	685b      	ldr	r3, [r3, #4]
 801bd8c:	4798      	blx	r3
 801bd8e:	b008      	add	sp, #32
 801bd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd94:	20009cce 	.word	0x20009cce
 801bd98:	08022a0d 	.word	0x08022a0d
 801bd9c:	08022cbb 	.word	0x08022cbb
 801bda0:	08022a45 	.word	0x08022a45
 801bda4:	08022a6b 	.word	0x08022a6b

0801bda8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801bda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdac:	4698      	mov	r8, r3
 801bdae:	b088      	sub	sp, #32
 801bdb0:	2300      	movs	r3, #0
 801bdb2:	4617      	mov	r7, r2
 801bdb4:	4604      	mov	r4, r0
 801bdb6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801bdba:	9306      	str	r3, [sp, #24]
 801bdbc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801bdc0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801bdc4:	9301      	str	r3, [sp, #4]
 801bdc6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801bdca:	9102      	str	r1, [sp, #8]
 801bdcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bdd0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801bdd4:	f8ad 6010 	strh.w	r6, [sp, #16]
 801bdd8:	f88d 301c 	strb.w	r3, [sp, #28]
 801bddc:	f8ad 5012 	strh.w	r5, [sp, #18]
 801bde0:	f7ff ff36 	bl	801bc50 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801bde4:	4642      	mov	r2, r8
 801bde6:	4603      	mov	r3, r0
 801bde8:	4639      	mov	r1, r7
 801bdea:	4620      	mov	r0, r4
 801bdec:	f7ff ff6c 	bl	801bcc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801bdf0:	4b11      	ldr	r3, [pc, #68]	; (801be38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x90>)
 801bdf2:	9003      	str	r0, [sp, #12]
 801bdf4:	881b      	ldrh	r3, [r3, #0]
 801bdf6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bdfa:	b106      	cbz	r6, 801bdfe <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x56>
 801bdfc:	b935      	cbnz	r5, 801be0c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x64>
 801bdfe:	4b0f      	ldr	r3, [pc, #60]	; (801be3c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x94>)
 801be00:	f240 1153 	movw	r1, #339	; 0x153
 801be04:	4a0e      	ldr	r2, [pc, #56]	; (801be40 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801be06:	480f      	ldr	r0, [pc, #60]	; (801be44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x9c>)
 801be08:	f004 f812 	bl	801fe30 <__assert_func>
 801be0c:	6823      	ldr	r3, [r4, #0]
 801be0e:	4620      	mov	r0, r4
 801be10:	9d01      	ldr	r5, [sp, #4]
 801be12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be14:	4798      	blx	r3
 801be16:	4228      	tst	r0, r5
 801be18:	d104      	bne.n	801be24 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x7c>
 801be1a:	4b0b      	ldr	r3, [pc, #44]	; (801be48 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa0>)
 801be1c:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801be20:	4a07      	ldr	r2, [pc, #28]	; (801be40 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801be22:	e7f0      	b.n	801be06 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x5e>
 801be24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801be26:	a901      	add	r1, sp, #4
 801be28:	6860      	ldr	r0, [r4, #4]
 801be2a:	9306      	str	r3, [sp, #24]
 801be2c:	6803      	ldr	r3, [r0, #0]
 801be2e:	685b      	ldr	r3, [r3, #4]
 801be30:	4798      	blx	r3
 801be32:	b008      	add	sp, #32
 801be34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be38:	20009cce 	.word	0x20009cce
 801be3c:	08022a0d 	.word	0x08022a0d
 801be40:	08022b58 	.word	0x08022b58
 801be44:	08022a45 	.word	0x08022a45
 801be48:	08022a6b 	.word	0x08022a6b

0801be4c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be50:	b088      	sub	sp, #32
 801be52:	4698      	mov	r8, r3
 801be54:	4617      	mov	r7, r2
 801be56:	2200      	movs	r2, #0
 801be58:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801be5c:	4604      	mov	r4, r0
 801be5e:	9206      	str	r2, [sp, #24]
 801be60:	2bff      	cmp	r3, #255	; 0xff
 801be62:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801be66:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801be6a:	bf0c      	ite	eq
 801be6c:	2220      	moveq	r2, #32
 801be6e:	2240      	movne	r2, #64	; 0x40
 801be70:	9102      	str	r1, [sp, #8]
 801be72:	9201      	str	r2, [sp, #4]
 801be74:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801be78:	f88d 301c 	strb.w	r3, [sp, #28]
 801be7c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801be80:	f8ad 6010 	strh.w	r6, [sp, #16]
 801be84:	f8ad 5012 	strh.w	r5, [sp, #18]
 801be88:	f7ff fee2 	bl	801bc50 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801be8c:	4642      	mov	r2, r8
 801be8e:	4603      	mov	r3, r0
 801be90:	4639      	mov	r1, r7
 801be92:	4620      	mov	r0, r4
 801be94:	f7ff ff18 	bl	801bcc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801be98:	4b10      	ldr	r3, [pc, #64]	; (801bedc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x90>)
 801be9a:	9003      	str	r0, [sp, #12]
 801be9c:	881b      	ldrh	r3, [r3, #0]
 801be9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bea2:	b106      	cbz	r6, 801bea6 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x5a>
 801bea4:	b935      	cbnz	r5, 801beb4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x68>
 801bea6:	4b0e      	ldr	r3, [pc, #56]	; (801bee0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x94>)
 801bea8:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801beac:	4a0d      	ldr	r2, [pc, #52]	; (801bee4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801beae:	480e      	ldr	r0, [pc, #56]	; (801bee8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x9c>)
 801beb0:	f003 ffbe 	bl	801fe30 <__assert_func>
 801beb4:	6823      	ldr	r3, [r4, #0]
 801beb6:	4620      	mov	r0, r4
 801beb8:	9d01      	ldr	r5, [sp, #4]
 801beba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bebc:	4798      	blx	r3
 801bebe:	4228      	tst	r0, r5
 801bec0:	d104      	bne.n	801becc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x80>
 801bec2:	4b0a      	ldr	r3, [pc, #40]	; (801beec <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0xa0>)
 801bec4:	f240 1167 	movw	r1, #359	; 0x167
 801bec8:	4a06      	ldr	r2, [pc, #24]	; (801bee4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801beca:	e7f0      	b.n	801beae <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x62>
 801becc:	6860      	ldr	r0, [r4, #4]
 801bece:	a901      	add	r1, sp, #4
 801bed0:	6803      	ldr	r3, [r0, #0]
 801bed2:	685b      	ldr	r3, [r3, #4]
 801bed4:	4798      	blx	r3
 801bed6:	b008      	add	sp, #32
 801bed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bedc:	20009cce 	.word	0x20009cce
 801bee0:	08022a0d 	.word	0x08022a0d
 801bee4:	08022bfc 	.word	0x08022bfc
 801bee8:	08022a45 	.word	0x08022a45
 801beec:	08022a6b 	.word	0x08022a6b

0801bef0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801bef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bef4:	b089      	sub	sp, #36	; 0x24
 801bef6:	4699      	mov	r9, r3
 801bef8:	4604      	mov	r4, r0
 801befa:	2500      	movs	r5, #0
 801befc:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801bf00:	4690      	mov	r8, r2
 801bf02:	460f      	mov	r7, r1
 801bf04:	9506      	str	r5, [sp, #24]
 801bf06:	2eff      	cmp	r6, #255	; 0xff
 801bf08:	9502      	str	r5, [sp, #8]
 801bf0a:	bf0c      	ite	eq
 801bf0c:	2302      	moveq	r3, #2
 801bf0e:	2308      	movne	r3, #8
 801bf10:	9301      	str	r3, [sp, #4]
 801bf12:	f7ff fe9d 	bl	801bc50 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801bf16:	464a      	mov	r2, r9
 801bf18:	4603      	mov	r3, r0
 801bf1a:	4641      	mov	r1, r8
 801bf1c:	4620      	mov	r0, r4
 801bf1e:	f7ff fed3 	bl	801bcc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801bf22:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801bf26:	f8ad 5014 	strh.w	r5, [sp, #20]
 801bf2a:	f8ad 3010 	strh.w	r3, [sp, #16]
 801bf2e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801bf32:	9d01      	ldr	r5, [sp, #4]
 801bf34:	f8ad 3012 	strh.w	r3, [sp, #18]
 801bf38:	4b0e      	ldr	r3, [pc, #56]	; (801bf74 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x84>)
 801bf3a:	9003      	str	r0, [sp, #12]
 801bf3c:	4620      	mov	r0, r4
 801bf3e:	881b      	ldrh	r3, [r3, #0]
 801bf40:	9706      	str	r7, [sp, #24]
 801bf42:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf46:	6823      	ldr	r3, [r4, #0]
 801bf48:	f88d 601c 	strb.w	r6, [sp, #28]
 801bf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf4e:	4798      	blx	r3
 801bf50:	4228      	tst	r0, r5
 801bf52:	d106      	bne.n	801bf62 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x72>
 801bf54:	4b08      	ldr	r3, [pc, #32]	; (801bf78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x88>)
 801bf56:	f240 1179 	movw	r1, #377	; 0x179
 801bf5a:	4a08      	ldr	r2, [pc, #32]	; (801bf7c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x8c>)
 801bf5c:	4808      	ldr	r0, [pc, #32]	; (801bf80 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x90>)
 801bf5e:	f003 ff67 	bl	801fe30 <__assert_func>
 801bf62:	6860      	ldr	r0, [r4, #4]
 801bf64:	a901      	add	r1, sp, #4
 801bf66:	6803      	ldr	r3, [r0, #0]
 801bf68:	685b      	ldr	r3, [r3, #4]
 801bf6a:	4798      	blx	r3
 801bf6c:	b009      	add	sp, #36	; 0x24
 801bf6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf72:	bf00      	nop
 801bf74:	20009cce 	.word	0x20009cce
 801bf78:	08022a6b 	.word	0x08022a6b
 801bf7c:	08022d32 	.word	0x08022d32
 801bf80:	08022a45 	.word	0x08022a45

0801bf84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801bf84:	4b1d      	ldr	r3, [pc, #116]	; (801bffc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x78>)
 801bf86:	b570      	push	{r4, r5, r6, lr}
 801bf88:	b08a      	sub	sp, #40	; 0x28
 801bf8a:	781b      	ldrb	r3, [r3, #0]
 801bf8c:	4604      	mov	r4, r0
 801bf8e:	e88d 0006 	stmia.w	sp, {r1, r2}
 801bf92:	b933      	cbnz	r3, 801bfa2 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 801bf94:	4b1a      	ldr	r3, [pc, #104]	; (801c000 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x7c>)
 801bf96:	f240 1185 	movw	r1, #389	; 0x185
 801bf9a:	4a1a      	ldr	r2, [pc, #104]	; (801c004 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801bf9c:	481a      	ldr	r0, [pc, #104]	; (801c008 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x84>)
 801bf9e:	f003 ff47 	bl	801fe30 <__assert_func>
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	f8bd 5000 	ldrh.w	r5, [sp]
 801bfa8:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801bfac:	9308      	str	r3, [sp, #32]
 801bfae:	2301      	movs	r3, #1
 801bfb0:	9303      	str	r3, [sp, #12]
 801bfb2:	6803      	ldr	r3, [r0, #0]
 801bfb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bfb6:	4798      	blx	r3
 801bfb8:	4632      	mov	r2, r6
 801bfba:	4603      	mov	r3, r0
 801bfbc:	4629      	mov	r1, r5
 801bfbe:	4620      	mov	r0, r4
 801bfc0:	f7ff fe82 	bl	801bcc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801bfc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bfc6:	9004      	str	r0, [sp, #16]
 801bfc8:	a903      	add	r1, sp, #12
 801bfca:	9305      	str	r3, [sp, #20]
 801bfcc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801bfd0:	6860      	ldr	r0, [r4, #4]
 801bfd2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bfd6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801bfda:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bfde:	4b0b      	ldr	r3, [pc, #44]	; (801c00c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x88>)
 801bfe0:	881b      	ldrh	r3, [r3, #0]
 801bfe2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801bfe6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801bfea:	23ff      	movs	r3, #255	; 0xff
 801bfec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801bff0:	6803      	ldr	r3, [r0, #0]
 801bff2:	685b      	ldr	r3, [r3, #4]
 801bff4:	4798      	blx	r3
 801bff6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801bff8:	b00a      	add	sp, #40	; 0x28
 801bffa:	bd70      	pop	{r4, r5, r6, pc}
 801bffc:	20009cd3 	.word	0x20009cd3
 801c000:	0802299f 	.word	0x0802299f
 801c004:	08022c75 	.word	0x08022c75
 801c008:	08022a45 	.word	0x08022a45
 801c00c:	20009cce 	.word	0x20009cce

0801c010 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801c010:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c012:	461d      	mov	r5, r3
 801c014:	b08b      	sub	sp, #44	; 0x2c
 801c016:	2300      	movs	r3, #0
 801c018:	4604      	mov	r4, r0
 801c01a:	9308      	str	r3, [sp, #32]
 801c01c:	2301      	movs	r3, #1
 801c01e:	9303      	str	r3, [sp, #12]
 801c020:	6803      	ldr	r3, [r0, #0]
 801c022:	e88d 0006 	stmia.w	sp, {r1, r2}
 801c026:	f8bd 6000 	ldrh.w	r6, [sp]
 801c02a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801c02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c030:	4798      	blx	r3
 801c032:	463a      	mov	r2, r7
 801c034:	4603      	mov	r3, r0
 801c036:	4631      	mov	r1, r6
 801c038:	4620      	mov	r0, r4
 801c03a:	f7ff fe45 	bl	801bcc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c03e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c042:	9004      	str	r0, [sp, #16]
 801c044:	a903      	add	r1, sp, #12
 801c046:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c04a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c04e:	6860      	ldr	r0, [r4, #4]
 801c050:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c054:	4b08      	ldr	r3, [pc, #32]	; (801c078 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x68>)
 801c056:	9505      	str	r5, [sp, #20]
 801c058:	881b      	ldrh	r3, [r3, #0]
 801c05a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c05e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c060:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c064:	23ff      	movs	r3, #255	; 0xff
 801c066:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801c06a:	6803      	ldr	r3, [r0, #0]
 801c06c:	685b      	ldr	r3, [r3, #4]
 801c06e:	4798      	blx	r3
 801c070:	4628      	mov	r0, r5
 801c072:	b00b      	add	sp, #44	; 0x2c
 801c074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c076:	bf00      	nop
 801c078:	20009cce 	.word	0x20009cce

0801c07c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801c07c:	b570      	push	{r4, r5, r6, lr}
 801c07e:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 801c082:	4604      	mov	r4, r0
 801c084:	b19b      	cbz	r3, 801c0ae <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801c086:	2002      	movs	r0, #2
 801c088:	f7f8 fcec 	bl	8014a64 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801c08c:	2300      	movs	r3, #0
 801c08e:	4620      	mov	r0, r4
 801c090:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801c094:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801c098:	6823      	ldr	r3, [r4, #0]
 801c09a:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 801c09e:	f7ff fdd7 	bl	801bc50 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c0a2:	4601      	mov	r1, r0
 801c0a4:	4620      	mov	r0, r4
 801c0a6:	462b      	mov	r3, r5
 801c0a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c0ac:	4718      	bx	r3
 801c0ae:	bd70      	pop	{r4, r5, r6, pc}

0801c0b0 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801c0b0:	b570      	push	{r4, r5, r6, lr}
 801c0b2:	4605      	mov	r5, r0
 801c0b4:	460c      	mov	r4, r1
 801c0b6:	2003      	movs	r0, #3
 801c0b8:	b149      	cbz	r1, 801c0ce <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801c0ba:	f7f8 fcbd 	bl	8014a38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801c0be:	6928      	ldr	r0, [r5, #16]
 801c0c0:	b168      	cbz	r0, 801c0de <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801c0c2:	6803      	ldr	r3, [r0, #0]
 801c0c4:	2101      	movs	r1, #1
 801c0c6:	695b      	ldr	r3, [r3, #20]
 801c0c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c0cc:	4718      	bx	r3
 801c0ce:	f7f8 fcbe 	bl	8014a4e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801c0d2:	6928      	ldr	r0, [r5, #16]
 801c0d4:	b118      	cbz	r0, 801c0de <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801c0d6:	6803      	ldr	r3, [r0, #0]
 801c0d8:	4621      	mov	r1, r4
 801c0da:	695b      	ldr	r3, [r3, #20]
 801c0dc:	e7f4      	b.n	801c0c8 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801c0de:	bd70      	pop	{r4, r5, r6, pc}

0801c0e0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801c0e0:	4770      	bx	lr

0801c0e2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801c0e2:	68c2      	ldr	r2, [r0, #12]
 801c0e4:	6900      	ldr	r0, [r0, #16]
 801c0e6:	1a13      	subs	r3, r2, r0
 801c0e8:	4258      	negs	r0, r3
 801c0ea:	4158      	adcs	r0, r3
 801c0ec:	4770      	bx	lr

0801c0ee <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801c0ee:	68c2      	ldr	r2, [r0, #12]
 801c0f0:	6903      	ldr	r3, [r0, #16]
 801c0f2:	1a9b      	subs	r3, r3, r2
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	bfdc      	itt	le
 801c0f8:	6882      	ldrle	r2, [r0, #8]
 801c0fa:	189b      	addle	r3, r3, r2
 801c0fc:	2b01      	cmp	r3, #1
 801c0fe:	bfcc      	ite	gt
 801c100:	2000      	movgt	r0, #0
 801c102:	2001      	movle	r0, #1
 801c104:	4770      	bx	lr

0801c106 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801c106:	6902      	ldr	r2, [r0, #16]
 801c108:	6843      	ldr	r3, [r0, #4]
 801c10a:	201c      	movs	r0, #28
 801c10c:	fb00 3002 	mla	r0, r0, r2, r3
 801c110:	4770      	bx	lr

0801c112 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801c112:	6803      	ldr	r3, [r0, #0]
 801c114:	691b      	ldr	r3, [r3, #16]
 801c116:	4718      	bx	r3

0801c118 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801c118:	4770      	bx	lr

0801c11a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801c11a:	4770      	bx	lr

0801c11c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801c11c:	2301      	movs	r3, #1
 801c11e:	b570      	push	{r4, r5, r6, lr}
 801c120:	7203      	strb	r3, [r0, #8]
 801c122:	4604      	mov	r4, r0
 801c124:	6840      	ldr	r0, [r0, #4]
 801c126:	6803      	ldr	r3, [r0, #0]
 801c128:	699b      	ldr	r3, [r3, #24]
 801c12a:	4798      	blx	r3
 801c12c:	6803      	ldr	r3, [r0, #0]
 801c12e:	4605      	mov	r5, r0
 801c130:	2b08      	cmp	r3, #8
 801c132:	d01e      	beq.n	801c172 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801c134:	d80b      	bhi.n	801c14e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801c136:	2b02      	cmp	r3, #2
 801c138:	d027      	beq.n	801c18a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801c13a:	2b04      	cmp	r3, #4
 801c13c:	d011      	beq.n	801c162 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801c13e:	2b01      	cmp	r3, #1
 801c140:	d028      	beq.n	801c194 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801c142:	4b17      	ldr	r3, [pc, #92]	; (801c1a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801c144:	218d      	movs	r1, #141	; 0x8d
 801c146:	4a17      	ldr	r2, [pc, #92]	; (801c1a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801c148:	4817      	ldr	r0, [pc, #92]	; (801c1a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801c14a:	f003 fe71 	bl	801fe30 <__assert_func>
 801c14e:	2b40      	cmp	r3, #64	; 0x40
 801c150:	d020      	beq.n	801c194 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801c152:	d801      	bhi.n	801c158 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801c154:	2b20      	cmp	r3, #32
 801c156:	e7f3      	b.n	801c140 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801c158:	2b80      	cmp	r3, #128	; 0x80
 801c15a:	d01b      	beq.n	801c194 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801c15c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c160:	e7ee      	b.n	801c140 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801c162:	6823      	ldr	r3, [r4, #0]
 801c164:	7e01      	ldrb	r1, [r0, #24]
 801c166:	4620      	mov	r0, r4
 801c168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c16a:	4798      	blx	r3
 801c16c:	6823      	ldr	r3, [r4, #0]
 801c16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c170:	e006      	b.n	801c180 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801c172:	6823      	ldr	r3, [r4, #0]
 801c174:	7e01      	ldrb	r1, [r0, #24]
 801c176:	4620      	mov	r0, r4
 801c178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c17a:	4798      	blx	r3
 801c17c:	6823      	ldr	r3, [r4, #0]
 801c17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c180:	4629      	mov	r1, r5
 801c182:	4620      	mov	r0, r4
 801c184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c188:	4718      	bx	r3
 801c18a:	6823      	ldr	r3, [r4, #0]
 801c18c:	4620      	mov	r0, r4
 801c18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c190:	4798      	blx	r3
 801c192:	e7f3      	b.n	801c17c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801c194:	6823      	ldr	r3, [r4, #0]
 801c196:	4620      	mov	r0, r4
 801c198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c19a:	4798      	blx	r3
 801c19c:	e7e6      	b.n	801c16c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801c19e:	bf00      	nop
 801c1a0:	08022d9d 	.word	0x08022d9d
 801c1a4:	08022ea8 	.word	0x08022ea8
 801c1a8:	08022dc2 	.word	0x08022dc2

0801c1ac <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801c1ac:	b570      	push	{r4, r5, r6, lr}
 801c1ae:	4604      	mov	r4, r0
 801c1b0:	460e      	mov	r6, r1
 801c1b2:	6860      	ldr	r0, [r4, #4]
 801c1b4:	6803      	ldr	r3, [r0, #0]
 801c1b6:	685b      	ldr	r3, [r3, #4]
 801c1b8:	4798      	blx	r3
 801c1ba:	2800      	cmp	r0, #0
 801c1bc:	d1f9      	bne.n	801c1b2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801c1be:	4d0b      	ldr	r5, [pc, #44]	; (801c1ec <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801c1c0:	6828      	ldr	r0, [r5, #0]
 801c1c2:	6803      	ldr	r3, [r0, #0]
 801c1c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c1c6:	4798      	blx	r3
 801c1c8:	f7f4 fcee 	bl	8010ba8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801c1cc:	6860      	ldr	r0, [r4, #4]
 801c1ce:	4631      	mov	r1, r6
 801c1d0:	6803      	ldr	r3, [r0, #0]
 801c1d2:	689b      	ldr	r3, [r3, #8]
 801c1d4:	4798      	blx	r3
 801c1d6:	6823      	ldr	r3, [r4, #0]
 801c1d8:	4620      	mov	r0, r4
 801c1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1dc:	4798      	blx	r3
 801c1de:	6828      	ldr	r0, [r5, #0]
 801c1e0:	6803      	ldr	r3, [r0, #0]
 801c1e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c1e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c1e8:	4718      	bx	r3
 801c1ea:	bf00      	nop
 801c1ec:	20009cd4 	.word	0x20009cd4

0801c1f0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801c1f0:	b508      	push	{r3, lr}
 801c1f2:	f7f4 fc9f 	bl	8010b34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801c1f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c1fa:	f7f4 bcb9 	b.w	8010b70 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801c1fe <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801c1fe:	b570      	push	{r4, r5, r6, lr}
 801c200:	4604      	mov	r4, r0
 801c202:	6840      	ldr	r0, [r0, #4]
 801c204:	6803      	ldr	r3, [r0, #0]
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	4798      	blx	r3
 801c20a:	4605      	mov	r5, r0
 801c20c:	b908      	cbnz	r0, 801c212 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 801c20e:	7a23      	ldrb	r3, [r4, #8]
 801c210:	b973      	cbnz	r3, 801c230 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 801c212:	6860      	ldr	r0, [r4, #4]
 801c214:	6803      	ldr	r3, [r0, #0]
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	4798      	blx	r3
 801c21a:	b928      	cbnz	r0, 801c228 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 801c21c:	6823      	ldr	r3, [r4, #0]
 801c21e:	4620      	mov	r0, r4
 801c220:	6a1b      	ldr	r3, [r3, #32]
 801c222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c226:	4718      	bx	r3
 801c228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c22c:	f7f4 bcd8 	b.w	8010be0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 801c230:	6860      	ldr	r0, [r4, #4]
 801c232:	6803      	ldr	r3, [r0, #0]
 801c234:	695b      	ldr	r3, [r3, #20]
 801c236:	4798      	blx	r3
 801c238:	7225      	strb	r5, [r4, #8]
 801c23a:	e7ea      	b.n	801c212 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>

0801c23c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801c23c:	b510      	push	{r4, lr}
 801c23e:	68c3      	ldr	r3, [r0, #12]
 801c240:	6902      	ldr	r2, [r0, #16]
 801c242:	1ad2      	subs	r2, r2, r3
 801c244:	2a00      	cmp	r2, #0
 801c246:	bfdc      	itt	le
 801c248:	6884      	ldrle	r4, [r0, #8]
 801c24a:	1912      	addle	r2, r2, r4
 801c24c:	2a01      	cmp	r2, #1
 801c24e:	dd17      	ble.n	801c280 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 801c250:	6842      	ldr	r2, [r0, #4]
 801c252:	241c      	movs	r4, #28
 801c254:	fb04 2303 	mla	r3, r4, r3, r2
 801c258:	f101 0218 	add.w	r2, r1, #24
 801c25c:	f851 4b04 	ldr.w	r4, [r1], #4
 801c260:	4291      	cmp	r1, r2
 801c262:	f843 4b04 	str.w	r4, [r3], #4
 801c266:	d1f9      	bne.n	801c25c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801c268:	780a      	ldrb	r2, [r1, #0]
 801c26a:	701a      	strb	r2, [r3, #0]
 801c26c:	68c3      	ldr	r3, [r0, #12]
 801c26e:	6882      	ldr	r2, [r0, #8]
 801c270:	f3bf 8f5b 	dmb	ish
 801c274:	3301      	adds	r3, #1
 801c276:	4293      	cmp	r3, r2
 801c278:	bfa8      	it	ge
 801c27a:	1a9b      	subge	r3, r3, r2
 801c27c:	60c3      	str	r3, [r0, #12]
 801c27e:	bd10      	pop	{r4, pc}
 801c280:	4b02      	ldr	r3, [pc, #8]	; (801c28c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801c282:	213b      	movs	r1, #59	; 0x3b
 801c284:	4a02      	ldr	r2, [pc, #8]	; (801c290 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801c286:	4803      	ldr	r0, [pc, #12]	; (801c294 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801c288:	f003 fdd2 	bl	801fe30 <__assert_func>
 801c28c:	08022de8 	.word	0x08022de8
 801c290:	08022ed8 	.word	0x08022ed8
 801c294:	08022dc2 	.word	0x08022dc2

0801c298 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801c298:	b510      	push	{r4, lr}
 801c29a:	6803      	ldr	r3, [r0, #0]
 801c29c:	4604      	mov	r4, r0
 801c29e:	681b      	ldr	r3, [r3, #0]
 801c2a0:	4798      	blx	r3
 801c2a2:	b128      	cbz	r0, 801c2b0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801c2a4:	4b07      	ldr	r3, [pc, #28]	; (801c2c4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801c2a6:	2141      	movs	r1, #65	; 0x41
 801c2a8:	4a07      	ldr	r2, [pc, #28]	; (801c2c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801c2aa:	4808      	ldr	r0, [pc, #32]	; (801c2cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801c2ac:	f003 fdc0 	bl	801fe30 <__assert_func>
 801c2b0:	6923      	ldr	r3, [r4, #16]
 801c2b2:	68a2      	ldr	r2, [r4, #8]
 801c2b4:	f3bf 8f5b 	dmb	ish
 801c2b8:	3301      	adds	r3, #1
 801c2ba:	4293      	cmp	r3, r2
 801c2bc:	bfa8      	it	ge
 801c2be:	1a9b      	subge	r3, r3, r2
 801c2c0:	6123      	str	r3, [r4, #16]
 801c2c2:	bd10      	pop	{r4, pc}
 801c2c4:	08022e0b 	.word	0x08022e0b
 801c2c8:	08022f26 	.word	0x08022f26
 801c2cc:	08022dc2 	.word	0x08022dc2

0801c2d0 <_ZN8touchgfx13DMA_Interface5startEv>:
 801c2d0:	b510      	push	{r4, lr}
 801c2d2:	4604      	mov	r4, r0
 801c2d4:	6840      	ldr	r0, [r0, #4]
 801c2d6:	6803      	ldr	r3, [r0, #0]
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	4798      	blx	r3
 801c2dc:	b948      	cbnz	r0, 801c2f2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801c2de:	7a63      	ldrb	r3, [r4, #9]
 801c2e0:	b13b      	cbz	r3, 801c2f2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801c2e2:	7a23      	ldrb	r3, [r4, #8]
 801c2e4:	b92b      	cbnz	r3, 801c2f2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801c2e6:	6823      	ldr	r3, [r4, #0]
 801c2e8:	4620      	mov	r0, r4
 801c2ea:	6a1b      	ldr	r3, [r3, #32]
 801c2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c2f0:	4718      	bx	r3
 801c2f2:	bd10      	pop	{r4, pc}

0801c2f4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801c2f4:	b510      	push	{r4, lr}
 801c2f6:	6082      	str	r2, [r0, #8]
 801c2f8:	2200      	movs	r2, #0
 801c2fa:	4c03      	ldr	r4, [pc, #12]	; (801c308 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801c2fc:	6041      	str	r1, [r0, #4]
 801c2fe:	6004      	str	r4, [r0, #0]
 801c300:	60c2      	str	r2, [r0, #12]
 801c302:	6102      	str	r2, [r0, #16]
 801c304:	bd10      	pop	{r4, pc}
 801c306:	bf00      	nop
 801c308:	08022e8c 	.word	0x08022e8c

0801c30c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801c30c:	6840      	ldr	r0, [r0, #4]
 801c30e:	6803      	ldr	r3, [r0, #0]
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	4718      	bx	r3

0801c314 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801c314:	2b02      	cmp	r3, #2
 801c316:	d00e      	beq.n	801c336 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801c318:	2b03      	cmp	r3, #3
 801c31a:	d012      	beq.n	801c342 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 801c31c:	2b01      	cmp	r3, #1
 801c31e:	d003      	beq.n	801c328 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801c320:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c324:	1850      	adds	r0, r2, r1
 801c326:	4770      	bx	lr
 801c328:	8803      	ldrh	r3, [r0, #0]
 801c32a:	8880      	ldrh	r0, [r0, #4]
 801c32c:	4418      	add	r0, r3
 801c32e:	b200      	sxth	r0, r0
 801c330:	1a80      	subs	r0, r0, r2
 801c332:	3801      	subs	r0, #1
 801c334:	4770      	bx	lr
 801c336:	8803      	ldrh	r3, [r0, #0]
 801c338:	8880      	ldrh	r0, [r0, #4]
 801c33a:	4418      	add	r0, r3
 801c33c:	b200      	sxth	r0, r0
 801c33e:	1a40      	subs	r0, r0, r1
 801c340:	e7f7      	b.n	801c332 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801c342:	f9b0 0000 	ldrsh.w	r0, [r0]
 801c346:	4410      	add	r0, r2
 801c348:	4770      	bx	lr

0801c34a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801c34a:	2b02      	cmp	r3, #2
 801c34c:	d008      	beq.n	801c360 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801c34e:	2b03      	cmp	r3, #3
 801c350:	d00d      	beq.n	801c36e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801c352:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801c356:	2b01      	cmp	r3, #1
 801c358:	bf14      	ite	ne
 801c35a:	1880      	addne	r0, r0, r2
 801c35c:	1840      	addeq	r0, r0, r1
 801c35e:	4770      	bx	lr
 801c360:	8843      	ldrh	r3, [r0, #2]
 801c362:	88c0      	ldrh	r0, [r0, #6]
 801c364:	4418      	add	r0, r3
 801c366:	b200      	sxth	r0, r0
 801c368:	1a80      	subs	r0, r0, r2
 801c36a:	3801      	subs	r0, #1
 801c36c:	4770      	bx	lr
 801c36e:	8843      	ldrh	r3, [r0, #2]
 801c370:	88c0      	ldrh	r0, [r0, #6]
 801c372:	4418      	add	r0, r3
 801c374:	b200      	sxth	r0, r0
 801c376:	1a40      	subs	r0, r0, r1
 801c378:	e7f7      	b.n	801c36a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801c37a <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801c37a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c37c:	f8dd c014 	ldr.w	ip, [sp, #20]
 801c380:	1e05      	subs	r5, r0, #0
 801c382:	f04f 0601 	mov.w	r6, #1
 801c386:	9c06      	ldr	r4, [sp, #24]
 801c388:	bfba      	itte	lt
 801c38a:	f04f 37ff 	movlt.w	r7, #4294967295
 801c38e:	426d      	neglt	r5, r5
 801c390:	2701      	movge	r7, #1
 801c392:	f1bc 0f00 	cmp.w	ip, #0
 801c396:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801c39a:	bfbc      	itt	lt
 801c39c:	f1cc 0c00 	rsblt	ip, ip, #0
 801c3a0:	427f      	neglt	r7, r7
 801c3a2:	2c00      	cmp	r4, #0
 801c3a4:	fa4c f001 	asr.w	r0, ip, r1
 801c3a8:	fa06 f101 	lsl.w	r1, r6, r1
 801c3ac:	bfbc      	itt	lt
 801c3ae:	4264      	neglt	r4, r4
 801c3b0:	427f      	neglt	r7, r7
 801c3b2:	3901      	subs	r1, #1
 801c3b4:	ea01 010c 	and.w	r1, r1, ip
 801c3b8:	434d      	muls	r5, r1
 801c3ba:	f8de 1000 	ldr.w	r1, [lr]
 801c3be:	fb03 1300 	mla	r3, r3, r0, r1
 801c3c2:	fb95 f1f4 	sdiv	r1, r5, r4
 801c3c6:	fb04 5511 	mls	r5, r4, r1, r5
 801c3ca:	441d      	add	r5, r3
 801c3cc:	fb95 f3f4 	sdiv	r3, r5, r4
 801c3d0:	4419      	add	r1, r3
 801c3d2:	fb04 5413 	mls	r4, r4, r3, r5
 801c3d6:	fb02 1000 	mla	r0, r2, r0, r1
 801c3da:	f8ce 4000 	str.w	r4, [lr]
 801c3de:	4378      	muls	r0, r7
 801c3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801c3e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801c3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3e8:	4c24      	ldr	r4, [pc, #144]	; (801c47c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801c3ea:	b086      	sub	sp, #24
 801c3ec:	4605      	mov	r5, r0
 801c3ee:	6807      	ldr	r7, [r0, #0]
 801c3f0:	69a3      	ldr	r3, [r4, #24]
 801c3f2:	b92b      	cbnz	r3, 801c400 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801c3f4:	6840      	ldr	r0, [r0, #4]
 801c3f6:	602f      	str	r7, [r5, #0]
 801c3f8:	6068      	str	r0, [r5, #4]
 801c3fa:	b006      	add	sp, #24
 801c3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c400:	f04f 0802 	mov.w	r8, #2
 801c404:	68a2      	ldr	r2, [r4, #8]
 801c406:	ae06      	add	r6, sp, #24
 801c408:	6820      	ldr	r0, [r4, #0]
 801c40a:	fb93 f1f8 	sdiv	r1, r3, r8
 801c40e:	440a      	add	r2, r1
 801c410:	69e1      	ldr	r1, [r4, #28]
 801c412:	f846 2d04 	str.w	r2, [r6, #-4]!
 801c416:	9301      	str	r3, [sp, #4]
 801c418:	9700      	str	r7, [sp, #0]
 801c41a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c41c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c41e:	9602      	str	r6, [sp, #8]
 801c420:	f7ff ffab 	bl	801c37a <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801c424:	69a3      	ldr	r3, [r4, #24]
 801c426:	4607      	mov	r7, r0
 801c428:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c42a:	9301      	str	r3, [sp, #4]
 801c42c:	686b      	ldr	r3, [r5, #4]
 801c42e:	6a21      	ldr	r1, [r4, #32]
 801c430:	9300      	str	r3, [sp, #0]
 801c432:	9602      	str	r6, [sp, #8]
 801c434:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c436:	6860      	ldr	r0, [r4, #4]
 801c438:	f7ff ff9f 	bl	801c37a <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801c43c:	69a2      	ldr	r2, [r4, #24]
 801c43e:	6963      	ldr	r3, [r4, #20]
 801c440:	4407      	add	r7, r0
 801c442:	9201      	str	r2, [sp, #4]
 801c444:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c446:	9602      	str	r6, [sp, #8]
 801c448:	68e0      	ldr	r0, [r4, #12]
 801c44a:	fb92 f8f8 	sdiv	r8, r2, r8
 801c44e:	4443      	add	r3, r8
 801c450:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801c452:	9305      	str	r3, [sp, #20]
 801c454:	682b      	ldr	r3, [r5, #0]
 801c456:	9300      	str	r3, [sp, #0]
 801c458:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801c45a:	f7ff ff8e 	bl	801c37a <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801c45e:	69a3      	ldr	r3, [r4, #24]
 801c460:	4680      	mov	r8, r0
 801c462:	9602      	str	r6, [sp, #8]
 801c464:	9301      	str	r3, [sp, #4]
 801c466:	686b      	ldr	r3, [r5, #4]
 801c468:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801c46a:	9300      	str	r3, [sp, #0]
 801c46c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801c46e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801c470:	6920      	ldr	r0, [r4, #16]
 801c472:	f7ff ff82 	bl	801c37a <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801c476:	4440      	add	r0, r8
 801c478:	e7bd      	b.n	801c3f6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801c47a:	bf00      	nop
 801c47c:	20009cdc 	.word	0x20009cdc

0801c480 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801c480:	4b07      	ldr	r3, [pc, #28]	; (801c4a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801c482:	b510      	push	{r4, lr}
 801c484:	781b      	ldrb	r3, [r3, #0]
 801c486:	2b01      	cmp	r3, #1
 801c488:	d108      	bne.n	801c49c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801c48a:	4b06      	ldr	r3, [pc, #24]	; (801c4a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801c48c:	880c      	ldrh	r4, [r1, #0]
 801c48e:	881b      	ldrh	r3, [r3, #0]
 801c490:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c494:	3b01      	subs	r3, #1
 801c496:	1b1b      	subs	r3, r3, r4
 801c498:	8003      	strh	r3, [r0, #0]
 801c49a:	800a      	strh	r2, [r1, #0]
 801c49c:	bd10      	pop	{r4, pc}
 801c49e:	bf00      	nop
 801c4a0:	20009ccc 	.word	0x20009ccc
 801c4a4:	20009cd0 	.word	0x20009cd0

0801c4a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801c4a8:	4b07      	ldr	r3, [pc, #28]	; (801c4c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801c4aa:	b510      	push	{r4, lr}
 801c4ac:	781b      	ldrb	r3, [r3, #0]
 801c4ae:	2b01      	cmp	r3, #1
 801c4b0:	d108      	bne.n	801c4c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801c4b2:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c4b6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c4ba:	8003      	strh	r3, [r0, #0]
 801c4bc:	8893      	ldrh	r3, [r2, #4]
 801c4be:	3b01      	subs	r3, #1
 801c4c0:	1b1b      	subs	r3, r3, r4
 801c4c2:	800b      	strh	r3, [r1, #0]
 801c4c4:	bd10      	pop	{r4, pc}
 801c4c6:	bf00      	nop
 801c4c8:	20009ccc 	.word	0x20009ccc

0801c4cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801c4cc:	4b0a      	ldr	r3, [pc, #40]	; (801c4f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 801c4ce:	b513      	push	{r0, r1, r4, lr}
 801c4d0:	f9b3 4000 	ldrsh.w	r4, [r3]
 801c4d4:	4b09      	ldr	r3, [pc, #36]	; (801c4fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 801c4d6:	f8ad 4004 	strh.w	r4, [sp, #4]
 801c4da:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c4de:	2300      	movs	r3, #0
 801c4e0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c4e4:	466a      	mov	r2, sp
 801c4e6:	f8ad 3000 	strh.w	r3, [sp]
 801c4ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 801c4ee:	f7ff ffdb 	bl	801c4a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c4f2:	b002      	add	sp, #8
 801c4f4:	bd10      	pop	{r4, pc}
 801c4f6:	bf00      	nop
 801c4f8:	20009cc8 	.word	0x20009cc8
 801c4fc:	20009cca 	.word	0x20009cca

0801c500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801c500:	4b0a      	ldr	r3, [pc, #40]	; (801c52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801c502:	460a      	mov	r2, r1
 801c504:	b510      	push	{r4, lr}
 801c506:	781b      	ldrb	r3, [r3, #0]
 801c508:	2b01      	cmp	r3, #1
 801c50a:	d10d      	bne.n	801c528 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801c50c:	8881      	ldrh	r1, [r0, #4]
 801c50e:	8803      	ldrh	r3, [r0, #0]
 801c510:	440b      	add	r3, r1
 801c512:	4601      	mov	r1, r0
 801c514:	3b01      	subs	r3, #1
 801c516:	f821 3b02 	strh.w	r3, [r1], #2
 801c51a:	f7ff ffc5 	bl	801c4a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c51e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c522:	88c2      	ldrh	r2, [r0, #6]
 801c524:	80c3      	strh	r3, [r0, #6]
 801c526:	8082      	strh	r2, [r0, #4]
 801c528:	bd10      	pop	{r4, pc}
 801c52a:	bf00      	nop
 801c52c:	20009ccc 	.word	0x20009ccc

0801c530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801c530:	4b0a      	ldr	r3, [pc, #40]	; (801c55c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801c532:	b507      	push	{r0, r1, r2, lr}
 801c534:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c538:	4b09      	ldr	r3, [pc, #36]	; (801c560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 801c53a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c53e:	4669      	mov	r1, sp
 801c540:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c544:	2300      	movs	r3, #0
 801c546:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c54a:	f8ad 3000 	strh.w	r3, [sp]
 801c54e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801c552:	f7ff ffd5 	bl	801c500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c556:	b003      	add	sp, #12
 801c558:	f85d fb04 	ldr.w	pc, [sp], #4
 801c55c:	20009cc8 	.word	0x20009cc8
 801c560:	20009cca 	.word	0x20009cca

0801c564 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801c564:	4b03      	ldr	r3, [pc, #12]	; (801c574 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801c566:	6818      	ldr	r0, [r3, #0]
 801c568:	b110      	cbz	r0, 801c570 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801c56a:	6803      	ldr	r3, [r0, #0]
 801c56c:	699b      	ldr	r3, [r3, #24]
 801c56e:	4718      	bx	r3
 801c570:	4770      	bx	lr
 801c572:	bf00      	nop
 801c574:	20009d28 	.word	0x20009d28

0801c578 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801c578:	4770      	bx	lr
	...

0801c57c <_ZN8touchgfx11Application4drawEv>:
 801c57c:	4b0b      	ldr	r3, [pc, #44]	; (801c5ac <_ZN8touchgfx11Application4drawEv+0x30>)
 801c57e:	b507      	push	{r0, r1, r2, lr}
 801c580:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c584:	4b0a      	ldr	r3, [pc, #40]	; (801c5b0 <_ZN8touchgfx11Application4drawEv+0x34>)
 801c586:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c58a:	4669      	mov	r1, sp
 801c58c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c590:	2300      	movs	r3, #0
 801c592:	f8ad 3000 	strh.w	r3, [sp]
 801c596:	f8ad 3002 	strh.w	r3, [sp, #2]
 801c59a:	6803      	ldr	r3, [r0, #0]
 801c59c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c5a2:	4798      	blx	r3
 801c5a4:	b003      	add	sp, #12
 801c5a6:	f85d fb04 	ldr.w	pc, [sp], #4
 801c5aa:	bf00      	nop
 801c5ac:	20009cc8 	.word	0x20009cc8
 801c5b0:	20009cca 	.word	0x20009cca

0801c5b4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801c5b4:	4b03      	ldr	r3, [pc, #12]	; (801c5c4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801c5b6:	6818      	ldr	r0, [r3, #0]
 801c5b8:	b110      	cbz	r0, 801c5c0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801c5ba:	6803      	ldr	r3, [r0, #0]
 801c5bc:	69db      	ldr	r3, [r3, #28]
 801c5be:	4718      	bx	r3
 801c5c0:	4770      	bx	lr
 801c5c2:	bf00      	nop
 801c5c4:	20009d28 	.word	0x20009d28

0801c5c8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801c5c8:	4b03      	ldr	r3, [pc, #12]	; (801c5d8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801c5ca:	6818      	ldr	r0, [r3, #0]
 801c5cc:	b110      	cbz	r0, 801c5d4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801c5ce:	6803      	ldr	r3, [r0, #0]
 801c5d0:	6a1b      	ldr	r3, [r3, #32]
 801c5d2:	4718      	bx	r3
 801c5d4:	4770      	bx	lr
 801c5d6:	bf00      	nop
 801c5d8:	20009d28 	.word	0x20009d28

0801c5dc <_ZN8touchgfx11Application14handleKeyEventEh>:
 801c5dc:	4b03      	ldr	r3, [pc, #12]	; (801c5ec <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801c5de:	6818      	ldr	r0, [r3, #0]
 801c5e0:	b110      	cbz	r0, 801c5e8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801c5e2:	6803      	ldr	r3, [r0, #0]
 801c5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5e6:	4718      	bx	r3
 801c5e8:	4770      	bx	lr
 801c5ea:	bf00      	nop
 801c5ec:	20009d28 	.word	0x20009d28

0801c5f0 <_ZN8touchgfx11Application15handleTickEventEv>:
 801c5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5f4:	4d3d      	ldr	r5, [pc, #244]	; (801c6ec <_ZN8touchgfx11Application15handleTickEventEv+0xfc>)
 801c5f6:	4604      	mov	r4, r0
 801c5f8:	6828      	ldr	r0, [r5, #0]
 801c5fa:	2800      	cmp	r0, #0
 801c5fc:	d047      	beq.n	801c68e <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801c5fe:	7a03      	ldrb	r3, [r0, #8]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d144      	bne.n	801c68e <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801c604:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801c608:	6803      	ldr	r3, [r0, #0]
 801c60a:	689b      	ldr	r3, [r3, #8]
 801c60c:	e03c      	b.n	801c688 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801c60e:	3b01      	subs	r3, #1
 801c610:	f04f 0c00 	mov.w	ip, #0
 801c614:	1c5a      	adds	r2, r3, #1
 801c616:	d031      	beq.n	801c67c <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801c618:	18e2      	adds	r2, r4, r3
 801c61a:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 801c61e:	bb59      	cbnz	r1, 801c678 <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 801c620:	b298      	uxth	r0, r3
 801c622:	1d25      	adds	r5, r4, #4
 801c624:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801c628:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801c62c:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 801c630:	428a      	cmp	r2, r1
 801c632:	dd14      	ble.n	801c65e <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801c634:	682e      	ldr	r6, [r5, #0]
 801c636:	45b0      	cmp	r8, r6
 801c638:	d106      	bne.n	801c648 <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 801c63a:	46ae      	mov	lr, r5
 801c63c:	460e      	mov	r6, r1
 801c63e:	2e1e      	cmp	r6, #30
 801c640:	dd05      	ble.n	801c64e <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 801c642:	3a01      	subs	r2, #1
 801c644:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 801c648:	3101      	adds	r1, #1
 801c64a:	3504      	adds	r5, #4
 801c64c:	e7ee      	b.n	801c62c <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 801c64e:	3601      	adds	r6, #1
 801c650:	f8de 7004 	ldr.w	r7, [lr, #4]
 801c654:	42b2      	cmp	r2, r6
 801c656:	f84e 7b04 	str.w	r7, [lr], #4
 801c65a:	dcf0      	bgt.n	801c63e <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 801c65c:	e7f1      	b.n	801c642 <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 801c65e:	4290      	cmp	r0, r2
 801c660:	da07      	bge.n	801c672 <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 801c662:	1821      	adds	r1, r4, r0
 801c664:	3001      	adds	r0, #1
 801c666:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 801c66a:	b280      	uxth	r0, r0
 801c66c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801c670:	e7f5      	b.n	801c65e <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801c672:	4422      	add	r2, r4
 801c674:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 801c678:	3b01      	subs	r3, #1
 801c67a:	e7cb      	b.n	801c614 <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 801c67c:	4b1c      	ldr	r3, [pc, #112]	; (801c6f0 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801c67e:	6818      	ldr	r0, [r3, #0]
 801c680:	2800      	cmp	r0, #0
 801c682:	d031      	beq.n	801c6e8 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>
 801c684:	6803      	ldr	r3, [r0, #0]
 801c686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c68c:	4718      	bx	r3
 801c68e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801c692:	b913      	cbnz	r3, 801c69a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801c694:	b108      	cbz	r0, 801c69a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801c696:	7a03      	ldrb	r3, [r0, #8]
 801c698:	b9a3      	cbnz	r3, 801c6c4 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801c69a:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 801c69e:	f104 0788 	add.w	r7, r4, #136	; 0x88
 801c6a2:	2600      	movs	r6, #0
 801c6a4:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 801c6a8:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801c6ac:	429e      	cmp	r6, r3
 801c6ae:	daae      	bge.n	801c60e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801c6b0:	f817 3b01 	ldrb.w	r3, [r7], #1
 801c6b4:	b123      	cbz	r3, 801c6c0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801c6b6:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 801c6ba:	6803      	ldr	r3, [r0, #0]
 801c6bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c6be:	4798      	blx	r3
 801c6c0:	3601      	adds	r6, #1
 801c6c2:	e7f1      	b.n	801c6a8 <_ZN8touchgfx11Application15handleTickEventEv+0xb8>
 801c6c4:	4b0a      	ldr	r3, [pc, #40]	; (801c6f0 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801c6c6:	6818      	ldr	r0, [r3, #0]
 801c6c8:	b110      	cbz	r0, 801c6d0 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801c6ca:	6803      	ldr	r3, [r0, #0]
 801c6cc:	691b      	ldr	r3, [r3, #16]
 801c6ce:	4798      	blx	r3
 801c6d0:	6828      	ldr	r0, [r5, #0]
 801c6d2:	6803      	ldr	r3, [r0, #0]
 801c6d4:	68db      	ldr	r3, [r3, #12]
 801c6d6:	4798      	blx	r3
 801c6d8:	6823      	ldr	r3, [r4, #0]
 801c6da:	4620      	mov	r0, r4
 801c6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6de:	4798      	blx	r3
 801c6e0:	2301      	movs	r3, #1
 801c6e2:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801c6e6:	e7d8      	b.n	801c69a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801c6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6ec:	20009d2c 	.word	0x20009d2c
 801c6f0:	20009d28 	.word	0x20009d28

0801c6f4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801c6f4:	b570      	push	{r4, r5, r6, lr}
 801c6f6:	4606      	mov	r6, r0
 801c6f8:	460c      	mov	r4, r1
 801c6fa:	b929      	cbnz	r1, 801c708 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801c6fc:	4b0c      	ldr	r3, [pc, #48]	; (801c730 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801c6fe:	2161      	movs	r1, #97	; 0x61
 801c700:	4a0c      	ldr	r2, [pc, #48]	; (801c734 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801c702:	480d      	ldr	r0, [pc, #52]	; (801c738 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801c704:	f003 fb94 	bl	801fe30 <__assert_func>
 801c708:	2300      	movs	r3, #0
 801c70a:	4d0c      	ldr	r5, [pc, #48]	; (801c73c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801c70c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801c710:	6828      	ldr	r0, [r5, #0]
 801c712:	b110      	cbz	r0, 801c71a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801c714:	6803      	ldr	r3, [r0, #0]
 801c716:	695b      	ldr	r3, [r3, #20]
 801c718:	4798      	blx	r3
 801c71a:	602c      	str	r4, [r5, #0]
 801c71c:	4620      	mov	r0, r4
 801c71e:	6823      	ldr	r3, [r4, #0]
 801c720:	68db      	ldr	r3, [r3, #12]
 801c722:	4798      	blx	r3
 801c724:	6833      	ldr	r3, [r6, #0]
 801c726:	4630      	mov	r0, r6
 801c728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c72a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c72e:	4718      	bx	r3
 801c730:	08022f56 	.word	0x08022f56
 801c734:	08023048 	.word	0x08023048
 801c738:	08022f60 	.word	0x08022f60
 801c73c:	20009d28 	.word	0x20009d28

0801c740 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801c740:	b570      	push	{r4, r5, r6, lr}
 801c742:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c746:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c74a:	42ac      	cmp	r4, r5
 801c74c:	db18      	blt.n	801c780 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c74e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801c752:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c756:	429a      	cmp	r2, r3
 801c758:	db12      	blt.n	801c780 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c75a:	8886      	ldrh	r6, [r0, #4]
 801c75c:	4435      	add	r5, r6
 801c75e:	888e      	ldrh	r6, [r1, #4]
 801c760:	4434      	add	r4, r6
 801c762:	b22d      	sxth	r5, r5
 801c764:	b224      	sxth	r4, r4
 801c766:	42a5      	cmp	r5, r4
 801c768:	db0a      	blt.n	801c780 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c76a:	88c0      	ldrh	r0, [r0, #6]
 801c76c:	4418      	add	r0, r3
 801c76e:	88cb      	ldrh	r3, [r1, #6]
 801c770:	441a      	add	r2, r3
 801c772:	b200      	sxth	r0, r0
 801c774:	b212      	sxth	r2, r2
 801c776:	4290      	cmp	r0, r2
 801c778:	bfb4      	ite	lt
 801c77a:	2000      	movlt	r0, #0
 801c77c:	2001      	movge	r0, #1
 801c77e:	bd70      	pop	{r4, r5, r6, pc}
 801c780:	2000      	movs	r0, #0
 801c782:	bd70      	pop	{r4, r5, r6, pc}

0801c784 <_ZN8touchgfx11Application11getInstanceEv>:
 801c784:	4b01      	ldr	r3, [pc, #4]	; (801c78c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801c786:	6818      	ldr	r0, [r3, #0]
 801c788:	4770      	bx	lr
 801c78a:	bf00      	nop
 801c78c:	20009d30 	.word	0x20009d30

0801c790 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801c790:	b538      	push	{r3, r4, r5, lr}
 801c792:	2400      	movs	r4, #0
 801c794:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801c798:	b2a2      	uxth	r2, r4
 801c79a:	429a      	cmp	r2, r3
 801c79c:	da0e      	bge.n	801c7bc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801c79e:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 801c7a2:	3401      	adds	r4, #1
 801c7a4:	686d      	ldr	r5, [r5, #4]
 801c7a6:	428d      	cmp	r5, r1
 801c7a8:	d1f6      	bne.n	801c798 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x8>
 801c7aa:	4410      	add	r0, r2
 801c7ac:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801c7b0:	2bff      	cmp	r3, #255	; 0xff
 801c7b2:	d016      	beq.n	801c7e2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x52>
 801c7b4:	3301      	adds	r3, #1
 801c7b6:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801c7ba:	bd38      	pop	{r3, r4, r5, pc}
 801c7bc:	2b1f      	cmp	r3, #31
 801c7be:	dd06      	ble.n	801c7ce <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x3e>
 801c7c0:	4b08      	ldr	r3, [pc, #32]	; (801c7e4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x54>)
 801c7c2:	f44f 7190 	mov.w	r1, #288	; 0x120
 801c7c6:	4a08      	ldr	r2, [pc, #32]	; (801c7e8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801c7c8:	4808      	ldr	r0, [pc, #32]	; (801c7ec <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801c7ca:	f003 fb31 	bl	801fe30 <__assert_func>
 801c7ce:	18c2      	adds	r2, r0, r3
 801c7d0:	2401      	movs	r4, #1
 801c7d2:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801c7d6:	191a      	adds	r2, r3, r4
 801c7d8:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801c7dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801c7e0:	6041      	str	r1, [r0, #4]
 801c7e2:	bd38      	pop	{r3, r4, r5, pc}
 801c7e4:	08022f8a 	.word	0x08022f8a
 801c7e8:	0802308c 	.word	0x0802308c
 801c7ec:	08022f60 	.word	0x08022f60

0801c7f0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801c7f0:	b530      	push	{r4, r5, lr}
 801c7f2:	f8b0 5084 	ldrh.w	r5, [r0, #132]	; 0x84
 801c7f6:	2400      	movs	r4, #0
 801c7f8:	b2a3      	uxth	r3, r4
 801c7fa:	42ab      	cmp	r3, r5
 801c7fc:	da0e      	bge.n	801c81c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x2c>
 801c7fe:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 801c802:	6852      	ldr	r2, [r2, #4]
 801c804:	428a      	cmp	r2, r1
 801c806:	d107      	bne.n	801c818 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801c808:	4403      	add	r3, r0
 801c80a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801c80e:	b11a      	cbz	r2, 801c818 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801c810:	3a01      	subs	r2, #1
 801c812:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 801c816:	bd30      	pop	{r4, r5, pc}
 801c818:	3401      	adds	r4, #1
 801c81a:	e7ed      	b.n	801c7f8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x8>
 801c81c:	bd30      	pop	{r4, r5, pc}

0801c81e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801c81e:	2300      	movs	r3, #0
 801c820:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801c824:	30a8      	adds	r0, #168	; 0xa8
 801c826:	f820 3c24 	strh.w	r3, [r0, #-36]
 801c82a:	f802 3b01 	strb.w	r3, [r2], #1
 801c82e:	4282      	cmp	r2, r0
 801c830:	d1fb      	bne.n	801c82a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801c832:	4770      	bx	lr

0801c834 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801c834:	4603      	mov	r3, r0
 801c836:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801c83a:	2200      	movs	r2, #0
 801c83c:	801a      	strh	r2, [r3, #0]
 801c83e:	3308      	adds	r3, #8
 801c840:	f823 2c06 	strh.w	r2, [r3, #-6]
 801c844:	f823 2c04 	strh.w	r2, [r3, #-4]
 801c848:	f823 2c02 	strh.w	r2, [r3, #-2]
 801c84c:	428b      	cmp	r3, r1
 801c84e:	d1f5      	bne.n	801c83c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801c850:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801c854:	4770      	bx	lr
	...

0801c858 <_ZN8touchgfx11ApplicationC1Ev>:
 801c858:	b570      	push	{r4, r5, r6, lr}
 801c85a:	4b16      	ldr	r3, [pc, #88]	; (801c8b4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801c85c:	2500      	movs	r5, #0
 801c85e:	4604      	mov	r4, r0
 801c860:	30a8      	adds	r0, #168	; 0xa8
 801c862:	f840 3ca8 	str.w	r3, [r0, #-168]
 801c866:	f820 5c24 	strh.w	r5, [r0, #-36]
 801c86a:	f7ff ffe3 	bl	801c834 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c86e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801c872:	f7ff ffdf 	bl	801c834 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c876:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801c87a:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801c87e:	490e      	ldr	r1, [pc, #56]	; (801c8b8 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801c880:	480e      	ldr	r0, [pc, #56]	; (801c8bc <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801c882:	f003 f9d3 	bl	801fc2c <CRC_Lock>
 801c886:	4e0e      	ldr	r6, [pc, #56]	; (801c8c0 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801c888:	4b0e      	ldr	r3, [pc, #56]	; (801c8c4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801c88a:	b158      	cbz	r0, 801c8a4 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801c88c:	801d      	strh	r5, [r3, #0]
 801c88e:	2300      	movs	r3, #0
 801c890:	4a0d      	ldr	r2, [pc, #52]	; (801c8c8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801c892:	4620      	mov	r0, r4
 801c894:	6013      	str	r3, [r2, #0]
 801c896:	4a0d      	ldr	r2, [pc, #52]	; (801c8cc <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801c898:	6033      	str	r3, [r6, #0]
 801c89a:	6013      	str	r3, [r2, #0]
 801c89c:	f7ff ffbf 	bl	801c81e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	bd70      	pop	{r4, r5, r6, pc}
 801c8a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c8a8:	2002      	movs	r0, #2
 801c8aa:	801a      	strh	r2, [r3, #0]
 801c8ac:	6030      	str	r0, [r6, #0]
 801c8ae:	f000 fe77 	bl	801d5a0 <_ZN8touchgfx6Screen4drawEv>
 801c8b2:	e7ec      	b.n	801c88e <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801c8b4:	08023014 	.word	0x08023014
 801c8b8:	b5e8b5cd 	.word	0xb5e8b5cd
 801c8bc:	f407a5c2 	.word	0xf407a5c2
 801c8c0:	20009d28 	.word	0x20009d28
 801c8c4:	20000048 	.word	0x20000048
 801c8c8:	20009d30 	.word	0x20009d30
 801c8cc:	20009d2c 	.word	0x20009d2c

0801c8d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801c8d0:	2300      	movs	r3, #0
 801c8d2:	8003      	strh	r3, [r0, #0]
 801c8d4:	8043      	strh	r3, [r0, #2]
 801c8d6:	8083      	strh	r3, [r0, #4]
 801c8d8:	80c3      	strh	r3, [r0, #6]
 801c8da:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801c8de:	429a      	cmp	r2, r3
 801c8e0:	b530      	push	{r4, r5, lr}
 801c8e2:	da12      	bge.n	801c90a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801c8e4:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801c8e8:	3b01      	subs	r3, #1
 801c8ea:	6825      	ldr	r5, [r4, #0]
 801c8ec:	b29b      	uxth	r3, r3
 801c8ee:	6005      	str	r5, [r0, #0]
 801c8f0:	429a      	cmp	r2, r3
 801c8f2:	6865      	ldr	r5, [r4, #4]
 801c8f4:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801c8f8:	6045      	str	r5, [r0, #4]
 801c8fa:	da06      	bge.n	801c90a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801c8fc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801c900:	681d      	ldr	r5, [r3, #0]
 801c902:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801c906:	685d      	ldr	r5, [r3, #4]
 801c908:	6065      	str	r5, [r4, #4]
 801c90a:	bd30      	pop	{r4, r5, pc}

0801c90c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801c90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c90e:	e88d 0006 	stmia.w	sp, {r1, r2}
 801c912:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801c916:	4604      	mov	r4, r0
 801c918:	466b      	mov	r3, sp
 801c91a:	2a07      	cmp	r2, #7
 801c91c:	dd06      	ble.n	801c92c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801c91e:	4b09      	ldr	r3, [pc, #36]	; (801c944 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801c920:	f240 11f9 	movw	r1, #505	; 0x1f9
 801c924:	4a08      	ldr	r2, [pc, #32]	; (801c948 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801c926:	4809      	ldr	r0, [pc, #36]	; (801c94c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801c928:	f003 fa82 	bl	801fe30 <__assert_func>
 801c92c:	1c51      	adds	r1, r2, #1
 801c92e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801c932:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c936:	cb03      	ldmia	r3!, {r0, r1}
 801c938:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801c93c:	6069      	str	r1, [r5, #4]
 801c93e:	b003      	add	sp, #12
 801c940:	bd30      	pop	{r4, r5, pc}
 801c942:	bf00      	nop
 801c944:	08022fb2 	.word	0x08022fb2
 801c948:	080230d1 	.word	0x080230d1
 801c94c:	08022fe1 	.word	0x08022fe1

0801c950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801c950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c954:	b089      	sub	sp, #36	; 0x24
 801c956:	4606      	mov	r6, r0
 801c958:	4668      	mov	r0, sp
 801c95a:	466c      	mov	r4, sp
 801c95c:	e88d 0006 	stmia.w	sp, {r1, r2}
 801c960:	f7f0 ff1a 	bl	800d798 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c964:	bbb0      	cbnz	r0, 801c9d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801c966:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801c96a:	b1fd      	cbz	r5, 801c9ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801c96c:	3d01      	subs	r5, #1
 801c96e:	af04      	add	r7, sp, #16
 801c970:	f04f 090a 	mov.w	r9, #10
 801c974:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801c978:	ab02      	add	r3, sp, #8
 801c97a:	fa1f f885 	uxth.w	r8, r5
 801c97e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c982:	6851      	ldr	r1, [r2, #4]
 801c984:	c303      	stmia	r3!, {r0, r1}
 801c986:	4621      	mov	r1, r4
 801c988:	a802      	add	r0, sp, #8
 801c98a:	f7ff fed9 	bl	801c740 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c98e:	bb08      	cbnz	r0, 801c9d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801c990:	a902      	add	r1, sp, #8
 801c992:	4620      	mov	r0, r4
 801c994:	f7ff fed4 	bl	801c740 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c998:	b1f8      	cbz	r0, 801c9da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801c99a:	4642      	mov	r2, r8
 801c99c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c9a0:	a806      	add	r0, sp, #24
 801c9a2:	f7ff ff95 	bl	801c8d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c9a6:	f115 35ff 	adds.w	r5, r5, #4294967295
 801c9aa:	d2e3      	bcs.n	801c974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801c9ac:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801c9b0:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801c9b4:	2b08      	cmp	r3, #8
 801c9b6:	d108      	bne.n	801c9ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801c9b8:	4629      	mov	r1, r5
 801c9ba:	a806      	add	r0, sp, #24
 801c9bc:	2207      	movs	r2, #7
 801c9be:	f7ff ff87 	bl	801c8d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c9c2:	a906      	add	r1, sp, #24
 801c9c4:	4620      	mov	r0, r4
 801c9c6:	f7f0 fe5b 	bl	800d680 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c9ca:	4628      	mov	r0, r5
 801c9cc:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c9d0:	f7ff ff9c 	bl	801c90c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c9d4:	b009      	add	sp, #36	; 0x24
 801c9d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c9da:	4621      	mov	r1, r4
 801c9dc:	a802      	add	r0, sp, #8
 801c9de:	f7f0 fd8c 	bl	800d4fa <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c9e2:	b150      	cbz	r0, 801c9fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801c9e4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c9e8:	a806      	add	r0, sp, #24
 801c9ea:	4642      	mov	r2, r8
 801c9ec:	f7ff ff70 	bl	801c8d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c9f0:	a902      	add	r1, sp, #8
 801c9f2:	4620      	mov	r0, r4
 801c9f4:	f7f0 fe44 	bl	800d680 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c9f8:	e7d5      	b.n	801c9a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c9fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c9fe:	e887 0003 	stmia.w	r7, {r0, r1}
 801ca02:	a902      	add	r1, sp, #8
 801ca04:	4638      	mov	r0, r7
 801ca06:	f7f0 fe3b 	bl	800d680 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ca0a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ca0e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801ca12:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801ca16:	fb13 f302 	smulbb	r3, r3, r2
 801ca1a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801ca1e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801ca22:	fb11 f102 	smulbb	r1, r1, r2
 801ca26:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ca2a:	fb09 f303 	mul.w	r3, r9, r3
 801ca2e:	fb12 1100 	smlabb	r1, r2, r0, r1
 801ca32:	220b      	movs	r2, #11
 801ca34:	434a      	muls	r2, r1
 801ca36:	4293      	cmp	r3, r2
 801ca38:	dab5      	bge.n	801c9a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801ca3a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801ca3e:	a806      	add	r0, sp, #24
 801ca40:	4642      	mov	r2, r8
 801ca42:	f7ff ff45 	bl	801c8d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ca46:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ca4a:	e884 0003 	stmia.w	r4, {r0, r1}
 801ca4e:	e7aa      	b.n	801c9a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801ca50 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801ca50:	4b1b      	ldr	r3, [pc, #108]	; (801cac0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 801ca52:	b530      	push	{r4, r5, lr}
 801ca54:	460c      	mov	r4, r1
 801ca56:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ca5a:	4b1a      	ldr	r3, [pc, #104]	; (801cac4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 801ca5c:	b085      	sub	sp, #20
 801ca5e:	4605      	mov	r5, r0
 801ca60:	6820      	ldr	r0, [r4, #0]
 801ca62:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ca66:	2300      	movs	r3, #0
 801ca68:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ca6c:	f8ad 3000 	strh.w	r3, [sp]
 801ca70:	6861      	ldr	r1, [r4, #4]
 801ca72:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ca76:	ab02      	add	r3, sp, #8
 801ca78:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ca7c:	c303      	stmia	r3!, {r0, r1}
 801ca7e:	4669      	mov	r1, sp
 801ca80:	a802      	add	r0, sp, #8
 801ca82:	f7f0 fd81 	bl	800d588 <_ZN8touchgfx4RectaNERKS0_>
 801ca86:	ab02      	add	r3, sp, #8
 801ca88:	cb03      	ldmia	r3!, {r0, r1}
 801ca8a:	4b0f      	ldr	r3, [pc, #60]	; (801cac8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801ca8c:	6020      	str	r0, [r4, #0]
 801ca8e:	6818      	ldr	r0, [r3, #0]
 801ca90:	6061      	str	r1, [r4, #4]
 801ca92:	b138      	cbz	r0, 801caa4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801ca94:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801ca98:	b133      	cbz	r3, 801caa8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 801ca9a:	6821      	ldr	r1, [r4, #0]
 801ca9c:	4628      	mov	r0, r5
 801ca9e:	6862      	ldr	r2, [r4, #4]
 801caa0:	f7ff ff56 	bl	801c950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801caa4:	b005      	add	sp, #20
 801caa6:	bd30      	pop	{r4, r5, pc}
 801caa8:	6803      	ldr	r3, [r0, #0]
 801caaa:	4621      	mov	r1, r4
 801caac:	689b      	ldr	r3, [r3, #8]
 801caae:	4798      	blx	r3
 801cab0:	4b06      	ldr	r3, [pc, #24]	; (801cacc <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801cab2:	4621      	mov	r1, r4
 801cab4:	6818      	ldr	r0, [r3, #0]
 801cab6:	6803      	ldr	r3, [r0, #0]
 801cab8:	695b      	ldr	r3, [r3, #20]
 801caba:	4798      	blx	r3
 801cabc:	e7f2      	b.n	801caa4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801cabe:	bf00      	nop
 801cac0:	20009cc8 	.word	0x20009cc8
 801cac4:	20009cca 	.word	0x20009cca
 801cac8:	20009d28 	.word	0x20009d28
 801cacc:	20009cd4 	.word	0x20009cd4

0801cad0 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801cad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cad4:	4604      	mov	r4, r0
 801cad6:	b096      	sub	sp, #88	; 0x58
 801cad8:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801cadc:	b129      	cbz	r1, 801caea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801cade:	2300      	movs	r3, #0
 801cae0:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801cae4:	b016      	add	sp, #88	; 0x58
 801cae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801caea:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d0f8      	beq.n	801cae4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801caf2:	4f6e      	ldr	r7, [pc, #440]	; (801ccac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1dc>)
 801caf4:	a805      	add	r0, sp, #20
 801caf6:	f7ff fe9d 	bl	801c834 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801cafa:	883d      	ldrh	r5, [r7, #0]
 801cafc:	462e      	mov	r6, r5
 801cafe:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801cb02:	429e      	cmp	r6, r3
 801cb04:	db10      	blt.n	801cb28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 801cb06:	462e      	mov	r6, r5
 801cb08:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801cb0c:	429e      	cmp	r6, r3
 801cb0e:	da17      	bge.n	801cb40 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801cb10:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801cb14:	3601      	adds	r6, #1
 801cb16:	4620      	mov	r0, r4
 801cb18:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801cb1c:	b2b6      	uxth	r6, r6
 801cb1e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801cb22:	f7ff ff15 	bl	801c950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801cb26:	e7ef      	b.n	801cb08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 801cb28:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801cb2c:	3601      	adds	r6, #1
 801cb2e:	a805      	add	r0, sp, #20
 801cb30:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801cb34:	b2b6      	uxth	r6, r6
 801cb36:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801cb3a:	f7ff fee7 	bl	801c90c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801cb3e:	e7de      	b.n	801cafe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 801cb40:	4e5b      	ldr	r6, [pc, #364]	; (801ccb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e0>)
 801cb42:	6833      	ldr	r3, [r6, #0]
 801cb44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801cb48:	2b01      	cmp	r3, #1
 801cb4a:	f040 8094 	bne.w	801cc76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801cb4e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801cb52:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801cb56:	f04f 0900 	mov.w	r9, #0
 801cb5a:	33aa      	adds	r3, #170	; 0xaa
 801cb5c:	42a8      	cmp	r0, r5
 801cb5e:	f103 0308 	add.w	r3, r3, #8
 801cb62:	dd0a      	ble.n	801cb7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 801cb64:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801cb68:	3501      	adds	r5, #1
 801cb6a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801cb6e:	440a      	add	r2, r1
 801cb70:	b212      	sxth	r2, r2
 801cb72:	4591      	cmp	r9, r2
 801cb74:	bfb8      	it	lt
 801cb76:	4691      	movlt	r9, r2
 801cb78:	e7f0      	b.n	801cb5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 801cb7a:	4b4e      	ldr	r3, [pc, #312]	; (801ccb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e4>)
 801cb7c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 801ccbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ec>
 801cb80:	881d      	ldrh	r5, [r3, #0]
 801cb82:	2300      	movs	r3, #0
 801cb84:	08ed      	lsrs	r5, r5, #3
 801cb86:	f8ad 3004 	strh.w	r3, [sp, #4]
 801cb8a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cb8e:	2d01      	cmp	r5, #1
 801cb90:	f8ad 3008 	strh.w	r3, [sp, #8]
 801cb94:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cb98:	bfb8      	it	lt
 801cb9a:	2501      	movlt	r5, #1
 801cb9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801cba0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cba4:	6830      	ldr	r0, [r6, #0]
 801cba6:	4413      	add	r3, r2
 801cba8:	b21b      	sxth	r3, r3
 801cbaa:	4599      	cmp	r9, r3
 801cbac:	6803      	ldr	r3, [r0, #0]
 801cbae:	dd45      	ble.n	801cc3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 801cbb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cbb4:	4798      	blx	r3
 801cbb6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cbba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801cbbe:	4413      	add	r3, r2
 801cbc0:	b21b      	sxth	r3, r3
 801cbc2:	18ea      	adds	r2, r5, r3
 801cbc4:	4290      	cmp	r0, r2
 801cbc6:	da6d      	bge.n	801cca4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801cbc8:	4581      	cmp	r9, r0
 801cbca:	dd6b      	ble.n	801cca4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801cbcc:	4298      	cmp	r0, r3
 801cbce:	da01      	bge.n	801cbd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x104>
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	dc69      	bgt.n	801cca8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d8>
 801cbd4:	6830      	ldr	r0, [r6, #0]
 801cbd6:	2101      	movs	r1, #1
 801cbd8:	6803      	ldr	r3, [r0, #0]
 801cbda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cbdc:	4798      	blx	r3
 801cbde:	e7dd      	b.n	801cb9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801cbe0:	4548      	cmp	r0, r9
 801cbe2:	bfa8      	it	ge
 801cbe4:	4648      	movge	r0, r9
 801cbe6:	f9b8 2000 	ldrsh.w	r2, [r8]
 801cbea:	2100      	movs	r1, #0
 801cbec:	1ac0      	subs	r0, r0, r3
 801cbee:	f8b7 a000 	ldrh.w	sl, [r7]
 801cbf2:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cbf6:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cbfa:	f8ad 2008 	strh.w	r2, [sp, #8]
 801cbfe:	f8ad 000a 	strh.w	r0, [sp, #10]
 801cc02:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801cc06:	459a      	cmp	sl, r3
 801cc08:	dac8      	bge.n	801cb9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801cc0a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801cc0e:	ab03      	add	r3, sp, #12
 801cc10:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801cc14:	6851      	ldr	r1, [r2, #4]
 801cc16:	c303      	stmia	r3!, {r0, r1}
 801cc18:	a803      	add	r0, sp, #12
 801cc1a:	a901      	add	r1, sp, #4
 801cc1c:	f7f0 fcb4 	bl	800d588 <_ZN8touchgfx4RectaNERKS0_>
 801cc20:	a803      	add	r0, sp, #12
 801cc22:	f7f0 fdb9 	bl	800d798 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cc26:	b920      	cbnz	r0, 801cc32 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x162>
 801cc28:	6823      	ldr	r3, [r4, #0]
 801cc2a:	a903      	add	r1, sp, #12
 801cc2c:	4620      	mov	r0, r4
 801cc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc30:	4798      	blx	r3
 801cc32:	f10a 0a01 	add.w	sl, sl, #1
 801cc36:	fa1f fa8a 	uxth.w	sl, sl
 801cc3a:	e7e2      	b.n	801cc02 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801cc3c:	69db      	ldr	r3, [r3, #28]
 801cc3e:	4798      	blx	r3
 801cc40:	4b1d      	ldr	r3, [pc, #116]	; (801ccb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e8>)
 801cc42:	781b      	ldrb	r3, [r3, #0]
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	f43f af4d 	beq.w	801cae4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801cc4a:	2300      	movs	r3, #0
 801cc4c:	883d      	ldrh	r5, [r7, #0]
 801cc4e:	34ea      	adds	r4, #234	; 0xea
 801cc50:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801cc54:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801cc58:	429d      	cmp	r5, r3
 801cc5a:	f6bf af43 	bge.w	801cae4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801cc5e:	ab16      	add	r3, sp, #88	; 0x58
 801cc60:	4620      	mov	r0, r4
 801cc62:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801cc66:	3501      	adds	r5, #1
 801cc68:	3b44      	subs	r3, #68	; 0x44
 801cc6a:	b2ad      	uxth	r5, r5
 801cc6c:	e893 0006 	ldmia.w	r3, {r1, r2}
 801cc70:	f7ff fe4c 	bl	801c90c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801cc74:	e7ee      	b.n	801cc54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x184>
 801cc76:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801cc7a:	429d      	cmp	r5, r3
 801cc7c:	dae0      	bge.n	801cc40 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801cc7e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801cc82:	ab03      	add	r3, sp, #12
 801cc84:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801cc88:	6851      	ldr	r1, [r2, #4]
 801cc8a:	c303      	stmia	r3!, {r0, r1}
 801cc8c:	a803      	add	r0, sp, #12
 801cc8e:	f7f0 fd83 	bl	800d798 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cc92:	b920      	cbnz	r0, 801cc9e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801cc94:	6823      	ldr	r3, [r4, #0]
 801cc96:	a903      	add	r1, sp, #12
 801cc98:	4620      	mov	r0, r4
 801cc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc9c:	4798      	blx	r3
 801cc9e:	3501      	adds	r5, #1
 801cca0:	b2ad      	uxth	r5, r5
 801cca2:	e7e8      	b.n	801cc76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801cca4:	4298      	cmp	r0, r3
 801cca6:	da9b      	bge.n	801cbe0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x110>
 801cca8:	4648      	mov	r0, r9
 801ccaa:	e79c      	b.n	801cbe6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x116>
 801ccac:	20000048 	.word	0x20000048
 801ccb0:	20009cd4 	.word	0x20009cd4
 801ccb4:	20009cca 	.word	0x20009cca
 801ccb8:	20009cd2 	.word	0x20009cd2
 801ccbc:	20009cc8 	.word	0x20009cc8

0801ccc0 <_ZNK8touchgfx4Font8getGlyphEt>:
 801ccc0:	b513      	push	{r0, r1, r4, lr}
 801ccc2:	2200      	movs	r2, #0
 801ccc4:	ab02      	add	r3, sp, #8
 801ccc6:	9201      	str	r2, [sp, #4]
 801ccc8:	f803 2d05 	strb.w	r2, [r3, #-5]!
 801cccc:	6802      	ldr	r2, [r0, #0]
 801ccce:	6894      	ldr	r4, [r2, #8]
 801ccd0:	aa01      	add	r2, sp, #4
 801ccd2:	47a0      	blx	r4
 801ccd4:	b002      	add	sp, #8
 801ccd6:	bd10      	pop	{r4, pc}

0801ccd8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
 801ccd8:	8940      	ldrh	r0, [r0, #10]
 801ccda:	4770      	bx	lr

0801ccdc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
 801ccdc:	8980      	ldrh	r0, [r0, #12]
 801ccde:	4770      	bx	lr

0801cce0 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801cce0:	8880      	ldrh	r0, [r0, #4]
 801cce2:	4770      	bx	lr

0801cce4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801cce4:	7983      	ldrb	r3, [r0, #6]
 801cce6:	8880      	ldrh	r0, [r0, #4]
 801cce8:	4418      	add	r0, r3
 801ccea:	b280      	uxth	r0, r0
 801ccec:	4770      	bx	lr

0801ccee <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
 801ccee:	79c0      	ldrb	r0, [r0, #7]
 801ccf0:	4770      	bx	lr

0801ccf2 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801ccf2:	2000      	movs	r0, #0
 801ccf4:	4770      	bx	lr

0801ccf6 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ccf6:	b508      	push	{r3, lr}
 801ccf8:	6803      	ldr	r3, [r0, #0]
 801ccfa:	68db      	ldr	r3, [r3, #12]
 801ccfc:	4798      	blx	r3
 801ccfe:	b140      	cbz	r0, 801cd12 <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 801cd00:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801cd04:	7a83      	ldrb	r3, [r0, #10]
 801cd06:	2a00      	cmp	r2, #0
 801cd08:	bfb4      	ite	lt
 801cd0a:	f44f 7080 	movlt.w	r0, #256	; 0x100
 801cd0e:	2000      	movge	r0, #0
 801cd10:	4318      	orrs	r0, r3
 801cd12:	bd08      	pop	{r3, pc}

0801cd14 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801cd14:	b40e      	push	{r1, r2, r3}
 801cd16:	b533      	push	{r0, r1, r4, r5, lr}
 801cd18:	ab05      	add	r3, sp, #20
 801cd1a:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd1e:	9301      	str	r3, [sp, #4]
 801cd20:	4b0a      	ldr	r3, [pc, #40]	; (801cd4c <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801cd22:	685c      	ldr	r4, [r3, #4]
 801cd24:	f014 0f01 	tst.w	r4, #1
 801cd28:	ea4f 0464 	mov.w	r4, r4, asr #1
 801cd2c:	bf1c      	itt	ne
 801cd2e:	681b      	ldrne	r3, [r3, #0]
 801cd30:	5901      	ldrne	r1, [r0, r4]
 801cd32:	4420      	add	r0, r4
 801cd34:	bf0c      	ite	eq
 801cd36:	681d      	ldreq	r5, [r3, #0]
 801cd38:	58cd      	ldrne	r5, [r1, r3]
 801cd3a:	2100      	movs	r1, #0
 801cd3c:	9b01      	ldr	r3, [sp, #4]
 801cd3e:	47a8      	blx	r5
 801cd40:	b002      	add	sp, #8
 801cd42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cd46:	b003      	add	sp, #12
 801cd48:	4770      	bx	lr
 801cd4a:	bf00      	nop
 801cd4c:	20000040 	.word	0x20000040

0801cd50 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801cd50:	b40c      	push	{r2, r3}
 801cd52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cd54:	ab06      	add	r3, sp, #24
 801cd56:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd5a:	9301      	str	r3, [sp, #4]
 801cd5c:	4b09      	ldr	r3, [pc, #36]	; (801cd84 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801cd5e:	685c      	ldr	r4, [r3, #4]
 801cd60:	f014 0f01 	tst.w	r4, #1
 801cd64:	ea4f 0464 	mov.w	r4, r4, asr #1
 801cd68:	bf1c      	itt	ne
 801cd6a:	681b      	ldrne	r3, [r3, #0]
 801cd6c:	5905      	ldrne	r5, [r0, r4]
 801cd6e:	4420      	add	r0, r4
 801cd70:	bf0c      	ite	eq
 801cd72:	681d      	ldreq	r5, [r3, #0]
 801cd74:	58ed      	ldrne	r5, [r5, r3]
 801cd76:	9b01      	ldr	r3, [sp, #4]
 801cd78:	47a8      	blx	r5
 801cd7a:	b003      	add	sp, #12
 801cd7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cd80:	b002      	add	sp, #8
 801cd82:	4770      	bx	lr
 801cd84:	20000040 	.word	0x20000040

0801cd88 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801cd88:	b40e      	push	{r1, r2, r3}
 801cd8a:	b510      	push	{r4, lr}
 801cd8c:	b089      	sub	sp, #36	; 0x24
 801cd8e:	ab0b      	add	r3, sp, #44	; 0x2c
 801cd90:	a802      	add	r0, sp, #8
 801cd92:	f853 4b04 	ldr.w	r4, [r3], #4
 801cd96:	9301      	str	r3, [sp, #4]
 801cd98:	f000 fea6 	bl	801dae8 <_ZN8touchgfx12TextProviderC1Ev>
 801cd9c:	4621      	mov	r1, r4
 801cd9e:	9a01      	ldr	r2, [sp, #4]
 801cda0:	a802      	add	r0, sp, #8
 801cda2:	2401      	movs	r4, #1
 801cda4:	f000 fea9 	bl	801dafa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801cda8:	a802      	add	r0, sp, #8
 801cdaa:	f000 fe4d 	bl	801da48 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cdae:	b138      	cbz	r0, 801cdc0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x38>
 801cdb0:	280a      	cmp	r0, #10
 801cdb2:	a802      	add	r0, sp, #8
 801cdb4:	bf04      	itt	eq
 801cdb6:	3401      	addeq	r4, #1
 801cdb8:	b224      	sxtheq	r4, r4
 801cdba:	f000 fe45 	bl	801da48 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cdbe:	e7f6      	b.n	801cdae <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x26>
 801cdc0:	b2a0      	uxth	r0, r4
 801cdc2:	b009      	add	sp, #36	; 0x24
 801cdc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cdc8:	b003      	add	sp, #12
 801cdca:	4770      	bx	lr

0801cdcc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801cdcc:	b40e      	push	{r1, r2, r3}
 801cdce:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdd0:	b088      	sub	sp, #32
 801cdd2:	4604      	mov	r4, r0
 801cdd4:	2600      	movs	r6, #0
 801cdd6:	ab0d      	add	r3, sp, #52	; 0x34
 801cdd8:	a802      	add	r0, sp, #8
 801cdda:	f853 5b04 	ldr.w	r5, [r3], #4
 801cdde:	9301      	str	r3, [sp, #4]
 801cde0:	f000 fe82 	bl	801dae8 <_ZN8touchgfx12TextProviderC1Ev>
 801cde4:	4629      	mov	r1, r5
 801cde6:	9a01      	ldr	r2, [sp, #4]
 801cde8:	a802      	add	r0, sp, #8
 801cdea:	4d1f      	ldr	r5, [pc, #124]	; (801ce68 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x9c>)
 801cdec:	f000 fe85 	bl	801dafa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801cdf0:	2100      	movs	r1, #0
 801cdf2:	a802      	add	r0, sp, #8
 801cdf4:	f000 fe32 	bl	801da5c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cdf8:	b378      	cbz	r0, 801ce5a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801cdfa:	280a      	cmp	r0, #10
 801cdfc:	d028      	beq.n	801ce50 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801cdfe:	6823      	ldr	r3, [r4, #0]
 801ce00:	4601      	mov	r1, r0
 801ce02:	4620      	mov	r0, r4
 801ce04:	68db      	ldr	r3, [r3, #12]
 801ce06:	4798      	blx	r3
 801ce08:	b310      	cbz	r0, 801ce50 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801ce0a:	7b41      	ldrb	r1, [r0, #13]
 801ce0c:	f890 e008 	ldrb.w	lr, [r0, #8]
 801ce10:	f011 0f40 	tst.w	r1, #64	; 0x40
 801ce14:	88a3      	ldrh	r3, [r4, #4]
 801ce16:	79c0      	ldrb	r0, [r0, #7]
 801ce18:	bf14      	ite	ne
 801ce1a:	462f      	movne	r7, r5
 801ce1c:	2700      	moveq	r7, #0
 801ce1e:	f011 0f20 	tst.w	r1, #32
 801ce22:	ea47 070e 	orr.w	r7, r7, lr
 801ce26:	bf14      	ite	ne
 801ce28:	f44f 7280 	movne.w	r2, #256	; 0x100
 801ce2c:	2200      	moveq	r2, #0
 801ce2e:	f011 0f10 	tst.w	r1, #16
 801ce32:	ea42 0207 	orr.w	r2, r2, r7
 801ce36:	eba3 0302 	sub.w	r3, r3, r2
 801ce3a:	bf14      	ite	ne
 801ce3c:	f44f 7280 	movne.w	r2, #256	; 0x100
 801ce40:	2200      	moveq	r2, #0
 801ce42:	4302      	orrs	r2, r0
 801ce44:	fa12 f383 	uxtah	r3, r2, r3
 801ce48:	b29b      	uxth	r3, r3
 801ce4a:	42b3      	cmp	r3, r6
 801ce4c:	bfc8      	it	gt
 801ce4e:	b21e      	sxthgt	r6, r3
 801ce50:	2100      	movs	r1, #0
 801ce52:	a802      	add	r0, sp, #8
 801ce54:	f000 fe02 	bl	801da5c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ce58:	e7ce      	b.n	801cdf8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x2c>
 801ce5a:	b2b0      	uxth	r0, r6
 801ce5c:	b008      	add	sp, #32
 801ce5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ce62:	b003      	add	sp, #12
 801ce64:	4770      	bx	lr
 801ce66:	bf00      	nop
 801ce68:	fffffe00 	.word	0xfffffe00

0801ce6c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801ce6c:	b40e      	push	{r1, r2, r3}
 801ce6e:	b530      	push	{r4, r5, lr}
 801ce70:	b088      	sub	sp, #32
 801ce72:	4605      	mov	r5, r0
 801ce74:	ab0b      	add	r3, sp, #44	; 0x2c
 801ce76:	a802      	add	r0, sp, #8
 801ce78:	f853 4b04 	ldr.w	r4, [r3], #4
 801ce7c:	9301      	str	r3, [sp, #4]
 801ce7e:	f000 fe33 	bl	801dae8 <_ZN8touchgfx12TextProviderC1Ev>
 801ce82:	4621      	mov	r1, r4
 801ce84:	9a01      	ldr	r2, [sp, #4]
 801ce86:	a802      	add	r0, sp, #8
 801ce88:	24ff      	movs	r4, #255	; 0xff
 801ce8a:	f000 fe36 	bl	801dafa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801ce8e:	2100      	movs	r1, #0
 801ce90:	a802      	add	r0, sp, #8
 801ce92:	f000 fde3 	bl	801da5c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ce96:	b1a0      	cbz	r0, 801cec2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x56>
 801ce98:	280a      	cmp	r0, #10
 801ce9a:	d00d      	beq.n	801ceb8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801ce9c:	682b      	ldr	r3, [r5, #0]
 801ce9e:	4601      	mov	r1, r0
 801cea0:	4628      	mov	r0, r5
 801cea2:	68db      	ldr	r3, [r3, #12]
 801cea4:	4798      	blx	r3
 801cea6:	b138      	cbz	r0, 801ceb8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801cea8:	792b      	ldrb	r3, [r5, #4]
 801ceaa:	7a02      	ldrb	r2, [r0, #8]
 801ceac:	1a9b      	subs	r3, r3, r2
 801ceae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801ceb2:	429c      	cmp	r4, r3
 801ceb4:	bfa8      	it	ge
 801ceb6:	461c      	movge	r4, r3
 801ceb8:	2100      	movs	r1, #0
 801ceba:	a802      	add	r0, sp, #8
 801cebc:	f000 fdce 	bl	801da5c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cec0:	e7e9      	b.n	801ce96 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x2a>
 801cec2:	4620      	mov	r0, r4
 801cec4:	b008      	add	sp, #32
 801cec6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ceca:	b003      	add	sp, #12
 801cecc:	4770      	bx	lr

0801cece <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801cece:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ced2:	f04f 0a00 	mov.w	sl, #0
 801ced6:	b087      	sub	sp, #28
 801ced8:	4614      	mov	r4, r2
 801ceda:	461d      	mov	r5, r3
 801cedc:	4606      	mov	r6, r0
 801cede:	4657      	mov	r7, sl
 801cee0:	4668      	mov	r0, sp
 801cee2:	46d1      	mov	r9, sl
 801cee4:	4688      	mov	r8, r1
 801cee6:	f000 fdff 	bl	801dae8 <_ZN8touchgfx12TextProviderC1Ev>
 801ceea:	462a      	mov	r2, r5
 801ceec:	4621      	mov	r1, r4
 801ceee:	4668      	mov	r0, sp
 801cef0:	f000 fe03 	bl	801dafa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801cef4:	4641      	mov	r1, r8
 801cef6:	4668      	mov	r0, sp
 801cef8:	f000 fdb0 	bl	801da5c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cefc:	4605      	mov	r5, r0
 801cefe:	b108      	cbz	r0, 801cf04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x36>
 801cf00:	280a      	cmp	r0, #10
 801cf02:	d107      	bne.n	801cf14 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801cf04:	45b9      	cmp	r9, r7
 801cf06:	dd00      	ble.n	801cf0a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x3c>
 801cf08:	464f      	mov	r7, r9
 801cf0a:	f04f 0900 	mov.w	r9, #0
 801cf0e:	e01e      	b.n	801cf4e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x80>
 801cf10:	46aa      	mov	sl, r5
 801cf12:	e7ef      	b.n	801cef4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x26>
 801cf14:	6833      	ldr	r3, [r6, #0]
 801cf16:	4601      	mov	r1, r0
 801cf18:	4630      	mov	r0, r6
 801cf1a:	68db      	ldr	r3, [r3, #12]
 801cf1c:	4798      	blx	r3
 801cf1e:	4602      	mov	r2, r0
 801cf20:	2800      	cmp	r0, #0
 801cf22:	d0f5      	beq.n	801cf10 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801cf24:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801cf28:	4651      	mov	r1, sl
 801cf2a:	f890 b00a 	ldrb.w	fp, [r0, #10]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	6833      	ldr	r3, [r6, #0]
 801cf32:	8885      	ldrh	r5, [r0, #4]
 801cf34:	4630      	mov	r0, r6
 801cf36:	bfb4      	ite	lt
 801cf38:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801cf3c:	2400      	movge	r4, #0
 801cf3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf40:	ea44 040b 	orr.w	r4, r4, fp
 801cf44:	4798      	blx	r3
 801cf46:	4404      	add	r4, r0
 801cf48:	444c      	add	r4, r9
 801cf4a:	fa1f f984 	uxth.w	r9, r4
 801cf4e:	2d00      	cmp	r5, #0
 801cf50:	d1de      	bne.n	801cf10 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801cf52:	4638      	mov	r0, r7
 801cf54:	b007      	add	sp, #28
 801cf56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf5a <_ZNK8touchgfx8Drawable7getTypeEv>:
 801cf5a:	2000      	movs	r0, #0
 801cf5c:	4770      	bx	lr

0801cf5e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801cf5e:	b513      	push	{r0, r1, r4, lr}
 801cf60:	1d01      	adds	r1, r0, #4
 801cf62:	4603      	mov	r3, r0
 801cf64:	c903      	ldmia	r1, {r0, r1}
 801cf66:	e88d 0003 	stmia.w	sp, {r0, r1}
 801cf6a:	2100      	movs	r1, #0
 801cf6c:	4618      	mov	r0, r3
 801cf6e:	f8ad 1000 	strh.w	r1, [sp]
 801cf72:	f8ad 1002 	strh.w	r1, [sp, #2]
 801cf76:	6819      	ldr	r1, [r3, #0]
 801cf78:	690c      	ldr	r4, [r1, #16]
 801cf7a:	4669      	mov	r1, sp
 801cf7c:	47a0      	blx	r4
 801cf7e:	b002      	add	sp, #8
 801cf80:	bd10      	pop	{r4, pc}

0801cf82 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801cf82:	b538      	push	{r3, r4, r5, lr}
 801cf84:	680b      	ldr	r3, [r1, #0]
 801cf86:	460c      	mov	r4, r1
 801cf88:	4605      	mov	r5, r0
 801cf8a:	68db      	ldr	r3, [r3, #12]
 801cf8c:	4798      	blx	r3
 801cf8e:	6823      	ldr	r3, [r4, #0]
 801cf90:	4620      	mov	r0, r4
 801cf92:	4629      	mov	r1, r5
 801cf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf96:	4798      	blx	r3
 801cf98:	4628      	mov	r0, r5
 801cf9a:	bd38      	pop	{r3, r4, r5, pc}

0801cf9c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801cf9c:	b410      	push	{r4}
 801cf9e:	880a      	ldrh	r2, [r1, #0]
 801cfa0:	8884      	ldrh	r4, [r0, #4]
 801cfa2:	4422      	add	r2, r4
 801cfa4:	800a      	strh	r2, [r1, #0]
 801cfa6:	884a      	ldrh	r2, [r1, #2]
 801cfa8:	88c4      	ldrh	r4, [r0, #6]
 801cfaa:	4422      	add	r2, r4
 801cfac:	804a      	strh	r2, [r1, #2]
 801cfae:	6940      	ldr	r0, [r0, #20]
 801cfb0:	b120      	cbz	r0, 801cfbc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801cfb2:	6803      	ldr	r3, [r0, #0]
 801cfb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cfb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfba:	4718      	bx	r3
 801cfbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cfc0:	4770      	bx	lr

0801cfc2 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801cfc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cfc4:	460b      	mov	r3, r1
 801cfc6:	b085      	sub	sp, #20
 801cfc8:	4604      	mov	r4, r0
 801cfca:	b901      	cbnz	r1, 801cfce <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801cfcc:	b1f2      	cbz	r2, 801d00c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 801cfce:	1d27      	adds	r7, r4, #4
 801cfd0:	ad02      	add	r5, sp, #8
 801cfd2:	e897 0003 	ldmia.w	r7, {r0, r1}
 801cfd6:	e88d 0003 	stmia.w	sp, {r0, r1}
 801cfda:	88e1      	ldrh	r1, [r4, #6]
 801cfdc:	4620      	mov	r0, r4
 801cfde:	440a      	add	r2, r1
 801cfe0:	88a1      	ldrh	r1, [r4, #4]
 801cfe2:	4419      	add	r1, r3
 801cfe4:	6823      	ldr	r3, [r4, #0]
 801cfe6:	b212      	sxth	r2, r2
 801cfe8:	b209      	sxth	r1, r1
 801cfea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cfec:	4798      	blx	r3
 801cfee:	e897 0003 	ldmia.w	r7, {r0, r1}
 801cff2:	e885 0003 	stmia.w	r5, {r0, r1}
 801cff6:	6960      	ldr	r0, [r4, #20]
 801cff8:	b150      	cbz	r0, 801d010 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 801cffa:	6803      	ldr	r3, [r0, #0]
 801cffc:	4669      	mov	r1, sp
 801cffe:	691b      	ldr	r3, [r3, #16]
 801d000:	4798      	blx	r3
 801d002:	6960      	ldr	r0, [r4, #20]
 801d004:	6803      	ldr	r3, [r0, #0]
 801d006:	691b      	ldr	r3, [r3, #16]
 801d008:	4629      	mov	r1, r5
 801d00a:	4798      	blx	r3
 801d00c:	b005      	add	sp, #20
 801d00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d010:	f7ff fbb8 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 801d014:	6803      	ldr	r3, [r0, #0]
 801d016:	4669      	mov	r1, sp
 801d018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d01a:	4798      	blx	r3
 801d01c:	f7ff fbb2 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 801d020:	6803      	ldr	r3, [r0, #0]
 801d022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d024:	e7f0      	b.n	801d008 <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0801d026 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801d026:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d028:	8882      	ldrh	r2, [r0, #4]
 801d02a:	4605      	mov	r5, r0
 801d02c:	880b      	ldrh	r3, [r1, #0]
 801d02e:	460c      	mov	r4, r1
 801d030:	4413      	add	r3, r2
 801d032:	800b      	strh	r3, [r1, #0]
 801d034:	884b      	ldrh	r3, [r1, #2]
 801d036:	88c2      	ldrh	r2, [r0, #6]
 801d038:	4413      	add	r3, r2
 801d03a:	4602      	mov	r2, r0
 801d03c:	804b      	strh	r3, [r1, #2]
 801d03e:	466b      	mov	r3, sp
 801d040:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801d044:	6851      	ldr	r1, [r2, #4]
 801d046:	c303      	stmia	r3!, {r0, r1}
 801d048:	4621      	mov	r1, r4
 801d04a:	4668      	mov	r0, sp
 801d04c:	f7f0 fa9c 	bl	800d588 <_ZN8touchgfx4RectaNERKS0_>
 801d050:	466b      	mov	r3, sp
 801d052:	cb03      	ldmia	r3!, {r0, r1}
 801d054:	6020      	str	r0, [r4, #0]
 801d056:	6061      	str	r1, [r4, #4]
 801d058:	6968      	ldr	r0, [r5, #20]
 801d05a:	b128      	cbz	r0, 801d068 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801d05c:	6803      	ldr	r3, [r0, #0]
 801d05e:	691b      	ldr	r3, [r3, #16]
 801d060:	4621      	mov	r1, r4
 801d062:	4798      	blx	r3
 801d064:	b003      	add	sp, #12
 801d066:	bd30      	pop	{r4, r5, pc}
 801d068:	f7ff fb8c 	bl	801c784 <_ZN8touchgfx11Application11getInstanceEv>
 801d06c:	6803      	ldr	r3, [r0, #0]
 801d06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d070:	e7f6      	b.n	801d060 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801d072 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801d072:	b570      	push	{r4, r5, r6, lr}
 801d074:	8882      	ldrh	r2, [r0, #4]
 801d076:	460c      	mov	r4, r1
 801d078:	880b      	ldrh	r3, [r1, #0]
 801d07a:	4605      	mov	r5, r0
 801d07c:	4413      	add	r3, r2
 801d07e:	800b      	strh	r3, [r1, #0]
 801d080:	884b      	ldrh	r3, [r1, #2]
 801d082:	88c2      	ldrh	r2, [r0, #6]
 801d084:	4413      	add	r3, r2
 801d086:	804b      	strh	r3, [r1, #2]
 801d088:	1d01      	adds	r1, r0, #4
 801d08a:	4620      	mov	r0, r4
 801d08c:	f7f0 fa7c 	bl	800d588 <_ZN8touchgfx4RectaNERKS0_>
 801d090:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d094:	b163      	cbz	r3, 801d0b0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d096:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d09a:	b933      	cbnz	r3, 801d0aa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 801d09c:	bd70      	pop	{r4, r5, r6, pc}
 801d09e:	6803      	ldr	r3, [r0, #0]
 801d0a0:	4621      	mov	r1, r4
 801d0a2:	6a1b      	ldr	r3, [r3, #32]
 801d0a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d0a8:	4718      	bx	r3
 801d0aa:	6968      	ldr	r0, [r5, #20]
 801d0ac:	2800      	cmp	r0, #0
 801d0ae:	d1f6      	bne.n	801d09e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 801d0b0:	bd70      	pop	{r4, r5, r6, pc}

0801d0b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801d0b2:	b510      	push	{r4, lr}
 801d0b4:	2300      	movs	r3, #0
 801d0b6:	4604      	mov	r4, r0
 801d0b8:	4608      	mov	r0, r1
 801d0ba:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801d0be:	8023      	strh	r3, [r4, #0]
 801d0c0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d0c4:	8063      	strh	r3, [r4, #2]
 801d0c6:	6803      	ldr	r3, [r0, #0]
 801d0c8:	80a1      	strh	r1, [r4, #4]
 801d0ca:	4621      	mov	r1, r4
 801d0cc:	80e2      	strh	r2, [r4, #6]
 801d0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0d0:	4798      	blx	r3
 801d0d2:	4620      	mov	r0, r4
 801d0d4:	bd10      	pop	{r4, pc}
	...

0801d0d8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>:
 801d0d8:	b510      	push	{r4, lr}
 801d0da:	8083      	strh	r3, [r0, #4]
 801d0dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801d0e0:	6101      	str	r1, [r0, #16]
 801d0e2:	7183      	strb	r3, [r0, #6]
 801d0e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801d0e8:	8282      	strh	r2, [r0, #20]
 801d0ea:	71c3      	strb	r3, [r0, #7]
 801d0ec:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801d0f0:	7203      	strb	r3, [r0, #8]
 801d0f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d0f6:	7243      	strb	r3, [r0, #9]
 801d0f8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801d0fc:	8143      	strh	r3, [r0, #10]
 801d0fe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d102:	8183      	strh	r3, [r0, #12]
 801d104:	4b01      	ldr	r3, [pc, #4]	; (801d10c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt+0x34>)
 801d106:	6003      	str	r3, [r0, #0]
 801d108:	bd10      	pop	{r4, pc}
 801d10a:	bf00      	nop
 801d10c:	080231f4 	.word	0x080231f4

0801d110 <_ZNK8touchgfx9ConstFont4findEt>:
 801d110:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d112:	8a84      	ldrh	r4, [r0, #20]
 801d114:	2500      	movs	r5, #0
 801d116:	260e      	movs	r6, #14
 801d118:	3c01      	subs	r4, #1
 801d11a:	42a5      	cmp	r5, r4
 801d11c:	dc0c      	bgt.n	801d138 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801d11e:	192a      	adds	r2, r5, r4
 801d120:	6903      	ldr	r3, [r0, #16]
 801d122:	1052      	asrs	r2, r2, #1
 801d124:	fb06 3302 	mla	r3, r6, r2, r3
 801d128:	889f      	ldrh	r7, [r3, #4]
 801d12a:	42b9      	cmp	r1, r7
 801d12c:	da01      	bge.n	801d132 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801d12e:	1e54      	subs	r4, r2, #1
 801d130:	e7f3      	b.n	801d11a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801d132:	dd02      	ble.n	801d13a <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801d134:	1c55      	adds	r5, r2, #1
 801d136:	e7f0      	b.n	801d11a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801d138:	2300      	movs	r3, #0
 801d13a:	4618      	mov	r0, r3
 801d13c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d13e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801d13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d140:	4605      	mov	r5, r0
 801d142:	4617      	mov	r7, r2
 801d144:	461e      	mov	r6, r3
 801d146:	f7ff ffe3 	bl	801d110 <_ZNK8touchgfx9ConstFont4findEt>
 801d14a:	b9e0      	cbnz	r0, 801d186 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801d14c:	b911      	cbnz	r1, 801d154 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801d14e:	2400      	movs	r4, #0
 801d150:	4620      	mov	r0, r4
 801d152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d154:	290a      	cmp	r1, #10
 801d156:	d0fa      	beq.n	801d14e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801d158:	682b      	ldr	r3, [r5, #0]
 801d15a:	4628      	mov	r0, r5
 801d15c:	691b      	ldr	r3, [r3, #16]
 801d15e:	4798      	blx	r3
 801d160:	4601      	mov	r1, r0
 801d162:	4628      	mov	r0, r5
 801d164:	f7ff ffd4 	bl	801d110 <_ZNK8touchgfx9ConstFont4findEt>
 801d168:	4604      	mov	r4, r0
 801d16a:	2800      	cmp	r0, #0
 801d16c:	d0ef      	beq.n	801d14e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801d16e:	682b      	ldr	r3, [r5, #0]
 801d170:	4621      	mov	r1, r4
 801d172:	4628      	mov	r0, r5
 801d174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d176:	4798      	blx	r3
 801d178:	6038      	str	r0, [r7, #0]
 801d17a:	682b      	ldr	r3, [r5, #0]
 801d17c:	4628      	mov	r0, r5
 801d17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d180:	4798      	blx	r3
 801d182:	7030      	strb	r0, [r6, #0]
 801d184:	e7e4      	b.n	801d150 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801d186:	4604      	mov	r4, r0
 801d188:	e7f1      	b.n	801d16e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801d18a <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801d18a:	2002      	movs	r0, #2
 801d18c:	4770      	bx	lr

0801d18e <_ZN8touchgfx12GestureEventD1Ev>:
 801d18e:	4770      	bx	lr

0801d190 <_ZN8touchgfx12GestureEventD0Ev>:
 801d190:	b510      	push	{r4, lr}
 801d192:	4604      	mov	r4, r0
 801d194:	210c      	movs	r1, #12
 801d196:	f002 fe2e 	bl	801fdf6 <_ZdlPvj>
 801d19a:	4620      	mov	r0, r4
 801d19c:	bd10      	pop	{r4, pc}
	...

0801d1a0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801d1a0:	b530      	push	{r4, r5, lr}
 801d1a2:	460d      	mov	r5, r1
 801d1a4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d1a6:	b087      	sub	sp, #28
 801d1a8:	4604      	mov	r4, r0
 801d1aa:	b301      	cbz	r1, 801d1ee <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801d1ac:	a801      	add	r0, sp, #4
 801d1ae:	f7ff ff80 	bl	801d0b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d1b2:	892a      	ldrh	r2, [r5, #8]
 801d1b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d1b8:	7928      	ldrb	r0, [r5, #4]
 801d1ba:	1ad2      	subs	r2, r2, r3
 801d1bc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d1be:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d1c2:	441a      	add	r2, r3
 801d1c4:	896b      	ldrh	r3, [r5, #10]
 801d1c6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801d1ca:	f88d 0010 	strb.w	r0, [sp, #16]
 801d1ce:	1b5b      	subs	r3, r3, r5
 801d1d0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801d1d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d1d4:	442b      	add	r3, r5
 801d1d6:	4d07      	ldr	r5, [pc, #28]	; (801d1f4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801d1d8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801d1dc:	a903      	add	r1, sp, #12
 801d1de:	9503      	str	r5, [sp, #12]
 801d1e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d1e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d1e8:	6803      	ldr	r3, [r0, #0]
 801d1ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d1ec:	4798      	blx	r3
 801d1ee:	b007      	add	sp, #28
 801d1f0:	bd30      	pop	{r4, r5, pc}
 801d1f2:	bf00      	nop
 801d1f4:	08023240 	.word	0x08023240

0801d1f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1fa:	460c      	mov	r4, r1
 801d1fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d1fe:	b089      	sub	sp, #36	; 0x24
 801d200:	4605      	mov	r5, r0
 801d202:	2900      	cmp	r1, #0
 801d204:	d053      	beq.n	801d2ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 801d206:	4668      	mov	r0, sp
 801d208:	f7ff ff53 	bl	801d0b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d20c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801d20e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801d210:	4668      	mov	r0, sp
 801d212:	8922      	ldrh	r2, [r4, #8]
 801d214:	88e1      	ldrh	r1, [r4, #6]
 801d216:	443a      	add	r2, r7
 801d218:	4431      	add	r1, r6
 801d21a:	b212      	sxth	r2, r2
 801d21c:	b209      	sxth	r1, r1
 801d21e:	f7f0 f93d 	bl	800d49c <_ZNK8touchgfx4Rect9intersectEss>
 801d222:	b1c8      	cbz	r0, 801d258 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801d224:	89a2      	ldrh	r2, [r4, #12]
 801d226:	4668      	mov	r0, sp
 801d228:	8961      	ldrh	r1, [r4, #10]
 801d22a:	443a      	add	r2, r7
 801d22c:	4431      	add	r1, r6
 801d22e:	b212      	sxth	r2, r2
 801d230:	b209      	sxth	r1, r1
 801d232:	f7f0 f933 	bl	800d49c <_ZNK8touchgfx4Rect9intersectEss>
 801d236:	b978      	cbnz	r0, 801d258 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801d238:	4b1e      	ldr	r3, [pc, #120]	; (801d2b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801d23a:	a904      	add	r1, sp, #16
 801d23c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d240:	9304      	str	r3, [sp, #16]
 801d242:	2302      	movs	r3, #2
 801d244:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d248:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d24c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d24e:	f88d 3014 	strb.w	r3, [sp, #20]
 801d252:	6803      	ldr	r3, [r0, #0]
 801d254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d256:	4798      	blx	r3
 801d258:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801d25a:	a802      	add	r0, sp, #8
 801d25c:	f7ff ff29 	bl	801d0b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d260:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d264:	88e0      	ldrh	r0, [r4, #6]
 801d266:	8961      	ldrh	r1, [r4, #10]
 801d268:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 801d26c:	1a80      	subs	r0, r0, r2
 801d26e:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801d272:	1a89      	subs	r1, r1, r2
 801d274:	8923      	ldrh	r3, [r4, #8]
 801d276:	4470      	add	r0, lr
 801d278:	89a2      	ldrh	r2, [r4, #12]
 801d27a:	4471      	add	r1, lr
 801d27c:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801d27e:	eba3 030c 	sub.w	r3, r3, ip
 801d282:	eba2 020c 	sub.w	r2, r2, ip
 801d286:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d28a:	7927      	ldrb	r7, [r4, #4]
 801d28c:	4433      	add	r3, r6
 801d28e:	4432      	add	r2, r6
 801d290:	4c09      	ldr	r4, [pc, #36]	; (801d2b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801d292:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d294:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d298:	a904      	add	r1, sp, #16
 801d29a:	9404      	str	r4, [sp, #16]
 801d29c:	f88d 7014 	strb.w	r7, [sp, #20]
 801d2a0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d2a4:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d2a8:	6803      	ldr	r3, [r0, #0]
 801d2aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d2ac:	4798      	blx	r3
 801d2ae:	b009      	add	sp, #36	; 0x24
 801d2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2b2:	bf00      	nop
 801d2b4:	08021508 	.word	0x08021508
 801d2b8:	080214f4 	.word	0x080214f4

0801d2bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2c0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801d2c2:	b0a1      	sub	sp, #132	; 0x84
 801d2c4:	4604      	mov	r4, r0
 801d2c6:	460d      	mov	r5, r1
 801d2c8:	790b      	ldrb	r3, [r1, #4]
 801d2ca:	b16a      	cbz	r2, 801d2e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801d2cc:	b963      	cbnz	r3, 801d2e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801d2ce:	b021      	add	sp, #132	; 0x84
 801d2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2d4:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801d2d8:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801d2dc:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d2e0:	1d20      	adds	r0, r4, #4
 801d2e2:	f7f0 fd2f 	bl	800dd44 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801d2e6:	e0a2      	b.n	801d42e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	f040 80a0 	bne.w	801d42e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801d2ee:	4a66      	ldr	r2, [pc, #408]	; (801d488 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 801d2f0:	6812      	ldr	r2, [r2, #0]
 801d2f2:	f892 b045 	ldrb.w	fp, [r2, #69]	; 0x45
 801d2f6:	86a3      	strh	r3, [r4, #52]	; 0x34
 801d2f8:	f1bb 0f03 	cmp.w	fp, #3
 801d2fc:	86e3      	strh	r3, [r4, #54]	; 0x36
 801d2fe:	dde9      	ble.n	801d2d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 801d300:	f1bb 0f0c 	cmp.w	fp, #12
 801d304:	6323      	str	r3, [r4, #48]	; 0x30
 801d306:	f04f 0303 	mov.w	r3, #3
 801d30a:	f04f 0600 	mov.w	r6, #0
 801d30e:	bfd8      	it	le
 801d310:	f10b 32ff 	addle.w	r2, fp, #4294967295
 801d314:	495d      	ldr	r1, [pc, #372]	; (801d48c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 801d316:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 801d31a:	f04f 0a01 	mov.w	sl, #1
 801d31e:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 801d322:	bfd8      	it	le
 801d324:	fb92 f3f3 	sdivle	r3, r2, r3
 801d328:	9300      	str	r3, [sp, #0]
 801d32a:	4b59      	ldr	r3, [pc, #356]	; (801d490 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 801d32c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d330:	4b58      	ldr	r3, [pc, #352]	; (801d494 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 801d332:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801d336:	2248      	movs	r2, #72	; 0x48
 801d338:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d33c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d340:	ab0e      	add	r3, sp, #56	; 0x38
 801d342:	4618      	mov	r0, r3
 801d344:	f002 fde4 	bl	801ff10 <memcpy>
 801d348:	f04f 32ff 	mov.w	r2, #4294967295
 801d34c:	f8cd b008 	str.w	fp, [sp, #8]
 801d350:	9206      	str	r2, [sp, #24]
 801d352:	9007      	str	r0, [sp, #28]
 801d354:	9a00      	ldr	r2, [sp, #0]
 801d356:	9b02      	ldr	r3, [sp, #8]
 801d358:	fb93 f3f2 	sdiv	r3, r3, r2
 801d35c:	f10a 32ff 	add.w	r2, sl, #4294967295
 801d360:	b29b      	uxth	r3, r3
 801d362:	9201      	str	r2, [sp, #4]
 801d364:	9a07      	ldr	r2, [sp, #28]
 801d366:	9303      	str	r3, [sp, #12]
 801d368:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 801d36c:	3f04      	subs	r7, #4
 801d36e:	2300      	movs	r3, #0
 801d370:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801d374:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 801d378:	a80a      	add	r0, sp, #40	; 0x28
 801d37a:	9309      	str	r3, [sp, #36]	; 0x24
 801d37c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801d380:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801d384:	fb13 f302 	smulbb	r3, r3, r2
 801d388:	b29b      	uxth	r3, r3
 801d38a:	9304      	str	r3, [sp, #16]
 801d38c:	683b      	ldr	r3, [r7, #0]
 801d38e:	fb13 f302 	smulbb	r3, r3, r2
 801d392:	b29b      	uxth	r3, r3
 801d394:	9305      	str	r3, [sp, #20]
 801d396:	9b04      	ldr	r3, [sp, #16]
 801d398:	4498      	add	r8, r3
 801d39a:	9b05      	ldr	r3, [sp, #20]
 801d39c:	4499      	add	r9, r3
 801d39e:	fa0f f888 	sxth.w	r8, r8
 801d3a2:	fa0f f989 	sxth.w	r9, r9
 801d3a6:	4641      	mov	r1, r8
 801d3a8:	464a      	mov	r2, r9
 801d3aa:	f7f0 f877 	bl	800d49c <_ZNK8touchgfx4Rect9intersectEss>
 801d3ae:	b380      	cbz	r0, 801d412 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801d3b0:	4641      	mov	r1, r8
 801d3b2:	ab09      	add	r3, sp, #36	; 0x24
 801d3b4:	464a      	mov	r2, r9
 801d3b6:	1d20      	adds	r0, r4, #4
 801d3b8:	f7f0 fcc4 	bl	800dd44 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801d3bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d3be:	b341      	cbz	r1, 801d412 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801d3c0:	42b1      	cmp	r1, r6
 801d3c2:	d026      	beq.n	801d412 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801d3c4:	a80c      	add	r0, sp, #48	; 0x30
 801d3c6:	f7ff fe74 	bl	801d0b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d3ca:	2002      	movs	r0, #2
 801d3cc:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801d3d0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d3d4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801d3d8:	fb92 f2f0 	sdiv	r2, r2, r0
 801d3dc:	440a      	add	r2, r1
 801d3de:	1a99      	subs	r1, r3, r2
 801d3e0:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801d3e4:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801d3e8:	fb93 f3f0 	sdiv	r3, r3, r0
 801d3ec:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801d3f0:	4403      	add	r3, r0
 801d3f2:	1ad3      	subs	r3, r2, r3
 801d3f4:	9a06      	ldr	r2, [sp, #24]
 801d3f6:	435b      	muls	r3, r3
 801d3f8:	fb01 3301 	mla	r3, r1, r1, r3
 801d3fc:	4293      	cmp	r3, r2
 801d3fe:	d208      	bcs.n	801d412 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801d400:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d404:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801d406:	86a2      	strh	r2, [r4, #52]	; 0x34
 801d408:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d40c:	6326      	str	r6, [r4, #48]	; 0x30
 801d40e:	86e2      	strh	r2, [r4, #54]	; 0x36
 801d410:	9306      	str	r3, [sp, #24]
 801d412:	9b01      	ldr	r3, [sp, #4]
 801d414:	3710      	adds	r7, #16
 801d416:	3302      	adds	r3, #2
 801d418:	2b08      	cmp	r3, #8
 801d41a:	9301      	str	r3, [sp, #4]
 801d41c:	dda7      	ble.n	801d36e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xb2>
 801d41e:	9b02      	ldr	r3, [sp, #8]
 801d420:	f10a 0a01 	add.w	sl, sl, #1
 801d424:	445b      	add	r3, fp
 801d426:	9302      	str	r3, [sp, #8]
 801d428:	9b00      	ldr	r3, [sp, #0]
 801d42a:	4553      	cmp	r3, sl
 801d42c:	da92      	bge.n	801d354 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x98>
 801d42e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d430:	2900      	cmp	r1, #0
 801d432:	f43f af4c 	beq.w	801d2ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801d436:	a80c      	add	r0, sp, #48	; 0x30
 801d438:	2600      	movs	r6, #0
 801d43a:	f7ff fe3a 	bl	801d0b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d43e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801d442:	88ea      	ldrh	r2, [r5, #6]
 801d444:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801d448:	1ad2      	subs	r2, r2, r3
 801d44a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d44c:	7929      	ldrb	r1, [r5, #4]
 801d44e:	441a      	add	r2, r3
 801d450:	892b      	ldrh	r3, [r5, #8]
 801d452:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801d456:	a90e      	add	r1, sp, #56	; 0x38
 801d458:	1a1b      	subs	r3, r3, r0
 801d45a:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801d45c:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801d460:	4403      	add	r3, r0
 801d462:	480d      	ldr	r0, [pc, #52]	; (801d498 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1dc>)
 801d464:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801d468:	900e      	str	r0, [sp, #56]	; 0x38
 801d46a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d46c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801d470:	6803      	ldr	r3, [r0, #0]
 801d472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d474:	4798      	blx	r3
 801d476:	792b      	ldrb	r3, [r5, #4]
 801d478:	2b00      	cmp	r3, #0
 801d47a:	f43f af28 	beq.w	801d2ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801d47e:	6326      	str	r6, [r4, #48]	; 0x30
 801d480:	86a6      	strh	r6, [r4, #52]	; 0x34
 801d482:	86e6      	strh	r6, [r4, #54]	; 0x36
 801d484:	e723      	b.n	801d2ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801d486:	bf00      	nop
 801d488:	20009cd4 	.word	0x20009cd4
 801d48c:	0802133c 	.word	0x0802133c
 801d490:	20009cc8 	.word	0x20009cc8
 801d494:	20009cca 	.word	0x20009cca
 801d498:	08021508 	.word	0x08021508

0801d49c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d49e:	4604      	mov	r4, r0
 801d4a0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d4a4:	3201      	adds	r2, #1
 801d4a6:	d114      	bne.n	801d4d2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 801d4a8:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801d4ac:	2200      	movs	r2, #0
 801d4ae:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801d4b2:	6803      	ldr	r3, [r0, #0]
 801d4b4:	f8ad 1006 	strh.w	r1, [sp, #6]
 801d4b8:	4669      	mov	r1, sp
 801d4ba:	f8ad 2000 	strh.w	r2, [sp]
 801d4be:	f8ad 2002 	strh.w	r2, [sp, #2]
 801d4c2:	f8ad 5004 	strh.w	r5, [sp, #4]
 801d4c6:	6a1b      	ldr	r3, [r3, #32]
 801d4c8:	4798      	blx	r3
 801d4ca:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801d4ce:	e884 0003 	stmia.w	r4, {r0, r1}
 801d4d2:	4620      	mov	r0, r4
 801d4d4:	b003      	add	sp, #12
 801d4d6:	bd30      	pop	{r4, r5, pc}

0801d4d8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d4d8:	b513      	push	{r0, r1, r4, lr}
 801d4da:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d4de:	4604      	mov	r4, r0
 801d4e0:	3301      	adds	r3, #1
 801d4e2:	d109      	bne.n	801d4f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d4e4:	4601      	mov	r1, r0
 801d4e6:	4668      	mov	r0, sp
 801d4e8:	f7ff fde3 	bl	801d0b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d4ec:	f8bd 3000 	ldrh.w	r3, [sp]
 801d4f0:	8423      	strh	r3, [r4, #32]
 801d4f2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d4f6:	8463      	strh	r3, [r4, #34]	; 0x22
 801d4f8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d4fc:	b002      	add	sp, #8
 801d4fe:	bd10      	pop	{r4, pc}

0801d500 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d500:	b513      	push	{r0, r1, r4, lr}
 801d502:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d506:	4604      	mov	r4, r0
 801d508:	3301      	adds	r3, #1
 801d50a:	d109      	bne.n	801d520 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d50c:	4601      	mov	r1, r0
 801d50e:	4668      	mov	r0, sp
 801d510:	f7ff fdcf 	bl	801d0b2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d514:	f8bd 3000 	ldrh.w	r3, [sp]
 801d518:	8423      	strh	r3, [r4, #32]
 801d51a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d51e:	8463      	strh	r3, [r4, #34]	; 0x22
 801d520:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d524:	b002      	add	sp, #8
 801d526:	bd10      	pop	{r4, pc}

0801d528 <_ZN8touchgfx6ScreenC1Ev>:
 801d528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d52a:	4605      	mov	r5, r0
 801d52c:	4b18      	ldr	r3, [pc, #96]	; (801d590 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d52e:	2200      	movs	r2, #0
 801d530:	4918      	ldr	r1, [pc, #96]	; (801d594 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d532:	f845 3b04 	str.w	r3, [r5], #4
 801d536:	2301      	movs	r3, #1
 801d538:	8102      	strh	r2, [r0, #8]
 801d53a:	4604      	mov	r4, r0
 801d53c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801d540:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801d544:	4b14      	ldr	r3, [pc, #80]	; (801d598 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801d546:	8142      	strh	r2, [r0, #10]
 801d548:	f9b3 7000 	ldrsh.w	r7, [r3]
 801d54c:	4b13      	ldr	r3, [pc, #76]	; (801d59c <_ZN8touchgfx6ScreenC1Ev+0x74>)
 801d54e:	8182      	strh	r2, [r0, #12]
 801d550:	81c2      	strh	r2, [r0, #14]
 801d552:	8202      	strh	r2, [r0, #16]
 801d554:	8242      	strh	r2, [r0, #18]
 801d556:	8282      	strh	r2, [r0, #20]
 801d558:	82c2      	strh	r2, [r0, #22]
 801d55a:	6182      	str	r2, [r0, #24]
 801d55c:	61c2      	str	r2, [r0, #28]
 801d55e:	6202      	str	r2, [r0, #32]
 801d560:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801d564:	62c2      	str	r2, [r0, #44]	; 0x2c
 801d566:	6302      	str	r2, [r0, #48]	; 0x30
 801d568:	8682      	strh	r2, [r0, #52]	; 0x34
 801d56a:	86c2      	strh	r2, [r0, #54]	; 0x36
 801d56c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d570:	6041      	str	r1, [r0, #4]
 801d572:	4611      	mov	r1, r2
 801d574:	4628      	mov	r0, r5
 801d576:	f7f0 f9b8 	bl	800d8ea <_ZN8touchgfx8Drawable5setXYEss>
 801d57a:	4639      	mov	r1, r7
 801d57c:	4628      	mov	r0, r5
 801d57e:	f7f0 f9d2 	bl	800d926 <_ZN8touchgfx8Drawable8setWidthEs>
 801d582:	4628      	mov	r0, r5
 801d584:	4631      	mov	r1, r6
 801d586:	f7f0 f9dd 	bl	800d944 <_ZN8touchgfx8Drawable9setHeightEs>
 801d58a:	4620      	mov	r0, r4
 801d58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d58e:	bf00      	nop
 801d590:	08023254 	.word	0x08023254
 801d594:	080213a4 	.word	0x080213a4
 801d598:	20009cc8 	.word	0x20009cc8
 801d59c:	20009cca 	.word	0x20009cca

0801d5a0 <_ZN8touchgfx6Screen4drawEv>:
 801d5a0:	4b0b      	ldr	r3, [pc, #44]	; (801d5d0 <_ZN8touchgfx6Screen4drawEv+0x30>)
 801d5a2:	b507      	push	{r0, r1, r2, lr}
 801d5a4:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d5a8:	4b0a      	ldr	r3, [pc, #40]	; (801d5d4 <_ZN8touchgfx6Screen4drawEv+0x34>)
 801d5aa:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d5ae:	4669      	mov	r1, sp
 801d5b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d5b4:	2300      	movs	r3, #0
 801d5b6:	f8ad 3000 	strh.w	r3, [sp]
 801d5ba:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d5be:	6803      	ldr	r3, [r0, #0]
 801d5c0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d5c4:	689b      	ldr	r3, [r3, #8]
 801d5c6:	4798      	blx	r3
 801d5c8:	b003      	add	sp, #12
 801d5ca:	f85d fb04 	ldr.w	pc, [sp], #4
 801d5ce:	bf00      	nop
 801d5d0:	20009cc8 	.word	0x20009cc8
 801d5d4:	20009cca 	.word	0x20009cca

0801d5d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d5e0:	b087      	sub	sp, #28
 801d5e2:	4681      	mov	r9, r0
 801d5e4:	460c      	mov	r4, r1
 801d5e6:	4615      	mov	r5, r2
 801d5e8:	b16b      	cbz	r3, 801d606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d5ea:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d5ee:	b153      	cbz	r3, 801d606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d5f0:	4628      	mov	r0, r5
 801d5f2:	f7ff ff53 	bl	801d49c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d5f6:	4621      	mov	r1, r4
 801d5f8:	f7ef ff7f 	bl	800d4fa <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d5fc:	69eb      	ldr	r3, [r5, #28]
 801d5fe:	b928      	cbnz	r0, 801d60c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801d600:	461d      	mov	r5, r3
 801d602:	2b00      	cmp	r3, #0
 801d604:	d1f4      	bne.n	801d5f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801d606:	b007      	add	sp, #28
 801d608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d60c:	ae02      	add	r6, sp, #8
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d04a      	beq.n	801d6a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801d612:	682b      	ldr	r3, [r5, #0]
 801d614:	4629      	mov	r1, r5
 801d616:	4668      	mov	r0, sp
 801d618:	68db      	ldr	r3, [r3, #12]
 801d61a:	4798      	blx	r3
 801d61c:	4628      	mov	r0, r5
 801d61e:	f7ff ff5b 	bl	801d4d8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d622:	f8bd 7000 	ldrh.w	r7, [sp]
 801d626:	4407      	add	r7, r0
 801d628:	4628      	mov	r0, r5
 801d62a:	f7ff ff69 	bl	801d500 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d62e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d632:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801d636:	b23f      	sxth	r7, r7
 801d638:	4418      	add	r0, r3
 801d63a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801d63e:	4621      	mov	r1, r4
 801d640:	f8ad 200c 	strh.w	r2, [sp, #12]
 801d644:	f8ad 000a 	strh.w	r0, [sp, #10]
 801d648:	4630      	mov	r0, r6
 801d64a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d64e:	f8ad 7008 	strh.w	r7, [sp, #8]
 801d652:	f7ef ff99 	bl	800d588 <_ZN8touchgfx4RectaNERKS0_>
 801d656:	4628      	mov	r0, r5
 801d658:	f7ff ff20 	bl	801d49c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d65c:	ab04      	add	r3, sp, #16
 801d65e:	4602      	mov	r2, r0
 801d660:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d664:	e883 0003 	stmia.w	r3, {r0, r1}
 801d668:	4611      	mov	r1, r2
 801d66a:	4618      	mov	r0, r3
 801d66c:	f7ef ff8c 	bl	800d588 <_ZN8touchgfx4RectaNERKS0_>
 801d670:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 801d674:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d678:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 801d67c:	455a      	cmp	r2, fp
 801d67e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d682:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801d686:	f040 8096 	bne.w	801d7b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801d68a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801d68e:	4553      	cmp	r3, sl
 801d690:	f040 8091 	bne.w	801d7b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801d694:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d698:	4543      	cmp	r3, r8
 801d69a:	f040 808c 	bne.w	801d7b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801d69e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d6a2:	42bb      	cmp	r3, r7
 801d6a4:	f040 8087 	bne.w	801d7b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801d6a8:	4628      	mov	r0, r5
 801d6aa:	f7ff fef7 	bl	801d49c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d6ae:	6861      	ldr	r1, [r4, #4]
 801d6b0:	4602      	mov	r2, r0
 801d6b2:	4633      	mov	r3, r6
 801d6b4:	6820      	ldr	r0, [r4, #0]
 801d6b6:	c303      	stmia	r3!, {r0, r1}
 801d6b8:	4611      	mov	r1, r2
 801d6ba:	4630      	mov	r0, r6
 801d6bc:	f7ef ff64 	bl	800d588 <_ZN8touchgfx4RectaNERKS0_>
 801d6c0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d09e      	beq.n	801d606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d6c8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d09a      	beq.n	801d606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d6d0:	4628      	mov	r0, r5
 801d6d2:	f7ff ff01 	bl	801d4d8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d6d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d6da:	1a18      	subs	r0, r3, r0
 801d6dc:	f8ad 0008 	strh.w	r0, [sp, #8]
 801d6e0:	4628      	mov	r0, r5
 801d6e2:	f7ff ff0d 	bl	801d500 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d6e6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d6ea:	4631      	mov	r1, r6
 801d6ec:	1a18      	subs	r0, r3, r0
 801d6ee:	f8ad 000a 	strh.w	r0, [sp, #10]
 801d6f2:	4628      	mov	r0, r5
 801d6f4:	682b      	ldr	r3, [r5, #0]
 801d6f6:	689b      	ldr	r3, [r3, #8]
 801d6f8:	4798      	blx	r3
 801d6fa:	e784      	b.n	801d606 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d6fc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801d700:	4553      	cmp	r3, sl
 801d702:	da10      	bge.n	801d726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 801d704:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d708:	4648      	mov	r0, r9
 801d70a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d70e:	ebaa 0303 	sub.w	r3, sl, r3
 801d712:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d716:	4631      	mov	r1, r6
 801d718:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d71c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d720:	69ea      	ldr	r2, [r5, #28]
 801d722:	f7ff ff59 	bl	801d5d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d726:	f9b4 3000 	ldrsh.w	r3, [r4]
 801d72a:	455b      	cmp	r3, fp
 801d72c:	da0e      	bge.n	801d74c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 801d72e:	f8ad 3008 	strh.w	r3, [sp, #8]
 801d732:	ebab 0303 	sub.w	r3, fp, r3
 801d736:	f8ad a00a 	strh.w	sl, [sp, #10]
 801d73a:	4631      	mov	r1, r6
 801d73c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d740:	4648      	mov	r0, r9
 801d742:	f8ad 700e 	strh.w	r7, [sp, #14]
 801d746:	69ea      	ldr	r2, [r5, #28]
 801d748:	f7ff ff46 	bl	801d5d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d74c:	8822      	ldrh	r2, [r4, #0]
 801d74e:	44d8      	add	r8, fp
 801d750:	88a3      	ldrh	r3, [r4, #4]
 801d752:	fa1f f888 	uxth.w	r8, r8
 801d756:	4413      	add	r3, r2
 801d758:	fa0f f288 	sxth.w	r2, r8
 801d75c:	b29b      	uxth	r3, r3
 801d75e:	b219      	sxth	r1, r3
 801d760:	4291      	cmp	r1, r2
 801d762:	dd0e      	ble.n	801d782 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d764:	eba3 0308 	sub.w	r3, r3, r8
 801d768:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d76c:	f8ad a00a 	strh.w	sl, [sp, #10]
 801d770:	4631      	mov	r1, r6
 801d772:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d776:	4648      	mov	r0, r9
 801d778:	f8ad 700e 	strh.w	r7, [sp, #14]
 801d77c:	69ea      	ldr	r2, [r5, #28]
 801d77e:	f7ff ff2b 	bl	801d5d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d782:	88e2      	ldrh	r2, [r4, #6]
 801d784:	4457      	add	r7, sl
 801d786:	8863      	ldrh	r3, [r4, #2]
 801d788:	b2bf      	uxth	r7, r7
 801d78a:	4413      	add	r3, r2
 801d78c:	b23a      	sxth	r2, r7
 801d78e:	b29b      	uxth	r3, r3
 801d790:	b219      	sxth	r1, r3
 801d792:	428a      	cmp	r2, r1
 801d794:	da88      	bge.n	801d6a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801d796:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d79a:	1bdb      	subs	r3, r3, r7
 801d79c:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d7a0:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d7a4:	4631      	mov	r1, r6
 801d7a6:	f8ad 0008 	strh.w	r0, [sp, #8]
 801d7aa:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d7ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d7b2:	69ea      	ldr	r2, [r5, #28]
 801d7b4:	e006      	b.n	801d7c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 801d7b6:	f1b8 0f00 	cmp.w	r8, #0
 801d7ba:	d001      	beq.n	801d7c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 801d7bc:	2f00      	cmp	r7, #0
 801d7be:	d19d      	bne.n	801d6fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 801d7c0:	69ea      	ldr	r2, [r5, #28]
 801d7c2:	4621      	mov	r1, r4
 801d7c4:	4648      	mov	r0, r9
 801d7c6:	f7ff ff07 	bl	801d5d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d7ca:	e76d      	b.n	801d6a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

0801d7cc <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>:
 801d7cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d7ce:	2300      	movs	r3, #0
 801d7d0:	aa02      	add	r2, sp, #8
 801d7d2:	4604      	mov	r4, r0
 801d7d4:	3004      	adds	r0, #4
 801d7d6:	f842 3d04 	str.w	r3, [r2, #-4]!
 801d7da:	460d      	mov	r5, r1
 801d7dc:	f7f0 fbb3 	bl	800df46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d7e0:	9a01      	ldr	r2, [sp, #4]
 801d7e2:	b11a      	cbz	r2, 801d7ec <_ZN8touchgfx6Screen9startSMOCERNS_4RectE+0x20>
 801d7e4:	4629      	mov	r1, r5
 801d7e6:	4620      	mov	r0, r4
 801d7e8:	f7ff fef6 	bl	801d5d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d7ec:	b003      	add	sp, #12
 801d7ee:	bd30      	pop	{r4, r5, pc}

0801d7f0 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d7f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d7f2:	4602      	mov	r2, r0
 801d7f4:	4604      	mov	r4, r0
 801d7f6:	460d      	mov	r5, r1
 801d7f8:	466b      	mov	r3, sp
 801d7fa:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d7fe:	6851      	ldr	r1, [r2, #4]
 801d800:	c303      	stmia	r3!, {r0, r1}
 801d802:	4629      	mov	r1, r5
 801d804:	4668      	mov	r0, sp
 801d806:	f7ef febf 	bl	800d588 <_ZN8touchgfx4RectaNERKS0_>
 801d80a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d80e:	4669      	mov	r1, sp
 801d810:	b123      	cbz	r3, 801d81c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801d812:	4620      	mov	r0, r4
 801d814:	f7ff ffda 	bl	801d7cc <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>
 801d818:	b003      	add	sp, #12
 801d81a:	bd30      	pop	{r4, r5, pc}
 801d81c:	1d20      	adds	r0, r4, #4
 801d81e:	f7f0 fa26 	bl	800dc6e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d822:	e7f9      	b.n	801d818 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801d824 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d824:	460b      	mov	r3, r1
 801d826:	680a      	ldr	r2, [r1, #0]
 801d828:	1d01      	adds	r1, r0, #4
 801d82a:	6952      	ldr	r2, [r2, #20]
 801d82c:	4618      	mov	r0, r3
 801d82e:	4710      	bx	r2

0801d830 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801d830:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d834:	b082      	sub	sp, #8
 801d836:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d83e:	bfcc      	ite	gt
 801d840:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801d844:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801d848:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d84c:	edcd 7a01 	vstr	s15, [sp, #4]
 801d850:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801d854:	b002      	add	sp, #8
 801d856:	4770      	bx	lr

0801d858 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 801d858:	b510      	push	{r4, lr}
 801d85a:	4298      	cmp	r0, r3
 801d85c:	eb01 0402 	add.w	r4, r1, r2
 801d860:	b224      	sxth	r4, r4
 801d862:	da25      	bge.n	801d8b0 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 801d864:	b323      	cbz	r3, 801d8b0 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 801d866:	ee07 0a90 	vmov	s15, r0
 801d86a:	ee06 1a10 	vmov	s12, r1
 801d86e:	ed9f 5a11 	vldr	s10, [pc, #68]	; 801d8b4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x5c>
 801d872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d876:	ee07 3a90 	vmov	s15, r3
 801d87a:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801d87e:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 801d8b8 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x60>
 801d882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d88a:	ee06 2a90 	vmov	s13, r2
 801d88e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d892:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d896:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d89a:	eea7 6a85 	vfma.f32	s12, s15, s10
 801d89e:	ee67 5aa7 	vmul.f32	s11, s15, s15
 801d8a2:	eea5 7a86 	vfma.f32	s14, s11, s12
 801d8a6:	eea6 0a87 	vfma.f32	s0, s13, s14
 801d8aa:	f7ff ffc1 	bl	801d830 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801d8ae:	4604      	mov	r4, r0
 801d8b0:	4620      	mov	r0, r4
 801d8b2:	bd10      	pop	{r4, pc}
 801d8b4:	402ce6b0 	.word	0x402ce6b0
 801d8b8:	3fd9cd60 	.word	0x3fd9cd60

0801d8bc <_ZN8touchgfx15EasingEquations11cubicEaseInEtsst>:
 801d8bc:	b510      	push	{r4, lr}
 801d8be:	4298      	cmp	r0, r3
 801d8c0:	eb01 0402 	add.w	r4, r1, r2
 801d8c4:	b224      	sxth	r4, r4
 801d8c6:	da1b      	bge.n	801d900 <_ZN8touchgfx15EasingEquations11cubicEaseInEtsst+0x44>
 801d8c8:	b1d3      	cbz	r3, 801d900 <_ZN8touchgfx15EasingEquations11cubicEaseInEtsst+0x44>
 801d8ca:	ee07 0a90 	vmov	s15, r0
 801d8ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801d8d2:	ee07 3a90 	vmov	s15, r3
 801d8d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d8da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d8de:	ee07 1a90 	vmov	s15, r1
 801d8e2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801d8e6:	ee07 2a90 	vmov	s15, r2
 801d8ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d8ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d8f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d8f6:	eea6 0aa7 	vfma.f32	s0, s13, s15
 801d8fa:	f7ff ff99 	bl	801d830 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801d8fe:	4604      	mov	r4, r0
 801d900:	4620      	mov	r0, r4
 801d902:	bd10      	pop	{r4, pc}

0801d904 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801d904:	b510      	push	{r4, lr}
 801d906:	4298      	cmp	r0, r3
 801d908:	eb01 0402 	add.w	r4, r1, r2
 801d90c:	b224      	sxth	r4, r4
 801d90e:	da1f      	bge.n	801d950 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801d910:	b1f3      	cbz	r3, 801d950 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801d912:	ee07 0a90 	vmov	s15, r0
 801d916:	ee06 1a10 	vmov	s12, r1
 801d91a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d91e:	ee07 3a90 	vmov	s15, r3
 801d922:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801d926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d92e:	ee06 2a90 	vmov	s13, r2
 801d932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d936:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d93a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d93e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801d942:	eea7 7a86 	vfma.f32	s14, s15, s12
 801d946:	eea6 0a87 	vfma.f32	s0, s13, s14
 801d94a:	f7ff ff71 	bl	801d830 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801d94e:	4604      	mov	r4, r0
 801d950:	4620      	mov	r0, r4
 801d952:	bd10      	pop	{r4, pc}

0801d954 <_ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE>:
 801d954:	680b      	ldr	r3, [r1, #0]
 801d956:	6980      	ldr	r0, [r0, #24]
 801d958:	4418      	add	r0, r3
 801d95a:	4770      	bx	lr

0801d95c <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE>:
 801d95c:	b530      	push	{r4, r5, lr}
 801d95e:	b19a      	cbz	r2, 801d988 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801d960:	7b13      	ldrb	r3, [r2, #12]
 801d962:	b18b      	cbz	r3, 801d988 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801d964:	7ad2      	ldrb	r2, [r2, #11]
 801d966:	b294      	uxth	r4, r2
 801d968:	4413      	add	r3, r2
 801d96a:	429c      	cmp	r4, r3
 801d96c:	da0c      	bge.n	801d988 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801d96e:	69c2      	ldr	r2, [r0, #28]
 801d970:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 801d974:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
 801d978:	428a      	cmp	r2, r1
 801d97a:	d102      	bne.n	801d982 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x26>
 801d97c:	f995 0002 	ldrsb.w	r0, [r5, #2]
 801d980:	bd30      	pop	{r4, r5, pc}
 801d982:	3401      	adds	r4, #1
 801d984:	b2a4      	uxth	r4, r4
 801d986:	e7f0      	b.n	801d96a <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0xe>
 801d988:	2000      	movs	r0, #0
 801d98a:	bd30      	pop	{r4, r5, pc}

0801d98c <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>:
 801d98c:	b530      	push	{r4, r5, lr}
 801d98e:	b087      	sub	sp, #28
 801d990:	4604      	mov	r4, r0
 801d992:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 801d996:	9505      	str	r5, [sp, #20]
 801d998:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801d99c:	9504      	str	r5, [sp, #16]
 801d99e:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801d9a2:	9503      	str	r5, [sp, #12]
 801d9a4:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801d9a8:	9502      	str	r5, [sp, #8]
 801d9aa:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 801d9ae:	9501      	str	r5, [sp, #4]
 801d9b0:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801d9b4:	9500      	str	r5, [sp, #0]
 801d9b6:	f7ff fb8f 	bl	801d0d8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>
 801d9ba:	4b04      	ldr	r3, [pc, #16]	; (801d9cc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt+0x40>)
 801d9bc:	4620      	mov	r0, r4
 801d9be:	6023      	str	r3, [r4, #0]
 801d9c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9c2:	61a3      	str	r3, [r4, #24]
 801d9c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d9c6:	61e3      	str	r3, [r4, #28]
 801d9c8:	b007      	add	sp, #28
 801d9ca:	bd30      	pop	{r4, r5, pc}
 801d9cc:	08023288 	.word	0x08023288

0801d9d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9d2:	4604      	mov	r4, r0
 801d9d4:	4d1b      	ldr	r5, [pc, #108]	; (801da44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 801d9d6:	2700      	movs	r7, #0
 801d9d8:	2601      	movs	r6, #1
 801d9da:	6863      	ldr	r3, [r4, #4]
 801d9dc:	b93b      	cbnz	r3, 801d9ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 801d9de:	6821      	ldr	r1, [r4, #0]
 801d9e0:	2900      	cmp	r1, #0
 801d9e2:	d02c      	beq.n	801da3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801d9e4:	6828      	ldr	r0, [r5, #0]
 801d9e6:	6803      	ldr	r3, [r0, #0]
 801d9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d9ea:	4798      	blx	r3
 801d9ec:	6060      	str	r0, [r4, #4]
 801d9ee:	7c23      	ldrb	r3, [r4, #16]
 801d9f0:	b16b      	cbz	r3, 801da0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 801d9f2:	68e3      	ldr	r3, [r4, #12]
 801d9f4:	b12b      	cbz	r3, 801da02 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801d9f6:	881a      	ldrh	r2, [r3, #0]
 801d9f8:	b11a      	cbz	r2, 801da02 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801d9fa:	1c9a      	adds	r2, r3, #2
 801d9fc:	60e2      	str	r2, [r4, #12]
 801d9fe:	8818      	ldrh	r0, [r3, #0]
 801da00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da02:	6828      	ldr	r0, [r5, #0]
 801da04:	7427      	strb	r7, [r4, #16]
 801da06:	6803      	ldr	r3, [r0, #0]
 801da08:	6821      	ldr	r1, [r4, #0]
 801da0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da0c:	4798      	blx	r3
 801da0e:	6863      	ldr	r3, [r4, #4]
 801da10:	881a      	ldrh	r2, [r3, #0]
 801da12:	b1a2      	cbz	r2, 801da3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801da14:	2a02      	cmp	r2, #2
 801da16:	f103 0202 	add.w	r2, r3, #2
 801da1a:	6062      	str	r2, [r4, #4]
 801da1c:	d1ef      	bne.n	801d9fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 801da1e:	6828      	ldr	r0, [r5, #0]
 801da20:	6803      	ldr	r3, [r0, #0]
 801da22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801da24:	68a3      	ldr	r3, [r4, #8]
 801da26:	1d19      	adds	r1, r3, #4
 801da28:	60a1      	str	r1, [r4, #8]
 801da2a:	6819      	ldr	r1, [r3, #0]
 801da2c:	4790      	blx	r2
 801da2e:	60e0      	str	r0, [r4, #12]
 801da30:	2800      	cmp	r0, #0
 801da32:	d0d2      	beq.n	801d9da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801da34:	8803      	ldrh	r3, [r0, #0]
 801da36:	2b00      	cmp	r3, #0
 801da38:	d0cf      	beq.n	801d9da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801da3a:	7426      	strb	r6, [r4, #16]
 801da3c:	e7cd      	b.n	801d9da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801da3e:	2000      	movs	r0, #0
 801da40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da42:	bf00      	nop
 801da44:	20009cd4 	.word	0x20009cd4

0801da48 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801da48:	b538      	push	{r3, r4, r5, lr}
 801da4a:	8a83      	ldrh	r3, [r0, #20]
 801da4c:	4604      	mov	r4, r0
 801da4e:	8a45      	ldrh	r5, [r0, #18]
 801da50:	8243      	strh	r3, [r0, #18]
 801da52:	f7ff ffbd 	bl	801d9d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801da56:	82a0      	strh	r0, [r4, #20]
 801da58:	4628      	mov	r0, r5
 801da5a:	bd38      	pop	{r3, r4, r5, pc}

0801da5c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801da5c:	b570      	push	{r4, r5, r6, lr}
 801da5e:	460e      	mov	r6, r1
 801da60:	4605      	mov	r5, r0
 801da62:	f7ff fff1 	bl	801da48 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801da66:	4a0d      	ldr	r2, [pc, #52]	; (801da9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>)
 801da68:	4601      	mov	r1, r0
 801da6a:	6814      	ldr	r4, [r2, #0]
 801da6c:	4613      	mov	r3, r2
 801da6e:	b914      	cbnz	r4, 801da76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1a>
 801da70:	6852      	ldr	r2, [r2, #4]
 801da72:	07d2      	lsls	r2, r2, #31
 801da74:	d510      	bpl.n	801da98 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3c>
 801da76:	6858      	ldr	r0, [r3, #4]
 801da78:	f105 0212 	add.w	r2, r5, #18
 801da7c:	f010 0f01 	tst.w	r0, #1
 801da80:	ea4f 0060 	mov.w	r0, r0, asr #1
 801da84:	bf18      	it	ne
 801da86:	582b      	ldrne	r3, [r5, r0]
 801da88:	4428      	add	r0, r5
 801da8a:	bf18      	it	ne
 801da8c:	591c      	ldrne	r4, [r3, r4]
 801da8e:	4633      	mov	r3, r6
 801da90:	46a4      	mov	ip, r4
 801da92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da96:	4760      	bx	ip
 801da98:	bd70      	pop	{r4, r5, r6, pc}
 801da9a:	bf00      	nop
 801da9c:	20009cac 	.word	0x20009cac

0801daa0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801daa0:	2300      	movs	r3, #0
 801daa2:	b510      	push	{r4, lr}
 801daa4:	4604      	mov	r4, r0
 801daa6:	6043      	str	r3, [r0, #4]
 801daa8:	60c3      	str	r3, [r0, #12]
 801daaa:	7403      	strb	r3, [r0, #16]
 801daac:	f7ff ff90 	bl	801d9d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801dab0:	8260      	strh	r0, [r4, #18]
 801dab2:	4620      	mov	r0, r4
 801dab4:	f7ff ff8c 	bl	801d9d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801dab8:	4a0a      	ldr	r2, [pc, #40]	; (801dae4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x44>)
 801daba:	82a0      	strh	r0, [r4, #20]
 801dabc:	6813      	ldr	r3, [r2, #0]
 801dabe:	4611      	mov	r1, r2
 801dac0:	b913      	cbnz	r3, 801dac8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x28>
 801dac2:	6852      	ldr	r2, [r2, #4]
 801dac4:	07d2      	lsls	r2, r2, #31
 801dac6:	d50c      	bpl.n	801dae2 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x42>
 801dac8:	6848      	ldr	r0, [r1, #4]
 801daca:	f010 0f01 	tst.w	r0, #1
 801dace:	ea4f 0060 	mov.w	r0, r0, asr #1
 801dad2:	bf18      	it	ne
 801dad4:	5822      	ldrne	r2, [r4, r0]
 801dad6:	4420      	add	r0, r4
 801dad8:	bf18      	it	ne
 801dada:	58d3      	ldrne	r3, [r2, r3]
 801dadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dae0:	4718      	bx	r3
 801dae2:	bd10      	pop	{r4, pc}
 801dae4:	20009ca4 	.word	0x20009ca4

0801dae8 <_ZN8touchgfx12TextProviderC1Ev>:
 801dae8:	2300      	movs	r3, #0
 801daea:	b510      	push	{r4, lr}
 801daec:	4604      	mov	r4, r0
 801daee:	6003      	str	r3, [r0, #0]
 801daf0:	6043      	str	r3, [r0, #4]
 801daf2:	f7ff ffd5 	bl	801daa0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801daf6:	4620      	mov	r0, r4
 801daf8:	bd10      	pop	{r4, pc}

0801dafa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>:
 801dafa:	6082      	str	r2, [r0, #8]
 801dafc:	6001      	str	r1, [r0, #0]
 801dafe:	f7ff bfcf 	b.w	801daa0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801db04 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801db04:	4b01      	ldr	r3, [pc, #4]	; (801db0c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801db06:	6018      	str	r0, [r3, #0]
 801db08:	4770      	bx	lr
 801db0a:	bf00      	nop
 801db0c:	20009d44 	.word	0x20009d44

0801db10 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801db10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db14:	4f24      	ldr	r7, [pc, #144]	; (801dba8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801db16:	683b      	ldr	r3, [r7, #0]
 801db18:	2b00      	cmp	r3, #0
 801db1a:	d042      	beq.n	801dba2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801db1c:	4923      	ldr	r1, [pc, #140]	; (801dbac <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801db1e:	4d24      	ldr	r5, [pc, #144]	; (801dbb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801db20:	8808      	ldrh	r0, [r1, #0]
 801db22:	882a      	ldrh	r2, [r5, #0]
 801db24:	4e23      	ldr	r6, [pc, #140]	; (801dbb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801db26:	4410      	add	r0, r2
 801db28:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 801db2c:	4c22      	ldr	r4, [pc, #136]	; (801dbb8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801db2e:	1c41      	adds	r1, r0, #1
 801db30:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801db34:	f021 0101 	bic.w	r1, r1, #1
 801db38:	eb03 0208 	add.w	r2, r3, r8
 801db3c:	0409      	lsls	r1, r1, #16
 801db3e:	6032      	str	r2, [r6, #0]
 801db40:	0c09      	lsrs	r1, r1, #16
 801db42:	0049      	lsls	r1, r1, #1
 801db44:	eb08 0c01 	add.w	ip, r8, r1
 801db48:	eb03 020c 	add.w	r2, r3, ip
 801db4c:	44f4      	add	ip, lr
 801db4e:	6022      	str	r2, [r4, #0]
 801db50:	4463      	add	r3, ip
 801db52:	4a1a      	ldr	r2, [pc, #104]	; (801dbbc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801db54:	6013      	str	r3, [r2, #0]
 801db56:	2300      	movs	r3, #0
 801db58:	4a19      	ldr	r2, [pc, #100]	; (801dbc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801db5a:	8013      	strh	r3, [r2, #0]
 801db5c:	4a19      	ldr	r2, [pc, #100]	; (801dbc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801db5e:	6812      	ldr	r2, [r2, #0]
 801db60:	eba2 0208 	sub.w	r2, r2, r8
 801db64:	1a52      	subs	r2, r2, r1
 801db66:	4918      	ldr	r1, [pc, #96]	; (801dbc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801db68:	eba2 020e 	sub.w	r2, r2, lr
 801db6c:	469e      	mov	lr, r3
 801db6e:	600a      	str	r2, [r1, #0]
 801db70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801db74:	4a15      	ldr	r2, [pc, #84]	; (801dbcc <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801db76:	8013      	strh	r3, [r2, #0]
 801db78:	4283      	cmp	r3, r0
 801db7a:	d007      	beq.n	801db8c <_ZN8touchgfx6Bitmap10clearCacheEv+0x7c>
 801db7c:	683a      	ldr	r2, [r7, #0]
 801db7e:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 801db82:	6832      	ldr	r2, [r6, #0]
 801db84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801db88:	3301      	adds	r3, #1
 801db8a:	e7f5      	b.n	801db78 <_ZN8touchgfx6Bitmap10clearCacheEv+0x68>
 801db8c:	2300      	movs	r3, #0
 801db8e:	882d      	ldrh	r5, [r5, #0]
 801db90:	6820      	ldr	r0, [r4, #0]
 801db92:	4619      	mov	r1, r3
 801db94:	42ab      	cmp	r3, r5
 801db96:	d204      	bcs.n	801dba2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801db98:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 801db9c:	3301      	adds	r3, #1
 801db9e:	7391      	strb	r1, [r2, #14]
 801dba0:	e7f8      	b.n	801db94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x84>
 801dba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dba6:	bf00      	nop
 801dba8:	20009d48 	.word	0x20009d48
 801dbac:	20009d64 	.word	0x20009d64
 801dbb0:	20009d68 	.word	0x20009d68
 801dbb4:	20009d5c 	.word	0x20009d5c
 801dbb8:	20009d4c 	.word	0x20009d4c
 801dbbc:	20009d54 	.word	0x20009d54
 801dbc0:	20009d66 	.word	0x20009d66
 801dbc4:	20009d50 	.word	0x20009d50
 801dbc8:	20009d60 	.word	0x20009d60
 801dbcc:	20009d58 	.word	0x20009d58

0801dbd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801dbd0:	4b0f      	ldr	r3, [pc, #60]	; (801dc10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>)
 801dbd2:	b510      	push	{r4, lr}
 801dbd4:	681b      	ldr	r3, [r3, #0]
 801dbd6:	b9d3      	cbnz	r3, 801dc0e <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 801dbd8:	b1c9      	cbz	r1, 801dc0e <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 801dbda:	4b0e      	ldr	r3, [pc, #56]	; (801dc14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801dbdc:	2406      	movs	r4, #6
 801dbde:	801a      	strh	r2, [r3, #0]
 801dbe0:	b292      	uxth	r2, r2
 801dbe2:	4b0d      	ldr	r3, [pc, #52]	; (801dc18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801dbe4:	881b      	ldrh	r3, [r3, #0]
 801dbe6:	4413      	add	r3, r2
 801dbe8:	0112      	lsls	r2, r2, #4
 801dbea:	fb04 2203 	mla	r2, r4, r3, r2
 801dbee:	4291      	cmp	r1, r2
 801dbf0:	d805      	bhi.n	801dbfe <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x2e>
 801dbf2:	4b0a      	ldr	r3, [pc, #40]	; (801dc1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801dbf4:	2138      	movs	r1, #56	; 0x38
 801dbf6:	4a0a      	ldr	r2, [pc, #40]	; (801dc20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801dbf8:	480a      	ldr	r0, [pc, #40]	; (801dc24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801dbfa:	f002 f919 	bl	801fe30 <__assert_func>
 801dbfe:	4b0a      	ldr	r3, [pc, #40]	; (801dc28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801dc00:	6019      	str	r1, [r3, #0]
 801dc02:	4b0a      	ldr	r3, [pc, #40]	; (801dc2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801dc04:	6018      	str	r0, [r3, #0]
 801dc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc0a:	f7ff bf81 	b.w	801db10 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801dc0e:	bd10      	pop	{r4, pc}
 801dc10:	20009d54 	.word	0x20009d54
 801dc14:	20009d68 	.word	0x20009d68
 801dc18:	20009d64 	.word	0x20009d64
 801dc1c:	08023330 	.word	0x08023330
 801dc20:	080233c5 	.word	0x080233c5
 801dc24:	0802330b 	.word	0x0802330b
 801dc28:	20009d50 	.word	0x20009d50
 801dc2c:	20009d48 	.word	0x20009d48

0801dc30 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801dc30:	b470      	push	{r4, r5, r6}
 801dc32:	4c07      	ldr	r4, [pc, #28]	; (801dc50 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801dc34:	4605      	mov	r5, r0
 801dc36:	4610      	mov	r0, r2
 801dc38:	9a03      	ldr	r2, [sp, #12]
 801dc3a:	6826      	ldr	r6, [r4, #0]
 801dc3c:	b936      	cbnz	r6, 801dc4c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801dc3e:	6025      	str	r5, [r4, #0]
 801dc40:	4c04      	ldr	r4, [pc, #16]	; (801dc54 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801dc42:	8021      	strh	r1, [r4, #0]
 801dc44:	4619      	mov	r1, r3
 801dc46:	bc70      	pop	{r4, r5, r6}
 801dc48:	f7ff bfc2 	b.w	801dbd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801dc4c:	bc70      	pop	{r4, r5, r6}
 801dc4e:	4770      	bx	lr
 801dc50:	20009d6c 	.word	0x20009d6c
 801dc54:	20009d64 	.word	0x20009d64

0801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801dc58:	b508      	push	{r3, lr}
 801dc5a:	4b13      	ldr	r3, [pc, #76]	; (801dca8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801dc5c:	6819      	ldr	r1, [r3, #0]
 801dc5e:	b931      	cbnz	r1, 801dc6e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801dc60:	4b12      	ldr	r3, [pc, #72]	; (801dcac <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801dc62:	f44f 710d 	mov.w	r1, #564	; 0x234
 801dc66:	4a12      	ldr	r2, [pc, #72]	; (801dcb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801dc68:	4812      	ldr	r0, [pc, #72]	; (801dcb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801dc6a:	f002 f8e1 	bl	801fe30 <__assert_func>
 801dc6e:	4a12      	ldr	r2, [pc, #72]	; (801dcb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801dc70:	8803      	ldrh	r3, [r0, #0]
 801dc72:	8812      	ldrh	r2, [r2, #0]
 801dc74:	4293      	cmp	r3, r2
 801dc76:	da04      	bge.n	801dc82 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801dc78:	2214      	movs	r2, #20
 801dc7a:	fb02 1303 	mla	r3, r2, r3, r1
 801dc7e:	8918      	ldrh	r0, [r3, #8]
 801dc80:	bd08      	pop	{r3, pc}
 801dc82:	490e      	ldr	r1, [pc, #56]	; (801dcbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801dc84:	8809      	ldrh	r1, [r1, #0]
 801dc86:	4411      	add	r1, r2
 801dc88:	428b      	cmp	r3, r1
 801dc8a:	da05      	bge.n	801dc98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x40>
 801dc8c:	1a9b      	subs	r3, r3, r2
 801dc8e:	4a0c      	ldr	r2, [pc, #48]	; (801dcc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801dc90:	6812      	ldr	r2, [r2, #0]
 801dc92:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801dc96:	e7f2      	b.n	801dc7e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801dc98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dc9c:	4293      	cmp	r3, r2
 801dc9e:	bf06      	itte	eq
 801dca0:	4b08      	ldreq	r3, [pc, #32]	; (801dcc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801dca2:	8818      	ldrheq	r0, [r3, #0]
 801dca4:	2000      	movne	r0, #0
 801dca6:	bd08      	pop	{r3, pc}
 801dca8:	20009d6c 	.word	0x20009d6c
 801dcac:	08023389 	.word	0x08023389
 801dcb0:	08023472 	.word	0x08023472
 801dcb4:	0802330b 	.word	0x0802330b
 801dcb8:	20009d64 	.word	0x20009d64
 801dcbc:	20009d68 	.word	0x20009d68
 801dcc0:	20009d4c 	.word	0x20009d4c
 801dcc4:	20009cc8 	.word	0x20009cc8

0801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801dcc8:	b508      	push	{r3, lr}
 801dcca:	4b13      	ldr	r3, [pc, #76]	; (801dd18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801dccc:	6819      	ldr	r1, [r3, #0]
 801dcce:	b931      	cbnz	r1, 801dcde <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801dcd0:	4b12      	ldr	r3, [pc, #72]	; (801dd1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801dcd2:	f44f 7112 	mov.w	r1, #584	; 0x248
 801dcd6:	4a12      	ldr	r2, [pc, #72]	; (801dd20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801dcd8:	4812      	ldr	r0, [pc, #72]	; (801dd24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801dcda:	f002 f8a9 	bl	801fe30 <__assert_func>
 801dcde:	4a12      	ldr	r2, [pc, #72]	; (801dd28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801dce0:	8803      	ldrh	r3, [r0, #0]
 801dce2:	8812      	ldrh	r2, [r2, #0]
 801dce4:	4293      	cmp	r3, r2
 801dce6:	da04      	bge.n	801dcf2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801dce8:	2214      	movs	r2, #20
 801dcea:	fb02 1303 	mla	r3, r2, r3, r1
 801dcee:	8958      	ldrh	r0, [r3, #10]
 801dcf0:	bd08      	pop	{r3, pc}
 801dcf2:	490e      	ldr	r1, [pc, #56]	; (801dd2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801dcf4:	8809      	ldrh	r1, [r1, #0]
 801dcf6:	4411      	add	r1, r2
 801dcf8:	428b      	cmp	r3, r1
 801dcfa:	da05      	bge.n	801dd08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x40>
 801dcfc:	1a9b      	subs	r3, r3, r2
 801dcfe:	4a0c      	ldr	r2, [pc, #48]	; (801dd30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801dd00:	6812      	ldr	r2, [r2, #0]
 801dd02:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801dd06:	e7f2      	b.n	801dcee <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801dd08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dd0c:	4293      	cmp	r3, r2
 801dd0e:	bf06      	itte	eq
 801dd10:	4b08      	ldreq	r3, [pc, #32]	; (801dd34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801dd12:	8818      	ldrheq	r0, [r3, #0]
 801dd14:	2000      	movne	r0, #0
 801dd16:	bd08      	pop	{r3, pc}
 801dd18:	20009d6c 	.word	0x20009d6c
 801dd1c:	08023389 	.word	0x08023389
 801dd20:	0802349e 	.word	0x0802349e
 801dd24:	0802330b 	.word	0x0802330b
 801dd28:	20009d64 	.word	0x20009d64
 801dd2c:	20009d68 	.word	0x20009d68
 801dd30:	20009d4c 	.word	0x20009d4c
 801dd34:	20009cca 	.word	0x20009cca

0801dd38 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801dd38:	4b22      	ldr	r3, [pc, #136]	; (801ddc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801dd3a:	b510      	push	{r4, lr}
 801dd3c:	681c      	ldr	r4, [r3, #0]
 801dd3e:	b934      	cbnz	r4, 801dd4e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801dd40:	4b21      	ldr	r3, [pc, #132]	; (801ddc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801dd42:	f44f 7117 	mov.w	r1, #604	; 0x25c
 801dd46:	4a21      	ldr	r2, [pc, #132]	; (801ddcc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801dd48:	4821      	ldr	r0, [pc, #132]	; (801ddd0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801dd4a:	f002 f871 	bl	801fe30 <__assert_func>
 801dd4e:	4a21      	ldr	r2, [pc, #132]	; (801ddd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801dd50:	880b      	ldrh	r3, [r1, #0]
 801dd52:	8812      	ldrh	r2, [r2, #0]
 801dd54:	4293      	cmp	r3, r2
 801dd56:	da10      	bge.n	801dd7a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x42>
 801dd58:	2214      	movs	r2, #20
 801dd5a:	fb02 4303 	mla	r3, r2, r3, r4
 801dd5e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801dd62:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801dd66:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801dd6a:	8a5b      	ldrh	r3, [r3, #18]
 801dd6c:	8004      	strh	r4, [r0, #0]
 801dd6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dd72:	8041      	strh	r1, [r0, #2]
 801dd74:	8082      	strh	r2, [r0, #4]
 801dd76:	80c3      	strh	r3, [r0, #6]
 801dd78:	bd10      	pop	{r4, pc}
 801dd7a:	4917      	ldr	r1, [pc, #92]	; (801ddd8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801dd7c:	8809      	ldrh	r1, [r1, #0]
 801dd7e:	4411      	add	r1, r2
 801dd80:	428b      	cmp	r3, r1
 801dd82:	da09      	bge.n	801dd98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801dd84:	1a9b      	subs	r3, r3, r2
 801dd86:	4a15      	ldr	r2, [pc, #84]	; (801dddc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801dd88:	6812      	ldr	r2, [r2, #0]
 801dd8a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801dd8e:	681a      	ldr	r2, [r3, #0]
 801dd90:	6002      	str	r2, [r0, #0]
 801dd92:	685a      	ldr	r2, [r3, #4]
 801dd94:	6042      	str	r2, [r0, #4]
 801dd96:	bd10      	pop	{r4, pc}
 801dd98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dd9c:	4293      	cmp	r3, r2
 801dd9e:	d10b      	bne.n	801ddb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801dda0:	4b0f      	ldr	r3, [pc, #60]	; (801dde0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801dda2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dda6:	4b0f      	ldr	r3, [pc, #60]	; (801dde4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801dda8:	8081      	strh	r1, [r0, #4]
 801ddaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ddae:	2300      	movs	r3, #0
 801ddb0:	80c2      	strh	r2, [r0, #6]
 801ddb2:	8003      	strh	r3, [r0, #0]
 801ddb4:	8043      	strh	r3, [r0, #2]
 801ddb6:	bd10      	pop	{r4, pc}
 801ddb8:	2300      	movs	r3, #0
 801ddba:	8003      	strh	r3, [r0, #0]
 801ddbc:	8043      	strh	r3, [r0, #2]
 801ddbe:	8083      	strh	r3, [r0, #4]
 801ddc0:	e7d9      	b.n	801dd76 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x3e>
 801ddc2:	bf00      	nop
 801ddc4:	20009d6c 	.word	0x20009d6c
 801ddc8:	08023389 	.word	0x08023389
 801ddcc:	0802340b 	.word	0x0802340b
 801ddd0:	0802330b 	.word	0x0802330b
 801ddd4:	20009d64 	.word	0x20009d64
 801ddd8:	20009d68 	.word	0x20009d68
 801dddc:	20009d4c 	.word	0x20009d4c
 801dde0:	20009cc8 	.word	0x20009cc8
 801dde4:	20009cca 	.word	0x20009cca

0801dde8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801dde8:	4b16      	ldr	r3, [pc, #88]	; (801de44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>)
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	b333      	cbz	r3, 801de3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 801ddee:	4a16      	ldr	r2, [pc, #88]	; (801de48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801ddf0:	8800      	ldrh	r0, [r0, #0]
 801ddf2:	8812      	ldrh	r2, [r2, #0]
 801ddf4:	4290      	cmp	r0, r2
 801ddf6:	da0f      	bge.n	801de18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x30>
 801ddf8:	2214      	movs	r2, #20
 801ddfa:	fb02 3300 	mla	r3, r2, r0, r3
 801ddfe:	8a19      	ldrh	r1, [r3, #16]
 801de00:	891a      	ldrh	r2, [r3, #8]
 801de02:	4291      	cmp	r1, r2
 801de04:	db1c      	blt.n	801de40 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801de06:	8a58      	ldrh	r0, [r3, #18]
 801de08:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801de0c:	895b      	ldrh	r3, [r3, #10]
 801de0e:	4298      	cmp	r0, r3
 801de10:	bfac      	ite	ge
 801de12:	2000      	movge	r0, #0
 801de14:	2001      	movlt	r0, #1
 801de16:	4770      	bx	lr
 801de18:	4b0c      	ldr	r3, [pc, #48]	; (801de4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801de1a:	881b      	ldrh	r3, [r3, #0]
 801de1c:	4413      	add	r3, r2
 801de1e:	4298      	cmp	r0, r3
 801de20:	da0c      	bge.n	801de3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 801de22:	4b0b      	ldr	r3, [pc, #44]	; (801de50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801de24:	1a80      	subs	r0, r0, r2
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801de2c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801de30:	891a      	ldrh	r2, [r3, #8]
 801de32:	4291      	cmp	r1, r2
 801de34:	db04      	blt.n	801de40 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801de36:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801de3a:	e7e7      	b.n	801de0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x24>
 801de3c:	2000      	movs	r0, #0
 801de3e:	4770      	bx	lr
 801de40:	2001      	movs	r0, #1
 801de42:	4770      	bx	lr
 801de44:	20009d6c 	.word	0x20009d6c
 801de48:	20009d64 	.word	0x20009d64
 801de4c:	20009d68 	.word	0x20009d68
 801de50:	20009d4c 	.word	0x20009d4c

0801de54 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801de54:	b508      	push	{r3, lr}
 801de56:	4b11      	ldr	r3, [pc, #68]	; (801de9c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 801de58:	6819      	ldr	r1, [r3, #0]
 801de5a:	b931      	cbnz	r1, 801de6a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801de5c:	4b10      	ldr	r3, [pc, #64]	; (801dea0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801de5e:	f44f 7120 	mov.w	r1, #640	; 0x280
 801de62:	4a10      	ldr	r2, [pc, #64]	; (801dea4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801de64:	4810      	ldr	r0, [pc, #64]	; (801dea8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801de66:	f001 ffe3 	bl	801fe30 <__assert_func>
 801de6a:	8803      	ldrh	r3, [r0, #0]
 801de6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801de70:	4293      	cmp	r3, r2
 801de72:	d011      	beq.n	801de98 <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 801de74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801de78:	4293      	cmp	r3, r2
 801de7a:	d103      	bne.n	801de84 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801de7c:	4b0b      	ldr	r3, [pc, #44]	; (801deac <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801de7e:	681b      	ldr	r3, [r3, #0]
 801de80:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801de82:	bd08      	pop	{r3, pc}
 801de84:	4a0a      	ldr	r2, [pc, #40]	; (801deb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801de86:	6812      	ldr	r2, [r2, #0]
 801de88:	b112      	cbz	r2, 801de90 <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 801de8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801de8e:	b920      	cbnz	r0, 801de9a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801de90:	2214      	movs	r2, #20
 801de92:	4353      	muls	r3, r2
 801de94:	58c8      	ldr	r0, [r1, r3]
 801de96:	bd08      	pop	{r3, pc}
 801de98:	2000      	movs	r0, #0
 801de9a:	bd08      	pop	{r3, pc}
 801de9c:	20009d6c 	.word	0x20009d6c
 801dea0:	08023389 	.word	0x08023389
 801dea4:	08023441 	.word	0x08023441
 801dea8:	0802330b 	.word	0x0802330b
 801deac:	20009cd4 	.word	0x20009cd4
 801deb0:	20009d48 	.word	0x20009d48

0801deb4 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>:
 801deb4:	8802      	ldrh	r2, [r0, #0]
 801deb6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801deba:	429a      	cmp	r2, r3
 801debc:	dc19      	bgt.n	801def2 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 801debe:	4b0e      	ldr	r3, [pc, #56]	; (801def8 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x44>)
 801dec0:	881b      	ldrh	r3, [r3, #0]
 801dec2:	429a      	cmp	r2, r3
 801dec4:	da15      	bge.n	801def2 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 801dec6:	4b0d      	ldr	r3, [pc, #52]	; (801defc <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x48>)
 801dec8:	6819      	ldr	r1, [r3, #0]
 801deca:	2314      	movs	r3, #20
 801decc:	fb03 1302 	mla	r3, r3, r2, r1
 801ded0:	6858      	ldr	r0, [r3, #4]
 801ded2:	b178      	cbz	r0, 801def4 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 801ded4:	490a      	ldr	r1, [pc, #40]	; (801df00 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x4c>)
 801ded6:	6809      	ldr	r1, [r1, #0]
 801ded8:	b161      	cbz	r1, 801def4 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 801deda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801dede:	b14a      	cbz	r2, 801def4 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 801dee0:	8919      	ldrh	r1, [r3, #8]
 801dee2:	8958      	ldrh	r0, [r3, #10]
 801dee4:	4348      	muls	r0, r1
 801dee6:	0040      	lsls	r0, r0, #1
 801dee8:	3003      	adds	r0, #3
 801deea:	f020 0003 	bic.w	r0, r0, #3
 801deee:	4410      	add	r0, r2
 801def0:	4770      	bx	lr
 801def2:	2000      	movs	r0, #0
 801def4:	4770      	bx	lr
 801def6:	bf00      	nop
 801def8:	20009d64 	.word	0x20009d64
 801defc:	20009d6c 	.word	0x20009d6c
 801df00:	20009d48 	.word	0x20009d48

0801df04 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801df04:	b508      	push	{r3, lr}
 801df06:	4b1c      	ldr	r3, [pc, #112]	; (801df78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801df08:	6819      	ldr	r1, [r3, #0]
 801df0a:	8803      	ldrh	r3, [r0, #0]
 801df0c:	b1a9      	cbz	r1, 801df3a <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 801df0e:	4a1b      	ldr	r2, [pc, #108]	; (801df7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801df10:	8812      	ldrh	r2, [r2, #0]
 801df12:	4293      	cmp	r3, r2
 801df14:	da05      	bge.n	801df22 <_ZNK8touchgfx6Bitmap9getFormatEv+0x1e>
 801df16:	2214      	movs	r2, #20
 801df18:	fb02 1303 	mla	r3, r2, r3, r1
 801df1c:	7cd8      	ldrb	r0, [r3, #19]
 801df1e:	0940      	lsrs	r0, r0, #5
 801df20:	bd08      	pop	{r3, pc}
 801df22:	4917      	ldr	r1, [pc, #92]	; (801df80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7c>)
 801df24:	8809      	ldrh	r1, [r1, #0]
 801df26:	4411      	add	r1, r2
 801df28:	428b      	cmp	r3, r1
 801df2a:	da06      	bge.n	801df3a <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 801df2c:	1a9b      	subs	r3, r3, r2
 801df2e:	4a15      	ldr	r2, [pc, #84]	; (801df84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801df30:	6812      	ldr	r2, [r2, #0]
 801df32:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801df36:	7b18      	ldrb	r0, [r3, #12]
 801df38:	bd08      	pop	{r3, pc}
 801df3a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801df3e:	4293      	cmp	r3, r2
 801df40:	d10c      	bne.n	801df5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801df42:	4b11      	ldr	r3, [pc, #68]	; (801df88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801df44:	681b      	ldr	r3, [r3, #0]
 801df46:	6898      	ldr	r0, [r3, #8]
 801df48:	6803      	ldr	r3, [r0, #0]
 801df4a:	6a1b      	ldr	r3, [r3, #32]
 801df4c:	4798      	blx	r3
 801df4e:	2804      	cmp	r0, #4
 801df50:	d00e      	beq.n	801df70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>
 801df52:	d805      	bhi.n	801df60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801df54:	2801      	cmp	r0, #1
 801df56:	d00d      	beq.n	801df74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>
 801df58:	2802      	cmp	r0, #2
 801df5a:	d007      	beq.n	801df6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>
 801df5c:	2000      	movs	r0, #0
 801df5e:	bd08      	pop	{r3, pc}
 801df60:	2810      	cmp	r0, #16
 801df62:	d0fb      	beq.n	801df5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801df64:	2818      	cmp	r0, #24
 801df66:	d1f9      	bne.n	801df5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801df68:	2001      	movs	r0, #1
 801df6a:	bd08      	pop	{r3, pc}
 801df6c:	2005      	movs	r0, #5
 801df6e:	bd08      	pop	{r3, pc}
 801df70:	2006      	movs	r0, #6
 801df72:	bd08      	pop	{r3, pc}
 801df74:	2003      	movs	r0, #3
 801df76:	bd08      	pop	{r3, pc}
 801df78:	20009d6c 	.word	0x20009d6c
 801df7c:	20009d64 	.word	0x20009d64
 801df80:	20009d68 	.word	0x20009d68
 801df84:	20009d4c 	.word	0x20009d4c
 801df88:	20009cd4 	.word	0x20009cd4

0801df8c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801df8c:	2010      	movs	r0, #16
 801df8e:	4770      	bx	lr

0801df90 <_ZN8touchgfx8LCD16bpp4initEv>:
 801df90:	4770      	bx	lr
	...

0801df94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt>:
 801df94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df98:	b086      	sub	sp, #24
 801df9a:	6808      	ldr	r0, [r1, #0]
 801df9c:	6849      	ldr	r1, [r1, #4]
 801df9e:	4617      	mov	r7, r2
 801dfa0:	ab04      	add	r3, sp, #16
 801dfa2:	ac04      	add	r4, sp, #16
 801dfa4:	c303      	stmia	r3!, {r0, r1}
 801dfa6:	4620      	mov	r0, r4
 801dfa8:	f7fe fac2 	bl	801c530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dfac:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801dfb0:	429f      	cmp	r7, r3
 801dfb2:	d109      	bne.n	801dfc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 801dfb4:	4b33      	ldr	r3, [pc, #204]	; (801e084 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf0>)
 801dfb6:	781b      	ldrb	r3, [r3, #0]
 801dfb8:	b933      	cbnz	r3, 801dfc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 801dfba:	4b33      	ldr	r3, [pc, #204]	; (801e088 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf4>)
 801dfbc:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 801dfc0:	4a32      	ldr	r2, [pc, #200]	; (801e08c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf8>)
 801dfc2:	4833      	ldr	r0, [pc, #204]	; (801e090 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xfc>)
 801dfc4:	f001 ff34 	bl	801fe30 <__assert_func>
 801dfc8:	4e32      	ldr	r6, [pc, #200]	; (801e094 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x100>)
 801dfca:	6830      	ldr	r0, [r6, #0]
 801dfcc:	46b0      	mov	r8, r6
 801dfce:	6803      	ldr	r3, [r0, #0]
 801dfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfd2:	4798      	blx	r3
 801dfd4:	f010 0a01 	ands.w	sl, r0, #1
 801dfd8:	d020      	beq.n	801e01c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x88>
 801dfda:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801dfde:	429f      	cmp	r7, r3
 801dfe0:	d108      	bne.n	801dff4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x60>
 801dfe2:	6830      	ldr	r0, [r6, #0]
 801dfe4:	6803      	ldr	r3, [r0, #0]
 801dfe6:	e894 0006 	ldmia.w	r4, {r1, r2}
 801dfea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801dfec:	4798      	blx	r3
 801dfee:	b006      	add	sp, #24
 801dff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dff4:	ad06      	add	r5, sp, #24
 801dff6:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 801dffa:	4628      	mov	r0, r5
 801dffc:	f7ff ff2a 	bl	801de54 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e000:	6836      	ldr	r6, [r6, #0]
 801e002:	4680      	mov	r8, r0
 801e004:	4628      	mov	r0, r5
 801e006:	6833      	ldr	r3, [r6, #0]
 801e008:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 801e00a:	f7ff fe25 	bl	801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e00e:	4643      	mov	r3, r8
 801e010:	9000      	str	r0, [sp, #0]
 801e012:	4630      	mov	r0, r6
 801e014:	e894 0006 	ldmia.w	r4, {r1, r2}
 801e018:	47b8      	blx	r7
 801e01a:	e7e8      	b.n	801dfee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 801e01c:	6830      	ldr	r0, [r6, #0]
 801e01e:	ad06      	add	r5, sp, #24
 801e020:	4e1d      	ldr	r6, [pc, #116]	; (801e098 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x104>)
 801e022:	6803      	ldr	r3, [r0, #0]
 801e024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e026:	4798      	blx	r3
 801e028:	8834      	ldrh	r4, [r6, #0]
 801e02a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801e02e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801e032:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 801e036:	4657      	mov	r7, sl
 801e038:	fb02 3404 	mla	r4, r2, r4, r3
 801e03c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e040:	4628      	mov	r0, r5
 801e042:	f7ff ff07 	bl	801de54 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e046:	4681      	mov	r9, r0
 801e048:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e04c:	429f      	cmp	r7, r3
 801e04e:	da14      	bge.n	801e07a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xe6>
 801e050:	f8d8 0000 	ldr.w	r0, [r8]
 801e054:	4649      	mov	r1, r9
 801e056:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801e05a:	3701      	adds	r7, #1
 801e05c:	6802      	ldr	r2, [r0, #0]
 801e05e:	005b      	lsls	r3, r3, #1
 801e060:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801e064:	4622      	mov	r2, r4
 801e066:	47d0      	blx	sl
 801e068:	8833      	ldrh	r3, [r6, #0]
 801e06a:	4628      	mov	r0, r5
 801e06c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e070:	f7ff fdf2 	bl	801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e074:	eb09 0940 	add.w	r9, r9, r0, lsl #1
 801e078:	e7e6      	b.n	801e048 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xb4>
 801e07a:	4628      	mov	r0, r5
 801e07c:	f7ff feea 	bl	801de54 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e080:	e7b5      	b.n	801dfee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 801e082:	bf00      	nop
 801e084:	20009cd3 	.word	0x20009cd3
 801e088:	08023520 	.word	0x08023520
 801e08c:	0802367c 	.word	0x0802367c
 801e090:	0802355b 	.word	0x0802355b
 801e094:	20009cd4 	.word	0x20009cd4
 801e098:	20009cce 	.word	0x20009cce

0801e09c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801e09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0a0:	b08d      	sub	sp, #52	; 0x34
 801e0a2:	4688      	mov	r8, r1
 801e0a4:	4614      	mov	r4, r2
 801e0a6:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e0aa:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801e0ae:	2f00      	cmp	r7, #0
 801e0b0:	d047      	beq.n	801e142 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801e0b2:	6810      	ldr	r0, [r2, #0]
 801e0b4:	ae08      	add	r6, sp, #32
 801e0b6:	6851      	ldr	r1, [r2, #4]
 801e0b8:	c603      	stmia	r6!, {r0, r1}
 801e0ba:	6818      	ldr	r0, [r3, #0]
 801e0bc:	ae0a      	add	r6, sp, #40	; 0x28
 801e0be:	6859      	ldr	r1, [r3, #4]
 801e0c0:	c603      	stmia	r6!, {r0, r1}
 801e0c2:	a808      	add	r0, sp, #32
 801e0c4:	f7fe fa34 	bl	801c530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e0c8:	4621      	mov	r1, r4
 801e0ca:	a80a      	add	r0, sp, #40	; 0x28
 801e0cc:	f7fe fa18 	bl	801c500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e0d0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e0d4:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801e0d8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801e0dc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801e0e0:	fb14 2103 	smlabb	r1, r4, r3, r2
 801e0e4:	eb08 0441 	add.w	r4, r8, r1, lsl #1
 801e0e8:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801e0ec:	f8df 8218 	ldr.w	r8, [pc, #536]	; 801e308 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>
 801e0f0:	440a      	add	r2, r1
 801e0f2:	f8d8 0000 	ldr.w	r0, [r8]
 801e0f6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801e0fa:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801e0fe:	4413      	add	r3, r2
 801e100:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e104:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801e108:	9306      	str	r3, [sp, #24]
 801e10a:	6803      	ldr	r3, [r0, #0]
 801e10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e10e:	4798      	blx	r3
 801e110:	2fff      	cmp	r7, #255	; 0xff
 801e112:	d019      	beq.n	801e148 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801e114:	f010 0f04 	tst.w	r0, #4
 801e118:	d01a      	beq.n	801e150 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801e11a:	f8d8 0000 	ldr.w	r0, [r8]
 801e11e:	b2b6      	uxth	r6, r6
 801e120:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801e124:	6801      	ldr	r1, [r0, #0]
 801e126:	9504      	str	r5, [sp, #16]
 801e128:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801e12c:	9703      	str	r7, [sp, #12]
 801e12e:	9502      	str	r5, [sp, #8]
 801e130:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 801e134:	9600      	str	r6, [sp, #0]
 801e136:	9501      	str	r5, [sp, #4]
 801e138:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e13c:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 801e13e:	4621      	mov	r1, r4
 801e140:	47a8      	blx	r5
 801e142:	b00d      	add	sp, #52	; 0x34
 801e144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e148:	b915      	cbnz	r5, 801e150 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801e14a:	f010 0f01 	tst.w	r0, #1
 801e14e:	e7e3      	b.n	801e118 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801e150:	f8d8 0000 	ldr.w	r0, [r8]
 801e154:	6803      	ldr	r3, [r0, #0]
 801e156:	6a1b      	ldr	r3, [r3, #32]
 801e158:	4798      	blx	r3
 801e15a:	4b69      	ldr	r3, [pc, #420]	; (801e300 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 801e15c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801e160:	2fff      	cmp	r7, #255	; 0xff
 801e162:	881d      	ldrh	r5, [r3, #0]
 801e164:	4699      	mov	r9, r3
 801e166:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e16a:	fb01 2505 	mla	r5, r1, r5, r2
 801e16e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801e172:	f000 80a6 	beq.w	801e2c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x226>
 801e176:	ea44 0205 	orr.w	r2, r4, r5
 801e17a:	f5c7 7080 	rsb	r0, r7, #256	; 0x100
 801e17e:	f012 0f03 	tst.w	r2, #3
 801e182:	d154      	bne.n	801e22e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 801e184:	07f2      	lsls	r2, r6, #31
 801e186:	d452      	bmi.n	801e22e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 801e188:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
 801e18c:	f01e 0e01 	ands.w	lr, lr, #1
 801e190:	d14d      	bne.n	801e22e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 801e192:	2202      	movs	r2, #2
 801e194:	9307      	str	r3, [sp, #28]
 801e196:	fb96 f8f2 	sdiv	r8, r6, r2
 801e19a:	4693      	mov	fp, r2
 801e19c:	f1c8 0800 	rsb	r8, r8, #0
 801e1a0:	9b06      	ldr	r3, [sp, #24]
 801e1a2:	459e      	cmp	lr, r3
 801e1a4:	f280 80a5 	bge.w	801e2f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 801e1a8:	f04f 0900 	mov.w	r9, #0
 801e1ac:	45b1      	cmp	r9, r6
 801e1ae:	da2e      	bge.n	801e20e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x172>
 801e1b0:	6829      	ldr	r1, [r5, #0]
 801e1b2:	f109 0902 	add.w	r9, r9, #2
 801e1b6:	f854 2b04 	ldr.w	r2, [r4], #4
 801e1ba:	0a0b      	lsrs	r3, r1, #8
 801e1bc:	f001 1a1f 	and.w	sl, r1, #2031647	; 0x1f001f
 801e1c0:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801e1c4:	f003 13f8 	and.w	r3, r3, #16253176	; 0xf800f8
 801e1c8:	fb00 fa0a 	mul.w	sl, r0, sl
 801e1cc:	f00c 1cf8 	and.w	ip, ip, #16253176	; 0xf800f8
 801e1d0:	0949      	lsrs	r1, r1, #5
 801e1d2:	4343      	muls	r3, r0
 801e1d4:	f001 113f 	and.w	r1, r1, #4128831	; 0x3f003f
 801e1d8:	fb07 3c0c 	mla	ip, r7, ip, r3
 801e1dc:	f002 131f 	and.w	r3, r2, #2031647	; 0x1f001f
 801e1e0:	0952      	lsrs	r2, r2, #5
 801e1e2:	4341      	muls	r1, r0
 801e1e4:	fb07 a303 	mla	r3, r7, r3, sl
 801e1e8:	f00c 2cf8 	and.w	ip, ip, #4160813056	; 0xf800f800
 801e1ec:	f002 123f 	and.w	r2, r2, #4128831	; 0x3f003f
 801e1f0:	0a1b      	lsrs	r3, r3, #8
 801e1f2:	fb07 1202 	mla	r2, r7, r2, r1
 801e1f6:	f003 131f 	and.w	r3, r3, #2031647	; 0x1f001f
 801e1fa:	ea4c 0c03 	orr.w	ip, ip, r3
 801e1fe:	4b41      	ldr	r3, [pc, #260]	; (801e304 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x268>)
 801e200:	ea03 02d2 	and.w	r2, r3, r2, lsr #3
 801e204:	ea4c 0202 	orr.w	r2, ip, r2
 801e208:	f845 2b04 	str.w	r2, [r5], #4
 801e20c:	e7ce      	b.n	801e1ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x110>
 801e20e:	9b07      	ldr	r3, [sp, #28]
 801e210:	f10e 0e01 	add.w	lr, lr, #1
 801e214:	881b      	ldrh	r3, [r3, #0]
 801e216:	eb08 0353 	add.w	r3, r8, r3, lsr #1
 801e21a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801e21e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801e222:	fb93 f3fb 	sdiv	r3, r3, fp
 801e226:	4443      	add	r3, r8
 801e228:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801e22c:	e7b8      	b.n	801e1a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x104>
 801e22e:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801e232:	f04f 0800 	mov.w	r8, #0
 801e236:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 801e30c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x270>
 801e23a:	005b      	lsls	r3, r3, #1
 801e23c:	9307      	str	r3, [sp, #28]
 801e23e:	9b06      	ldr	r3, [sp, #24]
 801e240:	4598      	cmp	r8, r3
 801e242:	da56      	bge.n	801e2f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 801e244:	46aa      	mov	sl, r5
 801e246:	f04f 0c00 	mov.w	ip, #0
 801e24a:	45b4      	cmp	ip, r6
 801e24c:	da29      	bge.n	801e2a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x206>
 801e24e:	f8ba 1000 	ldrh.w	r1, [sl]
 801e252:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 801e256:	f10c 0c01 	add.w	ip, ip, #1
 801e25a:	ea01 0309 	and.w	r3, r1, r9
 801e25e:	f401 6bfc 	and.w	fp, r1, #2016	; 0x7e0
 801e262:	ea02 0e09 	and.w	lr, r2, r9
 801e266:	f001 011f 	and.w	r1, r1, #31
 801e26a:	4343      	muls	r3, r0
 801e26c:	fb00 fb0b 	mul.w	fp, r0, fp
 801e270:	fb07 3e0e 	mla	lr, r7, lr, r3
 801e274:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 801e278:	4341      	muls	r1, r0
 801e27a:	f002 021f 	and.w	r2, r2, #31
 801e27e:	fb07 b303 	mla	r3, r7, r3, fp
 801e282:	ea09 2e2e 	and.w	lr, r9, lr, asr #8
 801e286:	fb07 1202 	mla	r2, r7, r2, r1
 801e28a:	121b      	asrs	r3, r3, #8
 801e28c:	f3c2 2204 	ubfx	r2, r2, #8, #5
 801e290:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e294:	ea4e 0e03 	orr.w	lr, lr, r3
 801e298:	ea4e 0e02 	orr.w	lr, lr, r2
 801e29c:	f82a eb02 	strh.w	lr, [sl], #2
 801e2a0:	e7d3      	b.n	801e24a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ae>
 801e2a2:	4b17      	ldr	r3, [pc, #92]	; (801e300 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 801e2a4:	f108 0801 	add.w	r8, r8, #1
 801e2a8:	9a07      	ldr	r2, [sp, #28]
 801e2aa:	881b      	ldrh	r3, [r3, #0]
 801e2ac:	1b9b      	subs	r3, r3, r6
 801e2ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e2b2:	441d      	add	r5, r3
 801e2b4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801e2b8:	1b9b      	subs	r3, r3, r6
 801e2ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e2be:	441c      	add	r4, r3
 801e2c0:	e7bd      	b.n	801e23e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a2>
 801e2c2:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801e2c6:	2700      	movs	r7, #0
 801e2c8:	9b06      	ldr	r3, [sp, #24]
 801e2ca:	429f      	cmp	r7, r3
 801e2cc:	da11      	bge.n	801e2f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 801e2ce:	f8d8 0000 	ldr.w	r0, [r8]
 801e2d2:	4622      	mov	r2, r4
 801e2d4:	4629      	mov	r1, r5
 801e2d6:	3701      	adds	r7, #1
 801e2d8:	6803      	ldr	r3, [r0, #0]
 801e2da:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801e2dc:	4653      	mov	r3, sl
 801e2de:	47b0      	blx	r6
 801e2e0:	f8b9 3000 	ldrh.w	r3, [r9]
 801e2e4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801e2e8:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801e2ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e2f0:	e7ea      	b.n	801e2c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x22c>
 801e2f2:	4b05      	ldr	r3, [pc, #20]	; (801e308 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>)
 801e2f4:	6818      	ldr	r0, [r3, #0]
 801e2f6:	6803      	ldr	r3, [r0, #0]
 801e2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2fa:	4798      	blx	r3
 801e2fc:	e721      	b.n	801e142 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801e2fe:	bf00      	nop
 801e300:	20009cce 	.word	0x20009cce
 801e304:	07e007e0 	.word	0x07e007e0
 801e308:	20009cd4 	.word	0x20009cd4
 801e30c:	fffff800 	.word	0xfffff800

0801e310 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801e310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e314:	4615      	mov	r5, r2
 801e316:	b08b      	sub	sp, #44	; 0x2c
 801e318:	4699      	mov	r9, r3
 801e31a:	b13b      	cbz	r3, 801e32c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801e31c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e320:	b123      	cbz	r3, 801e32c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801e322:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e326:	2b00      	cmp	r3, #0
 801e328:	f040 808c 	bne.w	801e444 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 801e32c:	b00b      	add	sp, #44	; 0x2c
 801e32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e332:	f010 0f08 	tst.w	r0, #8
 801e336:	d011      	beq.n	801e35c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4c>
 801e338:	6818      	ldr	r0, [r3, #0]
 801e33a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801e33e:	6801      	ldr	r1, [r0, #0]
 801e340:	9401      	str	r4, [sp, #4]
 801e342:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801e346:	f8cd 9008 	str.w	r9, [sp, #8]
 801e34a:	9400      	str	r4, [sp, #0]
 801e34c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e350:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 801e352:	4629      	mov	r1, r5
 801e354:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e358:	47a0      	blx	r4
 801e35a:	e7e7      	b.n	801e32c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801e35c:	6818      	ldr	r0, [r3, #0]
 801e35e:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801e362:	6803      	ldr	r3, [r0, #0]
 801e364:	f9bd 8026 	ldrsh.w	r8, [sp, #38]	; 0x26
 801e368:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801e36c:	6a1b      	ldr	r3, [r3, #32]
 801e36e:	4798      	blx	r3
 801e370:	4a3e      	ldr	r2, [pc, #248]	; (801e46c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>)
 801e372:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e376:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e37a:	8816      	ldrh	r6, [r2, #0]
 801e37c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e380:	fb06 1303 	mla	r3, r6, r3, r1
 801e384:	4616      	mov	r6, r2
 801e386:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 801e38a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e38e:	d041      	beq.n	801e414 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x104>
 801e390:	f405 4e78 	and.w	lr, r5, #63488	; 0xf800
 801e394:	f405 67fc 	and.w	r7, r5, #2016	; 0x7e0
 801e398:	f005 051f 	and.w	r5, r5, #31
 801e39c:	f5c9 7680 	rsb	r6, r9, #256	; 0x100
 801e3a0:	fb09 fe0e 	mul.w	lr, r9, lr
 801e3a4:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 801e474 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 801e3a8:	fb09 f305 	mul.w	r3, r9, r5
 801e3ac:	2500      	movs	r5, #0
 801e3ae:	fb09 f707 	mul.w	r7, r9, r7
 801e3b2:	9306      	str	r3, [sp, #24]
 801e3b4:	004b      	lsls	r3, r1, #1
 801e3b6:	9207      	str	r2, [sp, #28]
 801e3b8:	9305      	str	r3, [sp, #20]
 801e3ba:	4545      	cmp	r5, r8
 801e3bc:	da3c      	bge.n	801e438 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 801e3be:	4681      	mov	r9, r0
 801e3c0:	f04f 0c00 	mov.w	ip, #0
 801e3c4:	45a4      	cmp	ip, r4
 801e3c6:	da1c      	bge.n	801e402 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf2>
 801e3c8:	f8b9 2000 	ldrh.w	r2, [r9]
 801e3cc:	f10c 0c01 	add.w	ip, ip, #1
 801e3d0:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 801e3d4:	ea02 010b 	and.w	r1, r2, fp
 801e3d8:	fb06 7303 	mla	r3, r6, r3, r7
 801e3dc:	fb06 e101 	mla	r1, r6, r1, lr
 801e3e0:	0a1b      	lsrs	r3, r3, #8
 801e3e2:	ea0b 2111 	and.w	r1, fp, r1, lsr #8
 801e3e6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e3ea:	430b      	orrs	r3, r1
 801e3ec:	f002 011f 	and.w	r1, r2, #31
 801e3f0:	9a06      	ldr	r2, [sp, #24]
 801e3f2:	fb06 2101 	mla	r1, r6, r1, r2
 801e3f6:	f3c1 2104 	ubfx	r1, r1, #8, #5
 801e3fa:	430b      	orrs	r3, r1
 801e3fc:	f829 3b02 	strh.w	r3, [r9], #2
 801e400:	e7e0      	b.n	801e3c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb4>
 801e402:	9b07      	ldr	r3, [sp, #28]
 801e404:	3501      	adds	r5, #1
 801e406:	9a05      	ldr	r2, [sp, #20]
 801e408:	881b      	ldrh	r3, [r3, #0]
 801e40a:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 801e40e:	4413      	add	r3, r2
 801e410:	4418      	add	r0, r3
 801e412:	e7d2      	b.n	801e3ba <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801e414:	0049      	lsls	r1, r1, #1
 801e416:	2200      	movs	r2, #0
 801e418:	4542      	cmp	r2, r8
 801e41a:	da0d      	bge.n	801e438 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 801e41c:	2300      	movs	r3, #0
 801e41e:	42a3      	cmp	r3, r4
 801e420:	da03      	bge.n	801e42a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x11a>
 801e422:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 801e426:	3301      	adds	r3, #1
 801e428:	e7f9      	b.n	801e41e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x10e>
 801e42a:	8833      	ldrh	r3, [r6, #0]
 801e42c:	3201      	adds	r2, #1
 801e42e:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 801e432:	440b      	add	r3, r1
 801e434:	4418      	add	r0, r3
 801e436:	e7ef      	b.n	801e418 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x108>
 801e438:	4b0d      	ldr	r3, [pc, #52]	; (801e470 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 801e43a:	6818      	ldr	r0, [r3, #0]
 801e43c:	6803      	ldr	r3, [r0, #0]
 801e43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e440:	4798      	blx	r3
 801e442:	e773      	b.n	801e32c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801e444:	6808      	ldr	r0, [r1, #0]
 801e446:	ab08      	add	r3, sp, #32
 801e448:	6849      	ldr	r1, [r1, #4]
 801e44a:	4c09      	ldr	r4, [pc, #36]	; (801e470 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 801e44c:	c303      	stmia	r3!, {r0, r1}
 801e44e:	a808      	add	r0, sp, #32
 801e450:	f7fe f86e 	bl	801c530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e454:	6820      	ldr	r0, [r4, #0]
 801e456:	6803      	ldr	r3, [r0, #0]
 801e458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e45a:	4798      	blx	r3
 801e45c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e460:	4623      	mov	r3, r4
 801e462:	f47f af66 	bne.w	801e332 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 801e466:	f010 0f02 	tst.w	r0, #2
 801e46a:	e764      	b.n	801e336 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 801e46c:	20009cce 	.word	0x20009cce
 801e470:	20009cd4 	.word	0x20009cd4
 801e474:	fffff800 	.word	0xfffff800

0801e478 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>:
 801e478:	ee07 0a90 	vmov	s15, r0
 801e47c:	ee70 0ac0 	vsub.f32	s1, s1, s0
 801e480:	ee71 1ac1 	vsub.f32	s3, s3, s2
 801e484:	eddf 6a08 	vldr	s13, [pc, #32]	; 801e4a8 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh+0x30>
 801e488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e48c:	eea0 0a82 	vfma.f32	s0, s1, s4
 801e490:	eea1 1a82 	vfma.f32	s2, s3, s4
 801e494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e498:	ee31 1a40 	vsub.f32	s2, s2, s0
 801e49c:	eea2 0a81 	vfma.f32	s0, s5, s2
 801e4a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e4a4:	4770      	bx	lr
 801e4a6:	bf00      	nop
 801e4a8:	437f0000 	.word	0x437f0000

0801e4ac <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801e4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4b0:	ed2d 8b0e 	vpush	{d8-d14}
 801e4b4:	b095      	sub	sp, #84	; 0x54
 801e4b6:	461e      	mov	r6, r3
 801e4b8:	2700      	movs	r7, #0
 801e4ba:	4690      	mov	r8, r2
 801e4bc:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	; 0xc0
 801e4c0:	a812      	add	r0, sp, #72	; 0x48
 801e4c2:	468a      	mov	sl, r1
 801e4c4:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 801e4c6:	9311      	str	r3, [sp, #68]	; 0x44
 801e4c8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e4cc:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
 801e4d0:	9301      	str	r3, [sp, #4]
 801e4d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e4d4:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 801e4d8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801e4dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801e4e0:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
 801e4e4:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 801e4e8:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 801e4ec:	f7fe f820 	bl	801c530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e4f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e4f2:	6835      	ldr	r5, [r6, #0]
 801e4f4:	6818      	ldr	r0, [r3, #0]
 801e4f6:	f9b4 3000 	ldrsh.w	r3, [r4]
 801e4fa:	f9b9 e000 	ldrsh.w	lr, [r9]
 801e4fe:	1b40      	subs	r0, r0, r5
 801e500:	18e9      	adds	r1, r5, r3
 801e502:	ebae 0c01 	sub.w	ip, lr, r1
 801e506:	4560      	cmp	r0, ip
 801e508:	f340 86a2 	ble.w	801f250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801e50c:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 801e510:	44f1      	add	r9, lr
 801e512:	fa0f f989 	sxth.w	r9, r9
 801e516:	4549      	cmp	r1, r9
 801e518:	f300 869a 	bgt.w	801f250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801e51c:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 801e520:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 801e524:	6972      	ldr	r2, [r6, #20]
 801e526:	ed96 6a07 	vldr	s12, [r6, #28]
 801e52a:	4422      	add	r2, r4
 801e52c:	f8da 4004 	ldr.w	r4, [sl, #4]
 801e530:	ed98 ba09 	vldr	s22, [r8, #36]	; 0x24
 801e534:	fb04 5402 	mla	r4, r4, r2, r5
 801e538:	f8bd 20c8 	ldrh.w	r2, [sp, #200]	; 0xc8
 801e53c:	edd8 ba0b 	vldr	s23, [r8, #44]	; 0x2c
 801e540:	4282      	cmp	r2, r0
 801e542:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 801e546:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 801e54a:	441c      	add	r4, r3
 801e54c:	bfa8      	it	ge
 801e54e:	4602      	movge	r2, r0
 801e550:	f8da b000 	ldr.w	fp, [sl]
 801e554:	458e      	cmp	lr, r1
 801e556:	ee06 2a90 	vmov	s13, r2
 801e55a:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 801e55e:	9208      	str	r2, [sp, #32]
 801e560:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 801e564:	edd8 6a0d 	vldr	s13, [r8, #52]	; 0x34
 801e568:	ee29 ba0b 	vmul.f32	s22, s18, s22
 801e56c:	ee69 ba2b 	vmul.f32	s23, s18, s23
 801e570:	ee29 9a26 	vmul.f32	s18, s18, s13
 801e574:	eecc 6a06 	vdiv.f32	s13, s24, s12
 801e578:	ee37 aaab 	vadd.f32	s20, s15, s23
 801e57c:	ee77 aa09 	vadd.f32	s21, s14, s18
 801e580:	ee76 9a0b 	vadd.f32	s19, s12, s22
 801e584:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e588:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e58c:	dc01      	bgt.n	801e592 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe6>
 801e58e:	970a      	str	r7, [sp, #40]	; 0x28
 801e590:	e029      	b.n	801e5e6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a>
 801e592:	9a08      	ldr	r2, [sp, #32]
 801e594:	fb9c f1f2 	sdiv	r1, ip, r2
 801e598:	ee06 1a90 	vmov	s13, r1
 801e59c:	434a      	muls	r2, r1
 801e59e:	2900      	cmp	r1, #0
 801e5a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e5a4:	ebac 0602 	sub.w	r6, ip, r2
 801e5a8:	960a      	str	r6, [sp, #40]	; 0x28
 801e5aa:	eeeb 9a26 	vfma.f32	s19, s22, s13
 801e5ae:	eeab aaa6 	vfma.f32	s20, s23, s13
 801e5b2:	eee9 aa26 	vfma.f32	s21, s18, s13
 801e5b6:	dd12      	ble.n	801e5de <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x132>
 801e5b8:	ee79 7acb 	vsub.f32	s15, s19, s22
 801e5bc:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 801e5c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 801e5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5c8:	bf14      	ite	ne
 801e5ca:	eecc 6a27 	vdivne.f32	s13, s24, s15
 801e5ce:	eef0 6a4c 	vmoveq.f32	s13, s24
 801e5d2:	ee7a 7a6b 	vsub.f32	s15, s20, s23
 801e5d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e5da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e5de:	1a80      	subs	r0, r0, r2
 801e5e0:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801e5e4:	4415      	add	r5, r2
 801e5e6:	18ea      	adds	r2, r5, r3
 801e5e8:	4402      	add	r2, r0
 801e5ea:	4591      	cmp	r9, r2
 801e5ec:	bfbc      	itt	lt
 801e5ee:	eba9 0003 	sublt.w	r0, r9, r3
 801e5f2:	1b40      	sublt	r0, r0, r5
 801e5f4:	2800      	cmp	r0, #0
 801e5f6:	f340 862b 	ble.w	801f250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801e5fa:	9b08      	ldr	r3, [sp, #32]
 801e5fc:	9a08      	ldr	r2, [sp, #32]
 801e5fe:	fb90 f3f3 	sdiv	r3, r0, r3
 801e602:	9309      	str	r3, [sp, #36]	; 0x24
 801e604:	fb02 0313 	mls	r3, r2, r3, r0
 801e608:	930c      	str	r3, [sp, #48]	; 0x30
 801e60a:	b91b      	cbnz	r3, 801e614 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x168>
 801e60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e60e:	920c      	str	r2, [sp, #48]	; 0x30
 801e610:	3b01      	subs	r3, #1
 801e612:	9309      	str	r3, [sp, #36]	; 0x24
 801e614:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e616:	eddf ca40 	vldr	s25, [pc, #256]	; 801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x26c>
 801e61a:	681b      	ldr	r3, [r3, #0]
 801e61c:	9304      	str	r3, [sp, #16]
 801e61e:	9b01      	ldr	r3, [sp, #4]
 801e620:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801e624:	9305      	str	r3, [sp, #20]
 801e626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e628:	2b00      	cmp	r3, #0
 801e62a:	dc03      	bgt.n	801e634 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x188>
 801e62c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e62e:	2b00      	cmp	r3, #0
 801e630:	f340 860e 	ble.w	801f250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801e634:	ee8c 8a29 	vdiv.f32	s16, s24, s19
 801e638:	9b08      	ldr	r3, [sp, #32]
 801e63a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e63c:	eef0 6a67 	vmov.f32	s13, s15
 801e640:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e644:	ee16 ba90 	vmov	fp, s13
 801e648:	eef0 6a47 	vmov.f32	s13, s14
 801e64c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e650:	ee6a 8a08 	vmul.f32	s17, s20, s16
 801e654:	ee2a 8a88 	vmul.f32	s16, s21, s16
 801e658:	ee16 5a90 	vmov	r5, s13
 801e65c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801e660:	ee38 7a47 	vsub.f32	s14, s16, s14
 801e664:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801e668:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e66c:	ee17 2a90 	vmov	r2, s15
 801e670:	fb92 f3f3 	sdiv	r3, r2, r3
 801e674:	ee17 2a10 	vmov	r2, s14
 801e678:	9306      	str	r3, [sp, #24]
 801e67a:	9b08      	ldr	r3, [sp, #32]
 801e67c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e680:	9a08      	ldr	r2, [sp, #32]
 801e682:	9307      	str	r3, [sp, #28]
 801e684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e686:	2900      	cmp	r1, #0
 801e688:	bfc8      	it	gt
 801e68a:	4613      	movgt	r3, r2
 801e68c:	9302      	str	r3, [sp, #8]
 801e68e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e690:	2b00      	cmp	r3, #0
 801e692:	dd0d      	ble.n	801e6b0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x204>
 801e694:	9a06      	ldr	r2, [sp, #24]
 801e696:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e69a:	fb02 bb03 	mla	fp, r2, r3, fp
 801e69e:	9a07      	ldr	r2, [sp, #28]
 801e6a0:	fb02 5503 	mla	r5, r2, r3, r5
 801e6a4:	9b02      	ldr	r3, [sp, #8]
 801e6a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e6a8:	1a9b      	subs	r3, r3, r2
 801e6aa:	9302      	str	r3, [sp, #8]
 801e6ac:	2300      	movs	r3, #0
 801e6ae:	930a      	str	r3, [sp, #40]	; 0x28
 801e6b0:	ea5f 432b 	movs.w	r3, fp, asr #16
 801e6b4:	d42e      	bmi.n	801e714 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801e6b6:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 801e6ba:	4283      	cmp	r3, r0
 801e6bc:	da2a      	bge.n	801e714 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801e6be:	142b      	asrs	r3, r5, #16
 801e6c0:	d428      	bmi.n	801e714 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801e6c2:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801e6c6:	428b      	cmp	r3, r1
 801e6c8:	da24      	bge.n	801e714 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801e6ca:	9b02      	ldr	r3, [sp, #8]
 801e6cc:	9a06      	ldr	r2, [sp, #24]
 801e6ce:	3b01      	subs	r3, #1
 801e6d0:	fb03 b202 	mla	r2, r3, r2, fp
 801e6d4:	1412      	asrs	r2, r2, #16
 801e6d6:	d41d      	bmi.n	801e714 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801e6d8:	4282      	cmp	r2, r0
 801e6da:	da1b      	bge.n	801e714 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801e6dc:	9a07      	ldr	r2, [sp, #28]
 801e6de:	fb03 5302 	mla	r3, r3, r2, r5
 801e6e2:	141b      	asrs	r3, r3, #16
 801e6e4:	d416      	bmi.n	801e714 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801e6e6:	428b      	cmp	r3, r1
 801e6e8:	bfb4      	ite	lt
 801e6ea:	2300      	movlt	r3, #0
 801e6ec:	2301      	movge	r3, #1
 801e6ee:	9303      	str	r3, [sp, #12]
 801e6f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e6f2:	2b0b      	cmp	r3, #11
 801e6f4:	f200 82d7 	bhi.w	801eca6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7fa>
 801e6f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 801e6fc:	03430531 	.word	0x03430531
 801e700:	02ca02e8 	.word	0x02ca02e8
 801e704:	02d502d5 	.word	0x02d502d5
 801e708:	02d502d5 	.word	0x02d502d5
 801e70c:	01c5026b 	.word	0x01c5026b
 801e710:	00100160 	.word	0x00100160
 801e714:	2301      	movs	r3, #1
 801e716:	e7ea      	b.n	801e6ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x242>
 801e718:	3d800000 	.word	0x3d800000
 801e71c:	f04f 0a00 	mov.w	sl, #0
 801e720:	9b02      	ldr	r3, [sp, #8]
 801e722:	4553      	cmp	r3, sl
 801e724:	f340 82bb 	ble.w	801ec9e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801e728:	9a03      	ldr	r2, [sp, #12]
 801e72a:	ea4f 412b 	mov.w	r1, fp, asr #16
 801e72e:	142b      	asrs	r3, r5, #16
 801e730:	b17a      	cbz	r2, 801e752 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a6>
 801e732:	2900      	cmp	r1, #0
 801e734:	f2c0 813b 	blt.w	801e9ae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801e738:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801e73c:	4291      	cmp	r1, r2
 801e73e:	f280 8136 	bge.w	801e9ae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801e742:	2b00      	cmp	r3, #0
 801e744:	f2c0 8133 	blt.w	801e9ae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801e748:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801e74c:	4293      	cmp	r3, r2
 801e74e:	f280 812e 	bge.w	801e9ae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801e752:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801e756:	9804      	ldr	r0, [sp, #16]
 801e758:	fb03 1102 	mla	r1, r3, r2, r1
 801e75c:	9b04      	ldr	r3, [sp, #16]
 801e75e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801e762:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 801e766:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e76a:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 801e76e:	6859      	ldr	r1, [r3, #4]
 801e770:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801e774:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801e778:	685a      	ldr	r2, [r3, #4]
 801e77a:	0e3b      	lsrs	r3, r7, #24
 801e77c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e780:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801e784:	435e      	muls	r6, r3
 801e786:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 801e78a:	435f      	muls	r7, r3
 801e78c:	ee06 ea90 	vmov	s13, lr
 801e790:	0a36      	lsrs	r6, r6, #8
 801e792:	ee07 3a90 	vmov	s15, r3
 801e796:	0a3f      	lsrs	r7, r7, #8
 801e798:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e79c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e7a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e7a4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e7a8:	433e      	orrs	r6, r7
 801e7aa:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801e7ae:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e7b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801e7b6:	fb0e f707 	mul.w	r7, lr, r7
 801e7ba:	fb0e f101 	mul.w	r1, lr, r1
 801e7be:	0a3f      	lsrs	r7, r7, #8
 801e7c0:	960b      	str	r6, [sp, #44]	; 0x2c
 801e7c2:	0a09      	lsrs	r1, r1, #8
 801e7c4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e7c8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e7cc:	430f      	orrs	r7, r1
 801e7ce:	0e01      	lsrs	r1, r0, #24
 801e7d0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e7d4:	fb01 f808 	mul.w	r8, r1, r8
 801e7d8:	ee07 1a10 	vmov	s14, r1
 801e7dc:	4348      	muls	r0, r1
 801e7de:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e7e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e7e6:	0a00      	lsrs	r0, r0, #8
 801e7e8:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 801e7ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e7f0:	ea48 0800 	orr.w	r8, r8, r0
 801e7f4:	0e10      	lsrs	r0, r2, #24
 801e7f6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e7fa:	fb00 f909 	mul.w	r9, r0, r9
 801e7fe:	4342      	muls	r2, r0
 801e800:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e804:	0a12      	lsrs	r2, r2, #8
 801e806:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 801e80a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e80e:	ea49 0902 	orr.w	r9, r9, r2
 801e812:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801e816:	ee0d 2a10 	vmov	s26, r2
 801e81a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801e81e:	ea4f 4319 	mov.w	r3, r9, lsr #16
 801e822:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 801e826:	ee0d 2a90 	vmov	s27, r2
 801e82a:	ee01 3a90 	vmov	s3, r3
 801e82e:	ea4f 4318 	mov.w	r3, r8, lsr #16
 801e832:	eef8 daed 	vcvt.f32.s32	s27, s27
 801e836:	ee2d da2c 	vmul.f32	s26, s26, s25
 801e83a:	ee01 3a10 	vmov	s2, r3
 801e83e:	0c3b      	lsrs	r3, r7, #16
 801e840:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e844:	ee6d daac 	vmul.f32	s27, s27, s25
 801e848:	eeed 7a26 	vfma.f32	s15, s26, s13
 801e84c:	ee06 0a90 	vmov	s13, r0
 801e850:	ee00 3a90 	vmov	s1, r3
 801e854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e856:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e85a:	0c1b      	lsrs	r3, r3, #16
 801e85c:	eef0 2a6d 	vmov.f32	s5, s27
 801e860:	eeb0 2a4d 	vmov.f32	s4, s26
 801e864:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801e868:	ee00 3a10 	vmov	s0, r3
 801e86c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801e870:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801e874:	eead 7a26 	vfma.f32	s14, s26, s13
 801e878:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801e87c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e880:	eeed 7a87 	vfma.f32	s15, s27, s14
 801e884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e888:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801e88c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801e890:	4630      	mov	r0, r6
 801e892:	f7ff fdf1 	bl	801e478 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801e896:	f3c9 2307 	ubfx	r3, r9, #8, #8
 801e89a:	eeb0 ea40 	vmov.f32	s28, s0
 801e89e:	4630      	mov	r0, r6
 801e8a0:	ee01 3a90 	vmov	s3, r3
 801e8a4:	f3c8 2307 	ubfx	r3, r8, #8, #8
 801e8a8:	eef0 2a6d 	vmov.f32	s5, s27
 801e8ac:	ee01 3a10 	vmov	s2, r3
 801e8b0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801e8b4:	eeb0 2a4d 	vmov.f32	s4, s26
 801e8b8:	ee00 3a90 	vmov	s1, r3
 801e8bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8be:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e8c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e8c6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801e8ca:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801e8ce:	ee00 3a10 	vmov	s0, r3
 801e8d2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801e8d6:	f7ff fdcf 	bl	801e478 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801e8da:	eef0 ea40 	vmov.f32	s29, s0
 801e8de:	fa5f f389 	uxtb.w	r3, r9
 801e8e2:	4630      	mov	r0, r6
 801e8e4:	eef0 2a6d 	vmov.f32	s5, s27
 801e8e8:	ee01 3a90 	vmov	s3, r3
 801e8ec:	fa5f f388 	uxtb.w	r3, r8
 801e8f0:	eeb0 2a4d 	vmov.f32	s4, s26
 801e8f4:	ee01 3a10 	vmov	s2, r3
 801e8f8:	b2fb      	uxtb	r3, r7
 801e8fa:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e8fe:	ee00 3a90 	vmov	s1, r3
 801e902:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801e906:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801e90a:	ee00 3a10 	vmov	s0, r3
 801e90e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801e912:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801e916:	f7ff fdaf 	bl	801e478 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801e91a:	2e00      	cmp	r6, #0
 801e91c:	d047      	beq.n	801e9ae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801e91e:	eefc 7aee 	vcvt.u32.f32	s15, s29
 801e922:	2eff      	cmp	r6, #255	; 0xff
 801e924:	ee17 2a90 	vmov	r2, s15
 801e928:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801e92c:	f3c2 0285 	ubfx	r2, r2, #2, #6
 801e930:	ee17 3a90 	vmov	r3, s15
 801e934:	eefc 7ace 	vcvt.u32.f32	s15, s28
 801e938:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801e93c:	ea43 1242 	orr.w	r2, r3, r2, lsl #5
 801e940:	ee17 3a90 	vmov	r3, s15
 801e944:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801e948:	ea42 23c3 	orr.w	r3, r2, r3, lsl #11
 801e94c:	d102      	bne.n	801e954 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4a8>
 801e94e:	9a01      	ldr	r2, [sp, #4]
 801e950:	2aff      	cmp	r2, #255	; 0xff
 801e952:	d02a      	beq.n	801e9aa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4fe>
 801e954:	f834 001a 	ldrh.w	r0, [r4, sl, lsl #1]
 801e958:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801e95c:	f400 67fc 	and.w	r7, r0, #2016	; 0x7e0
 801e960:	fb12 fe06 	smulbb	lr, r2, r6
 801e964:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 801e968:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 801e96c:	f000 001f 	and.w	r0, r0, #31
 801e970:	f5ce 3180 	rsb	r1, lr, #65536	; 0x10000
 801e974:	f022 0207 	bic.w	r2, r2, #7
 801e978:	f026 0607 	bic.w	r6, r6, #7
 801e97c:	434a      	muls	r2, r1
 801e97e:	434f      	muls	r7, r1
 801e980:	fb0e 2606 	mla	r6, lr, r6, r2
 801e984:	4ad0      	ldr	r2, [pc, #832]	; (801ecc8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801e986:	4348      	muls	r0, r1
 801e988:	ea02 4616 	and.w	r6, r2, r6, lsr #16
 801e98c:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801e990:	f003 031f 	and.w	r3, r3, #31
 801e994:	fb0e 7202 	mla	r2, lr, r2, r7
 801e998:	fb0e 0303 	mla	r3, lr, r3, r0
 801e99c:	0c12      	lsrs	r2, r2, #16
 801e99e:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801e9a2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e9a6:	4316      	orrs	r6, r2
 801e9a8:	4333      	orrs	r3, r6
 801e9aa:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]
 801e9ae:	9b06      	ldr	r3, [sp, #24]
 801e9b0:	f10a 0a01 	add.w	sl, sl, #1
 801e9b4:	449b      	add	fp, r3
 801e9b6:	9b07      	ldr	r3, [sp, #28]
 801e9b8:	441d      	add	r5, r3
 801e9ba:	e6b1      	b.n	801e720 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x274>
 801e9bc:	2000      	movs	r0, #0
 801e9be:	9b02      	ldr	r3, [sp, #8]
 801e9c0:	4283      	cmp	r3, r0
 801e9c2:	f340 816c 	ble.w	801ec9e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801e9c6:	9b03      	ldr	r3, [sp, #12]
 801e9c8:	ea4f 422b 	mov.w	r2, fp, asr #16
 801e9cc:	1429      	asrs	r1, r5, #16
 801e9ce:	b15b      	cbz	r3, 801e9e8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x53c>
 801e9d0:	2a00      	cmp	r2, #0
 801e9d2:	db52      	blt.n	801ea7a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801e9d4:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801e9d8:	429a      	cmp	r2, r3
 801e9da:	da4e      	bge.n	801ea7a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801e9dc:	2900      	cmp	r1, #0
 801e9de:	db4c      	blt.n	801ea7a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801e9e0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801e9e4:	4299      	cmp	r1, r3
 801e9e6:	da48      	bge.n	801ea7a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801e9e8:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801e9ec:	fb01 2303 	mla	r3, r1, r3, r2
 801e9f0:	9a04      	ldr	r2, [sp, #16]
 801e9f2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801e9f6:	0e31      	lsrs	r1, r6, #24
 801e9f8:	d03f      	beq.n	801ea7a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801e9fa:	0972      	lsrs	r2, r6, #5
 801e9fc:	4bb2      	ldr	r3, [pc, #712]	; (801ecc8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801e9fe:	29ff      	cmp	r1, #255	; 0xff
 801ea00:	ea03 2316 	and.w	r3, r3, r6, lsr #8
 801ea04:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ea08:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801ea0c:	ea43 0302 	orr.w	r3, r3, r2
 801ea10:	ea43 0306 	orr.w	r3, r3, r6
 801ea14:	b29b      	uxth	r3, r3
 801ea16:	d102      	bne.n	801ea1e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x572>
 801ea18:	9a01      	ldr	r2, [sp, #4]
 801ea1a:	2aff      	cmp	r2, #255	; 0xff
 801ea1c:	d02b      	beq.n	801ea76 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ca>
 801ea1e:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 801ea22:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 801ea26:	9a01      	ldr	r2, [sp, #4]
 801ea28:	f02e 0e07 	bic.w	lr, lr, #7
 801ea2c:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 801ea30:	4351      	muls	r1, r2
 801ea32:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 801ea36:	f007 071f 	and.w	r7, r7, #31
 801ea3a:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 801ea3e:	f022 0207 	bic.w	r2, r2, #7
 801ea42:	4372      	muls	r2, r6
 801ea44:	fb06 fc0c 	mul.w	ip, r6, ip
 801ea48:	fb01 2e0e 	mla	lr, r1, lr, r2
 801ea4c:	4a9e      	ldr	r2, [pc, #632]	; (801ecc8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801ea4e:	4377      	muls	r7, r6
 801ea50:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 801ea54:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801ea58:	f003 031f 	and.w	r3, r3, #31
 801ea5c:	fb01 c202 	mla	r2, r1, r2, ip
 801ea60:	fb01 7303 	mla	r3, r1, r3, r7
 801ea64:	0c12      	lsrs	r2, r2, #16
 801ea66:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801ea6a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ea6e:	ea4e 0e02 	orr.w	lr, lr, r2
 801ea72:	ea4e 0303 	orr.w	r3, lr, r3
 801ea76:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 801ea7a:	9b06      	ldr	r3, [sp, #24]
 801ea7c:	3001      	adds	r0, #1
 801ea7e:	449b      	add	fp, r3
 801ea80:	9b07      	ldr	r3, [sp, #28]
 801ea82:	441d      	add	r5, r3
 801ea84:	e79b      	b.n	801e9be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x512>
 801ea86:	f04f 0e00 	mov.w	lr, #0
 801ea8a:	9b02      	ldr	r3, [sp, #8]
 801ea8c:	4573      	cmp	r3, lr
 801ea8e:	f340 8106 	ble.w	801ec9e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801ea92:	9903      	ldr	r1, [sp, #12]
 801ea94:	ea4f 422b 	mov.w	r2, fp, asr #16
 801ea98:	142b      	asrs	r3, r5, #16
 801ea9a:	b179      	cbz	r1, 801eabc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x610>
 801ea9c:	2a00      	cmp	r2, #0
 801ea9e:	f2c0 8091 	blt.w	801ebc4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801eaa2:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801eaa6:	428a      	cmp	r2, r1
 801eaa8:	f280 808c 	bge.w	801ebc4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	f2c0 8089 	blt.w	801ebc4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801eab2:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801eab6:	428b      	cmp	r3, r1
 801eab8:	f280 8084 	bge.w	801ebc4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801eabc:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801eac0:	f3cb 2a07 	ubfx	sl, fp, #8, #8
 801eac4:	9804      	ldr	r0, [sp, #16]
 801eac6:	fb03 2301 	mla	r3, r3, r1, r2
 801eaca:	9a04      	ldr	r2, [sp, #16]
 801eacc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801ead0:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 801ead4:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801ead8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eadc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801eae0:	f3c5 2107 	ubfx	r1, r5, #8, #8
 801eae4:	6850      	ldr	r0, [r2, #4]
 801eae6:	fb01 f70a 	mul.w	r7, r1, sl
 801eaea:	0a3f      	lsrs	r7, r7, #8
 801eaec:	ebaa 0607 	sub.w	r6, sl, r7
 801eaf0:	eba1 0907 	sub.w	r9, r1, r7
 801eaf4:	f5ca 7a80 	rsb	sl, sl, #256	; 0x100
 801eaf8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801eafc:	fb01 f10a 	mul.w	r1, r1, sl
 801eb00:	f00c 1aff 	and.w	sl, ip, #16711935	; 0xff00ff
 801eb04:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801eb08:	0a0a      	lsrs	r2, r1, #8
 801eb0a:	f008 11ff 	and.w	r1, r8, #16711935	; 0xff00ff
 801eb0e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801eb12:	4371      	muls	r1, r6
 801eb14:	fb06 f808 	mul.w	r8, r6, r8
 801eb18:	fb02 110a 	mla	r1, r2, sl, r1
 801eb1c:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 801eb20:	fb02 8c0c 	mla	ip, r2, ip, r8
 801eb24:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801eb28:	fb07 110a 	mla	r1, r7, sl, r1
 801eb2c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801eb30:	fb07 cc00 	mla	ip, r7, r0, ip
 801eb34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eb38:	fb09 110a 	mla	r1, r9, sl, r1
 801eb3c:	fb09 cc03 	mla	ip, r9, r3, ip
 801eb40:	4b61      	ldr	r3, [pc, #388]	; (801ecc8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801eb42:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 801eb46:	f40c 0a7f 	and.w	sl, ip, #16711680	; 0xff0000
 801eb4a:	ea41 0a0a 	orr.w	sl, r1, sl
 801eb4e:	ea4f 315a 	mov.w	r1, sl, lsr #13
 801eb52:	ea03 431a 	and.w	r3, r3, sl, lsr #16
 801eb56:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eb5a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801eb5e:	4319      	orrs	r1, r3
 801eb60:	9b01      	ldr	r3, [sp, #4]
 801eb62:	2bff      	cmp	r3, #255	; 0xff
 801eb64:	ea41 010a 	orr.w	r1, r1, sl
 801eb68:	d02a      	beq.n	801ebc0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x714>
 801eb6a:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
 801eb6e:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 801eb72:	9e05      	ldr	r6, [sp, #20]
 801eb74:	f422 60ff 	bic.w	r0, r2, #2040	; 0x7f8
 801eb78:	f023 0307 	bic.w	r3, r3, #7
 801eb7c:	9f05      	ldr	r7, [sp, #20]
 801eb7e:	f020 0007 	bic.w	r0, r0, #7
 801eb82:	4370      	muls	r0, r6
 801eb84:	9e01      	ldr	r6, [sp, #4]
 801eb86:	fb06 0303 	mla	r3, r6, r3, r0
 801eb8a:	484f      	ldr	r0, [pc, #316]	; (801ecc8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801eb8c:	f402 66fc 	and.w	r6, r2, #2016	; 0x7e0
 801eb90:	f002 021f 	and.w	r2, r2, #31
 801eb94:	ea00 2313 	and.w	r3, r0, r3, lsr #8
 801eb98:	f401 60fc 	and.w	r0, r1, #2016	; 0x7e0
 801eb9c:	437e      	muls	r6, r7
 801eb9e:	9f01      	ldr	r7, [sp, #4]
 801eba0:	f001 011f 	and.w	r1, r1, #31
 801eba4:	fb07 6000 	mla	r0, r7, r0, r6
 801eba8:	0a00      	lsrs	r0, r0, #8
 801ebaa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ebae:	4303      	orrs	r3, r0
 801ebb0:	9805      	ldr	r0, [sp, #20]
 801ebb2:	4342      	muls	r2, r0
 801ebb4:	b29b      	uxth	r3, r3
 801ebb6:	fb07 2101 	mla	r1, r7, r1, r2
 801ebba:	f3c1 2104 	ubfx	r1, r1, #8, #5
 801ebbe:	4319      	orrs	r1, r3
 801ebc0:	f824 101e 	strh.w	r1, [r4, lr, lsl #1]
 801ebc4:	9b06      	ldr	r3, [sp, #24]
 801ebc6:	f10e 0e01 	add.w	lr, lr, #1
 801ebca:	449b      	add	fp, r3
 801ebcc:	9b07      	ldr	r3, [sp, #28]
 801ebce:	441d      	add	r5, r3
 801ebd0:	e75b      	b.n	801ea8a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5de>
 801ebd2:	2600      	movs	r6, #0
 801ebd4:	9b02      	ldr	r3, [sp, #8]
 801ebd6:	42b3      	cmp	r3, r6
 801ebd8:	dd61      	ble.n	801ec9e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801ebda:	9b03      	ldr	r3, [sp, #12]
 801ebdc:	ea4f 422b 	mov.w	r2, fp, asr #16
 801ebe0:	1429      	asrs	r1, r5, #16
 801ebe2:	b15b      	cbz	r3, 801ebfc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x750>
 801ebe4:	2a00      	cmp	r2, #0
 801ebe6:	db4d      	blt.n	801ec84 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801ebe8:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801ebec:	429a      	cmp	r2, r3
 801ebee:	da49      	bge.n	801ec84 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801ebf0:	2900      	cmp	r1, #0
 801ebf2:	db47      	blt.n	801ec84 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801ebf4:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801ebf8:	4299      	cmp	r1, r3
 801ebfa:	da43      	bge.n	801ec84 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801ebfc:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801ec00:	fb01 2303 	mla	r3, r1, r3, r2
 801ec04:	9a04      	ldr	r2, [sp, #16]
 801ec06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801ec0a:	4b2f      	ldr	r3, [pc, #188]	; (801ecc8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801ec0c:	094a      	lsrs	r2, r1, #5
 801ec0e:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 801ec12:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801ec16:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ec1a:	4313      	orrs	r3, r2
 801ec1c:	9a01      	ldr	r2, [sp, #4]
 801ec1e:	430b      	orrs	r3, r1
 801ec20:	2aff      	cmp	r2, #255	; 0xff
 801ec22:	b29b      	uxth	r3, r3
 801ec24:	d02c      	beq.n	801ec80 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d4>
 801ec26:	f834 1016 	ldrh.w	r1, [r4, r6, lsl #1]
 801ec2a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801ec2e:	9f05      	ldr	r7, [sp, #20]
 801ec30:	f421 60ff 	bic.w	r0, r1, #2040	; 0x7f8
 801ec34:	f022 0207 	bic.w	r2, r2, #7
 801ec38:	f020 0007 	bic.w	r0, r0, #7
 801ec3c:	4378      	muls	r0, r7
 801ec3e:	9f01      	ldr	r7, [sp, #4]
 801ec40:	fb07 0202 	mla	r2, r7, r2, r0
 801ec44:	4820      	ldr	r0, [pc, #128]	; (801ecc8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801ec46:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 801ec4a:	f001 011f 	and.w	r1, r1, #31
 801ec4e:	ea00 2e12 	and.w	lr, r0, r2, lsr #8
 801ec52:	9a05      	ldr	r2, [sp, #20]
 801ec54:	f403 60fc 	and.w	r0, r3, #2016	; 0x7e0
 801ec58:	f003 031f 	and.w	r3, r3, #31
 801ec5c:	4357      	muls	r7, r2
 801ec5e:	9a01      	ldr	r2, [sp, #4]
 801ec60:	fb02 7000 	mla	r0, r2, r0, r7
 801ec64:	0a00      	lsrs	r0, r0, #8
 801ec66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ec6a:	ea4e 0200 	orr.w	r2, lr, r0
 801ec6e:	9805      	ldr	r0, [sp, #20]
 801ec70:	4341      	muls	r1, r0
 801ec72:	9801      	ldr	r0, [sp, #4]
 801ec74:	b292      	uxth	r2, r2
 801ec76:	fb00 1303 	mla	r3, r0, r3, r1
 801ec7a:	f3c3 2304 	ubfx	r3, r3, #8, #5
 801ec7e:	4313      	orrs	r3, r2
 801ec80:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
 801ec84:	9b06      	ldr	r3, [sp, #24]
 801ec86:	3601      	adds	r6, #1
 801ec88:	449b      	add	fp, r3
 801ec8a:	9b07      	ldr	r3, [sp, #28]
 801ec8c:	441d      	add	r5, r3
 801ec8e:	e7a1      	b.n	801ebd4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x728>
 801ec90:	2300      	movs	r3, #0
 801ec92:	930b      	str	r3, [sp, #44]	; 0x2c
 801ec94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ec96:	9b02      	ldr	r3, [sp, #8]
 801ec98:	4293      	cmp	r3, r2
 801ec9a:	f300 811b 	bgt.w	801eed4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa28>
 801ec9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eca2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eca8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ecac:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ecb0:	2b00      	cmp	r3, #0
 801ecb2:	ee7a aa89 	vadd.f32	s21, s21, s18
 801ecb6:	f340 82cb 	ble.w	801f250 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801ecba:	3b01      	subs	r3, #1
 801ecbc:	eeb0 7a48 	vmov.f32	s14, s16
 801ecc0:	eef0 7a68 	vmov.f32	s15, s17
 801ecc4:	9309      	str	r3, [sp, #36]	; 0x24
 801ecc6:	e4ae      	b.n	801e626 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17a>
 801ecc8:	fffff800 	.word	0xfffff800
 801eccc:	2000      	movs	r0, #0
 801ecce:	9b02      	ldr	r3, [sp, #8]
 801ecd0:	4283      	cmp	r3, r0
 801ecd2:	dde4      	ble.n	801ec9e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801ecd4:	9a03      	ldr	r2, [sp, #12]
 801ecd6:	ea4f 432b 	mov.w	r3, fp, asr #16
 801ecda:	1429      	asrs	r1, r5, #16
 801ecdc:	b15a      	cbz	r2, 801ecf6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x84a>
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	db49      	blt.n	801ed76 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801ece2:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801ece6:	4293      	cmp	r3, r2
 801ece8:	da45      	bge.n	801ed76 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801ecea:	2900      	cmp	r1, #0
 801ecec:	db43      	blt.n	801ed76 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801ecee:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801ecf2:	4291      	cmp	r1, r2
 801ecf4:	da3f      	bge.n	801ed76 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801ecf6:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801ecfa:	fb01 3202 	mla	r2, r1, r2, r3
 801ecfe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ed00:	685b      	ldr	r3, [r3, #4]
 801ed02:	5c99      	ldrb	r1, [r3, r2]
 801ed04:	b3b9      	cbz	r1, 801ed76 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801ed06:	9b04      	ldr	r3, [sp, #16]
 801ed08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801ed0c:	9a01      	ldr	r2, [sp, #4]
 801ed0e:	2aff      	cmp	r2, #255	; 0xff
 801ed10:	d101      	bne.n	801ed16 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x86a>
 801ed12:	29ff      	cmp	r1, #255	; 0xff
 801ed14:	d02d      	beq.n	801ed72 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8c6>
 801ed16:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 801ed1a:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 801ed1e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ed22:	f02e 0e07 	bic.w	lr, lr, #7
 801ed26:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 801ed2a:	fb12 f101 	smulbb	r1, r2, r1
 801ed2e:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 801ed32:	f007 071f 	and.w	r7, r7, #31
 801ed36:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 801ed3a:	f022 0207 	bic.w	r2, r2, #7
 801ed3e:	4372      	muls	r2, r6
 801ed40:	fb06 fc0c 	mul.w	ip, r6, ip
 801ed44:	fb01 2e0e 	mla	lr, r1, lr, r2
 801ed48:	4a61      	ldr	r2, [pc, #388]	; (801eed0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 801ed4a:	4377      	muls	r7, r6
 801ed4c:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 801ed50:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801ed54:	f003 031f 	and.w	r3, r3, #31
 801ed58:	fb01 c202 	mla	r2, r1, r2, ip
 801ed5c:	fb01 7303 	mla	r3, r1, r3, r7
 801ed60:	0c12      	lsrs	r2, r2, #16
 801ed62:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801ed66:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ed6a:	ea4e 0e02 	orr.w	lr, lr, r2
 801ed6e:	ea4e 0303 	orr.w	r3, lr, r3
 801ed72:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 801ed76:	9b06      	ldr	r3, [sp, #24]
 801ed78:	3001      	adds	r0, #1
 801ed7a:	449b      	add	fp, r3
 801ed7c:	9b07      	ldr	r3, [sp, #28]
 801ed7e:	441d      	add	r5, r3
 801ed80:	e7a5      	b.n	801ecce <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x822>
 801ed82:	2300      	movs	r3, #0
 801ed84:	930b      	str	r3, [sp, #44]	; 0x2c
 801ed86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ed88:	9b02      	ldr	r3, [sp, #8]
 801ed8a:	4293      	cmp	r3, r2
 801ed8c:	dd87      	ble.n	801ec9e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801ed8e:	9b03      	ldr	r3, [sp, #12]
 801ed90:	ea4f 422b 	mov.w	r2, fp, asr #16
 801ed94:	1429      	asrs	r1, r5, #16
 801ed96:	b17b      	cbz	r3, 801edb8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x90c>
 801ed98:	2a00      	cmp	r2, #0
 801ed9a:	f2c0 8092 	blt.w	801eec2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801ed9e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801eda2:	429a      	cmp	r2, r3
 801eda4:	f280 808d 	bge.w	801eec2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801eda8:	2900      	cmp	r1, #0
 801edaa:	f2c0 808a 	blt.w	801eec2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801edae:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801edb2:	4299      	cmp	r1, r3
 801edb4:	f280 8085 	bge.w	801eec2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801edb8:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801edbc:	f3c5 3603 	ubfx	r6, r5, #12, #4
 801edc0:	9804      	ldr	r0, [sp, #16]
 801edc2:	fb01 2103 	mla	r1, r1, r3, r2
 801edc6:	9a04      	ldr	r2, [sp, #16]
 801edc8:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 801edcc:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 801edd0:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801edd4:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801edd8:	8879      	ldrh	r1, [r7, #2]
 801edda:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801edde:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 801ede2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801ede6:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 801edea:	fb06 f302 	mul.w	r3, r6, r2
 801edee:	ea4e 0e09 	orr.w	lr, lr, r9
 801edf2:	ea4f 4901 	mov.w	r9, r1, lsl #16
 801edf6:	10db      	asrs	r3, r3, #3
 801edf8:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 801edfc:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 801ee00:	f1c6 0710 	rsb	r7, r6, #16
 801ee04:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ee08:	ea4f 4a08 	mov.w	sl, r8, lsl #16
 801ee0c:	1abf      	subs	r7, r7, r2
 801ee0e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801ee12:	ea49 0101 	orr.w	r1, r9, r1
 801ee16:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ee1a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801ee1e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801ee22:	4351      	muls	r1, r2
 801ee24:	9a01      	ldr	r2, [sp, #4]
 801ee26:	ea4a 0808 	orr.w	r8, sl, r8
 801ee2a:	fb0e 1107 	mla	r1, lr, r7, r1
 801ee2e:	2aff      	cmp	r2, #255	; 0xff
 801ee30:	fb03 1108 	mla	r1, r3, r8, r1
 801ee34:	ea4f 480c 	mov.w	r8, ip, lsl #16
 801ee38:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ee3c:	ebc3 0346 	rsb	r3, r3, r6, lsl #1
 801ee40:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801ee44:	ea48 0c0c 	orr.w	ip, r8, ip
 801ee48:	fb03 110c 	mla	r1, r3, ip, r1
 801ee4c:	ea4f 5951 	mov.w	r9, r1, lsr #21
 801ee50:	ea4f 1351 	mov.w	r3, r1, lsr #5
 801ee54:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ee58:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ee5c:	ea49 0303 	orr.w	r3, r9, r3
 801ee60:	b29b      	uxth	r3, r3
 801ee62:	d02b      	beq.n	801eebc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa10>
 801ee64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ee66:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 801ee6a:	9805      	ldr	r0, [sp, #20]
 801ee6c:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 801ee70:	f026 0607 	bic.w	r6, r6, #7
 801ee74:	f421 62ff 	bic.w	r2, r1, #2040	; 0x7f8
 801ee78:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 801ee7c:	f001 011f 	and.w	r1, r1, #31
 801ee80:	f022 0207 	bic.w	r2, r2, #7
 801ee84:	4342      	muls	r2, r0
 801ee86:	9801      	ldr	r0, [sp, #4]
 801ee88:	fb00 2606 	mla	r6, r0, r6, r2
 801ee8c:	4a10      	ldr	r2, [pc, #64]	; (801eed0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 801ee8e:	9805      	ldr	r0, [sp, #20]
 801ee90:	ea02 2616 	and.w	r6, r2, r6, lsr #8
 801ee94:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801ee98:	4347      	muls	r7, r0
 801ee9a:	9801      	ldr	r0, [sp, #4]
 801ee9c:	f003 031f 	and.w	r3, r3, #31
 801eea0:	fb00 7202 	mla	r2, r0, r2, r7
 801eea4:	0a12      	lsrs	r2, r2, #8
 801eea6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801eeaa:	4316      	orrs	r6, r2
 801eeac:	9a05      	ldr	r2, [sp, #20]
 801eeae:	4351      	muls	r1, r2
 801eeb0:	fb00 1303 	mla	r3, r0, r3, r1
 801eeb4:	f3c3 2304 	ubfx	r3, r3, #8, #5
 801eeb8:	4333      	orrs	r3, r6
 801eeba:	b29b      	uxth	r3, r3
 801eebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801eebe:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 801eec2:	9b06      	ldr	r3, [sp, #24]
 801eec4:	449b      	add	fp, r3
 801eec6:	9b07      	ldr	r3, [sp, #28]
 801eec8:	441d      	add	r5, r3
 801eeca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eecc:	3301      	adds	r3, #1
 801eece:	e759      	b.n	801ed84 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8d8>
 801eed0:	fffff800 	.word	0xfffff800
 801eed4:	9903      	ldr	r1, [sp, #12]
 801eed6:	ea4f 432b 	mov.w	r3, fp, asr #16
 801eeda:	142a      	asrs	r2, r5, #16
 801eedc:	b179      	cbz	r1, 801eefe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 801eede:	2b00      	cmp	r3, #0
 801eee0:	f2c0 8136 	blt.w	801f150 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801eee4:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801eee8:	428b      	cmp	r3, r1
 801eeea:	f280 8131 	bge.w	801f150 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801eeee:	2a00      	cmp	r2, #0
 801eef0:	f2c0 812e 	blt.w	801f150 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801eef4:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801eef8:	428a      	cmp	r2, r1
 801eefa:	f280 8129 	bge.w	801f150 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801eefe:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801ef02:	fb02 3301 	mla	r3, r2, r1, r3
 801ef06:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ef08:	6850      	ldr	r0, [r2, #4]
 801ef0a:	18c2      	adds	r2, r0, r3
 801ef0c:	5cc0      	ldrb	r0, [r0, r3]
 801ef0e:	900d      	str	r0, [sp, #52]	; 0x34
 801ef10:	7850      	ldrb	r0, [r2, #1]
 801ef12:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801ef16:	900e      	str	r0, [sp, #56]	; 0x38
 801ef18:	5c50      	ldrb	r0, [r2, r1]
 801ef1a:	440a      	add	r2, r1
 801ef1c:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 801ef20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef24:	7852      	ldrb	r2, [r2, #1]
 801ef26:	ee07 0a10 	vmov	s14, r0
 801ef2a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801ef2e:	900f      	str	r0, [sp, #60]	; 0x3c
 801ef30:	9210      	str	r2, [sp, #64]	; 0x40
 801ef32:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801ef36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801ef3a:	ee0d 2a10 	vmov	s26, r2
 801ef3e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801ef42:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801ef46:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 801ef4a:	ee0d 2a90 	vmov	s27, r2
 801ef4e:	ee2d da2c 	vmul.f32	s26, s26, s25
 801ef52:	eef8 daed 	vcvt.f32.s32	s27, s27
 801ef56:	eeed 7a26 	vfma.f32	s15, s26, s13
 801ef5a:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 801ef5e:	ee6d daac 	vmul.f32	s27, s27, s25
 801ef62:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801ef66:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801ef6a:	eead 7a26 	vfma.f32	s14, s26, s13
 801ef6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ef72:	eeed 7a87 	vfma.f32	s15, s27, s14
 801ef76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ef7a:	ee17 6a90 	vmov	r6, s15
 801ef7e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 801ef82:	f000 80e5 	beq.w	801f150 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801ef86:	9a04      	ldr	r2, [sp, #16]
 801ef88:	eef0 2a6d 	vmov.f32	s5, s27
 801ef8c:	eeb0 2a4d 	vmov.f32	s4, s26
 801ef90:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 801ef94:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 801ef98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef9a:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 801ef9e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801efa2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 801efa6:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 801efaa:	f00a 001f 	and.w	r0, sl, #31
 801efae:	4358      	muls	r0, r3
 801efb0:	1203      	asrs	r3, r0, #8
 801efb2:	f009 001f 	and.w	r0, r9, #31
 801efb6:	ee01 3a90 	vmov	s3, r3
 801efba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801efbc:	4358      	muls	r0, r3
 801efbe:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801efc2:	1203      	asrs	r3, r0, #8
 801efc4:	f008 001f 	and.w	r0, r8, #31
 801efc8:	ee01 3a10 	vmov	s2, r3
 801efcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801efce:	4358      	muls	r0, r3
 801efd0:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801efd4:	1203      	asrs	r3, r0, #8
 801efd6:	f007 001f 	and.w	r0, r7, #31
 801efda:	ee00 3a90 	vmov	s1, r3
 801efde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801efe0:	4358      	muls	r0, r3
 801efe2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801efe6:	1203      	asrs	r3, r0, #8
 801efe8:	4630      	mov	r0, r6
 801efea:	ee00 3a10 	vmov	s0, r3
 801efee:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801eff2:	f7ff fa41 	bl	801e478 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801eff6:	f3ca 1045 	ubfx	r0, sl, #5, #6
 801effa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801effc:	eeb0 ea40 	vmov.f32	s28, s0
 801f000:	eef0 2a6d 	vmov.f32	s5, s27
 801f004:	4358      	muls	r0, r3
 801f006:	eeb0 2a4d 	vmov.f32	s4, s26
 801f00a:	1203      	asrs	r3, r0, #8
 801f00c:	f3c9 1045 	ubfx	r0, r9, #5, #6
 801f010:	ee01 3a90 	vmov	s3, r3
 801f014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f016:	4358      	muls	r0, r3
 801f018:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801f01c:	1203      	asrs	r3, r0, #8
 801f01e:	f3c8 1045 	ubfx	r0, r8, #5, #6
 801f022:	ee01 3a10 	vmov	s2, r3
 801f026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f028:	4358      	muls	r0, r3
 801f02a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801f02e:	1203      	asrs	r3, r0, #8
 801f030:	f3c7 1045 	ubfx	r0, r7, #5, #6
 801f034:	0aff      	lsrs	r7, r7, #11
 801f036:	ee00 3a90 	vmov	s1, r3
 801f03a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f03c:	4358      	muls	r0, r3
 801f03e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801f042:	1203      	asrs	r3, r0, #8
 801f044:	4630      	mov	r0, r6
 801f046:	ee00 3a10 	vmov	s0, r3
 801f04a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801f04e:	f7ff fa13 	bl	801e478 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801f052:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f054:	ea4f 21da 	mov.w	r1, sl, lsr #11
 801f058:	eef0 ea40 	vmov.f32	s29, s0
 801f05c:	ea4f 22d9 	mov.w	r2, r9, lsr #11
 801f060:	4630      	mov	r0, r6
 801f062:	fb03 fa01 	mul.w	sl, r3, r1
 801f066:	eef0 2a6d 	vmov.f32	s5, s27
 801f06a:	eeb0 2a4d 	vmov.f32	s4, s26
 801f06e:	ea4f 232a 	mov.w	r3, sl, asr #8
 801f072:	ee01 3a90 	vmov	s3, r3
 801f076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f078:	fb03 f902 	mul.w	r9, r3, r2
 801f07c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f07e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801f082:	ea4f 2329 	mov.w	r3, r9, asr #8
 801f086:	ee01 3a10 	vmov	s2, r3
 801f08a:	ea4f 23d8 	mov.w	r3, r8, lsr #11
 801f08e:	fb02 f803 	mul.w	r8, r2, r3
 801f092:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801f096:	ea4f 2328 	mov.w	r3, r8, asr #8
 801f09a:	ee00 3a90 	vmov	s1, r3
 801f09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f0a0:	437b      	muls	r3, r7
 801f0a2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801f0a6:	121b      	asrs	r3, r3, #8
 801f0a8:	ee00 3a10 	vmov	s0, r3
 801f0ac:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801f0b0:	f7ff f9e2 	bl	801e478 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801f0b4:	eefc 7aee 	vcvt.u32.f32	s15, s29
 801f0b8:	2eff      	cmp	r6, #255	; 0xff
 801f0ba:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801f0be:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801f0c2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801f0c6:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801f0ca:	eefc 7ace 	vcvt.u32.f32	s15, s28
 801f0ce:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 801f0d2:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 801f0d6:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801f0da:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 801f0de:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801f0e2:	ea43 0302 	orr.w	r3, r3, r2
 801f0e6:	b29b      	uxth	r3, r3
 801f0e8:	d102      	bne.n	801f0f0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc44>
 801f0ea:	9a01      	ldr	r2, [sp, #4]
 801f0ec:	2aff      	cmp	r2, #255	; 0xff
 801f0ee:	d02c      	beq.n	801f14a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc9e>
 801f0f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f0f2:	f423 67ff 	bic.w	r7, r3, #2040	; 0x7f8
 801f0f6:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 801f0fa:	f027 0707 	bic.w	r7, r7, #7
 801f0fe:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801f102:	f400 6efc 	and.w	lr, r0, #2016	; 0x7e0
 801f106:	fb12 f606 	smulbb	r6, r2, r6
 801f10a:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 801f10e:	f000 001f 	and.w	r0, r0, #31
 801f112:	f5c6 3180 	rsb	r1, r6, #65536	; 0x10000
 801f116:	f022 0207 	bic.w	r2, r2, #7
 801f11a:	434a      	muls	r2, r1
 801f11c:	fb01 fe0e 	mul.w	lr, r1, lr
 801f120:	fb06 2707 	mla	r7, r6, r7, r2
 801f124:	4a4d      	ldr	r2, [pc, #308]	; (801f25c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 801f126:	4348      	muls	r0, r1
 801f128:	ea02 4717 	and.w	r7, r2, r7, lsr #16
 801f12c:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801f130:	f003 031f 	and.w	r3, r3, #31
 801f134:	fb06 e202 	mla	r2, r6, r2, lr
 801f138:	fb06 0303 	mla	r3, r6, r3, r0
 801f13c:	0c12      	lsrs	r2, r2, #16
 801f13e:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801f142:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f146:	4317      	orrs	r7, r2
 801f148:	433b      	orrs	r3, r7
 801f14a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f14c:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 801f150:	9b06      	ldr	r3, [sp, #24]
 801f152:	449b      	add	fp, r3
 801f154:	9b07      	ldr	r3, [sp, #28]
 801f156:	441d      	add	r5, r3
 801f158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f15a:	3301      	adds	r3, #1
 801f15c:	e599      	b.n	801ec92 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7e6>
 801f15e:	9b01      	ldr	r3, [sp, #4]
 801f160:	2bff      	cmp	r3, #255	; 0xff
 801f162:	d105      	bne.n	801f170 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc4>
 801f164:	2300      	movs	r3, #0
 801f166:	9a02      	ldr	r2, [sp, #8]
 801f168:	429a      	cmp	r2, r3
 801f16a:	dc51      	bgt.n	801f210 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd64>
 801f16c:	4613      	mov	r3, r2
 801f16e:	e596      	b.n	801ec9e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801f170:	2000      	movs	r0, #0
 801f172:	9b02      	ldr	r3, [sp, #8]
 801f174:	4283      	cmp	r3, r0
 801f176:	f77f ad92 	ble.w	801ec9e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801f17a:	9b03      	ldr	r3, [sp, #12]
 801f17c:	ea4f 422b 	mov.w	r2, fp, asr #16
 801f180:	1429      	asrs	r1, r5, #16
 801f182:	b15b      	cbz	r3, 801f19c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcf0>
 801f184:	2a00      	cmp	r2, #0
 801f186:	db3d      	blt.n	801f204 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801f188:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801f18c:	429a      	cmp	r2, r3
 801f18e:	da39      	bge.n	801f204 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801f190:	2900      	cmp	r1, #0
 801f192:	db37      	blt.n	801f204 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801f194:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801f198:	4299      	cmp	r1, r3
 801f19a:	da33      	bge.n	801f204 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801f19c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801f1a0:	9f05      	ldr	r7, [sp, #20]
 801f1a2:	fb01 2303 	mla	r3, r1, r3, r2
 801f1a6:	f834 1010 	ldrh.w	r1, [r4, r0, lsl #1]
 801f1aa:	9a04      	ldr	r2, [sp, #16]
 801f1ac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801f1b0:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 801f1b4:	f422 66ff 	bic.w	r6, r2, #2040	; 0x7f8
 801f1b8:	f023 0307 	bic.w	r3, r3, #7
 801f1bc:	f402 6efc 	and.w	lr, r2, #2016	; 0x7e0
 801f1c0:	f002 021f 	and.w	r2, r2, #31
 801f1c4:	437b      	muls	r3, r7
 801f1c6:	f026 0607 	bic.w	r6, r6, #7
 801f1ca:	9f01      	ldr	r7, [sp, #4]
 801f1cc:	fb07 3606 	mla	r6, r7, r6, r3
 801f1d0:	4b22      	ldr	r3, [pc, #136]	; (801f25c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 801f1d2:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 801f1d6:	f001 011f 	and.w	r1, r1, #31
 801f1da:	ea03 2616 	and.w	r6, r3, r6, lsr #8
 801f1de:	9b05      	ldr	r3, [sp, #20]
 801f1e0:	435f      	muls	r7, r3
 801f1e2:	9b01      	ldr	r3, [sp, #4]
 801f1e4:	fb03 730e 	mla	r3, r3, lr, r7
 801f1e8:	0a1b      	lsrs	r3, r3, #8
 801f1ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f1ee:	431e      	orrs	r6, r3
 801f1f0:	9b05      	ldr	r3, [sp, #20]
 801f1f2:	4359      	muls	r1, r3
 801f1f4:	9b01      	ldr	r3, [sp, #4]
 801f1f6:	fb03 1202 	mla	r2, r3, r2, r1
 801f1fa:	f3c2 2204 	ubfx	r2, r2, #8, #5
 801f1fe:	4316      	orrs	r6, r2
 801f200:	f824 6010 	strh.w	r6, [r4, r0, lsl #1]
 801f204:	9b06      	ldr	r3, [sp, #24]
 801f206:	3001      	adds	r0, #1
 801f208:	449b      	add	fp, r3
 801f20a:	9b07      	ldr	r3, [sp, #28]
 801f20c:	441d      	add	r5, r3
 801f20e:	e7b0      	b.n	801f172 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc6>
 801f210:	9a03      	ldr	r2, [sp, #12]
 801f212:	ea4f 412b 	mov.w	r1, fp, asr #16
 801f216:	1428      	asrs	r0, r5, #16
 801f218:	b15a      	cbz	r2, 801f232 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd86>
 801f21a:	2900      	cmp	r1, #0
 801f21c:	db12      	blt.n	801f244 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801f21e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801f222:	4291      	cmp	r1, r2
 801f224:	da0e      	bge.n	801f244 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801f226:	2800      	cmp	r0, #0
 801f228:	db0c      	blt.n	801f244 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801f22a:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801f22e:	4290      	cmp	r0, r2
 801f230:	da08      	bge.n	801f244 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801f232:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801f236:	fb00 1202 	mla	r2, r0, r2, r1
 801f23a:	9904      	ldr	r1, [sp, #16]
 801f23c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 801f240:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 801f244:	9a06      	ldr	r2, [sp, #24]
 801f246:	3301      	adds	r3, #1
 801f248:	4493      	add	fp, r2
 801f24a:	9a07      	ldr	r2, [sp, #28]
 801f24c:	4415      	add	r5, r2
 801f24e:	e78a      	b.n	801f166 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcba>
 801f250:	b015      	add	sp, #84	; 0x54
 801f252:	ecbd 8b0e 	vpop	{d8-d14}
 801f256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f25a:	bf00      	nop
 801f25c:	fffff800 	.word	0xfffff800

0801f260 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f264:	b08f      	sub	sp, #60	; 0x3c
 801f266:	460c      	mov	r4, r1
 801f268:	4680      	mov	r8, r0
 801f26a:	4699      	mov	r9, r3
 801f26c:	6808      	ldr	r0, [r1, #0]
 801f26e:	ab0a      	add	r3, sp, #40	; 0x28
 801f270:	6849      	ldr	r1, [r1, #4]
 801f272:	c303      	stmia	r3!, {r0, r1}
 801f274:	6810      	ldr	r0, [r2, #0]
 801f276:	ab0c      	add	r3, sp, #48	; 0x30
 801f278:	6851      	ldr	r1, [r2, #4]
 801f27a:	c303      	stmia	r3!, {r0, r1}
 801f27c:	a80a      	add	r0, sp, #40	; 0x28
 801f27e:	f7fd f957 	bl	801c530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f282:	4621      	mov	r1, r4
 801f284:	a80c      	add	r0, sp, #48	; 0x30
 801f286:	4c58      	ldr	r4, [pc, #352]	; (801f3e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801f288:	f7fd f93a 	bl	801c500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f28c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801f290:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801f294:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f298:	6820      	ldr	r0, [r4, #0]
 801f29a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f29e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801f2a2:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801f2a6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801f2aa:	440a      	add	r2, r1
 801f2ac:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801f2b0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801f2b4:	4413      	add	r3, r2
 801f2b6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f2ba:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801f2be:	9305      	str	r3, [sp, #20]
 801f2c0:	6803      	ldr	r3, [r0, #0]
 801f2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f2c4:	4798      	blx	r3
 801f2c6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f2ca:	d118      	bne.n	801f2fe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801f2cc:	f010 0f20 	tst.w	r0, #32
 801f2d0:	6820      	ldr	r0, [r4, #0]
 801f2d2:	d017      	beq.n	801f304 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801f2d4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801f2d8:	b2bf      	uxth	r7, r7
 801f2da:	6801      	ldr	r1, [r0, #0]
 801f2dc:	9402      	str	r4, [sp, #8]
 801f2de:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801f2e2:	f8cd 900c 	str.w	r9, [sp, #12]
 801f2e6:	9401      	str	r4, [sp, #4]
 801f2e8:	9700      	str	r7, [sp, #0]
 801f2ea:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801f2ee:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801f2f0:	4641      	mov	r1, r8
 801f2f2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801f2f6:	47a0      	blx	r4
 801f2f8:	b00f      	add	sp, #60	; 0x3c
 801f2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f302:	e7e5      	b.n	801f2d0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x70>
 801f304:	6803      	ldr	r3, [r0, #0]
 801f306:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 801f3f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x190>
 801f30a:	6a1b      	ldr	r3, [r3, #32]
 801f30c:	4798      	blx	r3
 801f30e:	4a37      	ldr	r2, [pc, #220]	; (801f3ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801f310:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801f314:	f04f 0c00 	mov.w	ip, #0
 801f318:	8813      	ldrh	r3, [r2, #0]
 801f31a:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 801f31e:	9209      	str	r2, [sp, #36]	; 0x24
 801f320:	fb04 1303 	mla	r3, r4, r3, r1
 801f324:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f328:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 801f32c:	0099      	lsls	r1, r3, #2
 801f32e:	005b      	lsls	r3, r3, #1
 801f330:	9108      	str	r1, [sp, #32]
 801f332:	9307      	str	r3, [sp, #28]
 801f334:	9b05      	ldr	r3, [sp, #20]
 801f336:	459c      	cmp	ip, r3
 801f338:	da4f      	bge.n	801f3da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17a>
 801f33a:	4686      	mov	lr, r0
 801f33c:	2300      	movs	r3, #0
 801f33e:	42bb      	cmp	r3, r7
 801f340:	da3a      	bge.n	801f3b8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x158>
 801f342:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 801f346:	0e2e      	lsrs	r6, r5, #24
 801f348:	d012      	beq.n	801f370 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801f34a:	ea0a 2415 	and.w	r4, sl, r5, lsr #8
 801f34e:	f3c5 02c4 	ubfx	r2, r5, #3, #5
 801f352:	0969      	lsrs	r1, r5, #5
 801f354:	2eff      	cmp	r6, #255	; 0xff
 801f356:	b2a4      	uxth	r4, r4
 801f358:	9206      	str	r2, [sp, #24]
 801f35a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f35e:	d10b      	bne.n	801f378 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 801f360:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f364:	d108      	bne.n	801f378 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 801f366:	430c      	orrs	r4, r1
 801f368:	4322      	orrs	r2, r4
 801f36a:	4614      	mov	r4, r2
 801f36c:	f8ae 4000 	strh.w	r4, [lr]
 801f370:	f10e 0e02 	add.w	lr, lr, #2
 801f374:	3301      	adds	r3, #1
 801f376:	e7e2      	b.n	801f33e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801f378:	fb06 f609 	mul.w	r6, r6, r9
 801f37c:	f8be 5000 	ldrh.w	r5, [lr]
 801f380:	f5c6 3b80 	rsb	fp, r6, #65536	; 0x10000
 801f384:	ea05 020a 	and.w	r2, r5, sl
 801f388:	4374      	muls	r4, r6
 801f38a:	4371      	muls	r1, r6
 801f38c:	fb0b 4402 	mla	r4, fp, r2, r4
 801f390:	f405 62fc 	and.w	r2, r5, #2016	; 0x7e0
 801f394:	f005 051f 	and.w	r5, r5, #31
 801f398:	fb0b 1102 	mla	r1, fp, r2, r1
 801f39c:	9a06      	ldr	r2, [sp, #24]
 801f39e:	ea0a 4414 	and.w	r4, sl, r4, lsr #16
 801f3a2:	0c09      	lsrs	r1, r1, #16
 801f3a4:	4356      	muls	r6, r2
 801f3a6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f3aa:	fb0b 6505 	mla	r5, fp, r5, r6
 801f3ae:	430c      	orrs	r4, r1
 801f3b0:	f3c5 4504 	ubfx	r5, r5, #16, #5
 801f3b4:	432c      	orrs	r4, r5
 801f3b6:	e7d9      	b.n	801f36c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801f3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3ba:	f10c 0c01 	add.w	ip, ip, #1
 801f3be:	9a07      	ldr	r2, [sp, #28]
 801f3c0:	881b      	ldrh	r3, [r3, #0]
 801f3c2:	1bdb      	subs	r3, r3, r7
 801f3c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f3c8:	9a08      	ldr	r2, [sp, #32]
 801f3ca:	4418      	add	r0, r3
 801f3cc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801f3d0:	1bdb      	subs	r3, r3, r7
 801f3d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f3d6:	4498      	add	r8, r3
 801f3d8:	e7ac      	b.n	801f334 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd4>
 801f3da:	4b03      	ldr	r3, [pc, #12]	; (801f3e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801f3dc:	6818      	ldr	r0, [r3, #0]
 801f3de:	6803      	ldr	r3, [r0, #0]
 801f3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3e2:	4798      	blx	r3
 801f3e4:	e788      	b.n	801f2f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801f3e6:	bf00      	nop
 801f3e8:	20009cd4 	.word	0x20009cd4
 801f3ec:	20009cce 	.word	0x20009cce
 801f3f0:	fffff800 	.word	0xfffff800

0801f3f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3f8:	9d06      	ldr	r5, [sp, #24]
 801f3fa:	461c      	mov	r4, r3
 801f3fc:	460e      	mov	r6, r1
 801f3fe:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801f402:	f89d 7020 	ldrb.w	r7, [sp, #32]
 801f406:	b142      	cbz	r2, 801f41a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801f408:	2a02      	cmp	r2, #2
 801f40a:	d010      	beq.n	801f42e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3a>
 801f40c:	4b0b      	ldr	r3, [pc, #44]	; (801f43c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x48>)
 801f40e:	f240 11b9 	movw	r1, #441	; 0x1b9
 801f412:	4a0b      	ldr	r2, [pc, #44]	; (801f440 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4c>)
 801f414:	480b      	ldr	r0, [pc, #44]	; (801f444 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x50>)
 801f416:	f000 fd0b 	bl	801fe30 <__assert_func>
 801f41a:	6802      	ldr	r2, [r0, #0]
 801f41c:	9306      	str	r3, [sp, #24]
 801f41e:	462b      	mov	r3, r5
 801f420:	9707      	str	r7, [sp, #28]
 801f422:	6916      	ldr	r6, [r2, #16]
 801f424:	4622      	mov	r2, r4
 801f426:	46b4      	mov	ip, r6
 801f428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f42c:	4760      	bx	ip
 801f42e:	462a      	mov	r2, r5
 801f430:	4621      	mov	r1, r4
 801f432:	4630      	mov	r0, r6
 801f434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f438:	f7ff bf12 	b.w	801f260 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f43c:	0802358d 	.word	0x0802358d
 801f440:	080236eb 	.word	0x080236eb
 801f444:	0802355b 	.word	0x0802355b

0801f448 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801f448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f44c:	b08b      	sub	sp, #44	; 0x2c
 801f44e:	460e      	mov	r6, r1
 801f450:	4604      	mov	r4, r0
 801f452:	6851      	ldr	r1, [r2, #4]
 801f454:	6810      	ldr	r0, [r2, #0]
 801f456:	ad06      	add	r5, sp, #24
 801f458:	4617      	mov	r7, r2
 801f45a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801f45e:	c503      	stmia	r5!, {r0, r1}
 801f460:	6818      	ldr	r0, [r3, #0]
 801f462:	ad08      	add	r5, sp, #32
 801f464:	6859      	ldr	r1, [r3, #4]
 801f466:	c503      	stmia	r5!, {r0, r1}
 801f468:	a806      	add	r0, sp, #24
 801f46a:	f7fd f861 	bl	801c530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f46e:	4639      	mov	r1, r7
 801f470:	a808      	add	r0, sp, #32
 801f472:	f7fd f845 	bl	801c500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f476:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f47a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f47e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f482:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801f486:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f48a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801f48e:	1871      	adds	r1, r6, r1
 801f490:	9101      	str	r1, [sp, #4]
 801f492:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f496:	440a      	add	r2, r1
 801f498:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f49c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f4a0:	4413      	add	r3, r2
 801f4a2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801f4a6:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801f4aa:	9302      	str	r3, [sp, #8]
 801f4ac:	4b64      	ldr	r3, [pc, #400]	; (801f640 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 801f4ae:	6818      	ldr	r0, [r3, #0]
 801f4b0:	6803      	ldr	r3, [r0, #0]
 801f4b2:	6a1b      	ldr	r3, [r3, #32]
 801f4b4:	4798      	blx	r3
 801f4b6:	4b63      	ldr	r3, [pc, #396]	; (801f644 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1fc>)
 801f4b8:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 801f4bc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f4c0:	881a      	ldrh	r2, [r3, #0]
 801f4c2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f4c6:	fb06 1202 	mla	r2, r6, r2, r1
 801f4ca:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f4ce:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 801f4d2:	b212      	sxth	r2, r2
 801f4d4:	9204      	str	r2, [sp, #16]
 801f4d6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f4da:	9203      	str	r2, [sp, #12]
 801f4dc:	d051      	beq.n	801f582 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x13a>
 801f4de:	f04f 0800 	mov.w	r8, #0
 801f4e2:	f8df 9164 	ldr.w	r9, [pc, #356]	; 801f648 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 801f4e6:	9305      	str	r3, [sp, #20]
 801f4e8:	9b02      	ldr	r3, [sp, #8]
 801f4ea:	4598      	cmp	r8, r3
 801f4ec:	f280 809f 	bge.w	801f62e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 801f4f0:	2100      	movs	r1, #0
 801f4f2:	42a9      	cmp	r1, r5
 801f4f4:	da30      	bge.n	801f558 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x110>
 801f4f6:	9b01      	ldr	r3, [sp, #4]
 801f4f8:	5c5e      	ldrb	r6, [r3, r1]
 801f4fa:	b35e      	cbz	r6, 801f554 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x10c>
 801f4fc:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801f500:	fb1b f606 	smulbb	r6, fp, r6
 801f504:	f834 2011 	ldrh.w	r2, [r4, r1, lsl #1]
 801f508:	f5c6 3780 	rsb	r7, r6, #65536	; 0x10000
 801f50c:	ea0e 0309 	and.w	r3, lr, r9
 801f510:	ea02 0c09 	and.w	ip, r2, r9
 801f514:	f40e 6afc 	and.w	sl, lr, #2016	; 0x7e0
 801f518:	437b      	muls	r3, r7
 801f51a:	f00e 0e1f 	and.w	lr, lr, #31
 801f51e:	fb07 fa0a 	mul.w	sl, r7, sl
 801f522:	fb06 3c0c 	mla	ip, r6, ip, r3
 801f526:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 801f52a:	fb07 fe0e 	mul.w	lr, r7, lr
 801f52e:	f002 021f 	and.w	r2, r2, #31
 801f532:	fb06 a303 	mla	r3, r6, r3, sl
 801f536:	ea09 4c1c 	and.w	ip, r9, ip, lsr #16
 801f53a:	fb06 ee02 	mla	lr, r6, r2, lr
 801f53e:	0c1b      	lsrs	r3, r3, #16
 801f540:	f3ce 4e04 	ubfx	lr, lr, #16, #5
 801f544:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f548:	ea4c 0c03 	orr.w	ip, ip, r3
 801f54c:	ea4c 0c0e 	orr.w	ip, ip, lr
 801f550:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 801f554:	3101      	adds	r1, #1
 801f556:	e7cc      	b.n	801f4f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xaa>
 801f558:	9b05      	ldr	r3, [sp, #20]
 801f55a:	f108 0801 	add.w	r8, r8, #1
 801f55e:	9a03      	ldr	r2, [sp, #12]
 801f560:	881b      	ldrh	r3, [r3, #0]
 801f562:	1b5b      	subs	r3, r3, r5
 801f564:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f568:	4418      	add	r0, r3
 801f56a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f56e:	1b5b      	subs	r3, r3, r5
 801f570:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801f574:	4414      	add	r4, r2
 801f576:	9a04      	ldr	r2, [sp, #16]
 801f578:	4413      	add	r3, r2
 801f57a:	9a01      	ldr	r2, [sp, #4]
 801f57c:	441a      	add	r2, r3
 801f57e:	9201      	str	r2, [sp, #4]
 801f580:	e7b2      	b.n	801f4e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa0>
 801f582:	f04f 0900 	mov.w	r9, #0
 801f586:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801f648 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 801f58a:	9305      	str	r3, [sp, #20]
 801f58c:	9b02      	ldr	r3, [sp, #8]
 801f58e:	4599      	cmp	r9, r3
 801f590:	da4d      	bge.n	801f62e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 801f592:	4607      	mov	r7, r0
 801f594:	2600      	movs	r6, #0
 801f596:	42ae      	cmp	r6, r5
 801f598:	da34      	bge.n	801f604 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1bc>
 801f59a:	9b01      	ldr	r3, [sp, #4]
 801f59c:	5d99      	ldrb	r1, [r3, r6]
 801f59e:	b121      	cbz	r1, 801f5aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 801f5a0:	29ff      	cmp	r1, #255	; 0xff
 801f5a2:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 801f5a6:	d103      	bne.n	801f5b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 801f5a8:	803a      	strh	r2, [r7, #0]
 801f5aa:	3702      	adds	r7, #2
 801f5ac:	3601      	adds	r6, #1
 801f5ae:	e7f2      	b.n	801f596 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14e>
 801f5b0:	f8b7 c000 	ldrh.w	ip, [r7]
 801f5b4:	f5c1 7e80 	rsb	lr, r1, #256	; 0x100
 801f5b8:	ea02 080a 	and.w	r8, r2, sl
 801f5bc:	ea0c 030a 	and.w	r3, ip, sl
 801f5c0:	f40c 6bfc 	and.w	fp, ip, #2016	; 0x7e0
 801f5c4:	f00c 0c1f 	and.w	ip, ip, #31
 801f5c8:	fb0e f303 	mul.w	r3, lr, r3
 801f5cc:	fb0e fb0b 	mul.w	fp, lr, fp
 801f5d0:	fb01 3808 	mla	r8, r1, r8, r3
 801f5d4:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 801f5d8:	fb0e fc0c 	mul.w	ip, lr, ip
 801f5dc:	f002 021f 	and.w	r2, r2, #31
 801f5e0:	fb01 b303 	mla	r3, r1, r3, fp
 801f5e4:	ea0a 2818 	and.w	r8, sl, r8, lsr #8
 801f5e8:	fb01 cc02 	mla	ip, r1, r2, ip
 801f5ec:	0a1b      	lsrs	r3, r3, #8
 801f5ee:	f3cc 2c04 	ubfx	ip, ip, #8, #5
 801f5f2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f5f6:	ea48 0803 	orr.w	r8, r8, r3
 801f5fa:	ea48 080c 	orr.w	r8, r8, ip
 801f5fe:	f8a7 8000 	strh.w	r8, [r7]
 801f602:	e7d2      	b.n	801f5aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 801f604:	9b05      	ldr	r3, [sp, #20]
 801f606:	f109 0901 	add.w	r9, r9, #1
 801f60a:	9a03      	ldr	r2, [sp, #12]
 801f60c:	881b      	ldrh	r3, [r3, #0]
 801f60e:	1b5b      	subs	r3, r3, r5
 801f610:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f614:	4418      	add	r0, r3
 801f616:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f61a:	1b5b      	subs	r3, r3, r5
 801f61c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801f620:	4414      	add	r4, r2
 801f622:	9a04      	ldr	r2, [sp, #16]
 801f624:	4413      	add	r3, r2
 801f626:	9a01      	ldr	r2, [sp, #4]
 801f628:	441a      	add	r2, r3
 801f62a:	9201      	str	r2, [sp, #4]
 801f62c:	e7ae      	b.n	801f58c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801f62e:	4b04      	ldr	r3, [pc, #16]	; (801f640 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 801f630:	6818      	ldr	r0, [r3, #0]
 801f632:	6803      	ldr	r3, [r0, #0]
 801f634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f636:	4798      	blx	r3
 801f638:	b00b      	add	sp, #44	; 0x2c
 801f63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f63e:	bf00      	nop
 801f640:	20009cd4 	.word	0x20009cd4
 801f644:	20009cce 	.word	0x20009cce
 801f648:	fffff800 	.word	0xfffff800

0801f64c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f650:	b089      	sub	sp, #36	; 0x24
 801f652:	4682      	mov	sl, r0
 801f654:	4689      	mov	r9, r1
 801f656:	4690      	mov	r8, r2
 801f658:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 801f65c:	461f      	mov	r7, r3
 801f65e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f660:	b365      	cbz	r5, 801f6bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801f662:	4608      	mov	r0, r1
 801f664:	f7fe faf8 	bl	801dc58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f668:	4606      	mov	r6, r0
 801f66a:	4648      	mov	r0, r9
 801f66c:	f7fe fb2c 	bl	801dcc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f670:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f674:	4648      	mov	r0, r9
 801f676:	f8ad 8008 	strh.w	r8, [sp, #8]
 801f67a:	f8ad 700a 	strh.w	r7, [sp, #10]
 801f67e:	f8ad 600c 	strh.w	r6, [sp, #12]
 801f682:	f7fe fc3f 	bl	801df04 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f686:	2801      	cmp	r0, #1
 801f688:	d105      	bne.n	801f696 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 801f68a:	4b64      	ldr	r3, [pc, #400]	; (801f81c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d0>)
 801f68c:	2160      	movs	r1, #96	; 0x60
 801f68e:	4a64      	ldr	r2, [pc, #400]	; (801f820 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d4>)
 801f690:	4864      	ldr	r0, [pc, #400]	; (801f824 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d8>)
 801f692:	f000 fbcd 	bl	801fe30 <__assert_func>
 801f696:	4648      	mov	r0, r9
 801f698:	f7fe fbdc 	bl	801de54 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f69c:	4606      	mov	r6, r0
 801f69e:	4648      	mov	r0, r9
 801f6a0:	f7fe fc08 	bl	801deb4 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 801f6a4:	4680      	mov	r8, r0
 801f6a6:	4648      	mov	r0, r9
 801f6a8:	f7fe fc2c 	bl	801df04 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f6ac:	2802      	cmp	r0, #2
 801f6ae:	d108      	bne.n	801f6c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801f6b0:	462b      	mov	r3, r5
 801f6b2:	4622      	mov	r2, r4
 801f6b4:	a902      	add	r1, sp, #8
 801f6b6:	4630      	mov	r0, r6
 801f6b8:	f7ff fdd2 	bl	801f260 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f6bc:	b009      	add	sp, #36	; 0x24
 801f6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6c2:	4648      	mov	r0, r9
 801f6c4:	f7fe fb90 	bl	801dde8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801f6c8:	b950      	cbnz	r0, 801f6e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f6ca:	f8da 3000 	ldr.w	r3, [sl]
 801f6ce:	aa02      	add	r2, sp, #8
 801f6d0:	9001      	str	r0, [sp, #4]
 801f6d2:	4631      	mov	r1, r6
 801f6d4:	9500      	str	r5, [sp, #0]
 801f6d6:	4650      	mov	r0, sl
 801f6d8:	691d      	ldr	r5, [r3, #16]
 801f6da:	4623      	mov	r3, r4
 801f6dc:	47a8      	blx	r5
 801f6de:	e7ed      	b.n	801f6bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801f6e0:	af06      	add	r7, sp, #24
 801f6e2:	4649      	mov	r1, r9
 801f6e4:	f10d 0910 	add.w	r9, sp, #16
 801f6e8:	4638      	mov	r0, r7
 801f6ea:	f7fe fb25 	bl	801dd38 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801f6ee:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f6f2:	e889 0003 	stmia.w	r9, {r0, r1}
 801f6f6:	4621      	mov	r1, r4
 801f6f8:	4648      	mov	r0, r9
 801f6fa:	f7ed ff45 	bl	800d588 <_ZN8touchgfx4RectaNERKS0_>
 801f6fe:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801f702:	b113      	cbz	r3, 801f70a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbe>
 801f704:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801f708:	b913      	cbnz	r3, 801f710 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801f70a:	9500      	str	r5, [sp, #0]
 801f70c:	4623      	mov	r3, r4
 801f70e:	e07f      	b.n	801f810 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c4>
 801f710:	f8da 3000 	ldr.w	r3, [sl]
 801f714:	2200      	movs	r2, #0
 801f716:	9500      	str	r5, [sp, #0]
 801f718:	4631      	mov	r1, r6
 801f71a:	9201      	str	r2, [sp, #4]
 801f71c:	4650      	mov	r0, sl
 801f71e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801f722:	aa02      	add	r2, sp, #8
 801f724:	464b      	mov	r3, r9
 801f726:	47d8      	blx	fp
 801f728:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f72c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f730:	4293      	cmp	r3, r2
 801f732:	dd13      	ble.n	801f75c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x110>
 801f734:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f738:	1a9b      	subs	r3, r3, r2
 801f73a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f73e:	f8ad 0018 	strh.w	r0, [sp, #24]
 801f742:	4630      	mov	r0, r6
 801f744:	f8ad 201a 	strh.w	r2, [sp, #26]
 801f748:	aa02      	add	r2, sp, #8
 801f74a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f74e:	4641      	mov	r1, r8
 801f750:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f754:	463b      	mov	r3, r7
 801f756:	9500      	str	r5, [sp, #0]
 801f758:	f7ff fe76 	bl	801f448 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f75c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801f760:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f764:	4293      	cmp	r3, r2
 801f766:	dd13      	ble.n	801f790 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x144>
 801f768:	1a9b      	subs	r3, r3, r2
 801f76a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801f76e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801f772:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f776:	aa02      	add	r2, sp, #8
 801f778:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f77c:	4630      	mov	r0, r6
 801f77e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f782:	463b      	mov	r3, r7
 801f784:	f8ad 101e 	strh.w	r1, [sp, #30]
 801f788:	4641      	mov	r1, r8
 801f78a:	9500      	str	r5, [sp, #0]
 801f78c:	f7ff fe5c 	bl	801f448 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f790:	88a2      	ldrh	r2, [r4, #4]
 801f792:	8823      	ldrh	r3, [r4, #0]
 801f794:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f798:	4413      	add	r3, r2
 801f79a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f79e:	440a      	add	r2, r1
 801f7a0:	b29b      	uxth	r3, r3
 801f7a2:	b292      	uxth	r2, r2
 801f7a4:	b218      	sxth	r0, r3
 801f7a6:	b211      	sxth	r1, r2
 801f7a8:	4288      	cmp	r0, r1
 801f7aa:	dd13      	ble.n	801f7d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>
 801f7ac:	1a9b      	subs	r3, r3, r2
 801f7ae:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801f7b2:	f9bd e012 	ldrsh.w	lr, [sp, #18]
 801f7b6:	aa02      	add	r2, sp, #8
 801f7b8:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f7bc:	4641      	mov	r1, r8
 801f7be:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f7c2:	463b      	mov	r3, r7
 801f7c4:	f8ad 001e 	strh.w	r0, [sp, #30]
 801f7c8:	4630      	mov	r0, r6
 801f7ca:	9500      	str	r5, [sp, #0]
 801f7cc:	f8ad e01a 	strh.w	lr, [sp, #26]
 801f7d0:	f7ff fe3a 	bl	801f448 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f7d4:	88e2      	ldrh	r2, [r4, #6]
 801f7d6:	8863      	ldrh	r3, [r4, #2]
 801f7d8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801f7dc:	4413      	add	r3, r2
 801f7de:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801f7e2:	440a      	add	r2, r1
 801f7e4:	b29b      	uxth	r3, r3
 801f7e6:	b292      	uxth	r2, r2
 801f7e8:	b218      	sxth	r0, r3
 801f7ea:	b211      	sxth	r1, r2
 801f7ec:	4288      	cmp	r0, r1
 801f7ee:	f77f af65 	ble.w	801f6bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801f7f2:	1a9b      	subs	r3, r3, r2
 801f7f4:	f9b4 e000 	ldrsh.w	lr, [r4]
 801f7f8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f7fc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f800:	463b      	mov	r3, r7
 801f802:	f8ad e018 	strh.w	lr, [sp, #24]
 801f806:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f80a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801f80e:	9500      	str	r5, [sp, #0]
 801f810:	aa02      	add	r2, sp, #8
 801f812:	4641      	mov	r1, r8
 801f814:	4630      	mov	r0, r6
 801f816:	f7ff fe17 	bl	801f448 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f81a:	e74f      	b.n	801f6bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801f81c:	080234cb 	.word	0x080234cb
 801f820:	080235f8 	.word	0x080235f8
 801f824:	0802355b 	.word	0x0802355b

0801f828 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801f828:	b138      	cbz	r0, 801f83a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f82a:	2902      	cmp	r1, #2
 801f82c:	d00b      	beq.n	801f846 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1e>
 801f82e:	2903      	cmp	r1, #3
 801f830:	d00c      	beq.n	801f84c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801f832:	2901      	cmp	r1, #1
 801f834:	d10d      	bne.n	801f852 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 801f836:	2001      	movs	r0, #1
 801f838:	4770      	bx	lr
 801f83a:	2902      	cmp	r1, #2
 801f83c:	d006      	beq.n	801f84c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801f83e:	2903      	cmp	r1, #3
 801f840:	d007      	beq.n	801f852 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 801f842:	2901      	cmp	r1, #1
 801f844:	d1f7      	bne.n	801f836 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0xe>
 801f846:	4b05      	ldr	r3, [pc, #20]	; (801f85c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f848:	8818      	ldrh	r0, [r3, #0]
 801f84a:	4770      	bx	lr
 801f84c:	f04f 30ff 	mov.w	r0, #4294967295
 801f850:	4770      	bx	lr
 801f852:	4b02      	ldr	r3, [pc, #8]	; (801f85c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f854:	8818      	ldrh	r0, [r3, #0]
 801f856:	4240      	negs	r0, r0
 801f858:	4770      	bx	lr
 801f85a:	bf00      	nop
 801f85c:	20009cce 	.word	0x20009cce

0801f860 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801f860:	b140      	cbz	r0, 801f874 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801f862:	2902      	cmp	r1, #2
 801f864:	d00c      	beq.n	801f880 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x20>
 801f866:	2903      	cmp	r1, #3
 801f868:	d00d      	beq.n	801f886 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801f86a:	2901      	cmp	r1, #1
 801f86c:	d10f      	bne.n	801f88e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 801f86e:	4b09      	ldr	r3, [pc, #36]	; (801f894 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f870:	8818      	ldrh	r0, [r3, #0]
 801f872:	4770      	bx	lr
 801f874:	2902      	cmp	r1, #2
 801f876:	d006      	beq.n	801f886 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801f878:	2903      	cmp	r1, #3
 801f87a:	d008      	beq.n	801f88e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 801f87c:	2901      	cmp	r1, #1
 801f87e:	d1f6      	bne.n	801f86e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0xe>
 801f880:	f04f 30ff 	mov.w	r0, #4294967295
 801f884:	4770      	bx	lr
 801f886:	4b03      	ldr	r3, [pc, #12]	; (801f894 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f888:	8818      	ldrh	r0, [r3, #0]
 801f88a:	4240      	negs	r0, r0
 801f88c:	4770      	bx	lr
 801f88e:	2001      	movs	r0, #1
 801f890:	4770      	bx	lr
 801f892:	bf00      	nop
 801f894:	20009cce 	.word	0x20009cce

0801f898 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE>:
 801f898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f89c:	b097      	sub	sp, #92	; 0x5c
 801f89e:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 801f8a2:	910d      	str	r1, [sp, #52]	; 0x34
 801f8a4:	a912      	add	r1, sp, #72	; 0x48
 801f8a6:	f899 000d 	ldrb.w	r0, [r9, #13]
 801f8aa:	f9bd 8080 	ldrsh.w	r8, [sp, #128]	; 0x80
 801f8ae:	f010 0f08 	tst.w	r0, #8
 801f8b2:	f8bd 4088 	ldrh.w	r4, [sp, #136]	; 0x88
 801f8b6:	f89d 50a0 	ldrb.w	r5, [sp, #160]	; 0xa0
 801f8ba:	f89d a0a8 	ldrb.w	sl, [sp, #168]	; 0xa8
 801f8be:	e881 000c 	stmia.w	r1, {r2, r3}
 801f8c2:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801f8c6:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801f8ca:	920b      	str	r2, [sp, #44]	; 0x2c
 801f8cc:	bf0c      	ite	eq
 801f8ce:	2200      	moveq	r2, #0
 801f8d0:	f44f 7280 	movne.w	r2, #256	; 0x100
 801f8d4:	f899 1006 	ldrb.w	r1, [r9, #6]
 801f8d8:	f010 0f10 	tst.w	r0, #16
 801f8dc:	9307      	str	r3, [sp, #28]
 801f8de:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801f8e2:	bf0c      	ite	eq
 801f8e4:	2000      	moveq	r0, #0
 801f8e6:	f44f 7080 	movne.w	r0, #256	; 0x100
 801f8ea:	430a      	orrs	r2, r1
 801f8ec:	9308      	str	r3, [sp, #32]
 801f8ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f8f0:	920a      	str	r2, [sp, #40]	; 0x28
 801f8f2:	f000 813b 	beq.w	801fb6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 801f8f6:	f899 2007 	ldrb.w	r2, [r9, #7]
 801f8fa:	4302      	orrs	r2, r0
 801f8fc:	9209      	str	r2, [sp, #36]	; 0x24
 801f8fe:	f000 8135 	beq.w	801fb6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 801f902:	f999 1009 	ldrsb.w	r1, [r9, #9]
 801f906:	2c00      	cmp	r4, #0
 801f908:	f000 80db 	beq.w	801fac2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 801f90c:	1a61      	subs	r1, r4, r1
 801f90e:	b28c      	uxth	r4, r1
 801f910:	0422      	lsls	r2, r4, #16
 801f912:	d504      	bpl.n	801f91e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801f914:	eba8 0404 	sub.w	r4, r8, r4
 801f918:	fa0f f884 	sxth.w	r8, r4
 801f91c:	2400      	movs	r4, #0
 801f91e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801f922:	88df      	ldrh	r7, [r3, #6]
 801f924:	4580      	cmp	r8, r0
 801f926:	b282      	uxth	r2, r0
 801f928:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 801f92c:	bfb8      	it	lt
 801f92e:	18a1      	addlt	r1, r4, r2
 801f930:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 801f934:	44be      	add	lr, r7
 801f936:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801f93a:	bfbc      	itt	lt
 801f93c:	eba1 0108 	sublt.w	r1, r1, r8
 801f940:	4680      	movlt	r8, r0
 801f942:	a812      	add	r0, sp, #72	; 0x48
 801f944:	bfb8      	it	lt
 801f946:	b28c      	uxthlt	r4, r1
 801f948:	8899      	ldrh	r1, [r3, #4]
 801f94a:	fa0f f38e 	sxth.w	r3, lr
 801f94e:	440a      	add	r2, r1
 801f950:	4641      	mov	r1, r8
 801f952:	930e      	str	r3, [sp, #56]	; 0x38
 801f954:	4bb1      	ldr	r3, [pc, #708]	; (801fc1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801f956:	b212      	sxth	r2, r2
 801f958:	f893 b000 	ldrb.w	fp, [r3]
 801f95c:	920f      	str	r2, [sp, #60]	; 0x3c
 801f95e:	f10b 3eff 	add.w	lr, fp, #4294967295
 801f962:	9a07      	ldr	r2, [sp, #28]
 801f964:	f1de 0300 	rsbs	r3, lr, #0
 801f968:	eb43 030e 	adc.w	r3, r3, lr
 801f96c:	930c      	str	r3, [sp, #48]	; 0x30
 801f96e:	4653      	mov	r3, sl
 801f970:	f7fc fcd0 	bl	801c314 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f974:	4641      	mov	r1, r8
 801f976:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801f97a:	4653      	mov	r3, sl
 801f97c:	9a07      	ldr	r2, [sp, #28]
 801f97e:	a812      	add	r0, sp, #72	; 0x48
 801f980:	f7fc fce3 	bl	801c34a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f984:	a916      	add	r1, sp, #88	; 0x58
 801f986:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f98a:	a815      	add	r0, sp, #84	; 0x54
 801f98c:	f7fc fd9e 	bl	801c4cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f990:	f1ba 0f00 	cmp.w	sl, #0
 801f994:	f040 8099 	bne.w	801faca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x232>
 801f998:	f1bb 0f01 	cmp.w	fp, #1
 801f99c:	f040 809d 	bne.w	801fada <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x242>
 801f9a0:	4a9f      	ldr	r2, [pc, #636]	; (801fc20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801f9a2:	2d04      	cmp	r5, #4
 801f9a4:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801f9a8:	8811      	ldrh	r1, [r2, #0]
 801f9aa:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801f9ae:	fb01 2303 	mla	r3, r1, r3, r2
 801f9b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f9b4:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 801f9b8:	f04f 03ff 	mov.w	r3, #255	; 0xff
 801f9bc:	fa43 f305 	asr.w	r3, r3, r5
 801f9c0:	b2db      	uxtb	r3, r3
 801f9c2:	930d      	str	r3, [sp, #52]	; 0x34
 801f9c4:	ea6f 0303 	mvn.w	r3, r3
 801f9c8:	b2db      	uxtb	r3, r3
 801f9ca:	9310      	str	r3, [sp, #64]	; 0x40
 801f9cc:	f1c5 0308 	rsb	r3, r5, #8
 801f9d0:	b2db      	uxtb	r3, r3
 801f9d2:	9309      	str	r3, [sp, #36]	; 0x24
 801f9d4:	d104      	bne.n	801f9e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801f9d6:	f899 300d 	ldrb.w	r3, [r9, #13]
 801f9da:	07da      	lsls	r2, r3, #31
 801f9dc:	f100 8118 	bmi.w	801fc10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801f9e0:	b91c      	cbnz	r4, 801f9ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x152>
 801f9e2:	9b08      	ldr	r3, [sp, #32]
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	f000 80c4 	beq.w	801fb72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2da>
 801f9ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f9ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f9f0:	fb16 4303 	smlabb	r3, r6, r3, r4
 801f9f4:	fb13 f305 	smulbb	r3, r3, r5
 801f9f8:	b29b      	uxth	r3, r3
 801f9fa:	f003 0207 	and.w	r2, r3, #7
 801f9fe:	1a8a      	subs	r2, r1, r2
 801fa00:	9926      	ldr	r1, [sp, #152]	; 0x98
 801fa02:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801fa06:	b2d2      	uxtb	r2, r2
 801fa08:	9326      	str	r3, [sp, #152]	; 0x98
 801fa0a:	9b08      	ldr	r3, [sp, #32]
 801fa0c:	1aff      	subs	r7, r7, r3
 801fa0e:	b2bf      	uxth	r7, r7
 801fa10:	4651      	mov	r1, sl
 801fa12:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fa14:	f7ff ff08 	bl	801f828 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801fa18:	4651      	mov	r1, sl
 801fa1a:	4681      	mov	r9, r0
 801fa1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fa1e:	f7ff ff1f 	bl	801f860 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801fa22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa24:	9907      	ldr	r1, [sp, #28]
 801fa26:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 801fa2a:	eba3 0e01 	sub.w	lr, r3, r1
 801fa2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa30:	eba8 0104 	sub.w	r1, r8, r4
 801fa34:	1a59      	subs	r1, r3, r1
 801fa36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa38:	4299      	cmp	r1, r3
 801fa3a:	bfd4      	ite	le
 801fa3c:	ebc4 0101 	rsble	r1, r4, r1
 801fa40:	ebc4 0103 	rsbgt	r1, r4, r3
 801fa44:	4577      	cmp	r7, lr
 801fa46:	fb09 0011 	mls	r0, r9, r1, r0
 801fa4a:	eba6 0301 	sub.w	r3, r6, r1
 801fa4e:	bfa8      	it	ge
 801fa50:	4677      	movge	r7, lr
 801fa52:	0040      	lsls	r0, r0, #1
 801fa54:	436b      	muls	r3, r5
 801fa56:	9008      	str	r0, [sp, #32]
 801fa58:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 801fa5c:	fb0a f000 	mul.w	r0, sl, r0
 801fa60:	9007      	str	r0, [sp, #28]
 801fa62:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fa64:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801fa68:	900e      	str	r0, [sp, #56]	; 0x38
 801fa6a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fa6c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fa70:	900f      	str	r0, [sp, #60]	; 0x3c
 801fa72:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fa74:	f000 001f 	and.w	r0, r0, #31
 801fa78:	9011      	str	r0, [sp, #68]	; 0x44
 801fa7a:	2f00      	cmp	r7, #0
 801fa7c:	dd76      	ble.n	801fb6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 801fa7e:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 801fa82:	4689      	mov	r9, r1
 801fa84:	46d8      	mov	r8, fp
 801fa86:	900c      	str	r0, [sp, #48]	; 0x30
 801fa88:	f1b9 0f00 	cmp.w	r9, #0
 801fa8c:	f340 80a6 	ble.w	801fbdc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801fa90:	9826      	ldr	r0, [sp, #152]	; 0x98
 801fa92:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fa94:	7800      	ldrb	r0, [r0, #0]
 801fa96:	4090      	lsls	r0, r2
 801fa98:	4020      	ands	r0, r4
 801fa9a:	d009      	beq.n	801fab0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x218>
 801fa9c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fa9e:	4320      	orrs	r0, r4
 801faa0:	28ff      	cmp	r0, #255	; 0xff
 801faa2:	d168      	bne.n	801fb76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801faa4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801faa6:	2cff      	cmp	r4, #255	; 0xff
 801faa8:	d165      	bne.n	801fb76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801faaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801faac:	f8a8 4000 	strh.w	r4, [r8]
 801fab0:	2a00      	cmp	r2, #0
 801fab2:	f000 808e 	beq.w	801fbd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 801fab6:	1b52      	subs	r2, r2, r5
 801fab8:	b2d2      	uxtb	r2, r2
 801faba:	44d0      	add	r8, sl
 801fabc:	f109 39ff 	add.w	r9, r9, #4294967295
 801fac0:	e7e2      	b.n	801fa88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1f0>
 801fac2:	4488      	add	r8, r1
 801fac4:	fa0f f888 	sxth.w	r8, r8
 801fac8:	e729      	b.n	801f91e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801faca:	f1ba 0f01 	cmp.w	sl, #1
 801face:	f47f af67 	bne.w	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801fad2:	f1bb 0f01 	cmp.w	fp, #1
 801fad6:	f47f af63 	bne.w	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801fada:	f8df b14c 	ldr.w	fp, [pc, #332]	; 801fc28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801fade:	f8db 0000 	ldr.w	r0, [fp]
 801fae2:	6803      	ldr	r3, [r0, #0]
 801fae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fae6:	4798      	blx	r3
 801fae8:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801faec:	465a      	mov	r2, fp
 801faee:	d006      	beq.n	801fafe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801faf0:	2d04      	cmp	r5, #4
 801faf2:	bf0a      	itet	eq
 801faf4:	f899 300d 	ldrbeq.w	r3, [r9, #13]
 801faf8:	2300      	movne	r3, #0
 801fafa:	f003 0301 	andeq.w	r3, r3, #1
 801fafe:	05c0      	lsls	r0, r0, #23
 801fb00:	f140 8081 	bpl.w	801fc06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 801fb04:	2d08      	cmp	r5, #8
 801fb06:	d17e      	bne.n	801fc06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 801fb08:	2b00      	cmp	r3, #0
 801fb0a:	bf0c      	ite	eq
 801fb0c:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801fb10:	2180      	movne	r1, #128	; 0x80
 801fb12:	2c00      	cmp	r4, #0
 801fb14:	f47f af44 	bne.w	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801fb18:	9b08      	ldr	r3, [sp, #32]
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	f47f af40 	bne.w	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801fb20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb22:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801fb24:	4443      	add	r3, r8
 801fb26:	4298      	cmp	r0, r3
 801fb28:	f6ff af3a 	blt.w	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801fb2c:	9807      	ldr	r0, [sp, #28]
 801fb2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb30:	4403      	add	r3, r0
 801fb32:	980e      	ldr	r0, [sp, #56]	; 0x38
 801fb34:	4298      	cmp	r0, r3
 801fb36:	f6ff af33 	blt.w	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801fb3a:	2d08      	cmp	r5, #8
 801fb3c:	6810      	ldr	r0, [r2, #0]
 801fb3e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801fb42:	bf18      	it	ne
 801fb44:	3601      	addne	r6, #1
 801fb46:	6804      	ldr	r4, [r0, #0]
 801fb48:	9105      	str	r1, [sp, #20]
 801fb4a:	bf18      	it	ne
 801fb4c:	f026 0601 	bicne.w	r6, r6, #1
 801fb50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fb52:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801fb56:	bf18      	it	ne
 801fb58:	b2b6      	uxthne	r6, r6
 801fb5a:	9104      	str	r1, [sp, #16]
 801fb5c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801fb5e:	9602      	str	r6, [sp, #8]
 801fb60:	9103      	str	r1, [sp, #12]
 801fb62:	9926      	ldr	r1, [sp, #152]	; 0x98
 801fb64:	e88d 00c0 	stmia.w	sp, {r6, r7}
 801fb68:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 801fb6a:	47a0      	blx	r4
 801fb6c:	b017      	add	sp, #92	; 0x5c
 801fb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fb74:	e74c      	b.n	801fa10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x178>
 801fb76:	f8b8 c000 	ldrh.w	ip, [r8]
 801fb7a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801fb7e:	f42c 66ff 	bic.w	r6, ip, #2040	; 0x7f8
 801fb82:	fb10 f004 	smulbb	r0, r0, r4
 801fb86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fb88:	f026 0607 	bic.w	r6, r6, #7
 801fb8c:	f5c0 3e80 	rsb	lr, r0, #65536	; 0x10000
 801fb90:	fb0e f606 	mul.w	r6, lr, r6
 801fb94:	fb00 6604 	mla	r6, r0, r4, r6
 801fb98:	4c22      	ldr	r4, [pc, #136]	; (801fc24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801fb9a:	ea04 4416 	and.w	r4, r4, r6, lsr #16
 801fb9e:	940a      	str	r4, [sp, #40]	; 0x28
 801fba0:	f40c 64fc 	and.w	r4, ip, #2016	; 0x7e0
 801fba4:	f00c 0c1f 	and.w	ip, ip, #31
 801fba8:	fb0e f404 	mul.w	r4, lr, r4
 801fbac:	fb0e fc0c 	mul.w	ip, lr, ip
 801fbb0:	4626      	mov	r6, r4
 801fbb2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fbb4:	fb00 6404 	mla	r4, r0, r4, r6
 801fbb8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fbba:	0c24      	lsrs	r4, r4, #16
 801fbbc:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801fbc0:	4334      	orrs	r4, r6
 801fbc2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fbc4:	fb00 cc06 	mla	ip, r0, r6, ip
 801fbc8:	f3cc 4c04 	ubfx	ip, ip, #16, #5
 801fbcc:	ea44 040c 	orr.w	r4, r4, ip
 801fbd0:	e76c      	b.n	801faac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x214>
 801fbd2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fbd4:	3201      	adds	r2, #1
 801fbd6:	9226      	str	r2, [sp, #152]	; 0x98
 801fbd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fbda:	e76e      	b.n	801faba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x222>
 801fbdc:	b16b      	cbz	r3, 801fbfa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x362>
 801fbde:	4293      	cmp	r3, r2
 801fbe0:	dd08      	ble.n	801fbf4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 801fbe2:	1b58      	subs	r0, r3, r5
 801fbe4:	2408      	movs	r4, #8
 801fbe6:	1a80      	subs	r0, r0, r2
 801fbe8:	fb90 f0f4 	sdiv	r0, r0, r4
 801fbec:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801fbee:	3001      	adds	r0, #1
 801fbf0:	4404      	add	r4, r0
 801fbf2:	9426      	str	r4, [sp, #152]	; 0x98
 801fbf4:	1ad2      	subs	r2, r2, r3
 801fbf6:	f002 0207 	and.w	r2, r2, #7
 801fbfa:	9807      	ldr	r0, [sp, #28]
 801fbfc:	3f01      	subs	r7, #1
 801fbfe:	9c08      	ldr	r4, [sp, #32]
 801fc00:	4420      	add	r0, r4
 801fc02:	4483      	add	fp, r0
 801fc04:	e739      	b.n	801fa7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	f43f aeca 	beq.w	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801fc0c:	2180      	movs	r1, #128	; 0x80
 801fc0e:	e780      	b.n	801fb12 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 801fc10:	07f3      	lsls	r3, r6, #31
 801fc12:	f57f aee5 	bpl.w	801f9e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801fc16:	3601      	adds	r6, #1
 801fc18:	b2b6      	uxth	r6, r6
 801fc1a:	e6e1      	b.n	801f9e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801fc1c:	20009ccc 	.word	0x20009ccc
 801fc20:	20009cce 	.word	0x20009cce
 801fc24:	fffff800 	.word	0xfffff800
 801fc28:	20009cd4 	.word	0x20009cd4

0801fc2c <CRC_Lock>:
 801fc2c:	4a13      	ldr	r2, [pc, #76]	; (801fc7c <CRC_Lock+0x50>)
 801fc2e:	6813      	ldr	r3, [r2, #0]
 801fc30:	f023 0301 	bic.w	r3, r3, #1
 801fc34:	6013      	str	r3, [r2, #0]
 801fc36:	4b12      	ldr	r3, [pc, #72]	; (801fc80 <CRC_Lock+0x54>)
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	b9a3      	cbnz	r3, 801fc66 <CRC_Lock+0x3a>
 801fc3c:	4b11      	ldr	r3, [pc, #68]	; (801fc84 <CRC_Lock+0x58>)
 801fc3e:	681b      	ldr	r3, [r3, #0]
 801fc40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801fc44:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801fc48:	d10d      	bne.n	801fc66 <CRC_Lock+0x3a>
 801fc4a:	4b0f      	ldr	r3, [pc, #60]	; (801fc88 <CRC_Lock+0x5c>)
 801fc4c:	2201      	movs	r2, #1
 801fc4e:	601a      	str	r2, [r3, #0]
 801fc50:	681a      	ldr	r2, [r3, #0]
 801fc52:	2a00      	cmp	r2, #0
 801fc54:	d1fc      	bne.n	801fc50 <CRC_Lock+0x24>
 801fc56:	4b0d      	ldr	r3, [pc, #52]	; (801fc8c <CRC_Lock+0x60>)
 801fc58:	6018      	str	r0, [r3, #0]
 801fc5a:	6818      	ldr	r0, [r3, #0]
 801fc5c:	4288      	cmp	r0, r1
 801fc5e:	bf14      	ite	ne
 801fc60:	2000      	movne	r0, #0
 801fc62:	2001      	moveq	r0, #1
 801fc64:	4770      	bx	lr
 801fc66:	4b0a      	ldr	r3, [pc, #40]	; (801fc90 <CRC_Lock+0x64>)
 801fc68:	2201      	movs	r2, #1
 801fc6a:	601a      	str	r2, [r3, #0]
 801fc6c:	681a      	ldr	r2, [r3, #0]
 801fc6e:	2a00      	cmp	r2, #0
 801fc70:	d1fc      	bne.n	801fc6c <CRC_Lock+0x40>
 801fc72:	4b08      	ldr	r3, [pc, #32]	; (801fc94 <CRC_Lock+0x68>)
 801fc74:	6018      	str	r0, [r3, #0]
 801fc76:	6818      	ldr	r0, [r3, #0]
 801fc78:	4281      	cmp	r1, r0
 801fc7a:	e7f0      	b.n	801fc5e <CRC_Lock+0x32>
 801fc7c:	e0002000 	.word	0xe0002000
 801fc80:	e0042000 	.word	0xe0042000
 801fc84:	5c001000 	.word	0x5c001000
 801fc88:	58024c08 	.word	0x58024c08
 801fc8c:	58024c00 	.word	0x58024c00
 801fc90:	40023008 	.word	0x40023008
 801fc94:	40023000 	.word	0x40023000

0801fc98 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801fc98:	6101      	str	r1, [r0, #16]
 801fc9a:	4770      	bx	lr

0801fc9c <_ZN8touchgfx8Gestures4tickEv>:
 801fc9c:	7b83      	ldrb	r3, [r0, #14]
 801fc9e:	b14b      	cbz	r3, 801fcb4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801fca0:	8903      	ldrh	r3, [r0, #8]
 801fca2:	3301      	adds	r3, #1
 801fca4:	b29b      	uxth	r3, r3
 801fca6:	2b07      	cmp	r3, #7
 801fca8:	8103      	strh	r3, [r0, #8]
 801fcaa:	bf81      	itttt	hi
 801fcac:	2300      	movhi	r3, #0
 801fcae:	8143      	strhhi	r3, [r0, #10]
 801fcb0:	8183      	strhhi	r3, [r0, #12]
 801fcb2:	7383      	strbhi	r3, [r0, #14]
 801fcb4:	4770      	bx	lr
	...

0801fcb8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801fcb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801fcbc:	4604      	mov	r4, r0
 801fcbe:	4698      	mov	r8, r3
 801fcc0:	8880      	ldrh	r0, [r0, #4]
 801fcc2:	4617      	mov	r7, r2
 801fcc4:	4b1d      	ldr	r3, [pc, #116]	; (801fd3c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801fcc6:	460e      	mov	r6, r1
 801fcc8:	f8ad 0006 	strh.w	r0, [sp, #6]
 801fccc:	eba8 0000 	sub.w	r0, r8, r0
 801fcd0:	9300      	str	r3, [sp, #0]
 801fcd2:	2300      	movs	r3, #0
 801fcd4:	b280      	uxth	r0, r0
 801fcd6:	8aa2      	ldrh	r2, [r4, #20]
 801fcd8:	f88d 3004 	strb.w	r3, [sp, #4]
 801fcdc:	b203      	sxth	r3, r0
 801fcde:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801fce2:	88e1      	ldrh	r1, [r4, #6]
 801fce4:	2b00      	cmp	r3, #0
 801fce6:	f8ad 800a 	strh.w	r8, [sp, #10]
 801fcea:	f8ad 1008 	strh.w	r1, [sp, #8]
 801fcee:	bfb8      	it	lt
 801fcf0:	4240      	neglt	r0, r0
 801fcf2:	f8ad 500c 	strh.w	r5, [sp, #12]
 801fcf6:	bfb8      	it	lt
 801fcf8:	b203      	sxthlt	r3, r0
 801fcfa:	4293      	cmp	r3, r2
 801fcfc:	dc0c      	bgt.n	801fd18 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 801fcfe:	1a69      	subs	r1, r5, r1
 801fd00:	b289      	uxth	r1, r1
 801fd02:	b20b      	sxth	r3, r1
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	bfbc      	itt	lt
 801fd08:	4249      	neglt	r1, r1
 801fd0a:	b20b      	sxthlt	r3, r1
 801fd0c:	429a      	cmp	r2, r3
 801fd0e:	db03      	blt.n	801fd18 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 801fd10:	2000      	movs	r0, #0
 801fd12:	b004      	add	sp, #16
 801fd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd18:	6920      	ldr	r0, [r4, #16]
 801fd1a:	4669      	mov	r1, sp
 801fd1c:	eba8 0606 	sub.w	r6, r8, r6
 801fd20:	1bef      	subs	r7, r5, r7
 801fd22:	6803      	ldr	r3, [r0, #0]
 801fd24:	685b      	ldr	r3, [r3, #4]
 801fd26:	4798      	blx	r3
 801fd28:	2300      	movs	r3, #0
 801fd2a:	2001      	movs	r0, #1
 801fd2c:	8166      	strh	r6, [r4, #10]
 801fd2e:	8123      	strh	r3, [r4, #8]
 801fd30:	81a7      	strh	r7, [r4, #12]
 801fd32:	f8a4 8004 	strh.w	r8, [r4, #4]
 801fd36:	80e5      	strh	r5, [r4, #6]
 801fd38:	73a0      	strb	r0, [r4, #14]
 801fd3a:	e7ea      	b.n	801fd12 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 801fd3c:	080214f4 	.word	0x080214f4

0801fd40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801fd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd42:	461e      	mov	r6, r3
 801fd44:	1e4b      	subs	r3, r1, #1
 801fd46:	b085      	sub	sp, #20
 801fd48:	4604      	mov	r4, r0
 801fd4a:	2b01      	cmp	r3, #1
 801fd4c:	460d      	mov	r5, r1
 801fd4e:	4617      	mov	r7, r2
 801fd50:	d845      	bhi.n	801fdde <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 801fd52:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801fd56:	1cd3      	adds	r3, r2, #3
 801fd58:	b29b      	uxth	r3, r3
 801fd5a:	2b06      	cmp	r3, #6
 801fd5c:	d913      	bls.n	801fd86 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 801fd5e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801fd62:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801fd66:	4820      	ldr	r0, [pc, #128]	; (801fde8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 801fd68:	f8ad 100c 	strh.w	r1, [sp, #12]
 801fd6c:	a901      	add	r1, sp, #4
 801fd6e:	9001      	str	r0, [sp, #4]
 801fd70:	2000      	movs	r0, #0
 801fd72:	f8ad 200a 	strh.w	r2, [sp, #10]
 801fd76:	f88d 0008 	strb.w	r0, [sp, #8]
 801fd7a:	6920      	ldr	r0, [r4, #16]
 801fd7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801fd80:	6803      	ldr	r3, [r0, #0]
 801fd82:	689b      	ldr	r3, [r3, #8]
 801fd84:	4798      	blx	r3
 801fd86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fd8a:	1cd3      	adds	r3, r2, #3
 801fd8c:	b29b      	uxth	r3, r3
 801fd8e:	2b06      	cmp	r3, #6
 801fd90:	d913      	bls.n	801fdba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801fd92:	4815      	ldr	r0, [pc, #84]	; (801fde8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 801fd94:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801fd98:	9001      	str	r0, [sp, #4]
 801fd9a:	2001      	movs	r0, #1
 801fd9c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801fda0:	f88d 0008 	strb.w	r0, [sp, #8]
 801fda4:	6920      	ldr	r0, [r4, #16]
 801fda6:	f8ad 100c 	strh.w	r1, [sp, #12]
 801fdaa:	a901      	add	r1, sp, #4
 801fdac:	f8ad 200a 	strh.w	r2, [sp, #10]
 801fdb0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801fdb4:	6803      	ldr	r3, [r0, #0]
 801fdb6:	689b      	ldr	r3, [r3, #8]
 801fdb8:	4798      	blx	r3
 801fdba:	4b0c      	ldr	r3, [pc, #48]	; (801fdec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 801fdbc:	a901      	add	r1, sp, #4
 801fdbe:	6920      	ldr	r0, [r4, #16]
 801fdc0:	9301      	str	r3, [sp, #4]
 801fdc2:	2300      	movs	r3, #0
 801fdc4:	f88d 5008 	strb.w	r5, [sp, #8]
 801fdc8:	f8ad 700a 	strh.w	r7, [sp, #10]
 801fdcc:	f8ad 600c 	strh.w	r6, [sp, #12]
 801fdd0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801fdd4:	6803      	ldr	r3, [r0, #0]
 801fdd6:	681b      	ldr	r3, [r3, #0]
 801fdd8:	4798      	blx	r3
 801fdda:	b005      	add	sp, #20
 801fddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fdde:	2900      	cmp	r1, #0
 801fde0:	d1eb      	bne.n	801fdba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801fde2:	80a2      	strh	r2, [r4, #4]
 801fde4:	80c6      	strh	r6, [r0, #6]
 801fde6:	e7e8      	b.n	801fdba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801fde8:	08023240 	.word	0x08023240
 801fdec:	08021508 	.word	0x08021508

0801fdf0 <__cxa_pure_virtual>:
 801fdf0:	b508      	push	{r3, lr}
 801fdf2:	f000 f811 	bl	801fe18 <_ZSt9terminatev>

0801fdf6 <_ZdlPvj>:
 801fdf6:	f000 b800 	b.w	801fdfa <_ZdlPv>

0801fdfa <_ZdlPv>:
 801fdfa:	f000 b881 	b.w	801ff00 <free>

0801fdfe <_ZN10__cxxabiv111__terminateEPFvvE>:
 801fdfe:	b508      	push	{r3, lr}
 801fe00:	4780      	blx	r0
 801fe02:	f000 f80e 	bl	801fe22 <abort>
	...

0801fe08 <_ZSt13get_terminatev>:
 801fe08:	4b02      	ldr	r3, [pc, #8]	; (801fe14 <_ZSt13get_terminatev+0xc>)
 801fe0a:	6818      	ldr	r0, [r3, #0]
 801fe0c:	f3bf 8f5b 	dmb	ish
 801fe10:	4770      	bx	lr
 801fe12:	bf00      	nop
 801fe14:	2000004c 	.word	0x2000004c

0801fe18 <_ZSt9terminatev>:
 801fe18:	b508      	push	{r3, lr}
 801fe1a:	f7ff fff5 	bl	801fe08 <_ZSt13get_terminatev>
 801fe1e:	f7ff ffee 	bl	801fdfe <_ZN10__cxxabiv111__terminateEPFvvE>

0801fe22 <abort>:
 801fe22:	b508      	push	{r3, lr}
 801fe24:	2006      	movs	r0, #6
 801fe26:	f000 fc2f 	bl	8020688 <raise>
 801fe2a:	2001      	movs	r0, #1
 801fe2c:	f7f8 fd0a 	bl	8018844 <_exit>

0801fe30 <__assert_func>:
 801fe30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fe32:	461c      	mov	r4, r3
 801fe34:	4b09      	ldr	r3, [pc, #36]	; (801fe5c <__assert_func+0x2c>)
 801fe36:	681b      	ldr	r3, [r3, #0]
 801fe38:	4605      	mov	r5, r0
 801fe3a:	68d8      	ldr	r0, [r3, #12]
 801fe3c:	b152      	cbz	r2, 801fe54 <__assert_func+0x24>
 801fe3e:	4b08      	ldr	r3, [pc, #32]	; (801fe60 <__assert_func+0x30>)
 801fe40:	9100      	str	r1, [sp, #0]
 801fe42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801fe46:	4907      	ldr	r1, [pc, #28]	; (801fe64 <__assert_func+0x34>)
 801fe48:	462b      	mov	r3, r5
 801fe4a:	4622      	mov	r2, r4
 801fe4c:	f000 f81a 	bl	801fe84 <fiprintf>
 801fe50:	f7ff ffe7 	bl	801fe22 <abort>
 801fe54:	4b04      	ldr	r3, [pc, #16]	; (801fe68 <__assert_func+0x38>)
 801fe56:	461a      	mov	r2, r3
 801fe58:	e7f2      	b.n	801fe40 <__assert_func+0x10>
 801fe5a:	bf00      	nop
 801fe5c:	20000050 	.word	0x20000050
 801fe60:	08023782 	.word	0x08023782
 801fe64:	0802378f 	.word	0x0802378f
 801fe68:	080237bd 	.word	0x080237bd

0801fe6c <atexit>:
 801fe6c:	2300      	movs	r3, #0
 801fe6e:	4601      	mov	r1, r0
 801fe70:	461a      	mov	r2, r3
 801fe72:	4618      	mov	r0, r3
 801fe74:	f000 bce4 	b.w	8020840 <__register_exitproc>

0801fe78 <__errno>:
 801fe78:	4b01      	ldr	r3, [pc, #4]	; (801fe80 <__errno+0x8>)
 801fe7a:	6818      	ldr	r0, [r3, #0]
 801fe7c:	4770      	bx	lr
 801fe7e:	bf00      	nop
 801fe80:	20000050 	.word	0x20000050

0801fe84 <fiprintf>:
 801fe84:	b40e      	push	{r1, r2, r3}
 801fe86:	b503      	push	{r0, r1, lr}
 801fe88:	4601      	mov	r1, r0
 801fe8a:	ab03      	add	r3, sp, #12
 801fe8c:	4805      	ldr	r0, [pc, #20]	; (801fea4 <fiprintf+0x20>)
 801fe8e:	f853 2b04 	ldr.w	r2, [r3], #4
 801fe92:	6800      	ldr	r0, [r0, #0]
 801fe94:	9301      	str	r3, [sp, #4]
 801fe96:	f000 f921 	bl	80200dc <_vfiprintf_r>
 801fe9a:	b002      	add	sp, #8
 801fe9c:	f85d eb04 	ldr.w	lr, [sp], #4
 801fea0:	b003      	add	sp, #12
 801fea2:	4770      	bx	lr
 801fea4:	20000050 	.word	0x20000050

0801fea8 <__libc_init_array>:
 801fea8:	b570      	push	{r4, r5, r6, lr}
 801feaa:	4e0d      	ldr	r6, [pc, #52]	; (801fee0 <__libc_init_array+0x38>)
 801feac:	4c0d      	ldr	r4, [pc, #52]	; (801fee4 <__libc_init_array+0x3c>)
 801feae:	1ba4      	subs	r4, r4, r6
 801feb0:	10a4      	asrs	r4, r4, #2
 801feb2:	2500      	movs	r5, #0
 801feb4:	42a5      	cmp	r5, r4
 801feb6:	d109      	bne.n	801fecc <__libc_init_array+0x24>
 801feb8:	4e0b      	ldr	r6, [pc, #44]	; (801fee8 <__libc_init_array+0x40>)
 801feba:	4c0c      	ldr	r4, [pc, #48]	; (801feec <__libc_init_array+0x44>)
 801febc:	f000 ffb0 	bl	8020e20 <_init>
 801fec0:	1ba4      	subs	r4, r4, r6
 801fec2:	10a4      	asrs	r4, r4, #2
 801fec4:	2500      	movs	r5, #0
 801fec6:	42a5      	cmp	r5, r4
 801fec8:	d105      	bne.n	801fed6 <__libc_init_array+0x2e>
 801feca:	bd70      	pop	{r4, r5, r6, pc}
 801fecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801fed0:	4798      	blx	r3
 801fed2:	3501      	adds	r5, #1
 801fed4:	e7ee      	b.n	801feb4 <__libc_init_array+0xc>
 801fed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801feda:	4798      	blx	r3
 801fedc:	3501      	adds	r5, #1
 801fede:	e7f2      	b.n	801fec6 <__libc_init_array+0x1e>
 801fee0:	080fa7a8 	.word	0x080fa7a8
 801fee4:	080fa7a8 	.word	0x080fa7a8
 801fee8:	080fa7a8 	.word	0x080fa7a8
 801feec:	080fa7b8 	.word	0x080fa7b8

0801fef0 <malloc>:
 801fef0:	4b02      	ldr	r3, [pc, #8]	; (801fefc <malloc+0xc>)
 801fef2:	4601      	mov	r1, r0
 801fef4:	6818      	ldr	r0, [r3, #0]
 801fef6:	f000 b86d 	b.w	801ffd4 <_malloc_r>
 801fefa:	bf00      	nop
 801fefc:	20000050 	.word	0x20000050

0801ff00 <free>:
 801ff00:	4b02      	ldr	r3, [pc, #8]	; (801ff0c <free+0xc>)
 801ff02:	4601      	mov	r1, r0
 801ff04:	6818      	ldr	r0, [r3, #0]
 801ff06:	f000 b817 	b.w	801ff38 <_free_r>
 801ff0a:	bf00      	nop
 801ff0c:	20000050 	.word	0x20000050

0801ff10 <memcpy>:
 801ff10:	b510      	push	{r4, lr}
 801ff12:	1e43      	subs	r3, r0, #1
 801ff14:	440a      	add	r2, r1
 801ff16:	4291      	cmp	r1, r2
 801ff18:	d100      	bne.n	801ff1c <memcpy+0xc>
 801ff1a:	bd10      	pop	{r4, pc}
 801ff1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ff20:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ff24:	e7f7      	b.n	801ff16 <memcpy+0x6>

0801ff26 <memset>:
 801ff26:	4402      	add	r2, r0
 801ff28:	4603      	mov	r3, r0
 801ff2a:	4293      	cmp	r3, r2
 801ff2c:	d100      	bne.n	801ff30 <memset+0xa>
 801ff2e:	4770      	bx	lr
 801ff30:	f803 1b01 	strb.w	r1, [r3], #1
 801ff34:	e7f9      	b.n	801ff2a <memset+0x4>
	...

0801ff38 <_free_r>:
 801ff38:	b538      	push	{r3, r4, r5, lr}
 801ff3a:	4605      	mov	r5, r0
 801ff3c:	2900      	cmp	r1, #0
 801ff3e:	d045      	beq.n	801ffcc <_free_r+0x94>
 801ff40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ff44:	1f0c      	subs	r4, r1, #4
 801ff46:	2b00      	cmp	r3, #0
 801ff48:	bfb8      	it	lt
 801ff4a:	18e4      	addlt	r4, r4, r3
 801ff4c:	f000 feba 	bl	8020cc4 <__malloc_lock>
 801ff50:	4a1f      	ldr	r2, [pc, #124]	; (801ffd0 <_free_r+0x98>)
 801ff52:	6813      	ldr	r3, [r2, #0]
 801ff54:	4610      	mov	r0, r2
 801ff56:	b933      	cbnz	r3, 801ff66 <_free_r+0x2e>
 801ff58:	6063      	str	r3, [r4, #4]
 801ff5a:	6014      	str	r4, [r2, #0]
 801ff5c:	4628      	mov	r0, r5
 801ff5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ff62:	f000 beb0 	b.w	8020cc6 <__malloc_unlock>
 801ff66:	42a3      	cmp	r3, r4
 801ff68:	d90c      	bls.n	801ff84 <_free_r+0x4c>
 801ff6a:	6821      	ldr	r1, [r4, #0]
 801ff6c:	1862      	adds	r2, r4, r1
 801ff6e:	4293      	cmp	r3, r2
 801ff70:	bf04      	itt	eq
 801ff72:	681a      	ldreq	r2, [r3, #0]
 801ff74:	685b      	ldreq	r3, [r3, #4]
 801ff76:	6063      	str	r3, [r4, #4]
 801ff78:	bf04      	itt	eq
 801ff7a:	1852      	addeq	r2, r2, r1
 801ff7c:	6022      	streq	r2, [r4, #0]
 801ff7e:	6004      	str	r4, [r0, #0]
 801ff80:	e7ec      	b.n	801ff5c <_free_r+0x24>
 801ff82:	4613      	mov	r3, r2
 801ff84:	685a      	ldr	r2, [r3, #4]
 801ff86:	b10a      	cbz	r2, 801ff8c <_free_r+0x54>
 801ff88:	42a2      	cmp	r2, r4
 801ff8a:	d9fa      	bls.n	801ff82 <_free_r+0x4a>
 801ff8c:	6819      	ldr	r1, [r3, #0]
 801ff8e:	1858      	adds	r0, r3, r1
 801ff90:	42a0      	cmp	r0, r4
 801ff92:	d10b      	bne.n	801ffac <_free_r+0x74>
 801ff94:	6820      	ldr	r0, [r4, #0]
 801ff96:	4401      	add	r1, r0
 801ff98:	1858      	adds	r0, r3, r1
 801ff9a:	4282      	cmp	r2, r0
 801ff9c:	6019      	str	r1, [r3, #0]
 801ff9e:	d1dd      	bne.n	801ff5c <_free_r+0x24>
 801ffa0:	6810      	ldr	r0, [r2, #0]
 801ffa2:	6852      	ldr	r2, [r2, #4]
 801ffa4:	605a      	str	r2, [r3, #4]
 801ffa6:	4401      	add	r1, r0
 801ffa8:	6019      	str	r1, [r3, #0]
 801ffaa:	e7d7      	b.n	801ff5c <_free_r+0x24>
 801ffac:	d902      	bls.n	801ffb4 <_free_r+0x7c>
 801ffae:	230c      	movs	r3, #12
 801ffb0:	602b      	str	r3, [r5, #0]
 801ffb2:	e7d3      	b.n	801ff5c <_free_r+0x24>
 801ffb4:	6820      	ldr	r0, [r4, #0]
 801ffb6:	1821      	adds	r1, r4, r0
 801ffb8:	428a      	cmp	r2, r1
 801ffba:	bf04      	itt	eq
 801ffbc:	6811      	ldreq	r1, [r2, #0]
 801ffbe:	6852      	ldreq	r2, [r2, #4]
 801ffc0:	6062      	str	r2, [r4, #4]
 801ffc2:	bf04      	itt	eq
 801ffc4:	1809      	addeq	r1, r1, r0
 801ffc6:	6021      	streq	r1, [r4, #0]
 801ffc8:	605c      	str	r4, [r3, #4]
 801ffca:	e7c7      	b.n	801ff5c <_free_r+0x24>
 801ffcc:	bd38      	pop	{r3, r4, r5, pc}
 801ffce:	bf00      	nop
 801ffd0:	20009d70 	.word	0x20009d70

0801ffd4 <_malloc_r>:
 801ffd4:	b570      	push	{r4, r5, r6, lr}
 801ffd6:	1ccd      	adds	r5, r1, #3
 801ffd8:	f025 0503 	bic.w	r5, r5, #3
 801ffdc:	3508      	adds	r5, #8
 801ffde:	2d0c      	cmp	r5, #12
 801ffe0:	bf38      	it	cc
 801ffe2:	250c      	movcc	r5, #12
 801ffe4:	2d00      	cmp	r5, #0
 801ffe6:	4606      	mov	r6, r0
 801ffe8:	db01      	blt.n	801ffee <_malloc_r+0x1a>
 801ffea:	42a9      	cmp	r1, r5
 801ffec:	d903      	bls.n	801fff6 <_malloc_r+0x22>
 801ffee:	230c      	movs	r3, #12
 801fff0:	6033      	str	r3, [r6, #0]
 801fff2:	2000      	movs	r0, #0
 801fff4:	bd70      	pop	{r4, r5, r6, pc}
 801fff6:	f000 fe65 	bl	8020cc4 <__malloc_lock>
 801fffa:	4a21      	ldr	r2, [pc, #132]	; (8020080 <_malloc_r+0xac>)
 801fffc:	6814      	ldr	r4, [r2, #0]
 801fffe:	4621      	mov	r1, r4
 8020000:	b991      	cbnz	r1, 8020028 <_malloc_r+0x54>
 8020002:	4c20      	ldr	r4, [pc, #128]	; (8020084 <_malloc_r+0xb0>)
 8020004:	6823      	ldr	r3, [r4, #0]
 8020006:	b91b      	cbnz	r3, 8020010 <_malloc_r+0x3c>
 8020008:	4630      	mov	r0, r6
 802000a:	f000 fb05 	bl	8020618 <_sbrk_r>
 802000e:	6020      	str	r0, [r4, #0]
 8020010:	4629      	mov	r1, r5
 8020012:	4630      	mov	r0, r6
 8020014:	f000 fb00 	bl	8020618 <_sbrk_r>
 8020018:	1c43      	adds	r3, r0, #1
 802001a:	d124      	bne.n	8020066 <_malloc_r+0x92>
 802001c:	230c      	movs	r3, #12
 802001e:	6033      	str	r3, [r6, #0]
 8020020:	4630      	mov	r0, r6
 8020022:	f000 fe50 	bl	8020cc6 <__malloc_unlock>
 8020026:	e7e4      	b.n	801fff2 <_malloc_r+0x1e>
 8020028:	680b      	ldr	r3, [r1, #0]
 802002a:	1b5b      	subs	r3, r3, r5
 802002c:	d418      	bmi.n	8020060 <_malloc_r+0x8c>
 802002e:	2b0b      	cmp	r3, #11
 8020030:	d90f      	bls.n	8020052 <_malloc_r+0x7e>
 8020032:	600b      	str	r3, [r1, #0]
 8020034:	50cd      	str	r5, [r1, r3]
 8020036:	18cc      	adds	r4, r1, r3
 8020038:	4630      	mov	r0, r6
 802003a:	f000 fe44 	bl	8020cc6 <__malloc_unlock>
 802003e:	f104 000b 	add.w	r0, r4, #11
 8020042:	1d23      	adds	r3, r4, #4
 8020044:	f020 0007 	bic.w	r0, r0, #7
 8020048:	1ac3      	subs	r3, r0, r3
 802004a:	d0d3      	beq.n	801fff4 <_malloc_r+0x20>
 802004c:	425a      	negs	r2, r3
 802004e:	50e2      	str	r2, [r4, r3]
 8020050:	e7d0      	b.n	801fff4 <_malloc_r+0x20>
 8020052:	428c      	cmp	r4, r1
 8020054:	684b      	ldr	r3, [r1, #4]
 8020056:	bf16      	itet	ne
 8020058:	6063      	strne	r3, [r4, #4]
 802005a:	6013      	streq	r3, [r2, #0]
 802005c:	460c      	movne	r4, r1
 802005e:	e7eb      	b.n	8020038 <_malloc_r+0x64>
 8020060:	460c      	mov	r4, r1
 8020062:	6849      	ldr	r1, [r1, #4]
 8020064:	e7cc      	b.n	8020000 <_malloc_r+0x2c>
 8020066:	1cc4      	adds	r4, r0, #3
 8020068:	f024 0403 	bic.w	r4, r4, #3
 802006c:	42a0      	cmp	r0, r4
 802006e:	d005      	beq.n	802007c <_malloc_r+0xa8>
 8020070:	1a21      	subs	r1, r4, r0
 8020072:	4630      	mov	r0, r6
 8020074:	f000 fad0 	bl	8020618 <_sbrk_r>
 8020078:	3001      	adds	r0, #1
 802007a:	d0cf      	beq.n	802001c <_malloc_r+0x48>
 802007c:	6025      	str	r5, [r4, #0]
 802007e:	e7db      	b.n	8020038 <_malloc_r+0x64>
 8020080:	20009d70 	.word	0x20009d70
 8020084:	20009d74 	.word	0x20009d74

08020088 <__sfputc_r>:
 8020088:	6893      	ldr	r3, [r2, #8]
 802008a:	3b01      	subs	r3, #1
 802008c:	2b00      	cmp	r3, #0
 802008e:	b410      	push	{r4}
 8020090:	6093      	str	r3, [r2, #8]
 8020092:	da08      	bge.n	80200a6 <__sfputc_r+0x1e>
 8020094:	6994      	ldr	r4, [r2, #24]
 8020096:	42a3      	cmp	r3, r4
 8020098:	db01      	blt.n	802009e <__sfputc_r+0x16>
 802009a:	290a      	cmp	r1, #10
 802009c:	d103      	bne.n	80200a6 <__sfputc_r+0x1e>
 802009e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80200a2:	f000 bb0d 	b.w	80206c0 <__swbuf_r>
 80200a6:	6813      	ldr	r3, [r2, #0]
 80200a8:	1c58      	adds	r0, r3, #1
 80200aa:	6010      	str	r0, [r2, #0]
 80200ac:	7019      	strb	r1, [r3, #0]
 80200ae:	4608      	mov	r0, r1
 80200b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80200b4:	4770      	bx	lr

080200b6 <__sfputs_r>:
 80200b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200b8:	4606      	mov	r6, r0
 80200ba:	460f      	mov	r7, r1
 80200bc:	4614      	mov	r4, r2
 80200be:	18d5      	adds	r5, r2, r3
 80200c0:	42ac      	cmp	r4, r5
 80200c2:	d101      	bne.n	80200c8 <__sfputs_r+0x12>
 80200c4:	2000      	movs	r0, #0
 80200c6:	e007      	b.n	80200d8 <__sfputs_r+0x22>
 80200c8:	463a      	mov	r2, r7
 80200ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80200ce:	4630      	mov	r0, r6
 80200d0:	f7ff ffda 	bl	8020088 <__sfputc_r>
 80200d4:	1c43      	adds	r3, r0, #1
 80200d6:	d1f3      	bne.n	80200c0 <__sfputs_r+0xa>
 80200d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080200dc <_vfiprintf_r>:
 80200dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200e0:	460c      	mov	r4, r1
 80200e2:	b09d      	sub	sp, #116	; 0x74
 80200e4:	4617      	mov	r7, r2
 80200e6:	461d      	mov	r5, r3
 80200e8:	4606      	mov	r6, r0
 80200ea:	b118      	cbz	r0, 80200f4 <_vfiprintf_r+0x18>
 80200ec:	6983      	ldr	r3, [r0, #24]
 80200ee:	b90b      	cbnz	r3, 80200f4 <_vfiprintf_r+0x18>
 80200f0:	f000 fcfa 	bl	8020ae8 <__sinit>
 80200f4:	4b7c      	ldr	r3, [pc, #496]	; (80202e8 <_vfiprintf_r+0x20c>)
 80200f6:	429c      	cmp	r4, r3
 80200f8:	d158      	bne.n	80201ac <_vfiprintf_r+0xd0>
 80200fa:	6874      	ldr	r4, [r6, #4]
 80200fc:	89a3      	ldrh	r3, [r4, #12]
 80200fe:	0718      	lsls	r0, r3, #28
 8020100:	d55e      	bpl.n	80201c0 <_vfiprintf_r+0xe4>
 8020102:	6923      	ldr	r3, [r4, #16]
 8020104:	2b00      	cmp	r3, #0
 8020106:	d05b      	beq.n	80201c0 <_vfiprintf_r+0xe4>
 8020108:	2300      	movs	r3, #0
 802010a:	9309      	str	r3, [sp, #36]	; 0x24
 802010c:	2320      	movs	r3, #32
 802010e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020112:	2330      	movs	r3, #48	; 0x30
 8020114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020118:	9503      	str	r5, [sp, #12]
 802011a:	f04f 0b01 	mov.w	fp, #1
 802011e:	46b8      	mov	r8, r7
 8020120:	4645      	mov	r5, r8
 8020122:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020126:	b10b      	cbz	r3, 802012c <_vfiprintf_r+0x50>
 8020128:	2b25      	cmp	r3, #37	; 0x25
 802012a:	d154      	bne.n	80201d6 <_vfiprintf_r+0xfa>
 802012c:	ebb8 0a07 	subs.w	sl, r8, r7
 8020130:	d00b      	beq.n	802014a <_vfiprintf_r+0x6e>
 8020132:	4653      	mov	r3, sl
 8020134:	463a      	mov	r2, r7
 8020136:	4621      	mov	r1, r4
 8020138:	4630      	mov	r0, r6
 802013a:	f7ff ffbc 	bl	80200b6 <__sfputs_r>
 802013e:	3001      	adds	r0, #1
 8020140:	f000 80c2 	beq.w	80202c8 <_vfiprintf_r+0x1ec>
 8020144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020146:	4453      	add	r3, sl
 8020148:	9309      	str	r3, [sp, #36]	; 0x24
 802014a:	f898 3000 	ldrb.w	r3, [r8]
 802014e:	2b00      	cmp	r3, #0
 8020150:	f000 80ba 	beq.w	80202c8 <_vfiprintf_r+0x1ec>
 8020154:	2300      	movs	r3, #0
 8020156:	f04f 32ff 	mov.w	r2, #4294967295
 802015a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802015e:	9304      	str	r3, [sp, #16]
 8020160:	9307      	str	r3, [sp, #28]
 8020162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020166:	931a      	str	r3, [sp, #104]	; 0x68
 8020168:	46a8      	mov	r8, r5
 802016a:	2205      	movs	r2, #5
 802016c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8020170:	485e      	ldr	r0, [pc, #376]	; (80202ec <_vfiprintf_r+0x210>)
 8020172:	f7e0 f84d 	bl	8000210 <memchr>
 8020176:	9b04      	ldr	r3, [sp, #16]
 8020178:	bb78      	cbnz	r0, 80201da <_vfiprintf_r+0xfe>
 802017a:	06d9      	lsls	r1, r3, #27
 802017c:	bf44      	itt	mi
 802017e:	2220      	movmi	r2, #32
 8020180:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020184:	071a      	lsls	r2, r3, #28
 8020186:	bf44      	itt	mi
 8020188:	222b      	movmi	r2, #43	; 0x2b
 802018a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802018e:	782a      	ldrb	r2, [r5, #0]
 8020190:	2a2a      	cmp	r2, #42	; 0x2a
 8020192:	d02a      	beq.n	80201ea <_vfiprintf_r+0x10e>
 8020194:	9a07      	ldr	r2, [sp, #28]
 8020196:	46a8      	mov	r8, r5
 8020198:	2000      	movs	r0, #0
 802019a:	250a      	movs	r5, #10
 802019c:	4641      	mov	r1, r8
 802019e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80201a2:	3b30      	subs	r3, #48	; 0x30
 80201a4:	2b09      	cmp	r3, #9
 80201a6:	d969      	bls.n	802027c <_vfiprintf_r+0x1a0>
 80201a8:	b360      	cbz	r0, 8020204 <_vfiprintf_r+0x128>
 80201aa:	e024      	b.n	80201f6 <_vfiprintf_r+0x11a>
 80201ac:	4b50      	ldr	r3, [pc, #320]	; (80202f0 <_vfiprintf_r+0x214>)
 80201ae:	429c      	cmp	r4, r3
 80201b0:	d101      	bne.n	80201b6 <_vfiprintf_r+0xda>
 80201b2:	68b4      	ldr	r4, [r6, #8]
 80201b4:	e7a2      	b.n	80200fc <_vfiprintf_r+0x20>
 80201b6:	4b4f      	ldr	r3, [pc, #316]	; (80202f4 <_vfiprintf_r+0x218>)
 80201b8:	429c      	cmp	r4, r3
 80201ba:	bf08      	it	eq
 80201bc:	68f4      	ldreq	r4, [r6, #12]
 80201be:	e79d      	b.n	80200fc <_vfiprintf_r+0x20>
 80201c0:	4621      	mov	r1, r4
 80201c2:	4630      	mov	r0, r6
 80201c4:	f000 face 	bl	8020764 <__swsetup_r>
 80201c8:	2800      	cmp	r0, #0
 80201ca:	d09d      	beq.n	8020108 <_vfiprintf_r+0x2c>
 80201cc:	f04f 30ff 	mov.w	r0, #4294967295
 80201d0:	b01d      	add	sp, #116	; 0x74
 80201d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201d6:	46a8      	mov	r8, r5
 80201d8:	e7a2      	b.n	8020120 <_vfiprintf_r+0x44>
 80201da:	4a44      	ldr	r2, [pc, #272]	; (80202ec <_vfiprintf_r+0x210>)
 80201dc:	1a80      	subs	r0, r0, r2
 80201de:	fa0b f000 	lsl.w	r0, fp, r0
 80201e2:	4318      	orrs	r0, r3
 80201e4:	9004      	str	r0, [sp, #16]
 80201e6:	4645      	mov	r5, r8
 80201e8:	e7be      	b.n	8020168 <_vfiprintf_r+0x8c>
 80201ea:	9a03      	ldr	r2, [sp, #12]
 80201ec:	1d11      	adds	r1, r2, #4
 80201ee:	6812      	ldr	r2, [r2, #0]
 80201f0:	9103      	str	r1, [sp, #12]
 80201f2:	2a00      	cmp	r2, #0
 80201f4:	db01      	blt.n	80201fa <_vfiprintf_r+0x11e>
 80201f6:	9207      	str	r2, [sp, #28]
 80201f8:	e004      	b.n	8020204 <_vfiprintf_r+0x128>
 80201fa:	4252      	negs	r2, r2
 80201fc:	f043 0302 	orr.w	r3, r3, #2
 8020200:	9207      	str	r2, [sp, #28]
 8020202:	9304      	str	r3, [sp, #16]
 8020204:	f898 3000 	ldrb.w	r3, [r8]
 8020208:	2b2e      	cmp	r3, #46	; 0x2e
 802020a:	d10e      	bne.n	802022a <_vfiprintf_r+0x14e>
 802020c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8020210:	2b2a      	cmp	r3, #42	; 0x2a
 8020212:	d138      	bne.n	8020286 <_vfiprintf_r+0x1aa>
 8020214:	9b03      	ldr	r3, [sp, #12]
 8020216:	1d1a      	adds	r2, r3, #4
 8020218:	681b      	ldr	r3, [r3, #0]
 802021a:	9203      	str	r2, [sp, #12]
 802021c:	2b00      	cmp	r3, #0
 802021e:	bfb8      	it	lt
 8020220:	f04f 33ff 	movlt.w	r3, #4294967295
 8020224:	f108 0802 	add.w	r8, r8, #2
 8020228:	9305      	str	r3, [sp, #20]
 802022a:	4d33      	ldr	r5, [pc, #204]	; (80202f8 <_vfiprintf_r+0x21c>)
 802022c:	f898 1000 	ldrb.w	r1, [r8]
 8020230:	2203      	movs	r2, #3
 8020232:	4628      	mov	r0, r5
 8020234:	f7df ffec 	bl	8000210 <memchr>
 8020238:	b140      	cbz	r0, 802024c <_vfiprintf_r+0x170>
 802023a:	2340      	movs	r3, #64	; 0x40
 802023c:	1b40      	subs	r0, r0, r5
 802023e:	fa03 f000 	lsl.w	r0, r3, r0
 8020242:	9b04      	ldr	r3, [sp, #16]
 8020244:	4303      	orrs	r3, r0
 8020246:	f108 0801 	add.w	r8, r8, #1
 802024a:	9304      	str	r3, [sp, #16]
 802024c:	f898 1000 	ldrb.w	r1, [r8]
 8020250:	482a      	ldr	r0, [pc, #168]	; (80202fc <_vfiprintf_r+0x220>)
 8020252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020256:	2206      	movs	r2, #6
 8020258:	f108 0701 	add.w	r7, r8, #1
 802025c:	f7df ffd8 	bl	8000210 <memchr>
 8020260:	2800      	cmp	r0, #0
 8020262:	d037      	beq.n	80202d4 <_vfiprintf_r+0x1f8>
 8020264:	4b26      	ldr	r3, [pc, #152]	; (8020300 <_vfiprintf_r+0x224>)
 8020266:	bb1b      	cbnz	r3, 80202b0 <_vfiprintf_r+0x1d4>
 8020268:	9b03      	ldr	r3, [sp, #12]
 802026a:	3307      	adds	r3, #7
 802026c:	f023 0307 	bic.w	r3, r3, #7
 8020270:	3308      	adds	r3, #8
 8020272:	9303      	str	r3, [sp, #12]
 8020274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020276:	444b      	add	r3, r9
 8020278:	9309      	str	r3, [sp, #36]	; 0x24
 802027a:	e750      	b.n	802011e <_vfiprintf_r+0x42>
 802027c:	fb05 3202 	mla	r2, r5, r2, r3
 8020280:	2001      	movs	r0, #1
 8020282:	4688      	mov	r8, r1
 8020284:	e78a      	b.n	802019c <_vfiprintf_r+0xc0>
 8020286:	2300      	movs	r3, #0
 8020288:	f108 0801 	add.w	r8, r8, #1
 802028c:	9305      	str	r3, [sp, #20]
 802028e:	4619      	mov	r1, r3
 8020290:	250a      	movs	r5, #10
 8020292:	4640      	mov	r0, r8
 8020294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020298:	3a30      	subs	r2, #48	; 0x30
 802029a:	2a09      	cmp	r2, #9
 802029c:	d903      	bls.n	80202a6 <_vfiprintf_r+0x1ca>
 802029e:	2b00      	cmp	r3, #0
 80202a0:	d0c3      	beq.n	802022a <_vfiprintf_r+0x14e>
 80202a2:	9105      	str	r1, [sp, #20]
 80202a4:	e7c1      	b.n	802022a <_vfiprintf_r+0x14e>
 80202a6:	fb05 2101 	mla	r1, r5, r1, r2
 80202aa:	2301      	movs	r3, #1
 80202ac:	4680      	mov	r8, r0
 80202ae:	e7f0      	b.n	8020292 <_vfiprintf_r+0x1b6>
 80202b0:	ab03      	add	r3, sp, #12
 80202b2:	9300      	str	r3, [sp, #0]
 80202b4:	4622      	mov	r2, r4
 80202b6:	4b13      	ldr	r3, [pc, #76]	; (8020304 <_vfiprintf_r+0x228>)
 80202b8:	a904      	add	r1, sp, #16
 80202ba:	4630      	mov	r0, r6
 80202bc:	f3af 8000 	nop.w
 80202c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80202c4:	4681      	mov	r9, r0
 80202c6:	d1d5      	bne.n	8020274 <_vfiprintf_r+0x198>
 80202c8:	89a3      	ldrh	r3, [r4, #12]
 80202ca:	065b      	lsls	r3, r3, #25
 80202cc:	f53f af7e 	bmi.w	80201cc <_vfiprintf_r+0xf0>
 80202d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80202d2:	e77d      	b.n	80201d0 <_vfiprintf_r+0xf4>
 80202d4:	ab03      	add	r3, sp, #12
 80202d6:	9300      	str	r3, [sp, #0]
 80202d8:	4622      	mov	r2, r4
 80202da:	4b0a      	ldr	r3, [pc, #40]	; (8020304 <_vfiprintf_r+0x228>)
 80202dc:	a904      	add	r1, sp, #16
 80202de:	4630      	mov	r0, r6
 80202e0:	f000 f888 	bl	80203f4 <_printf_i>
 80202e4:	e7ec      	b.n	80202c0 <_vfiprintf_r+0x1e4>
 80202e6:	bf00      	nop
 80202e8:	08023818 	.word	0x08023818
 80202ec:	080237c4 	.word	0x080237c4
 80202f0:	08023838 	.word	0x08023838
 80202f4:	080237f8 	.word	0x080237f8
 80202f8:	080237ca 	.word	0x080237ca
 80202fc:	080237ce 	.word	0x080237ce
 8020300:	00000000 	.word	0x00000000
 8020304:	080200b7 	.word	0x080200b7

08020308 <_printf_common>:
 8020308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802030c:	4691      	mov	r9, r2
 802030e:	461f      	mov	r7, r3
 8020310:	688a      	ldr	r2, [r1, #8]
 8020312:	690b      	ldr	r3, [r1, #16]
 8020314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020318:	4293      	cmp	r3, r2
 802031a:	bfb8      	it	lt
 802031c:	4613      	movlt	r3, r2
 802031e:	f8c9 3000 	str.w	r3, [r9]
 8020322:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020326:	4606      	mov	r6, r0
 8020328:	460c      	mov	r4, r1
 802032a:	b112      	cbz	r2, 8020332 <_printf_common+0x2a>
 802032c:	3301      	adds	r3, #1
 802032e:	f8c9 3000 	str.w	r3, [r9]
 8020332:	6823      	ldr	r3, [r4, #0]
 8020334:	0699      	lsls	r1, r3, #26
 8020336:	bf42      	ittt	mi
 8020338:	f8d9 3000 	ldrmi.w	r3, [r9]
 802033c:	3302      	addmi	r3, #2
 802033e:	f8c9 3000 	strmi.w	r3, [r9]
 8020342:	6825      	ldr	r5, [r4, #0]
 8020344:	f015 0506 	ands.w	r5, r5, #6
 8020348:	d107      	bne.n	802035a <_printf_common+0x52>
 802034a:	f104 0a19 	add.w	sl, r4, #25
 802034e:	68e3      	ldr	r3, [r4, #12]
 8020350:	f8d9 2000 	ldr.w	r2, [r9]
 8020354:	1a9b      	subs	r3, r3, r2
 8020356:	42ab      	cmp	r3, r5
 8020358:	dc28      	bgt.n	80203ac <_printf_common+0xa4>
 802035a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802035e:	6822      	ldr	r2, [r4, #0]
 8020360:	3300      	adds	r3, #0
 8020362:	bf18      	it	ne
 8020364:	2301      	movne	r3, #1
 8020366:	0692      	lsls	r2, r2, #26
 8020368:	d42d      	bmi.n	80203c6 <_printf_common+0xbe>
 802036a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802036e:	4639      	mov	r1, r7
 8020370:	4630      	mov	r0, r6
 8020372:	47c0      	blx	r8
 8020374:	3001      	adds	r0, #1
 8020376:	d020      	beq.n	80203ba <_printf_common+0xb2>
 8020378:	6823      	ldr	r3, [r4, #0]
 802037a:	68e5      	ldr	r5, [r4, #12]
 802037c:	f8d9 2000 	ldr.w	r2, [r9]
 8020380:	f003 0306 	and.w	r3, r3, #6
 8020384:	2b04      	cmp	r3, #4
 8020386:	bf08      	it	eq
 8020388:	1aad      	subeq	r5, r5, r2
 802038a:	68a3      	ldr	r3, [r4, #8]
 802038c:	6922      	ldr	r2, [r4, #16]
 802038e:	bf0c      	ite	eq
 8020390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020394:	2500      	movne	r5, #0
 8020396:	4293      	cmp	r3, r2
 8020398:	bfc4      	itt	gt
 802039a:	1a9b      	subgt	r3, r3, r2
 802039c:	18ed      	addgt	r5, r5, r3
 802039e:	f04f 0900 	mov.w	r9, #0
 80203a2:	341a      	adds	r4, #26
 80203a4:	454d      	cmp	r5, r9
 80203a6:	d11a      	bne.n	80203de <_printf_common+0xd6>
 80203a8:	2000      	movs	r0, #0
 80203aa:	e008      	b.n	80203be <_printf_common+0xb6>
 80203ac:	2301      	movs	r3, #1
 80203ae:	4652      	mov	r2, sl
 80203b0:	4639      	mov	r1, r7
 80203b2:	4630      	mov	r0, r6
 80203b4:	47c0      	blx	r8
 80203b6:	3001      	adds	r0, #1
 80203b8:	d103      	bne.n	80203c2 <_printf_common+0xba>
 80203ba:	f04f 30ff 	mov.w	r0, #4294967295
 80203be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203c2:	3501      	adds	r5, #1
 80203c4:	e7c3      	b.n	802034e <_printf_common+0x46>
 80203c6:	18e1      	adds	r1, r4, r3
 80203c8:	1c5a      	adds	r2, r3, #1
 80203ca:	2030      	movs	r0, #48	; 0x30
 80203cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80203d0:	4422      	add	r2, r4
 80203d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80203d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80203da:	3302      	adds	r3, #2
 80203dc:	e7c5      	b.n	802036a <_printf_common+0x62>
 80203de:	2301      	movs	r3, #1
 80203e0:	4622      	mov	r2, r4
 80203e2:	4639      	mov	r1, r7
 80203e4:	4630      	mov	r0, r6
 80203e6:	47c0      	blx	r8
 80203e8:	3001      	adds	r0, #1
 80203ea:	d0e6      	beq.n	80203ba <_printf_common+0xb2>
 80203ec:	f109 0901 	add.w	r9, r9, #1
 80203f0:	e7d8      	b.n	80203a4 <_printf_common+0x9c>
	...

080203f4 <_printf_i>:
 80203f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80203f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80203fc:	460c      	mov	r4, r1
 80203fe:	7e09      	ldrb	r1, [r1, #24]
 8020400:	b085      	sub	sp, #20
 8020402:	296e      	cmp	r1, #110	; 0x6e
 8020404:	4617      	mov	r7, r2
 8020406:	4606      	mov	r6, r0
 8020408:	4698      	mov	r8, r3
 802040a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802040c:	f000 80b3 	beq.w	8020576 <_printf_i+0x182>
 8020410:	d822      	bhi.n	8020458 <_printf_i+0x64>
 8020412:	2963      	cmp	r1, #99	; 0x63
 8020414:	d036      	beq.n	8020484 <_printf_i+0x90>
 8020416:	d80a      	bhi.n	802042e <_printf_i+0x3a>
 8020418:	2900      	cmp	r1, #0
 802041a:	f000 80b9 	beq.w	8020590 <_printf_i+0x19c>
 802041e:	2958      	cmp	r1, #88	; 0x58
 8020420:	f000 8083 	beq.w	802052a <_printf_i+0x136>
 8020424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020428:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802042c:	e032      	b.n	8020494 <_printf_i+0xa0>
 802042e:	2964      	cmp	r1, #100	; 0x64
 8020430:	d001      	beq.n	8020436 <_printf_i+0x42>
 8020432:	2969      	cmp	r1, #105	; 0x69
 8020434:	d1f6      	bne.n	8020424 <_printf_i+0x30>
 8020436:	6820      	ldr	r0, [r4, #0]
 8020438:	6813      	ldr	r3, [r2, #0]
 802043a:	0605      	lsls	r5, r0, #24
 802043c:	f103 0104 	add.w	r1, r3, #4
 8020440:	d52a      	bpl.n	8020498 <_printf_i+0xa4>
 8020442:	681b      	ldr	r3, [r3, #0]
 8020444:	6011      	str	r1, [r2, #0]
 8020446:	2b00      	cmp	r3, #0
 8020448:	da03      	bge.n	8020452 <_printf_i+0x5e>
 802044a:	222d      	movs	r2, #45	; 0x2d
 802044c:	425b      	negs	r3, r3
 802044e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8020452:	486f      	ldr	r0, [pc, #444]	; (8020610 <_printf_i+0x21c>)
 8020454:	220a      	movs	r2, #10
 8020456:	e039      	b.n	80204cc <_printf_i+0xd8>
 8020458:	2973      	cmp	r1, #115	; 0x73
 802045a:	f000 809d 	beq.w	8020598 <_printf_i+0x1a4>
 802045e:	d808      	bhi.n	8020472 <_printf_i+0x7e>
 8020460:	296f      	cmp	r1, #111	; 0x6f
 8020462:	d020      	beq.n	80204a6 <_printf_i+0xb2>
 8020464:	2970      	cmp	r1, #112	; 0x70
 8020466:	d1dd      	bne.n	8020424 <_printf_i+0x30>
 8020468:	6823      	ldr	r3, [r4, #0]
 802046a:	f043 0320 	orr.w	r3, r3, #32
 802046e:	6023      	str	r3, [r4, #0]
 8020470:	e003      	b.n	802047a <_printf_i+0x86>
 8020472:	2975      	cmp	r1, #117	; 0x75
 8020474:	d017      	beq.n	80204a6 <_printf_i+0xb2>
 8020476:	2978      	cmp	r1, #120	; 0x78
 8020478:	d1d4      	bne.n	8020424 <_printf_i+0x30>
 802047a:	2378      	movs	r3, #120	; 0x78
 802047c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020480:	4864      	ldr	r0, [pc, #400]	; (8020614 <_printf_i+0x220>)
 8020482:	e055      	b.n	8020530 <_printf_i+0x13c>
 8020484:	6813      	ldr	r3, [r2, #0]
 8020486:	1d19      	adds	r1, r3, #4
 8020488:	681b      	ldr	r3, [r3, #0]
 802048a:	6011      	str	r1, [r2, #0]
 802048c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020494:	2301      	movs	r3, #1
 8020496:	e08c      	b.n	80205b2 <_printf_i+0x1be>
 8020498:	681b      	ldr	r3, [r3, #0]
 802049a:	6011      	str	r1, [r2, #0]
 802049c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80204a0:	bf18      	it	ne
 80204a2:	b21b      	sxthne	r3, r3
 80204a4:	e7cf      	b.n	8020446 <_printf_i+0x52>
 80204a6:	6813      	ldr	r3, [r2, #0]
 80204a8:	6825      	ldr	r5, [r4, #0]
 80204aa:	1d18      	adds	r0, r3, #4
 80204ac:	6010      	str	r0, [r2, #0]
 80204ae:	0628      	lsls	r0, r5, #24
 80204b0:	d501      	bpl.n	80204b6 <_printf_i+0xc2>
 80204b2:	681b      	ldr	r3, [r3, #0]
 80204b4:	e002      	b.n	80204bc <_printf_i+0xc8>
 80204b6:	0668      	lsls	r0, r5, #25
 80204b8:	d5fb      	bpl.n	80204b2 <_printf_i+0xbe>
 80204ba:	881b      	ldrh	r3, [r3, #0]
 80204bc:	4854      	ldr	r0, [pc, #336]	; (8020610 <_printf_i+0x21c>)
 80204be:	296f      	cmp	r1, #111	; 0x6f
 80204c0:	bf14      	ite	ne
 80204c2:	220a      	movne	r2, #10
 80204c4:	2208      	moveq	r2, #8
 80204c6:	2100      	movs	r1, #0
 80204c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80204cc:	6865      	ldr	r5, [r4, #4]
 80204ce:	60a5      	str	r5, [r4, #8]
 80204d0:	2d00      	cmp	r5, #0
 80204d2:	f2c0 8095 	blt.w	8020600 <_printf_i+0x20c>
 80204d6:	6821      	ldr	r1, [r4, #0]
 80204d8:	f021 0104 	bic.w	r1, r1, #4
 80204dc:	6021      	str	r1, [r4, #0]
 80204de:	2b00      	cmp	r3, #0
 80204e0:	d13d      	bne.n	802055e <_printf_i+0x16a>
 80204e2:	2d00      	cmp	r5, #0
 80204e4:	f040 808e 	bne.w	8020604 <_printf_i+0x210>
 80204e8:	4665      	mov	r5, ip
 80204ea:	2a08      	cmp	r2, #8
 80204ec:	d10b      	bne.n	8020506 <_printf_i+0x112>
 80204ee:	6823      	ldr	r3, [r4, #0]
 80204f0:	07db      	lsls	r3, r3, #31
 80204f2:	d508      	bpl.n	8020506 <_printf_i+0x112>
 80204f4:	6923      	ldr	r3, [r4, #16]
 80204f6:	6862      	ldr	r2, [r4, #4]
 80204f8:	429a      	cmp	r2, r3
 80204fa:	bfde      	ittt	le
 80204fc:	2330      	movle	r3, #48	; 0x30
 80204fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020502:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020506:	ebac 0305 	sub.w	r3, ip, r5
 802050a:	6123      	str	r3, [r4, #16]
 802050c:	f8cd 8000 	str.w	r8, [sp]
 8020510:	463b      	mov	r3, r7
 8020512:	aa03      	add	r2, sp, #12
 8020514:	4621      	mov	r1, r4
 8020516:	4630      	mov	r0, r6
 8020518:	f7ff fef6 	bl	8020308 <_printf_common>
 802051c:	3001      	adds	r0, #1
 802051e:	d14d      	bne.n	80205bc <_printf_i+0x1c8>
 8020520:	f04f 30ff 	mov.w	r0, #4294967295
 8020524:	b005      	add	sp, #20
 8020526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802052a:	4839      	ldr	r0, [pc, #228]	; (8020610 <_printf_i+0x21c>)
 802052c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8020530:	6813      	ldr	r3, [r2, #0]
 8020532:	6821      	ldr	r1, [r4, #0]
 8020534:	1d1d      	adds	r5, r3, #4
 8020536:	681b      	ldr	r3, [r3, #0]
 8020538:	6015      	str	r5, [r2, #0]
 802053a:	060a      	lsls	r2, r1, #24
 802053c:	d50b      	bpl.n	8020556 <_printf_i+0x162>
 802053e:	07ca      	lsls	r2, r1, #31
 8020540:	bf44      	itt	mi
 8020542:	f041 0120 	orrmi.w	r1, r1, #32
 8020546:	6021      	strmi	r1, [r4, #0]
 8020548:	b91b      	cbnz	r3, 8020552 <_printf_i+0x15e>
 802054a:	6822      	ldr	r2, [r4, #0]
 802054c:	f022 0220 	bic.w	r2, r2, #32
 8020550:	6022      	str	r2, [r4, #0]
 8020552:	2210      	movs	r2, #16
 8020554:	e7b7      	b.n	80204c6 <_printf_i+0xd2>
 8020556:	064d      	lsls	r5, r1, #25
 8020558:	bf48      	it	mi
 802055a:	b29b      	uxthmi	r3, r3
 802055c:	e7ef      	b.n	802053e <_printf_i+0x14a>
 802055e:	4665      	mov	r5, ip
 8020560:	fbb3 f1f2 	udiv	r1, r3, r2
 8020564:	fb02 3311 	mls	r3, r2, r1, r3
 8020568:	5cc3      	ldrb	r3, [r0, r3]
 802056a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802056e:	460b      	mov	r3, r1
 8020570:	2900      	cmp	r1, #0
 8020572:	d1f5      	bne.n	8020560 <_printf_i+0x16c>
 8020574:	e7b9      	b.n	80204ea <_printf_i+0xf6>
 8020576:	6813      	ldr	r3, [r2, #0]
 8020578:	6825      	ldr	r5, [r4, #0]
 802057a:	6961      	ldr	r1, [r4, #20]
 802057c:	1d18      	adds	r0, r3, #4
 802057e:	6010      	str	r0, [r2, #0]
 8020580:	0628      	lsls	r0, r5, #24
 8020582:	681b      	ldr	r3, [r3, #0]
 8020584:	d501      	bpl.n	802058a <_printf_i+0x196>
 8020586:	6019      	str	r1, [r3, #0]
 8020588:	e002      	b.n	8020590 <_printf_i+0x19c>
 802058a:	066a      	lsls	r2, r5, #25
 802058c:	d5fb      	bpl.n	8020586 <_printf_i+0x192>
 802058e:	8019      	strh	r1, [r3, #0]
 8020590:	2300      	movs	r3, #0
 8020592:	6123      	str	r3, [r4, #16]
 8020594:	4665      	mov	r5, ip
 8020596:	e7b9      	b.n	802050c <_printf_i+0x118>
 8020598:	6813      	ldr	r3, [r2, #0]
 802059a:	1d19      	adds	r1, r3, #4
 802059c:	6011      	str	r1, [r2, #0]
 802059e:	681d      	ldr	r5, [r3, #0]
 80205a0:	6862      	ldr	r2, [r4, #4]
 80205a2:	2100      	movs	r1, #0
 80205a4:	4628      	mov	r0, r5
 80205a6:	f7df fe33 	bl	8000210 <memchr>
 80205aa:	b108      	cbz	r0, 80205b0 <_printf_i+0x1bc>
 80205ac:	1b40      	subs	r0, r0, r5
 80205ae:	6060      	str	r0, [r4, #4]
 80205b0:	6863      	ldr	r3, [r4, #4]
 80205b2:	6123      	str	r3, [r4, #16]
 80205b4:	2300      	movs	r3, #0
 80205b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80205ba:	e7a7      	b.n	802050c <_printf_i+0x118>
 80205bc:	6923      	ldr	r3, [r4, #16]
 80205be:	462a      	mov	r2, r5
 80205c0:	4639      	mov	r1, r7
 80205c2:	4630      	mov	r0, r6
 80205c4:	47c0      	blx	r8
 80205c6:	3001      	adds	r0, #1
 80205c8:	d0aa      	beq.n	8020520 <_printf_i+0x12c>
 80205ca:	6823      	ldr	r3, [r4, #0]
 80205cc:	079b      	lsls	r3, r3, #30
 80205ce:	d413      	bmi.n	80205f8 <_printf_i+0x204>
 80205d0:	68e0      	ldr	r0, [r4, #12]
 80205d2:	9b03      	ldr	r3, [sp, #12]
 80205d4:	4298      	cmp	r0, r3
 80205d6:	bfb8      	it	lt
 80205d8:	4618      	movlt	r0, r3
 80205da:	e7a3      	b.n	8020524 <_printf_i+0x130>
 80205dc:	2301      	movs	r3, #1
 80205de:	464a      	mov	r2, r9
 80205e0:	4639      	mov	r1, r7
 80205e2:	4630      	mov	r0, r6
 80205e4:	47c0      	blx	r8
 80205e6:	3001      	adds	r0, #1
 80205e8:	d09a      	beq.n	8020520 <_printf_i+0x12c>
 80205ea:	3501      	adds	r5, #1
 80205ec:	68e3      	ldr	r3, [r4, #12]
 80205ee:	9a03      	ldr	r2, [sp, #12]
 80205f0:	1a9b      	subs	r3, r3, r2
 80205f2:	42ab      	cmp	r3, r5
 80205f4:	dcf2      	bgt.n	80205dc <_printf_i+0x1e8>
 80205f6:	e7eb      	b.n	80205d0 <_printf_i+0x1dc>
 80205f8:	2500      	movs	r5, #0
 80205fa:	f104 0919 	add.w	r9, r4, #25
 80205fe:	e7f5      	b.n	80205ec <_printf_i+0x1f8>
 8020600:	2b00      	cmp	r3, #0
 8020602:	d1ac      	bne.n	802055e <_printf_i+0x16a>
 8020604:	7803      	ldrb	r3, [r0, #0]
 8020606:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802060a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802060e:	e76c      	b.n	80204ea <_printf_i+0xf6>
 8020610:	080237d5 	.word	0x080237d5
 8020614:	080237e6 	.word	0x080237e6

08020618 <_sbrk_r>:
 8020618:	b538      	push	{r3, r4, r5, lr}
 802061a:	4c06      	ldr	r4, [pc, #24]	; (8020634 <_sbrk_r+0x1c>)
 802061c:	2300      	movs	r3, #0
 802061e:	4605      	mov	r5, r0
 8020620:	4608      	mov	r0, r1
 8020622:	6023      	str	r3, [r4, #0]
 8020624:	f7f8 f986 	bl	8018934 <_sbrk>
 8020628:	1c43      	adds	r3, r0, #1
 802062a:	d102      	bne.n	8020632 <_sbrk_r+0x1a>
 802062c:	6823      	ldr	r3, [r4, #0]
 802062e:	b103      	cbz	r3, 8020632 <_sbrk_r+0x1a>
 8020630:	602b      	str	r3, [r5, #0]
 8020632:	bd38      	pop	{r3, r4, r5, pc}
 8020634:	2000a954 	.word	0x2000a954

08020638 <_raise_r>:
 8020638:	291f      	cmp	r1, #31
 802063a:	b538      	push	{r3, r4, r5, lr}
 802063c:	4604      	mov	r4, r0
 802063e:	460d      	mov	r5, r1
 8020640:	d904      	bls.n	802064c <_raise_r+0x14>
 8020642:	2316      	movs	r3, #22
 8020644:	6003      	str	r3, [r0, #0]
 8020646:	f04f 30ff 	mov.w	r0, #4294967295
 802064a:	bd38      	pop	{r3, r4, r5, pc}
 802064c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802064e:	b112      	cbz	r2, 8020656 <_raise_r+0x1e>
 8020650:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020654:	b94b      	cbnz	r3, 802066a <_raise_r+0x32>
 8020656:	4620      	mov	r0, r4
 8020658:	f000 f830 	bl	80206bc <_getpid_r>
 802065c:	462a      	mov	r2, r5
 802065e:	4601      	mov	r1, r0
 8020660:	4620      	mov	r0, r4
 8020662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020666:	f000 b817 	b.w	8020698 <_kill_r>
 802066a:	2b01      	cmp	r3, #1
 802066c:	d00a      	beq.n	8020684 <_raise_r+0x4c>
 802066e:	1c59      	adds	r1, r3, #1
 8020670:	d103      	bne.n	802067a <_raise_r+0x42>
 8020672:	2316      	movs	r3, #22
 8020674:	6003      	str	r3, [r0, #0]
 8020676:	2001      	movs	r0, #1
 8020678:	e7e7      	b.n	802064a <_raise_r+0x12>
 802067a:	2400      	movs	r4, #0
 802067c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020680:	4628      	mov	r0, r5
 8020682:	4798      	blx	r3
 8020684:	2000      	movs	r0, #0
 8020686:	e7e0      	b.n	802064a <_raise_r+0x12>

08020688 <raise>:
 8020688:	4b02      	ldr	r3, [pc, #8]	; (8020694 <raise+0xc>)
 802068a:	4601      	mov	r1, r0
 802068c:	6818      	ldr	r0, [r3, #0]
 802068e:	f7ff bfd3 	b.w	8020638 <_raise_r>
 8020692:	bf00      	nop
 8020694:	20000050 	.word	0x20000050

08020698 <_kill_r>:
 8020698:	b538      	push	{r3, r4, r5, lr}
 802069a:	4c07      	ldr	r4, [pc, #28]	; (80206b8 <_kill_r+0x20>)
 802069c:	2300      	movs	r3, #0
 802069e:	4605      	mov	r5, r0
 80206a0:	4608      	mov	r0, r1
 80206a2:	4611      	mov	r1, r2
 80206a4:	6023      	str	r3, [r4, #0]
 80206a6:	f7f8 f8bd 	bl	8018824 <_kill>
 80206aa:	1c43      	adds	r3, r0, #1
 80206ac:	d102      	bne.n	80206b4 <_kill_r+0x1c>
 80206ae:	6823      	ldr	r3, [r4, #0]
 80206b0:	b103      	cbz	r3, 80206b4 <_kill_r+0x1c>
 80206b2:	602b      	str	r3, [r5, #0]
 80206b4:	bd38      	pop	{r3, r4, r5, pc}
 80206b6:	bf00      	nop
 80206b8:	2000a954 	.word	0x2000a954

080206bc <_getpid_r>:
 80206bc:	f7f8 b8aa 	b.w	8018814 <_getpid>

080206c0 <__swbuf_r>:
 80206c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206c2:	460e      	mov	r6, r1
 80206c4:	4614      	mov	r4, r2
 80206c6:	4605      	mov	r5, r0
 80206c8:	b118      	cbz	r0, 80206d2 <__swbuf_r+0x12>
 80206ca:	6983      	ldr	r3, [r0, #24]
 80206cc:	b90b      	cbnz	r3, 80206d2 <__swbuf_r+0x12>
 80206ce:	f000 fa0b 	bl	8020ae8 <__sinit>
 80206d2:	4b21      	ldr	r3, [pc, #132]	; (8020758 <__swbuf_r+0x98>)
 80206d4:	429c      	cmp	r4, r3
 80206d6:	d12a      	bne.n	802072e <__swbuf_r+0x6e>
 80206d8:	686c      	ldr	r4, [r5, #4]
 80206da:	69a3      	ldr	r3, [r4, #24]
 80206dc:	60a3      	str	r3, [r4, #8]
 80206de:	89a3      	ldrh	r3, [r4, #12]
 80206e0:	071a      	lsls	r2, r3, #28
 80206e2:	d52e      	bpl.n	8020742 <__swbuf_r+0x82>
 80206e4:	6923      	ldr	r3, [r4, #16]
 80206e6:	b363      	cbz	r3, 8020742 <__swbuf_r+0x82>
 80206e8:	6923      	ldr	r3, [r4, #16]
 80206ea:	6820      	ldr	r0, [r4, #0]
 80206ec:	1ac0      	subs	r0, r0, r3
 80206ee:	6963      	ldr	r3, [r4, #20]
 80206f0:	b2f6      	uxtb	r6, r6
 80206f2:	4283      	cmp	r3, r0
 80206f4:	4637      	mov	r7, r6
 80206f6:	dc04      	bgt.n	8020702 <__swbuf_r+0x42>
 80206f8:	4621      	mov	r1, r4
 80206fa:	4628      	mov	r0, r5
 80206fc:	f000 f98a 	bl	8020a14 <_fflush_r>
 8020700:	bb28      	cbnz	r0, 802074e <__swbuf_r+0x8e>
 8020702:	68a3      	ldr	r3, [r4, #8]
 8020704:	3b01      	subs	r3, #1
 8020706:	60a3      	str	r3, [r4, #8]
 8020708:	6823      	ldr	r3, [r4, #0]
 802070a:	1c5a      	adds	r2, r3, #1
 802070c:	6022      	str	r2, [r4, #0]
 802070e:	701e      	strb	r6, [r3, #0]
 8020710:	6963      	ldr	r3, [r4, #20]
 8020712:	3001      	adds	r0, #1
 8020714:	4283      	cmp	r3, r0
 8020716:	d004      	beq.n	8020722 <__swbuf_r+0x62>
 8020718:	89a3      	ldrh	r3, [r4, #12]
 802071a:	07db      	lsls	r3, r3, #31
 802071c:	d519      	bpl.n	8020752 <__swbuf_r+0x92>
 802071e:	2e0a      	cmp	r6, #10
 8020720:	d117      	bne.n	8020752 <__swbuf_r+0x92>
 8020722:	4621      	mov	r1, r4
 8020724:	4628      	mov	r0, r5
 8020726:	f000 f975 	bl	8020a14 <_fflush_r>
 802072a:	b190      	cbz	r0, 8020752 <__swbuf_r+0x92>
 802072c:	e00f      	b.n	802074e <__swbuf_r+0x8e>
 802072e:	4b0b      	ldr	r3, [pc, #44]	; (802075c <__swbuf_r+0x9c>)
 8020730:	429c      	cmp	r4, r3
 8020732:	d101      	bne.n	8020738 <__swbuf_r+0x78>
 8020734:	68ac      	ldr	r4, [r5, #8]
 8020736:	e7d0      	b.n	80206da <__swbuf_r+0x1a>
 8020738:	4b09      	ldr	r3, [pc, #36]	; (8020760 <__swbuf_r+0xa0>)
 802073a:	429c      	cmp	r4, r3
 802073c:	bf08      	it	eq
 802073e:	68ec      	ldreq	r4, [r5, #12]
 8020740:	e7cb      	b.n	80206da <__swbuf_r+0x1a>
 8020742:	4621      	mov	r1, r4
 8020744:	4628      	mov	r0, r5
 8020746:	f000 f80d 	bl	8020764 <__swsetup_r>
 802074a:	2800      	cmp	r0, #0
 802074c:	d0cc      	beq.n	80206e8 <__swbuf_r+0x28>
 802074e:	f04f 37ff 	mov.w	r7, #4294967295
 8020752:	4638      	mov	r0, r7
 8020754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020756:	bf00      	nop
 8020758:	08023818 	.word	0x08023818
 802075c:	08023838 	.word	0x08023838
 8020760:	080237f8 	.word	0x080237f8

08020764 <__swsetup_r>:
 8020764:	4b32      	ldr	r3, [pc, #200]	; (8020830 <__swsetup_r+0xcc>)
 8020766:	b570      	push	{r4, r5, r6, lr}
 8020768:	681d      	ldr	r5, [r3, #0]
 802076a:	4606      	mov	r6, r0
 802076c:	460c      	mov	r4, r1
 802076e:	b125      	cbz	r5, 802077a <__swsetup_r+0x16>
 8020770:	69ab      	ldr	r3, [r5, #24]
 8020772:	b913      	cbnz	r3, 802077a <__swsetup_r+0x16>
 8020774:	4628      	mov	r0, r5
 8020776:	f000 f9b7 	bl	8020ae8 <__sinit>
 802077a:	4b2e      	ldr	r3, [pc, #184]	; (8020834 <__swsetup_r+0xd0>)
 802077c:	429c      	cmp	r4, r3
 802077e:	d10f      	bne.n	80207a0 <__swsetup_r+0x3c>
 8020780:	686c      	ldr	r4, [r5, #4]
 8020782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020786:	b29a      	uxth	r2, r3
 8020788:	0715      	lsls	r5, r2, #28
 802078a:	d42c      	bmi.n	80207e6 <__swsetup_r+0x82>
 802078c:	06d0      	lsls	r0, r2, #27
 802078e:	d411      	bmi.n	80207b4 <__swsetup_r+0x50>
 8020790:	2209      	movs	r2, #9
 8020792:	6032      	str	r2, [r6, #0]
 8020794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020798:	81a3      	strh	r3, [r4, #12]
 802079a:	f04f 30ff 	mov.w	r0, #4294967295
 802079e:	e03e      	b.n	802081e <__swsetup_r+0xba>
 80207a0:	4b25      	ldr	r3, [pc, #148]	; (8020838 <__swsetup_r+0xd4>)
 80207a2:	429c      	cmp	r4, r3
 80207a4:	d101      	bne.n	80207aa <__swsetup_r+0x46>
 80207a6:	68ac      	ldr	r4, [r5, #8]
 80207a8:	e7eb      	b.n	8020782 <__swsetup_r+0x1e>
 80207aa:	4b24      	ldr	r3, [pc, #144]	; (802083c <__swsetup_r+0xd8>)
 80207ac:	429c      	cmp	r4, r3
 80207ae:	bf08      	it	eq
 80207b0:	68ec      	ldreq	r4, [r5, #12]
 80207b2:	e7e6      	b.n	8020782 <__swsetup_r+0x1e>
 80207b4:	0751      	lsls	r1, r2, #29
 80207b6:	d512      	bpl.n	80207de <__swsetup_r+0x7a>
 80207b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80207ba:	b141      	cbz	r1, 80207ce <__swsetup_r+0x6a>
 80207bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80207c0:	4299      	cmp	r1, r3
 80207c2:	d002      	beq.n	80207ca <__swsetup_r+0x66>
 80207c4:	4630      	mov	r0, r6
 80207c6:	f7ff fbb7 	bl	801ff38 <_free_r>
 80207ca:	2300      	movs	r3, #0
 80207cc:	6363      	str	r3, [r4, #52]	; 0x34
 80207ce:	89a3      	ldrh	r3, [r4, #12]
 80207d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80207d4:	81a3      	strh	r3, [r4, #12]
 80207d6:	2300      	movs	r3, #0
 80207d8:	6063      	str	r3, [r4, #4]
 80207da:	6923      	ldr	r3, [r4, #16]
 80207dc:	6023      	str	r3, [r4, #0]
 80207de:	89a3      	ldrh	r3, [r4, #12]
 80207e0:	f043 0308 	orr.w	r3, r3, #8
 80207e4:	81a3      	strh	r3, [r4, #12]
 80207e6:	6923      	ldr	r3, [r4, #16]
 80207e8:	b94b      	cbnz	r3, 80207fe <__swsetup_r+0x9a>
 80207ea:	89a3      	ldrh	r3, [r4, #12]
 80207ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80207f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80207f4:	d003      	beq.n	80207fe <__swsetup_r+0x9a>
 80207f6:	4621      	mov	r1, r4
 80207f8:	4630      	mov	r0, r6
 80207fa:	f000 fa23 	bl	8020c44 <__smakebuf_r>
 80207fe:	89a2      	ldrh	r2, [r4, #12]
 8020800:	f012 0301 	ands.w	r3, r2, #1
 8020804:	d00c      	beq.n	8020820 <__swsetup_r+0xbc>
 8020806:	2300      	movs	r3, #0
 8020808:	60a3      	str	r3, [r4, #8]
 802080a:	6963      	ldr	r3, [r4, #20]
 802080c:	425b      	negs	r3, r3
 802080e:	61a3      	str	r3, [r4, #24]
 8020810:	6923      	ldr	r3, [r4, #16]
 8020812:	b953      	cbnz	r3, 802082a <__swsetup_r+0xc6>
 8020814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020818:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802081c:	d1ba      	bne.n	8020794 <__swsetup_r+0x30>
 802081e:	bd70      	pop	{r4, r5, r6, pc}
 8020820:	0792      	lsls	r2, r2, #30
 8020822:	bf58      	it	pl
 8020824:	6963      	ldrpl	r3, [r4, #20]
 8020826:	60a3      	str	r3, [r4, #8]
 8020828:	e7f2      	b.n	8020810 <__swsetup_r+0xac>
 802082a:	2000      	movs	r0, #0
 802082c:	e7f7      	b.n	802081e <__swsetup_r+0xba>
 802082e:	bf00      	nop
 8020830:	20000050 	.word	0x20000050
 8020834:	08023818 	.word	0x08023818
 8020838:	08023838 	.word	0x08023838
 802083c:	080237f8 	.word	0x080237f8

08020840 <__register_exitproc>:
 8020840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020844:	4d2c      	ldr	r5, [pc, #176]	; (80208f8 <__register_exitproc+0xb8>)
 8020846:	682c      	ldr	r4, [r5, #0]
 8020848:	4607      	mov	r7, r0
 802084a:	460e      	mov	r6, r1
 802084c:	4691      	mov	r9, r2
 802084e:	4698      	mov	r8, r3
 8020850:	b934      	cbnz	r4, 8020860 <__register_exitproc+0x20>
 8020852:	4b2a      	ldr	r3, [pc, #168]	; (80208fc <__register_exitproc+0xbc>)
 8020854:	4c2a      	ldr	r4, [pc, #168]	; (8020900 <__register_exitproc+0xc0>)
 8020856:	602c      	str	r4, [r5, #0]
 8020858:	b113      	cbz	r3, 8020860 <__register_exitproc+0x20>
 802085a:	681b      	ldr	r3, [r3, #0]
 802085c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8020860:	6863      	ldr	r3, [r4, #4]
 8020862:	2b1f      	cmp	r3, #31
 8020864:	dd3d      	ble.n	80208e2 <__register_exitproc+0xa2>
 8020866:	4b27      	ldr	r3, [pc, #156]	; (8020904 <__register_exitproc+0xc4>)
 8020868:	b91b      	cbnz	r3, 8020872 <__register_exitproc+0x32>
 802086a:	f04f 30ff 	mov.w	r0, #4294967295
 802086e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020872:	208c      	movs	r0, #140	; 0x8c
 8020874:	f7ff fb3c 	bl	801fef0 <malloc>
 8020878:	4604      	mov	r4, r0
 802087a:	2800      	cmp	r0, #0
 802087c:	d0f5      	beq.n	802086a <__register_exitproc+0x2a>
 802087e:	2300      	movs	r3, #0
 8020880:	682a      	ldr	r2, [r5, #0]
 8020882:	6002      	str	r2, [r0, #0]
 8020884:	6043      	str	r3, [r0, #4]
 8020886:	6028      	str	r0, [r5, #0]
 8020888:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 802088c:	b30f      	cbz	r7, 80208d2 <__register_exitproc+0x92>
 802088e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8020892:	f7ff fb2d 	bl	801fef0 <malloc>
 8020896:	2800      	cmp	r0, #0
 8020898:	d0e7      	beq.n	802086a <__register_exitproc+0x2a>
 802089a:	2300      	movs	r3, #0
 802089c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80208a0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80208a4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80208a8:	6862      	ldr	r2, [r4, #4]
 80208aa:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80208ae:	2301      	movs	r3, #1
 80208b0:	4093      	lsls	r3, r2
 80208b2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80208b6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80208ba:	431a      	orrs	r2, r3
 80208bc:	2f02      	cmp	r7, #2
 80208be:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80208c2:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80208c6:	bf02      	ittt	eq
 80208c8:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80208cc:	4313      	orreq	r3, r2
 80208ce:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80208d2:	6863      	ldr	r3, [r4, #4]
 80208d4:	1c5a      	adds	r2, r3, #1
 80208d6:	3302      	adds	r3, #2
 80208d8:	6062      	str	r2, [r4, #4]
 80208da:	2000      	movs	r0, #0
 80208dc:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80208e0:	e7c5      	b.n	802086e <__register_exitproc+0x2e>
 80208e2:	2f00      	cmp	r7, #0
 80208e4:	d0f5      	beq.n	80208d2 <__register_exitproc+0x92>
 80208e6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80208ea:	2800      	cmp	r0, #0
 80208ec:	d1dc      	bne.n	80208a8 <__register_exitproc+0x68>
 80208ee:	4b05      	ldr	r3, [pc, #20]	; (8020904 <__register_exitproc+0xc4>)
 80208f0:	2b00      	cmp	r3, #0
 80208f2:	d0ba      	beq.n	802086a <__register_exitproc+0x2a>
 80208f4:	e7cb      	b.n	802088e <__register_exitproc+0x4e>
 80208f6:	bf00      	nop
 80208f8:	20009e04 	.word	0x20009e04
 80208fc:	00000000 	.word	0x00000000
 8020900:	20009d78 	.word	0x20009d78
 8020904:	0801fef1 	.word	0x0801fef1

08020908 <__sflush_r>:
 8020908:	898a      	ldrh	r2, [r1, #12]
 802090a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802090e:	4605      	mov	r5, r0
 8020910:	0710      	lsls	r0, r2, #28
 8020912:	460c      	mov	r4, r1
 8020914:	d458      	bmi.n	80209c8 <__sflush_r+0xc0>
 8020916:	684b      	ldr	r3, [r1, #4]
 8020918:	2b00      	cmp	r3, #0
 802091a:	dc05      	bgt.n	8020928 <__sflush_r+0x20>
 802091c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802091e:	2b00      	cmp	r3, #0
 8020920:	dc02      	bgt.n	8020928 <__sflush_r+0x20>
 8020922:	2000      	movs	r0, #0
 8020924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802092a:	2e00      	cmp	r6, #0
 802092c:	d0f9      	beq.n	8020922 <__sflush_r+0x1a>
 802092e:	2300      	movs	r3, #0
 8020930:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020934:	682f      	ldr	r7, [r5, #0]
 8020936:	6a21      	ldr	r1, [r4, #32]
 8020938:	602b      	str	r3, [r5, #0]
 802093a:	d032      	beq.n	80209a2 <__sflush_r+0x9a>
 802093c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802093e:	89a3      	ldrh	r3, [r4, #12]
 8020940:	075a      	lsls	r2, r3, #29
 8020942:	d505      	bpl.n	8020950 <__sflush_r+0x48>
 8020944:	6863      	ldr	r3, [r4, #4]
 8020946:	1ac0      	subs	r0, r0, r3
 8020948:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802094a:	b10b      	cbz	r3, 8020950 <__sflush_r+0x48>
 802094c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802094e:	1ac0      	subs	r0, r0, r3
 8020950:	2300      	movs	r3, #0
 8020952:	4602      	mov	r2, r0
 8020954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020956:	6a21      	ldr	r1, [r4, #32]
 8020958:	4628      	mov	r0, r5
 802095a:	47b0      	blx	r6
 802095c:	1c43      	adds	r3, r0, #1
 802095e:	89a3      	ldrh	r3, [r4, #12]
 8020960:	d106      	bne.n	8020970 <__sflush_r+0x68>
 8020962:	6829      	ldr	r1, [r5, #0]
 8020964:	291d      	cmp	r1, #29
 8020966:	d848      	bhi.n	80209fa <__sflush_r+0xf2>
 8020968:	4a29      	ldr	r2, [pc, #164]	; (8020a10 <__sflush_r+0x108>)
 802096a:	40ca      	lsrs	r2, r1
 802096c:	07d6      	lsls	r6, r2, #31
 802096e:	d544      	bpl.n	80209fa <__sflush_r+0xf2>
 8020970:	2200      	movs	r2, #0
 8020972:	6062      	str	r2, [r4, #4]
 8020974:	04d9      	lsls	r1, r3, #19
 8020976:	6922      	ldr	r2, [r4, #16]
 8020978:	6022      	str	r2, [r4, #0]
 802097a:	d504      	bpl.n	8020986 <__sflush_r+0x7e>
 802097c:	1c42      	adds	r2, r0, #1
 802097e:	d101      	bne.n	8020984 <__sflush_r+0x7c>
 8020980:	682b      	ldr	r3, [r5, #0]
 8020982:	b903      	cbnz	r3, 8020986 <__sflush_r+0x7e>
 8020984:	6560      	str	r0, [r4, #84]	; 0x54
 8020986:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020988:	602f      	str	r7, [r5, #0]
 802098a:	2900      	cmp	r1, #0
 802098c:	d0c9      	beq.n	8020922 <__sflush_r+0x1a>
 802098e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020992:	4299      	cmp	r1, r3
 8020994:	d002      	beq.n	802099c <__sflush_r+0x94>
 8020996:	4628      	mov	r0, r5
 8020998:	f7ff face 	bl	801ff38 <_free_r>
 802099c:	2000      	movs	r0, #0
 802099e:	6360      	str	r0, [r4, #52]	; 0x34
 80209a0:	e7c0      	b.n	8020924 <__sflush_r+0x1c>
 80209a2:	2301      	movs	r3, #1
 80209a4:	4628      	mov	r0, r5
 80209a6:	47b0      	blx	r6
 80209a8:	1c41      	adds	r1, r0, #1
 80209aa:	d1c8      	bne.n	802093e <__sflush_r+0x36>
 80209ac:	682b      	ldr	r3, [r5, #0]
 80209ae:	2b00      	cmp	r3, #0
 80209b0:	d0c5      	beq.n	802093e <__sflush_r+0x36>
 80209b2:	2b1d      	cmp	r3, #29
 80209b4:	d001      	beq.n	80209ba <__sflush_r+0xb2>
 80209b6:	2b16      	cmp	r3, #22
 80209b8:	d101      	bne.n	80209be <__sflush_r+0xb6>
 80209ba:	602f      	str	r7, [r5, #0]
 80209bc:	e7b1      	b.n	8020922 <__sflush_r+0x1a>
 80209be:	89a3      	ldrh	r3, [r4, #12]
 80209c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80209c4:	81a3      	strh	r3, [r4, #12]
 80209c6:	e7ad      	b.n	8020924 <__sflush_r+0x1c>
 80209c8:	690f      	ldr	r7, [r1, #16]
 80209ca:	2f00      	cmp	r7, #0
 80209cc:	d0a9      	beq.n	8020922 <__sflush_r+0x1a>
 80209ce:	0793      	lsls	r3, r2, #30
 80209d0:	680e      	ldr	r6, [r1, #0]
 80209d2:	bf08      	it	eq
 80209d4:	694b      	ldreq	r3, [r1, #20]
 80209d6:	600f      	str	r7, [r1, #0]
 80209d8:	bf18      	it	ne
 80209da:	2300      	movne	r3, #0
 80209dc:	eba6 0807 	sub.w	r8, r6, r7
 80209e0:	608b      	str	r3, [r1, #8]
 80209e2:	f1b8 0f00 	cmp.w	r8, #0
 80209e6:	dd9c      	ble.n	8020922 <__sflush_r+0x1a>
 80209e8:	4643      	mov	r3, r8
 80209ea:	463a      	mov	r2, r7
 80209ec:	6a21      	ldr	r1, [r4, #32]
 80209ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80209f0:	4628      	mov	r0, r5
 80209f2:	47b0      	blx	r6
 80209f4:	2800      	cmp	r0, #0
 80209f6:	dc06      	bgt.n	8020a06 <__sflush_r+0xfe>
 80209f8:	89a3      	ldrh	r3, [r4, #12]
 80209fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80209fe:	81a3      	strh	r3, [r4, #12]
 8020a00:	f04f 30ff 	mov.w	r0, #4294967295
 8020a04:	e78e      	b.n	8020924 <__sflush_r+0x1c>
 8020a06:	4407      	add	r7, r0
 8020a08:	eba8 0800 	sub.w	r8, r8, r0
 8020a0c:	e7e9      	b.n	80209e2 <__sflush_r+0xda>
 8020a0e:	bf00      	nop
 8020a10:	20400001 	.word	0x20400001

08020a14 <_fflush_r>:
 8020a14:	b538      	push	{r3, r4, r5, lr}
 8020a16:	690b      	ldr	r3, [r1, #16]
 8020a18:	4605      	mov	r5, r0
 8020a1a:	460c      	mov	r4, r1
 8020a1c:	b1db      	cbz	r3, 8020a56 <_fflush_r+0x42>
 8020a1e:	b118      	cbz	r0, 8020a28 <_fflush_r+0x14>
 8020a20:	6983      	ldr	r3, [r0, #24]
 8020a22:	b90b      	cbnz	r3, 8020a28 <_fflush_r+0x14>
 8020a24:	f000 f860 	bl	8020ae8 <__sinit>
 8020a28:	4b0c      	ldr	r3, [pc, #48]	; (8020a5c <_fflush_r+0x48>)
 8020a2a:	429c      	cmp	r4, r3
 8020a2c:	d109      	bne.n	8020a42 <_fflush_r+0x2e>
 8020a2e:	686c      	ldr	r4, [r5, #4]
 8020a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020a34:	b17b      	cbz	r3, 8020a56 <_fflush_r+0x42>
 8020a36:	4621      	mov	r1, r4
 8020a38:	4628      	mov	r0, r5
 8020a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020a3e:	f7ff bf63 	b.w	8020908 <__sflush_r>
 8020a42:	4b07      	ldr	r3, [pc, #28]	; (8020a60 <_fflush_r+0x4c>)
 8020a44:	429c      	cmp	r4, r3
 8020a46:	d101      	bne.n	8020a4c <_fflush_r+0x38>
 8020a48:	68ac      	ldr	r4, [r5, #8]
 8020a4a:	e7f1      	b.n	8020a30 <_fflush_r+0x1c>
 8020a4c:	4b05      	ldr	r3, [pc, #20]	; (8020a64 <_fflush_r+0x50>)
 8020a4e:	429c      	cmp	r4, r3
 8020a50:	bf08      	it	eq
 8020a52:	68ec      	ldreq	r4, [r5, #12]
 8020a54:	e7ec      	b.n	8020a30 <_fflush_r+0x1c>
 8020a56:	2000      	movs	r0, #0
 8020a58:	bd38      	pop	{r3, r4, r5, pc}
 8020a5a:	bf00      	nop
 8020a5c:	08023818 	.word	0x08023818
 8020a60:	08023838 	.word	0x08023838
 8020a64:	080237f8 	.word	0x080237f8

08020a68 <std>:
 8020a68:	2300      	movs	r3, #0
 8020a6a:	b510      	push	{r4, lr}
 8020a6c:	4604      	mov	r4, r0
 8020a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8020a72:	6083      	str	r3, [r0, #8]
 8020a74:	8181      	strh	r1, [r0, #12]
 8020a76:	6643      	str	r3, [r0, #100]	; 0x64
 8020a78:	81c2      	strh	r2, [r0, #14]
 8020a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020a7e:	6183      	str	r3, [r0, #24]
 8020a80:	4619      	mov	r1, r3
 8020a82:	2208      	movs	r2, #8
 8020a84:	305c      	adds	r0, #92	; 0x5c
 8020a86:	f7ff fa4e 	bl	801ff26 <memset>
 8020a8a:	4b05      	ldr	r3, [pc, #20]	; (8020aa0 <std+0x38>)
 8020a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8020a8e:	4b05      	ldr	r3, [pc, #20]	; (8020aa4 <std+0x3c>)
 8020a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8020a92:	4b05      	ldr	r3, [pc, #20]	; (8020aa8 <std+0x40>)
 8020a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020a96:	4b05      	ldr	r3, [pc, #20]	; (8020aac <std+0x44>)
 8020a98:	6224      	str	r4, [r4, #32]
 8020a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8020a9c:	bd10      	pop	{r4, pc}
 8020a9e:	bf00      	nop
 8020aa0:	08020cc9 	.word	0x08020cc9
 8020aa4:	08020ceb 	.word	0x08020ceb
 8020aa8:	08020d23 	.word	0x08020d23
 8020aac:	08020d47 	.word	0x08020d47

08020ab0 <_cleanup_r>:
 8020ab0:	4901      	ldr	r1, [pc, #4]	; (8020ab8 <_cleanup_r+0x8>)
 8020ab2:	f000 b885 	b.w	8020bc0 <_fwalk_reent>
 8020ab6:	bf00      	nop
 8020ab8:	08020a15 	.word	0x08020a15

08020abc <__sfmoreglue>:
 8020abc:	b570      	push	{r4, r5, r6, lr}
 8020abe:	1e4a      	subs	r2, r1, #1
 8020ac0:	2568      	movs	r5, #104	; 0x68
 8020ac2:	4355      	muls	r5, r2
 8020ac4:	460e      	mov	r6, r1
 8020ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020aca:	f7ff fa83 	bl	801ffd4 <_malloc_r>
 8020ace:	4604      	mov	r4, r0
 8020ad0:	b140      	cbz	r0, 8020ae4 <__sfmoreglue+0x28>
 8020ad2:	2100      	movs	r1, #0
 8020ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8020ad8:	300c      	adds	r0, #12
 8020ada:	60a0      	str	r0, [r4, #8]
 8020adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020ae0:	f7ff fa21 	bl	801ff26 <memset>
 8020ae4:	4620      	mov	r0, r4
 8020ae6:	bd70      	pop	{r4, r5, r6, pc}

08020ae8 <__sinit>:
 8020ae8:	6983      	ldr	r3, [r0, #24]
 8020aea:	b510      	push	{r4, lr}
 8020aec:	4604      	mov	r4, r0
 8020aee:	bb33      	cbnz	r3, 8020b3e <__sinit+0x56>
 8020af0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8020af4:	6503      	str	r3, [r0, #80]	; 0x50
 8020af6:	4b12      	ldr	r3, [pc, #72]	; (8020b40 <__sinit+0x58>)
 8020af8:	4a12      	ldr	r2, [pc, #72]	; (8020b44 <__sinit+0x5c>)
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	6282      	str	r2, [r0, #40]	; 0x28
 8020afe:	4298      	cmp	r0, r3
 8020b00:	bf04      	itt	eq
 8020b02:	2301      	moveq	r3, #1
 8020b04:	6183      	streq	r3, [r0, #24]
 8020b06:	f000 f81f 	bl	8020b48 <__sfp>
 8020b0a:	6060      	str	r0, [r4, #4]
 8020b0c:	4620      	mov	r0, r4
 8020b0e:	f000 f81b 	bl	8020b48 <__sfp>
 8020b12:	60a0      	str	r0, [r4, #8]
 8020b14:	4620      	mov	r0, r4
 8020b16:	f000 f817 	bl	8020b48 <__sfp>
 8020b1a:	2200      	movs	r2, #0
 8020b1c:	60e0      	str	r0, [r4, #12]
 8020b1e:	2104      	movs	r1, #4
 8020b20:	6860      	ldr	r0, [r4, #4]
 8020b22:	f7ff ffa1 	bl	8020a68 <std>
 8020b26:	2201      	movs	r2, #1
 8020b28:	2109      	movs	r1, #9
 8020b2a:	68a0      	ldr	r0, [r4, #8]
 8020b2c:	f7ff ff9c 	bl	8020a68 <std>
 8020b30:	2202      	movs	r2, #2
 8020b32:	2112      	movs	r1, #18
 8020b34:	68e0      	ldr	r0, [r4, #12]
 8020b36:	f7ff ff97 	bl	8020a68 <std>
 8020b3a:	2301      	movs	r3, #1
 8020b3c:	61a3      	str	r3, [r4, #24]
 8020b3e:	bd10      	pop	{r4, pc}
 8020b40:	080237c0 	.word	0x080237c0
 8020b44:	08020ab1 	.word	0x08020ab1

08020b48 <__sfp>:
 8020b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b4a:	4b1b      	ldr	r3, [pc, #108]	; (8020bb8 <__sfp+0x70>)
 8020b4c:	681e      	ldr	r6, [r3, #0]
 8020b4e:	69b3      	ldr	r3, [r6, #24]
 8020b50:	4607      	mov	r7, r0
 8020b52:	b913      	cbnz	r3, 8020b5a <__sfp+0x12>
 8020b54:	4630      	mov	r0, r6
 8020b56:	f7ff ffc7 	bl	8020ae8 <__sinit>
 8020b5a:	3648      	adds	r6, #72	; 0x48
 8020b5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020b60:	3b01      	subs	r3, #1
 8020b62:	d503      	bpl.n	8020b6c <__sfp+0x24>
 8020b64:	6833      	ldr	r3, [r6, #0]
 8020b66:	b133      	cbz	r3, 8020b76 <__sfp+0x2e>
 8020b68:	6836      	ldr	r6, [r6, #0]
 8020b6a:	e7f7      	b.n	8020b5c <__sfp+0x14>
 8020b6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020b70:	b16d      	cbz	r5, 8020b8e <__sfp+0x46>
 8020b72:	3468      	adds	r4, #104	; 0x68
 8020b74:	e7f4      	b.n	8020b60 <__sfp+0x18>
 8020b76:	2104      	movs	r1, #4
 8020b78:	4638      	mov	r0, r7
 8020b7a:	f7ff ff9f 	bl	8020abc <__sfmoreglue>
 8020b7e:	6030      	str	r0, [r6, #0]
 8020b80:	2800      	cmp	r0, #0
 8020b82:	d1f1      	bne.n	8020b68 <__sfp+0x20>
 8020b84:	230c      	movs	r3, #12
 8020b86:	603b      	str	r3, [r7, #0]
 8020b88:	4604      	mov	r4, r0
 8020b8a:	4620      	mov	r0, r4
 8020b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b8e:	4b0b      	ldr	r3, [pc, #44]	; (8020bbc <__sfp+0x74>)
 8020b90:	6665      	str	r5, [r4, #100]	; 0x64
 8020b92:	e9c4 5500 	strd	r5, r5, [r4]
 8020b96:	60a5      	str	r5, [r4, #8]
 8020b98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8020b9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8020ba0:	2208      	movs	r2, #8
 8020ba2:	4629      	mov	r1, r5
 8020ba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020ba8:	f7ff f9bd 	bl	801ff26 <memset>
 8020bac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020bb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020bb4:	e7e9      	b.n	8020b8a <__sfp+0x42>
 8020bb6:	bf00      	nop
 8020bb8:	080237c0 	.word	0x080237c0
 8020bbc:	ffff0001 	.word	0xffff0001

08020bc0 <_fwalk_reent>:
 8020bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020bc4:	4680      	mov	r8, r0
 8020bc6:	4689      	mov	r9, r1
 8020bc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020bcc:	2600      	movs	r6, #0
 8020bce:	b914      	cbnz	r4, 8020bd6 <_fwalk_reent+0x16>
 8020bd0:	4630      	mov	r0, r6
 8020bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020bd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8020bda:	3f01      	subs	r7, #1
 8020bdc:	d501      	bpl.n	8020be2 <_fwalk_reent+0x22>
 8020bde:	6824      	ldr	r4, [r4, #0]
 8020be0:	e7f5      	b.n	8020bce <_fwalk_reent+0xe>
 8020be2:	89ab      	ldrh	r3, [r5, #12]
 8020be4:	2b01      	cmp	r3, #1
 8020be6:	d907      	bls.n	8020bf8 <_fwalk_reent+0x38>
 8020be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020bec:	3301      	adds	r3, #1
 8020bee:	d003      	beq.n	8020bf8 <_fwalk_reent+0x38>
 8020bf0:	4629      	mov	r1, r5
 8020bf2:	4640      	mov	r0, r8
 8020bf4:	47c8      	blx	r9
 8020bf6:	4306      	orrs	r6, r0
 8020bf8:	3568      	adds	r5, #104	; 0x68
 8020bfa:	e7ee      	b.n	8020bda <_fwalk_reent+0x1a>

08020bfc <__swhatbuf_r>:
 8020bfc:	b570      	push	{r4, r5, r6, lr}
 8020bfe:	460e      	mov	r6, r1
 8020c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020c04:	2900      	cmp	r1, #0
 8020c06:	b096      	sub	sp, #88	; 0x58
 8020c08:	4614      	mov	r4, r2
 8020c0a:	461d      	mov	r5, r3
 8020c0c:	da07      	bge.n	8020c1e <__swhatbuf_r+0x22>
 8020c0e:	2300      	movs	r3, #0
 8020c10:	602b      	str	r3, [r5, #0]
 8020c12:	89b3      	ldrh	r3, [r6, #12]
 8020c14:	061a      	lsls	r2, r3, #24
 8020c16:	d410      	bmi.n	8020c3a <__swhatbuf_r+0x3e>
 8020c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020c1c:	e00e      	b.n	8020c3c <__swhatbuf_r+0x40>
 8020c1e:	466a      	mov	r2, sp
 8020c20:	f000 f8b8 	bl	8020d94 <_fstat_r>
 8020c24:	2800      	cmp	r0, #0
 8020c26:	dbf2      	blt.n	8020c0e <__swhatbuf_r+0x12>
 8020c28:	9a01      	ldr	r2, [sp, #4]
 8020c2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020c2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020c32:	425a      	negs	r2, r3
 8020c34:	415a      	adcs	r2, r3
 8020c36:	602a      	str	r2, [r5, #0]
 8020c38:	e7ee      	b.n	8020c18 <__swhatbuf_r+0x1c>
 8020c3a:	2340      	movs	r3, #64	; 0x40
 8020c3c:	2000      	movs	r0, #0
 8020c3e:	6023      	str	r3, [r4, #0]
 8020c40:	b016      	add	sp, #88	; 0x58
 8020c42:	bd70      	pop	{r4, r5, r6, pc}

08020c44 <__smakebuf_r>:
 8020c44:	898b      	ldrh	r3, [r1, #12]
 8020c46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020c48:	079d      	lsls	r5, r3, #30
 8020c4a:	4606      	mov	r6, r0
 8020c4c:	460c      	mov	r4, r1
 8020c4e:	d507      	bpl.n	8020c60 <__smakebuf_r+0x1c>
 8020c50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020c54:	6023      	str	r3, [r4, #0]
 8020c56:	6123      	str	r3, [r4, #16]
 8020c58:	2301      	movs	r3, #1
 8020c5a:	6163      	str	r3, [r4, #20]
 8020c5c:	b002      	add	sp, #8
 8020c5e:	bd70      	pop	{r4, r5, r6, pc}
 8020c60:	ab01      	add	r3, sp, #4
 8020c62:	466a      	mov	r2, sp
 8020c64:	f7ff ffca 	bl	8020bfc <__swhatbuf_r>
 8020c68:	9900      	ldr	r1, [sp, #0]
 8020c6a:	4605      	mov	r5, r0
 8020c6c:	4630      	mov	r0, r6
 8020c6e:	f7ff f9b1 	bl	801ffd4 <_malloc_r>
 8020c72:	b948      	cbnz	r0, 8020c88 <__smakebuf_r+0x44>
 8020c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c78:	059a      	lsls	r2, r3, #22
 8020c7a:	d4ef      	bmi.n	8020c5c <__smakebuf_r+0x18>
 8020c7c:	f023 0303 	bic.w	r3, r3, #3
 8020c80:	f043 0302 	orr.w	r3, r3, #2
 8020c84:	81a3      	strh	r3, [r4, #12]
 8020c86:	e7e3      	b.n	8020c50 <__smakebuf_r+0xc>
 8020c88:	4b0d      	ldr	r3, [pc, #52]	; (8020cc0 <__smakebuf_r+0x7c>)
 8020c8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8020c8c:	89a3      	ldrh	r3, [r4, #12]
 8020c8e:	6020      	str	r0, [r4, #0]
 8020c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c94:	81a3      	strh	r3, [r4, #12]
 8020c96:	9b00      	ldr	r3, [sp, #0]
 8020c98:	6163      	str	r3, [r4, #20]
 8020c9a:	9b01      	ldr	r3, [sp, #4]
 8020c9c:	6120      	str	r0, [r4, #16]
 8020c9e:	b15b      	cbz	r3, 8020cb8 <__smakebuf_r+0x74>
 8020ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020ca4:	4630      	mov	r0, r6
 8020ca6:	f000 f887 	bl	8020db8 <_isatty_r>
 8020caa:	b128      	cbz	r0, 8020cb8 <__smakebuf_r+0x74>
 8020cac:	89a3      	ldrh	r3, [r4, #12]
 8020cae:	f023 0303 	bic.w	r3, r3, #3
 8020cb2:	f043 0301 	orr.w	r3, r3, #1
 8020cb6:	81a3      	strh	r3, [r4, #12]
 8020cb8:	89a3      	ldrh	r3, [r4, #12]
 8020cba:	431d      	orrs	r5, r3
 8020cbc:	81a5      	strh	r5, [r4, #12]
 8020cbe:	e7cd      	b.n	8020c5c <__smakebuf_r+0x18>
 8020cc0:	08020ab1 	.word	0x08020ab1

08020cc4 <__malloc_lock>:
 8020cc4:	4770      	bx	lr

08020cc6 <__malloc_unlock>:
 8020cc6:	4770      	bx	lr

08020cc8 <__sread>:
 8020cc8:	b510      	push	{r4, lr}
 8020cca:	460c      	mov	r4, r1
 8020ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020cd0:	f000 f894 	bl	8020dfc <_read_r>
 8020cd4:	2800      	cmp	r0, #0
 8020cd6:	bfab      	itete	ge
 8020cd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020cda:	89a3      	ldrhlt	r3, [r4, #12]
 8020cdc:	181b      	addge	r3, r3, r0
 8020cde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020ce2:	bfac      	ite	ge
 8020ce4:	6563      	strge	r3, [r4, #84]	; 0x54
 8020ce6:	81a3      	strhlt	r3, [r4, #12]
 8020ce8:	bd10      	pop	{r4, pc}

08020cea <__swrite>:
 8020cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020cee:	461f      	mov	r7, r3
 8020cf0:	898b      	ldrh	r3, [r1, #12]
 8020cf2:	05db      	lsls	r3, r3, #23
 8020cf4:	4605      	mov	r5, r0
 8020cf6:	460c      	mov	r4, r1
 8020cf8:	4616      	mov	r6, r2
 8020cfa:	d505      	bpl.n	8020d08 <__swrite+0x1e>
 8020cfc:	2302      	movs	r3, #2
 8020cfe:	2200      	movs	r2, #0
 8020d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d04:	f000 f868 	bl	8020dd8 <_lseek_r>
 8020d08:	89a3      	ldrh	r3, [r4, #12]
 8020d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020d12:	81a3      	strh	r3, [r4, #12]
 8020d14:	4632      	mov	r2, r6
 8020d16:	463b      	mov	r3, r7
 8020d18:	4628      	mov	r0, r5
 8020d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020d1e:	f000 b817 	b.w	8020d50 <_write_r>

08020d22 <__sseek>:
 8020d22:	b510      	push	{r4, lr}
 8020d24:	460c      	mov	r4, r1
 8020d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d2a:	f000 f855 	bl	8020dd8 <_lseek_r>
 8020d2e:	1c43      	adds	r3, r0, #1
 8020d30:	89a3      	ldrh	r3, [r4, #12]
 8020d32:	bf15      	itete	ne
 8020d34:	6560      	strne	r0, [r4, #84]	; 0x54
 8020d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020d3e:	81a3      	strheq	r3, [r4, #12]
 8020d40:	bf18      	it	ne
 8020d42:	81a3      	strhne	r3, [r4, #12]
 8020d44:	bd10      	pop	{r4, pc}

08020d46 <__sclose>:
 8020d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d4a:	f000 b813 	b.w	8020d74 <_close_r>
	...

08020d50 <_write_r>:
 8020d50:	b538      	push	{r3, r4, r5, lr}
 8020d52:	4c07      	ldr	r4, [pc, #28]	; (8020d70 <_write_r+0x20>)
 8020d54:	4605      	mov	r5, r0
 8020d56:	4608      	mov	r0, r1
 8020d58:	4611      	mov	r1, r2
 8020d5a:	2200      	movs	r2, #0
 8020d5c:	6022      	str	r2, [r4, #0]
 8020d5e:	461a      	mov	r2, r3
 8020d60:	f7f7 fd97 	bl	8018892 <_write>
 8020d64:	1c43      	adds	r3, r0, #1
 8020d66:	d102      	bne.n	8020d6e <_write_r+0x1e>
 8020d68:	6823      	ldr	r3, [r4, #0]
 8020d6a:	b103      	cbz	r3, 8020d6e <_write_r+0x1e>
 8020d6c:	602b      	str	r3, [r5, #0]
 8020d6e:	bd38      	pop	{r3, r4, r5, pc}
 8020d70:	2000a954 	.word	0x2000a954

08020d74 <_close_r>:
 8020d74:	b538      	push	{r3, r4, r5, lr}
 8020d76:	4c06      	ldr	r4, [pc, #24]	; (8020d90 <_close_r+0x1c>)
 8020d78:	2300      	movs	r3, #0
 8020d7a:	4605      	mov	r5, r0
 8020d7c:	4608      	mov	r0, r1
 8020d7e:	6023      	str	r3, [r4, #0]
 8020d80:	f7f7 fda3 	bl	80188ca <_close>
 8020d84:	1c43      	adds	r3, r0, #1
 8020d86:	d102      	bne.n	8020d8e <_close_r+0x1a>
 8020d88:	6823      	ldr	r3, [r4, #0]
 8020d8a:	b103      	cbz	r3, 8020d8e <_close_r+0x1a>
 8020d8c:	602b      	str	r3, [r5, #0]
 8020d8e:	bd38      	pop	{r3, r4, r5, pc}
 8020d90:	2000a954 	.word	0x2000a954

08020d94 <_fstat_r>:
 8020d94:	b538      	push	{r3, r4, r5, lr}
 8020d96:	4c07      	ldr	r4, [pc, #28]	; (8020db4 <_fstat_r+0x20>)
 8020d98:	2300      	movs	r3, #0
 8020d9a:	4605      	mov	r5, r0
 8020d9c:	4608      	mov	r0, r1
 8020d9e:	4611      	mov	r1, r2
 8020da0:	6023      	str	r3, [r4, #0]
 8020da2:	f7f7 fd9e 	bl	80188e2 <_fstat>
 8020da6:	1c43      	adds	r3, r0, #1
 8020da8:	d102      	bne.n	8020db0 <_fstat_r+0x1c>
 8020daa:	6823      	ldr	r3, [r4, #0]
 8020dac:	b103      	cbz	r3, 8020db0 <_fstat_r+0x1c>
 8020dae:	602b      	str	r3, [r5, #0]
 8020db0:	bd38      	pop	{r3, r4, r5, pc}
 8020db2:	bf00      	nop
 8020db4:	2000a954 	.word	0x2000a954

08020db8 <_isatty_r>:
 8020db8:	b538      	push	{r3, r4, r5, lr}
 8020dba:	4c06      	ldr	r4, [pc, #24]	; (8020dd4 <_isatty_r+0x1c>)
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	4605      	mov	r5, r0
 8020dc0:	4608      	mov	r0, r1
 8020dc2:	6023      	str	r3, [r4, #0]
 8020dc4:	f7f7 fd9d 	bl	8018902 <_isatty>
 8020dc8:	1c43      	adds	r3, r0, #1
 8020dca:	d102      	bne.n	8020dd2 <_isatty_r+0x1a>
 8020dcc:	6823      	ldr	r3, [r4, #0]
 8020dce:	b103      	cbz	r3, 8020dd2 <_isatty_r+0x1a>
 8020dd0:	602b      	str	r3, [r5, #0]
 8020dd2:	bd38      	pop	{r3, r4, r5, pc}
 8020dd4:	2000a954 	.word	0x2000a954

08020dd8 <_lseek_r>:
 8020dd8:	b538      	push	{r3, r4, r5, lr}
 8020dda:	4c07      	ldr	r4, [pc, #28]	; (8020df8 <_lseek_r+0x20>)
 8020ddc:	4605      	mov	r5, r0
 8020dde:	4608      	mov	r0, r1
 8020de0:	4611      	mov	r1, r2
 8020de2:	2200      	movs	r2, #0
 8020de4:	6022      	str	r2, [r4, #0]
 8020de6:	461a      	mov	r2, r3
 8020de8:	f7f7 fd96 	bl	8018918 <_lseek>
 8020dec:	1c43      	adds	r3, r0, #1
 8020dee:	d102      	bne.n	8020df6 <_lseek_r+0x1e>
 8020df0:	6823      	ldr	r3, [r4, #0]
 8020df2:	b103      	cbz	r3, 8020df6 <_lseek_r+0x1e>
 8020df4:	602b      	str	r3, [r5, #0]
 8020df6:	bd38      	pop	{r3, r4, r5, pc}
 8020df8:	2000a954 	.word	0x2000a954

08020dfc <_read_r>:
 8020dfc:	b538      	push	{r3, r4, r5, lr}
 8020dfe:	4c07      	ldr	r4, [pc, #28]	; (8020e1c <_read_r+0x20>)
 8020e00:	4605      	mov	r5, r0
 8020e02:	4608      	mov	r0, r1
 8020e04:	4611      	mov	r1, r2
 8020e06:	2200      	movs	r2, #0
 8020e08:	6022      	str	r2, [r4, #0]
 8020e0a:	461a      	mov	r2, r3
 8020e0c:	f7f7 fd24 	bl	8018858 <_read>
 8020e10:	1c43      	adds	r3, r0, #1
 8020e12:	d102      	bne.n	8020e1a <_read_r+0x1e>
 8020e14:	6823      	ldr	r3, [r4, #0]
 8020e16:	b103      	cbz	r3, 8020e1a <_read_r+0x1e>
 8020e18:	602b      	str	r3, [r5, #0]
 8020e1a:	bd38      	pop	{r3, r4, r5, pc}
 8020e1c:	2000a954 	.word	0x2000a954

08020e20 <_init>:
 8020e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e22:	bf00      	nop
 8020e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e26:	bc08      	pop	{r3}
 8020e28:	469e      	mov	lr, r3
 8020e2a:	4770      	bx	lr

08020e2c <_fini>:
 8020e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e2e:	bf00      	nop
 8020e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e32:	bc08      	pop	{r3}
 8020e34:	469e      	mov	lr, r3
 8020e36:	4770      	bx	lr
